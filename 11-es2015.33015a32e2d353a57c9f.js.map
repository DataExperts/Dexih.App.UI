{"version":3,"sources":["src/app/+hub/files/files-bulk-load/files-bulk-load.component.html","src/app/+hub/files/files-bulk-load/files-bulk-load.component.ts","src/app/+hub/dashboard/dashboard-edit/dashboard-edit.component.ts","src/app/+hub/dashboard/dashboard-edit/dashboard-edit.component.html","src/app/+hub/view/view-edit/view-edit.component.ts","src/app/+hub/view/view-edit/view-edit.component.html","src/app/+hub/fileFormat/fileFormat-index/fileFormat-index.component.html","src/app/+hub/fileFormat/fileFormat-index/fileFormat-index.component.ts","src/app/+hub/fileFormat/fileFormat-edit/fileFormat-edit.component.html","src/app/+hub/fileFormat/fileFormat-edit/fileFormat-edit.component.ts","src/app/+hub/dashboard/dashboard-edit/item/dashboard-item.component.ts","src/app/+hub/dashboard/dashboard-edit/item/dashboard-item.component.html","src/app/+hub/hub.forms.service.ts","src/app/+hub/columnValidation/columnValidation-index/columnValidation-index.component.html","src/app/+hub/columnValidation/columnValidation-index/columnValidation-index.component.ts","src/app/+hub/columnValidation/columnValidation-edit/columnValidation-edit.component.html","src/app/+hub/columnValidation/columnValidation-edit/columnValidation-edit.component.ts","src/app/+hub/connection/connection-edit/connection-edit.component.html","src/app/+hub/connection/connection-edit/connection-edit.component.ts","src/app/+hub/connection/connection-import/connection-import.component.html","src/app/+hub/connection/connection-import/connection-import.component.ts","src/app/+hub/connection/connection-index/connection-index.component.html","src/app/+hub/connection/connection-index/connection-index.component.ts","src/app/+hub/copy/import/import.component.html","src/app/+hub/copy/import/import.component.ts","src/app/+hub/copy/export/export.component.html","src/app/+hub/copy/export/export.component.ts","src/app/+hub/datajob/datajob-index/datajob-index.component.html","src/app/+hub/datajob/datajob-index/datajob-index.component.ts","src/app/+hub/datalink/datalink-index/datalink-index.component.html","src/app/+hub/datalink/datalink-index/datalink-index.component.ts","src/app/+hub/datalink/datalink-new/datalink-new.component.html","src/app/+hub/datalink/datalink-new/datalink-new.component.ts","src/app/+hub/datalink/datalink-preview-data/datalink-preview-data.component.ts","src/app/+hub/datalink/datalink-preview-data/datalink-preview-data.component.html","src/app/+hub/files/files-manage/files-manage.component.html","src/app/+hub/files/files-manage/files-manage.component.ts","src/app/+hub/hubVariable/hubVariable-index/hubVariable-index.component.html","src/app/+hub/hubVariable/hubVariable-index/hubVariable-index.component.ts","src/app/+hub/hubVariable/hubVariable-edit/hubVariable-edit.component.html","src/app/+hub/hubVariable/hubVariable-edit/hubVariable-edit.component.ts","src/app/+hub/manage/manage-users-index/manage-users-index.component.html","src/app/+hub/manage/manage-users-index/manage-users-index.component.ts","src/app/+hub/remoteAgent/remoteAgent-index/remoteAgent-index.component.html","src/app/+hub/remoteAgent/remoteAgent-index/remoteAgent-index.component.ts","src/app/+hub/remoteAgent/remoteAgent-edit/remoteAgent-edit.component.html","src/app/+hub/remoteAgent/remoteAgent-edit/remoteAgent-edit.component.ts","src/app/+hub/sharedData/sharedData-index.component.html","src/app/+hub/sharedData/sharedData-index.component.ts","src/app/+hub/table/table-index/table-index.component.html","src/app/+hub/table/table-index/table-index.component.ts","src/app/+hub/table/table-preview-data/table-preview-data.component.ts","src/app/+hub/table/table-preview-data/table-preview-data.component.html","src/app/+hub/customFunction/customFunction-index/customFunction-index.component.html","src/app/+hub/customFunction/customFunction-index/customFunction-index.component.ts","src/app/+hub/customFunction/customFunction-edit/customFunction-parameter.component.ts","src/app/+hub/customFunction/customFunction-edit/customFunction-parameter.component.html","src/app/+hub/customFunction/customFunction-edit/customFunction-edit.component.html","src/app/+hub/customFunction/customFunction-edit/customFunction-edit.component.ts","src/app/+hub/test/datalinkTest-index/datalinkTest-index.component.html","src/app/+hub/test/datalinkTest-index/datalinkTest-index.component.ts","src/app/+hub/test/datalinkTest-new/datalinkTest-new.component.html","src/app/+hub/test/datalinkTest-new/datalinkTest-new.component.ts","src/app/+hub/api/api-edit/api-edit.component.html","src/app/+hub/api/api-edit/api-edit.component.ts","src/app/+hub/api/api-index/api-index.component.html","src/app/+hub/api/api-index/api-index.component.ts","src/app/+hub/datalink/datalink-run/datalink-run.component.html","src/app/+hub/datalink/datalink-run/datalink-run.component.ts","src/app/+hub/search/object-type.pipe.ts","src/app/+hub/search/search.component.html","src/app/+hub/search/search.component.ts","src/app/+hub/search/search.module.ts","src/app/+hub/dashboard/dashboard-index/dashboard-index.component.html","src/app/+hub/dashboard/dashboard-index/dashboard-index.component.ts","src/app/+hub/datajob/datajob-run/datajob-run.component.html","src/app/+hub/datajob/datajob-run/datajob-run.component.ts","src/app/+hub/listOfValues/listOfValues-edit/listOfValues-edit.component.html","src/app/+hub/listOfValues/listOfValues-edit/listOfValues-edit.component.ts","src/app/+hub/listOfValues/listOfValues-index/listOfValues-index.component.html","src/app/+hub/listOfValues/listOfValues-index/listOfValues-index.component.ts","src/app/+hub/tags/tags.component.html","src/app/+hub/hub.base.routing.ts","src/app/+hub/tags/tags.component.ts","src/app/+hub/hub.base.module.ts","src/app/+hub/results/results-view/results-view.module.ts","src/app/+hub/results/results-index/results-index.component.html","src/app/+hub/results/results-index/results-index.component.ts","src/app/+hub/results/results-view/progress.component.ts","src/app/+hub/results/results-view/progress.component.html","src/app/+hub/results/results-view/stats.component.html","src/app/+hub/results/results-view/stats.component.ts","src/app/+hub/results/results-view/profile-results.component.html","src/app/+hub/results/results-view/profile-results.component.ts","src/app/+hub/results/results-view/preview-results.component.html","src/app/+hub/results/results-view/preview-results.component.ts","src/app/+hub/results/results-view/results-view.component.html","src/app/+hub/results/results-view/results-view.component.ts","src/app/+hub/view/view-index/view-index.component.ts","src/app/+hub/view/view-index/view-index.component.html"],"names":["FilesBulkLoadComponent","authService","hubService","route","router","formsService","fb","entityType","canEdit","formatTypes","eTypeCode","eFileStatus","automaticUpload","uploadedFiles","reference","tables","currentTable","cancelToken","pageTitle","showPage","showPageMessage","tableColumns","name","title","format","footer","uploadColumns","this","_subscription","queryParams","getHubCacheObservable","getRemoteLibrariesObservable","subscribe","result","hubCache","remoteLibraries","fileConnections","hub","dexihConnections","filter","c","ref","connections","find","con","connectionAssemblyName","connectionClassName","connectionCategory","File","purpose","Source","connectionKey","length","key","bulkLoadForm","group","Text","updateConnection","_connectionKeySubscription","unsubscribe","controls","valueChanges","_flatFilesSubscription","getFlatFilesObservable","flatFileReady","e","addHubClientErrorMessage","cancel","navigateUp","connection","getConnection","addHubErrorMessage","event","doUpload","srcElement","files","Array","prototype","forEach","call","file","bulkLoad","value","bulkUploadFiles","fileFormatKey","formatType","includeFileName","includeFileDate","includeFileRowNumber","then","url","fileHandler","concat","upload","status","success","addHubSuccessMessage","addHubMessage","catch","reason","table","navigate","relativeTo","hasChanged","Object","assign","currentForm","items","newTables","keys","i","savedTable","saveTables","push","index","findIndex","t","splice","tableKeys","join","hubKey","root","item","id","Promise","resolve","confirmDialog","confirm","$event","returnValue","DashboardEditComponent","isLoaded","isRefreshing","refreshComplete","data","params","getRemoteAgentObservable","remoteAgent","action","Loaded","views","dexihViews","load","_formChangeSubscription","dashboardKey","dexihColumnValidations","dashboard","dexihDashboards","JSON","parse","stringify","minCols","maxCols","minRows","maxRows","autoRefresh","runTime","showEdit","getCurrentFormObservable","form","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","refresh","previewDashboard","parameters","dexihDashboardItems","dashboardItemKey","getRemoteResponse","dataKey","columns","constructDataTableColumns","next","setValue","lock","viewKey","view","getNextSequence","cols","rows","x","y","found","row","col","occupied","currentItem","formGroup","dashboardItem","updateDashboardItemView","downloadObjects","map","downloadObject","sourceType","Datalink","objectKey","sourceDatalinkKey","objectType","Table","sourceTableKey","query","selectQuery","downloadData","close","ViewEditComponent","hasEdited","refreshDataSubject","sourceTypes","eViewType","eDataObjectType","connectionTables","datalinks","showChart","firstLoad","dialogOpen","animationValues","animationPaused","animateConfig","getConnectionTables","dexihDatalinks","inputColumns","inputValues","viewType","Chart","watchChanges","getColumns","_changesSubscription","reset","refreshDatalink","chartConfig","viewForm","viewInputs","getTable","dexihTableColumns","isInput","datalinkKey","datalinkName","logicalName","dataType","rank","defaultValue","datalink","ioColumns","buildInputOutput","getDatalinkOutputColumns","sourceDatalinkTable","dexihDatalinkColumns","input","baseData","viewParameters","datalinkParameterKey","removeAt","datalinkParameters","datalinkParameter","parameter","parameterForm","getRawValue","previewView","seriesColumn","markAsChanged","FileFormatIndexComponent","eSharedObjectType","tags","_tableData","BehaviorSubject","tableData","asObservable","combineLatest","updateFileFormats","_hubCacheChangeSubscription","fileFormats","deleteFileFormats","dexihFileFormats","isValid","description","updateDate","getObjectTags","FileFormat","fileFormat","createHub","cacheAddFileFormat","exportHub","getHubCacheChangeObservable","hubCacheChange","changeClass","TagObjects","editFileFormat","FileFormatEditComponent","DashboardItemComponent","showPreview","isMaximized","onRemove","onMaximize","dataRows","isHubCacheLoaded","_refreshDataSubscription","dataResult","viewConfig","parentParameters","_parametersSubscription","_viewKeySubscription","changes","itemChange","newItem","currentValue","preview","previewViewKey","results","preventDefault","stopPropagation","emit","removeItem","HubFormsService","_datalinkTargetChanges","_parameterChanges","_currentFormObservable","formErrors","formSaving","showAllErrors","IgnoreFormChange","ignoreHubCacheChange","formChangeCount","logger","validationMessages","validationFieldMessages","_hubCacheSubscription","clearFormSubscriptions","LogC","Trace","_valueChangesSubscription","_connectionChangesSubscription1","_connectionChangesSubscription2","_connectionChangesSubscription3","_tableChangesSubscription1","_tableChangesSubscription2","_tableColumnChangesSubscription1","_tableColumnChangesSubscription2","_tableColumnChangesSubscription3","_datalinkChangesSubscription1","_datalinkChangesSubscription2","_datalinkChangesSubscription3","_datalinkTestChangesSubscription","_genericParameterSubscription","itemTemplate","excludeKeys","existingKeys","control","addControl","onValueChanged","getFormErrorMessages","markAsDirty","field","get","dirty","valid","messages","errors","message","createErrorMessage","errorMessage","minlength","actualLength","requiredLength","maxlength","maxvalue","required","minvalue","keyField","formGroupFunc","changeType","Replace","pristine","ngOnDestroy","Delete","saveAs","valueMethod","property","cacheProperty","promptDialog","displayName","currentStatus","entityStatus","previousStatus","post","saveMethod","import1","importAction","New","updateHubChange","error","cache","cacheGetMethod","getFormErrorsRecursive","depth","repeat","cont","formIndex","value1","value2","trim","toLowerCase","showRefresh","listOfValuesKey","valueDesc","disabled","minLength","maxLength","addMissing","subscription","subscription2","isArray","connectionForm","duplicateConnectionNameValidator","connectionString","password","validators","requiredConnectionFields","type","Connection","passwordDisplay","passwordRaw","connectionStringDisplay","connectionStringRaw","startForm","stringCompare","useConnectionString","server","setErrors","tableForm","duplicateTableNameValidator","defaultTableLogicalName","schema","array","validator","requiredTableFields","tableColumnsForm","column","tableColumn","useLogical","dexihTables","siblingColumns","childColumns","columnForm","duplicateTableColumnNameValidator","precision","columnMinRangeValidator","columnMaxRangeValidator","scale","String","CharArray","Double","Decimal","Single","impact","lineage","isString","isNumber","updateValueAndValidity","columnsArray","parent","columnGroup","min","Number","max","fileFormatForm","duplicateFileFormatNameValidator","quote","duplicateViewNameValidator","validateViewSource","View","duplicateDashboardNameValidator","dashboardItemsForm","Dashboard","resizeEvent","formParameters","currentParameters","clear","currentParameter","newParameter","newFormParameter","listOfValues","staticData","listOfValuesItem","lovForm","duplicateLovNameValidator","ListOfValues","dexihListOfValues","api","apiForm","validateDatalinkTable","Api","validation","validationForm","duplicateValidationNameValidator","ColumnValidation","customFunction","customFunctionForm","duplicateCustomFunctionNameValidator","dexihCustomFunctionParameters","customFunctionParametersFormGroup","CustomFunction","dexihCustomFunctions","hubVariable","hubVariableForm","duplicateHubVariableNameValidator","isEncrypted","HubVariable","dexihHubVariables","tag","duplicateTagNameValidator","Tags","dexihTags","datalinkTest","duplicateDatalinkTestNameValidator","testStepsForm","dexihDatalinkTestSteps","step","datalinkTestStep","DatalinkTest","dexihDatalinkTests","testTablesForm","dexihDatalinkTestTables","datalinkTestTable","testTable","tableKey","dexihDatalinkTransforms","joinDatalinkTable","transform","trigger","triggerForm","datajobForm","stepForm","duplicateStepNameValidator","dexihDatalinkDependencies","dep","datalinkDependencyFormGroup","dexihDatalinkStepColumns","datalinkStepColumnFormGroup","depForm","colForm","datajob","triggers","dexihTriggers","triggerFormGroup","stepsArray","duplicateDatajobNameValidator","auditConnectionKey","requiredNotZero","failAction","dexihDatalinkSteps","datalinkStepFormGroup","Datajob","dexihDatajobs","remoteAgentForm","duplicateDatalinkColumnNameValidator","datalinkTableColumn","transformForm","sourceDatalinkTableFormGroup","nodeDatalinkColumn","outputColumns","transformColumns","dexihDatalinkTransformItems","datalinkDatalinkTransformItemFormGroup","datalinkTransformForm","itemForm","dexihFunctionParameters","datalinkFunctionParametersFormGroup","targetDatalinkColumn","duplicateOutputColumn","functionClassName","functionMethodName","asyncValidators","invalidClassName","genericTypeCode","typeCode","isGeneric","p","param","arrayParameters","ap","datalinkTransformItemForm","transformItemType","BuiltInFunction","reject","GetFunctionReference","func","datalinkColumn","datalinkFunctionArrayParametersFormGroup","inconsistentDataType","profile","profileForm","target","targetForm","setControl","datalinkTable","Debug","profiles","dexihDatalinkProfiles","datalinkProfileFormGroup","targets","dexihDatalinkTargets","datalinkTargetFormGroup","transforms","datalinkTransformFormGroup","datalinkForm","duplicateDatalinkNameValidator","updateStrategy","templateDatalink","updateTransformFormColumns","transformsArray","transformFormControl","datalinkTransform","datalinkTransformKey","transformItemForm","sourceDatalinkColumn","ColumnValidationIndexComponent","updateValidations","validations","deleteColumnValidations","cacheAddColumnValidation","edit","ColumnValidationEditComponent","eInvalidAction","eCleanAction","InvalidActions","CleanActions","typeCodes","invalidActions","cleanActions","lookupColumnValue","eCacheStatus","_lookupColumnSubscription","columnValidationKey","getValidationLookupColumn","lookupColumnKey","getColumn","testColumnValidation","testValue","testResult","ConnectionEditComponent","savingConnection","refreshingConnection","revealingConnectionString","creatingDatabase","databases","eConnectionPurposeItems","eConnectionPurpose","eConnectionCategory","variables","_purposeSubscription","updateDatabaseTypes","connectionReference","GetConnectionReference","defaultDatabase","Warning","updateUrl","previousConnectionKey","previousConnection","indexOf","substr","connectionTypes","d","allowsSourceConnection","Managed","allowsManagedConnection","Target","allowsTargetConnection","Hub","uri","protocol","hostname","port","username","user","getUser","email","decrypt","encryptConnection","refreshConnection","createDatabase","encrypt","save","getRoute","ConnectionImportComponent","enum","tableFilter","viewFilter","getTables","updateFilter","tableType","getDatabaseTableNames","cacheTables","cacheTable","defaultSchema","importTables","importResult","mergeTables","isBusy","lastStatus","Error","deleteTables","selected","selectedTables","informationDialog","deletedTable","previousTable","createDate","editTable","ConnectionIndexComponent","purposeFilter","updateConnections","deleteConnections","cacheAddConnection","editConnection","ImportComponent","hubFormsService","importActions","importOptions","FormData","append","toString","postForm","import","refreshImport","doImport","objects","o","newImport","importPackage","ExportComponent","getSharedObjects","export","cacheAddObject","label","DatajobIndexComponent","updateDatajobs","datajobs","editDatajob","DatalinkIndexComponent","eDatalinkType","eDatalinkTypeItems","iconClass","tooltip","width","align","typeFilter","updateDatalinks","newDatalinks","datalinkType","datalinkData","sourceName","targetName","sourceTable","sourceDatalink","Rows","isQuery","sharedIcon","isShared","sharedToolTip","queryParamsHandling","editDatalink","DatalinkNewComponent","addSourceColumns","auditColumnTypes","AutoIncrement","IsCurrentField","Version","ValidFromDate","ValidToDate","CreateDate","UpdateDate","CreateAuditKey","UpdateAuditKey","allAuditColumns","savingDatalink","managedTargetConnections","managedConnections","split","updateTables","targetConnectionKey","targetConnection","General","buildForm","sourceTableKeys","sourceTables","mainForm","auditColumns","createDatalinks","openDatalink","back","iteration","setTimeout","DatalinkPreviewDataComponent","previewUpdates","FilesManageComponent","Reload","updateStrategies","path","None","eFlatFilePath","eFlatFilePathItems","fc","Incoming","refreshFiles","allowsFlatFiles","getFileList","fileName","deleteFiles","toPath","moveFiles","downloadFiles","uploadFile","HubVariableIndexComponent","updateVariables","deleteHubVariables","variable","vars","HubVariableEditComponent","_isEncryptedSubscription","hubVariableKey","valueRaw","ManageUsersIndexComponent","ePermission","ePermissionItems","permission","PublishReader","emails","sendInvites","refreshUsers","getHubUsers","users","userNames","userName","setUserPermissions","dexihMessage","addSuccessMessage","alertEmail","userIds","setUserAlerts","removeUsers","RemoteAgentIndexComponent","getRemoteAgentsObservable","remoteAgents","statusFilter","updateRemoteAgents","dexihRemoteAgentHubs","a","remoteAgentKey","activeAgent","remoteAgentHubKey","connected","isAuthorized","dataPrivacyStatus","ipAddress","lastLoginDateTime","lastLoginIpAddress","remoteAgentId","RemoteAgent","agentHub","isDefault","saveRemoteAgent","agent","deleteRemoteAgent","RemoteAgentEditComponent","isNew","remoteAgentHub","ipAddressesControl","ipAddresses","SharedDataIndexComponent","snapshot","updateSharedData","objectTypeName","dexihApis","dataObjects","Csv","dataObject","datalinkKeys","shareItems","TableIndexComponent","connectionName","updateTableData","tableName","Query","connectionType","isFile","TablePreviewDataComponent","CustomFunctionIndexComponent","updateCustomFunctions","functions","deleteCustomFunctions","cacheAddCustomFunction","CustomFunctionParameterComponent","customFunctionParameterForm","addParameter","removeParameter","eBasicType","ignoreChanges","add","remove","CustomFunctionEditComponent","eParameterDirection","outputParameters","inputParameters","outputParameterValues","inputParameterValues","functionTypes","eFunctionType","_functionTypeSubscription","customFunctionKey","functionType","Condition","JoinCondition","Validate","returnType","Boolean","updateParameters","parametersArray","sort","b","position","direction","Input","Output","oldParameter","newParameterForm","valueIndex","tmpTransform","createDataTransformItem","downloadCustomFunction","testCustomFunction","syntaxMessage","returnParameterValue","converted","stack","selectedCustomFunction","functionCode","methodCode","functionResultCode","resultCode","datalinkTransformItemKey","returnParam","ReturnValue","DatalinkTestIndexComponent","update","deleteDatalinkTests","runDatalinkTestSnapshot","runDatalinkTests","tests","DatalinkTestNewComponent","saving","sourceDatalinkKeys","sourceDatalinks","datalinkKeyArray","sourceConnectionKey","newDatalinkTest","snapshotData","ApiEditComponent","Subject","eSourceType","apiKey","merge","getInputColumns","previewDatalinkKeyData","previewTableKeyData","ApiIndexComponent","updateApis","apis","apiSource","getSourceDetails","editApi","DatalinkRunComponent","truncateTable","resetIncremental","resetValue","runDatalinks","ObjectTypePipe","SearchComponent","searchObjectTypes","eSearchObjectType","isFirst","searchObject","searchForm","updateSearch","_searchSubscription","pipe","debounceTime","newValue","searchResults","search","searchString","getHubUrl","SearchModule","DashboardIndexComponent","updateDashboards","deleteDashboards","dashboards","cacheAddDashboard","DatajobRunComponent","datajobKeys","datajobKey","runDatajobs","activateDatajobs","ListOfValuesEditComponent","eLOVObjectType","_sourceChangeSubscription","refreshColumns","previewListOfValues","insert","ListOfValuesIndexComponent","lov","deleteListOfValues","lovItem","getListOfValuesCache","resultViewRoute","children","pathMatch","component","tableRoutes","loadChildren","m","TableEditModule","datalinkRoutes","DatalinkEditModule","tablesRoute","connectionRoutes","canDeactivate","agentRoutes","resultRoutes","customFunctionRoutes","columnValidationRoutes","fileFormatRoutes","viewRoutes","dashboardRoutes","DashboardEditModule","lovRoutes","apiRoutes","hubVariableRoutes","datalinkTestRoutes","DatalinkTestEditModule","filesRoutes","FilesBulkLoadModule","datajobRoutes","DatajobEditModule","BaseRouting","forChild","TagsComponent","state","colors","color","editTag","document","body","scrollTop","documentElement","deleteTags","hide","cacheAddTag","height","overflow","redirectTo","HubBaseModule","ngModule","providers","ResultsViewModule","ResultsIndexComponent","auditTypes","datalinkTests","auditType","hubPath","datalinkKeysString","datajobKeysString","datalinkTestsKeysString","_transformWriterResultChangeSubscription","auditKey","connectionKeys","uniqueKeys","ar","getAuditResults","getTransformWriterResultChangeObservable","writerResult","referenceKey","existingResult","showResult","ProgressComponent","percent","total","StatsComponent","exceptionHidden","fail","eRunStatus","eTriggerMethod","auditResult","endTime","Date","valueOf","startTime","runStatus","Running","RunningErrors","Started","Abended","Cancelled","Failed","FinishedErrors","Finished","Passed","barChartData","rowsPerSecond","rowsReadPrimary","rowsReadReference","readTicks","rowsTotal","processingTicks","writeTicks","parts","ticks","ProfileResultsComponent","showDetailed","previewProfileData","downloadProfileData","PreviewResultsComponent","targetTable","testStep","getDatalinkTestStep","testDatalink","errorTableName","errorSchema","errorConnectionKey","deltaType","NonTrackingField","auditCol","Int64","opCol","DatabaseOperation","reasonCol","UpdateReason","runningQuery","createAuditColumn","updateAuditColumn","column1","operator","IsEqual","andOr","Or","compareDataType","filters","createSelectQuery","previewTableDataQuery","ResultsViewComponent","getResultDetail","r","ViewIndexComponent","updateViews","deleteViews","cacheAddView","editView"],"mappings":"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","sourceRoot":"webpack:///","sourcesContent":["<section *ngIf=\"hubCache?.hub && (!fileConnections || fileConnections.length === 0)\">\n    <div class=\"alert alert-danger m-3\">\n        There are no files configured.  Create a file based connection, and add at least one file definition.\n        <hr>\n        <div>\n            <a class=\"btn btn-sm btn-primary text-white\" routerLink=\"/hub/{{hubCache.hub.hubKey}}/connections/connection-new/Source\" [title]=\"\">New Connection</a>\n        </div>\n    </div>\n</section>\n\n<div *ngIf=\"fileConnections && fileConnections.length > 0\" class=\"container\">\n    <dexih-widget *ngIf=\"!currentTable\" [title]=\"'Bulk Load: ' + connection?.name\" iconClass=\"fa fa-lg fa-fw fa-files-o\" [showCloseButton]=\"true\" (close)=\"close()\">\n        <form *ngIf=\"bulkLoadForm\" [formGroup]=\"bulkLoadForm\">\n        <div class=\"m-3\">\n            <section>\n                <form-select label=\"Connection\" formControlName=\"connectionKey\" [items]=\"fileConnections\" itemKey=\"key\"\n                    itemName=\"name\" iconClass=\"fa fa-database\" note='The connection where the files will be uploaded to.'>\n                    <a routerLink=\"//hub/{{hubCache.hub.hubKey}}/connections/connection-new/Source\">(<i class=\"fa fa-sticky-note-o\"></i> New )</a>\n                </form-select>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"col-md-6\">\n                    <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\"\n                        itemName=\"name\" iconClass=\"fa fa-text\" note='The format of data.'>\n                    </form-select>\n                </section>\n\n                <section class=\"col-md-6\" *ngIf=\"bulkLoadForm.controls.formatType.value == eTypeCode.Text\">\n                    <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\"\n                        [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\"\n                        note=\"Specify the file format to use, if not specified, a csv (command separated) format will be used.\"\n                        [allowNullSelect]=\"true\" selectNullMessage=\"Use default (csv) format\">\n                        <a routerLink=\"/hub/{{hubCache.hub.hubKey}}/fileFormats/fileFormat-new\">(<i class=\"fa fa-sticky-note-o\"></i> New )</a>\n                    </form-select>\n                </section>\n            </div>\n\n            <section >\n                <form-checkbox label=\"Include file name field\" formControlName=\"includeFileName\"></form-checkbox>\n                <form-checkbox label=\"Include file date field\" formControlName=\"includeFileDate\"></form-checkbox>\n                <form-checkbox label=\"Include file row field\" formControlName=\"includeFileRowNumber\"></form-checkbox>\n            </section>\n        </div>\n    </form>\n\n        <ul *ngIf=\"connection\" class=\"list-group\">\n            <dexih-widget-section title='Drop Files to Load' [showExpandButton]=\"true\">\n                <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                    Drop Files to Load Here\n                    <div class=\"custom-file w-25 float-right\">\n                        <input type=\"file\" class=\"custom-file-input\" onclick=\"this.value=null\" (change)=\"uploadFile($event)\">\n                        <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose files</label>\n                    </div>\n                </div>\n            </dexih-widget-section>\n\n            <dexih-widget-section title='Upload Queues' [showExpandButton]=\"true\" [padding]=\"false\">\n                <dexih-table [enableMultiSelect]=\"true\" [columns]=\"uploadColumns\" [data]=\"uploadedFiles\">\n\n                    <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                        <dexih-button class=\"mr-1\" iconClass=\"fa fa-upload\" buttonClass='btn-primary' (click)=\"uploadSelected(items)\">Upload</dexih-button>\n                        <dexih-button-cancel class=\"mr-1\" (click)=\"cancelSelected(items)\"></dexih-button-cancel>\n                        <dexih-button-delete (click)=\"removeSelected(items)\" text=\"Remove\"></dexih-button-delete>\n                    </ng-template>\n\n                    <ng-template #actions let-items=\"items\">\n                        <div class=\"d-flex align-items-center h-100\">\n                        <form-checkbox [(ngModel)]=\"automaticUpload\" label=\"Automatically upload files when added to the queue.\"></form-checkbox>\n                        </div>\n                    </ng-template>\n\n                    <ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n                        <div *ngIf=\"item.isRunning()\" class=\"progress\" style=\"margin-bottom: 0;\">\n                            <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': item.progress + '%' }\"></div>\n                        </div>\n                        <span>\n                            <i class='fa' [ngClass]=\"{\n                                'fa-check': item.status === eFileStatus.Complete, \n                                'fa-exclamation-circle': item.status === eFileStatus.Error,\n                                'fa-ban': item.status === eFileStatus.Cancelled}\"></i>{{item.status}}</span>\n                    </ng-template>\n                </dexih-table>            \n            </dexih-widget-section>\n    \n            <dexih-widget-section title='Tables Created' [showExpandButton]=\"true\" [padding]=\"false\">\n                <dexih-table [enableMultiSelect]=\"true\" [columns]=\"tableColumns\" [data]=\"tables\" (rowClick)=\"editTable($event)\">\n\n                    <ng-template select=\"selectedItemsAction\" #selectedItemsAction let-items=\"items\">\n                        <dexih-button class=\"ml-1\" (click)=\"saveTables(items)\" iconClass=\"fa fa-table\" title=\"Save the selected tables.\">Create Tables</dexih-button>\n                        <dexih-button class=\"ml-1\" (click)=\"createDatalinks(items)\" iconClass=\"fa fa-exchange\" title=\"Save the selected tables, and create datalinks to load them into a staging area.\">Create Datalinks</dexih-button>\n                        <dexih-button-delete class=\"ml-1\"  (click)=\"discardTables(items)\" title=\"Discard the selected tables.\" text=\"Discard\"></dexih-button-delete>\n                    </ng-template>\n    \n                </dexih-table>\n            </dexih-widget-section>\n        </ul>\n    </dexih-widget>\n\n    <dexih-widget *ngIf=\"currentTable\" [title]=\"'Edit table: ' + formsService.currentForm.controls.name.value\" [showCloseButton]=\"true\" (close)=\"closeTable()\">\n        <ng-template #header>\n            <dexih-button-apply (click)=\"applyChanges()\"></dexih-button-apply>\n            <dexih-button-cancel class=\"ml-1\" (click)=\"cancel()\"></dexih-button-cancel>\n        </ng-template>\n        <router-outlet></router-outlet>\n    </dexih-widget>\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { FileHandler, eFileStatus, CancelToken } from '../../../+auth/auth.models';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { HubCache, eCacheStatus, formatTypes } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../..';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DexihConnection, eTypeCode, DexihTable, eConnectionCategory, eConnectionPurpose } from '../../../shared/shared.models';\nimport { FormBuilder, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'files-bulk-load',\n    templateUrl: 'files-bulk-load.component.html'\n})\n\nexport class FilesBulkLoadComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private _connectionKeySubscription: Subscription;\n    private _flatFilesSubscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public connection: DexihConnection;\n\n    public bulkLoadForm: FormGroup;\n\n    public formatTypes = formatTypes;\n    public eTypeCode = eTypeCode;\n    public eFileStatus = eFileStatus;\n\n    public hubCache: HubCache;\n\n    public automaticUpload = true;\n\n    public uploadedFiles: FileHandler[] = [];\n\n    private reference: string = null;\n    public tables: DexihTable[] = []\n\n    public currentTable: DexihTable = null;\n\n    private cancelToken = new CancelToken();\n\n    pageTitle = 'Manage Files';\n    showPage = false;\n    showPageMessage = 'Loading...';\n\n    tableColumns = [\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description' },\n        { name: 'name', title: 'Table Name'  },\n    ];\n\n    uploadColumns = [\n        { name: 'file.name', title: 'File Name', format: '' },\n        { name: 'file.size', title: 'Size', format: '' },\n    ];\n\n    public fileConnections: DexihConnection[];\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private route: ActivatedRoute,\n        private router: Router,\n        public formsService: HubFormsService,\n        private fb: FormBuilder) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(true),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                let queryParams = result[0];\n                this.hubCache = result[1];\n                let remoteLibraries = result[2];\n\n                this.fileConnections = this.hubCache.hub.dexihConnections\n                    .filter(c => {\n                        let ref = remoteLibraries.connections.find(con =>\n                            c.connectionAssemblyName === con.connectionAssemblyName\n                            && c.connectionClassName === con.connectionClassName);\n\n                        if (ref) {\n                            return (ref.connectionCategory === eConnectionCategory.File || c.purpose !== eConnectionPurpose.Source);\n                        } else {\n                            return false;\n                        }\n                    });\n\n                let connectionKey = +queryParams['connectionKey'];\n                if (!connectionKey) {\n                    if (this.fileConnections.length > 0) {\n                        connectionKey = this.fileConnections[0].key;\n                    }\n                }\n\n                this.bulkLoadForm = this.fb.group({\n                    'connectionKey': [connectionKey],\n                    'formatType': [eTypeCode.Text],\n                    'fileFormatKey': [],\n                    'includeFileName': [false],\n                    'includeFileDate': [false],\n                    'includeFileRowNumber': [false]\n                  });\n\n                this.updateConnection(connectionKey);\n\n                if (this._connectionKeySubscription) { this._connectionKeySubscription.unsubscribe(); }\n                this._connectionKeySubscription = this.bulkLoadForm.controls.connectionKey.valueChanges.subscribe(key => {\n                    this.updateConnection(key);\n                });\n            });\n\n            if (this._flatFilesSubscription) { this._flatFilesSubscription.unsubscribe(); }\n            this._flatFilesSubscription = this.hubService.getFlatFilesObservable().subscribe(flatFileReady => {\n                if (flatFileReady.reference === this.reference) {\n                    this.tables = flatFileReady.tables;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Files Manage');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._flatFilesSubscription) { this._flatFilesSubscription.unsubscribe(); }\n        if (this._connectionKeySubscription) { this._connectionKeySubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    public close() {\n        this.authService.navigateUp();\n    }\n\n    private updateConnection(connectionKey) {\n        this.connection = this.hubCache.getConnection(connectionKey);\n\n        if (!this.connection && connectionKey) {\n            this.hubService.addHubErrorMessage(`The connection with the key ${connectionKey} could not be found.`);\n        } else if (this.connection) {\n            this.pageTitle = 'Load files for ' + this.connection.name;\n            this.showPage = true;\n        }\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doUpload(files);\n        return false;\n    }\n\n    public filesDrop(files: any) {\n        this.doUpload(files);\n    }\n\n    public doUpload(files) {\n        Array.prototype.forEach.call(files, file => {\n            let bulkLoad = this.bulkLoadForm.value;\n            this.hubService.bulkUploadFiles(bulkLoad.connectionKey, bulkLoad.fileFormatKey, bulkLoad.formatType,\n                bulkLoad.includeFileName, bulkLoad.includeFileDate, bulkLoad.includeFileRowNumber, file.name,\n                this.cancelToken).then(result => {\n                let url = result.url;\n                this.reference = result.reference;\n\n                let fileHandler = new FileHandler(file, url);\n                this.uploadedFiles = this.uploadedFiles.concat(fileHandler);\n                // this.uploadedFiles.push(fileHandler);\n\n                if (this.automaticUpload) {\n                    this.authService.upload(fileHandler).then(status => {\n                        if (status.success) {\n                            this.hubService.addHubSuccessMessage(file.name + ' uploaded.');\n                        } else {\n                            this.hubService.addHubMessage(status);\n                        }\n                    }).catch(reason => {\n                        this.hubService.addHubMessage(reason);\n                    });\n                }\n            }).catch(reason => {\n                this.hubService.addHubMessage(reason);\n            });\n        });\n    }\n\n    public editTable(table: DexihTable) {\n        this.currentTable = table;\n        this.formsService.table(table);\n        this.router.navigate(['table-edit'], { relativeTo: this.route });\n    }\n\n    public applyChanges() {\n        if (this.formsService.hasChanged) {\n            let table = this.formsService.currentForm.value;\n            Object.assign(this.currentTable, table);\n        }\n        this.currentTable = null;\n        this.authService.navigateUp();\n    }\n\n    public cancel() {\n        this.currentTable = null;\n        this.authService.navigateUp();\n    }\n\n    public async saveTables(items: DexihTable[]): Promise<number[]> {\n        let newTables = Object.assign([], this.tables);\n        let keys: number[] = [];\n        for (let i = 0; i < items.length; i++ ) {\n            let table = items[i];\n            let savedTable = await this.hubService.saveTables([table]);\n\n            keys.push(savedTable[0].key);\n\n            // after table is saved, remove from unsaved list.\n            let index = this.tables.findIndex(t => table.key === t.key);\n            newTables.splice(index, 1);\n        };\n\n        this.tables = newTables;\n        return keys;\n    }\n\n    public async createDatalinks(items: DexihTable[]) {\n        let keys = await this.saveTables(items);\n        let tableKeys = keys.join('|');\n        this.router.navigate(['/hub', this.hubCache.hub.hubKey, 'tables', 'datalink-new', tableKeys, 0],\n            { relativeTo: this.route.root });\n    }\n\n    public discardTables(items: DexihTable[]) {\n        let newTables = Object.assign([], this.tables);\n        for (let i = 0; i < items.length; i++ ) {\n            let table = items[i];\n            let index = this.tables.findIndex(t => table.key === t.key);\n            newTables.splice(index, 1);\n        };\n        this.tables = newTables;\n    }\n\n\n    public uploadSelected(items: Array<FileHandler>) {\n        items.forEach(item => {\n            this.authService.upload(item).then(status => {\n                this.hubService.addHubMessage(status);\n            }).catch(reason => {\n                this.hubService.addHubMessage(reason);\n            });\n        });\n    }\n\n    public removeSelected(items: Array<FileHandler>) {\n        items.forEach(item => {\n            let index = this.uploadedFiles.findIndex(c => c.id === item.id);\n            if (index >= 0) {\n                this.uploadedFiles.splice(index, 1);\n            }\n        });\n    }\n\n    public cancelSelected(items: Array<FileHandler>) {\n        items.forEach(item => item.cancel());\n    }\n\n    public canDeactivate(): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            if (this.tables.length > 0) {\n                this.authService.confirmDialog('Unsaved tables!',\n              'Table(s) have not been saved, this action will discard unsaved tables.  Do you want to discard the changes and exit?')\n              .then((confirm) => {\n                  resolve(confirm);\n                }).catch(() => {\n                  resolve(false);\n                });\n          } else {\n            resolve(true);\n          }\n        });\n      }\n\n      // @HostListener allows is to guard against browser refresh, close, etc.\n      @HostListener('window:beforeunload', ['$event'])\n      unloadNotification($event: any) {\n        if (this.tables.length > 0) {\n          $event.returnValue =\n            'Table(s) have not been saved, this action will discard unsaved tables.  Do you want to discard the changes and exit?';\n        }\n      }\n}\n","import { Component, OnInit, OnDestroy, HostListener, QueryList, ViewChildren } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { DashboardItemComponent } from './item/dashboard-item.component';\nimport { EventEmitter } from 'selenium-webdriver';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { HubCache, eCacheStatus, DataCache, PreviewResults } from '../../hub.models';\nimport { DexihView, DexihDashboard, DexihDashboardItem, DexihActiveAgent, DownloadObject, eDataObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'dexih-dashboard-edit-form',\n  templateUrl: './dashboard-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class DashboardEditComponent implements OnInit, OnDestroy {\n  @ViewChildren('dashboardItem') dashboardItems: QueryList<DashboardItemComponent>;\n\n  public dashboardKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n  public remoteAgent: DexihActiveAgent;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private isLoaded = false;\n\n  public isRefreshing = false;\n  private refreshComplete = false;\n  private cancelToken = new CancelToken();\n\n  views: DexihView[];\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.hubService.getRemoteAgentObservable()\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n        this.remoteAgent = result[3];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        this.views = this.hubCache.hub.dexihViews;\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Dashboard Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.dashboardKey = +this.params['dashboardKey'];\n\n      if (!this.dashboardKey) {\n        this.hubService.addHubErrorMessage('There was no dashboard specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihColumnValidations) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let dashboard = this.hubCache.hub.dexihDashboards.find(c => c.key === this.dashboardKey);\n\n          // create a copy of the dashboard to avoid changes to the hub cache.\n          dashboard = JSON.parse(JSON.stringify(dashboard));\n          this.formsService.dashboard(dashboard);\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      this.refreshComplete = true;\n      let dashboard = new DexihDashboard();\n      dashboard.minCols = 4;\n      dashboard.maxCols = 100;\n      dashboard.minRows = 4;\n      dashboard.maxRows = 100;\n      dashboard.autoRefresh = true;\n\n      this.formsService.dashboard(dashboard);\n      let runTime = this.formsService.currentForm.controls.runTime.value;\n      runTime.showEdit = true;\n      // this.formsService.currentForm.controls.runTime.setValue(runTime);\n      // this.add();\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/dashboard-new', `/dashboard-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n    if (this.formsService.currentForm.controls.autoRefresh.value && this.remoteAgent && !this.refreshComplete) {\n      this.refreshComplete = true;\n      this.refresh();\n    }\n  }\n\n  // add() {\n  //   let form = this.formsService.currentForm;\n  //   let items = <FormArray> form.controls.dexihDashboardItems;\n  //   let item = new DexihDashboardItem();\n  //   item.cols = 1;\n  //   item.rows = 1;\n  //   item.x = 0;\n  //   item.y = 0;\n  //   let control = this.formsService.dashboardItem(item);\n  //   items.push(control);\n  // }\n\n  refresh() {\n    this.hubService.previewDashboard(this.formsService.currentForm.value,\n      this.formsService.currentForm.value.parameters, this.cancelToken).then(keys => {\n      let items = <FormArray> this.formsService.currentForm.controls.dexihDashboardItems;\n\n      keys.forEach(url => {\n        let item = <FormGroup> items.controls.find((form: FormGroup) => form.controls.key.value === url.dashboardItemKey);\n        if (item) {\n          let data = <DataCache> item.controls.runTime.value.data;\n          data.isRefreshing = true;\n          this.hubService.getRemoteResponse<PreviewResults>(url.dataKey, this.cancelToken).then(result => {\n            result.columns = this.authService.constructDataTableColumns(result.columns);\n            data.data.next(result);\n            data.isRefreshing = false;\n          }).catch();\n        }\n      });\n    });\n  }\n\n  public toggleEdit() {\n    let runTime = this.formsService.currentForm.controls.runTime.value;\n    runTime.showEdit = !runTime.showEdit;\n    this.formsService.currentForm.controls.runTime.setValue(runTime);\n  }\n\n  public toggleLock() {\n    let runTime = this.formsService.currentForm.controls.runTime.value;\n    runTime.lock = !runTime.lock;\n    this.formsService.currentForm.controls.runTime.setValue(runTime);\n  }\n\n  add(viewKey) {\n    let view = this.hubCache.hub.dexihViews.find(c => c.key === viewKey);\n    if (!view) { return; }\n    let form = this.formsService.currentForm;\n    let items = <FormArray> form.controls.dexihDashboardItems;\n    let item = new DexihDashboardItem();\n    item.key = this.hubCache.getNextSequence();\n\n    item.cols = 1;\n    item.rows = 1;\n    item.x = -1;\n    item.y = -1;\n\n    // look for an empty cell\n    found:\n    for (let row = 0; row < form.controls.maxRows.value; row++) {\n      for (let col = 0; col < form.controls.maxCols.value; col++) {\n        let occupied = false;\n        for (let i = 0; i < items.controls.length; i++) {\n          let currentItem = <DexihDashboardItem> items.controls[i].value;\n          if (currentItem.x <= col && (currentItem.x + currentItem.cols) > col &&\n            currentItem.y <= row && (currentItem.y + currentItem.rows) > row) {\n              occupied = true;\n              break;\n          }\n        }\n\n        if (!occupied) {\n          item.x = col;\n          item.y = row;\n\n          break found;\n        }\n      }\n    }\n    item.viewKey = viewKey;\n    item.name = view.name;\n    let formGroup = this.formsService.dashboardItem(item);\n    this.formsService.updateDashboardItemView(formGroup);\n    items.push(formGroup);\n  }\n\n  public newView() {\n    this.router.navigate(['view-new'], { relativeTo: this.route } )\n  }\n\n  download(format) {\n    let items = <DexihDashboardItem[]> this.formsService.currentForm.controls.dexihDashboardItems.value;\n\n    let downloadObjects = items.filter(c => c.viewKey).map(item => {\n      let view = this.hubCache.hub.dexihViews.find(c => c.key === item.viewKey);\n\n      let downloadObject = new DownloadObject();\n      if (view.sourceType === eDataObjectType.Datalink) {\n        downloadObject.objectKey = view.sourceDatalinkKey;\n        downloadObject.objectType = eDataObjectType.Datalink;\n      }\n      if (view.sourceType === eDataObjectType.Table) {\n        downloadObject.objectKey = view.sourceTableKey;\n        downloadObject.objectType = eDataObjectType.Table;\n      }\n      downloadObject.query = view.selectQuery;\n\n      return downloadObject;\n    })\n\n    this.hubService.downloadData(downloadObjects, false, format, this.cancelToken)\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The dashboard has not been saved',\n          'The dashboard changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The dashboard changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"container-fluid\" >\n\t<dexih-widget title=\"Dashboard - {{formsService?.currentForm?.controls.name.value}}\" iconClass=\"fa fa-lg fa-fw fa-pie-chart\" [showCloseButton]=\"true\" [padding]=\"false\"\n\t (close)=\"close()\">\n\t\t<ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\" class=\"mr-1\"></dexih-invalid-form-details>\n\t\t\t<dexih-button-edit class=\"mr-1\" (click)=\"toggleEdit()\" [text]=\"formsService.currentForm?.controls.runTime.value.showEdit ? 'Hide Edit' : 'Edit'\"></dexih-button-edit>\n\t\t\t<dexih-button [iconClass]=\"formsService.currentForm?.controls.runTime.value.lock ? 'fa fa-lock' : 'fa fa-unlock'\" class=\"mr-1\" (click)=\"toggleLock()\" [text]=\"formsService.currentForm?.controls.runTime.value.lock ? 'Unlock' : 'Lock'\"></dexih-button>\n\t\t\t<dexih-button-refresh class=\"mr-1\"  (click)=\"refresh()\"></dexih-button-refresh>\n\t\t\t<dexih-button-dropdown class=\"mr-1\" iconClass=\"fa fa-plus\" text=\"Add\">\n\t\t\t\t<a class=\"dropdown-item\" (click)=\"newView()\">(New View)</a>\n\t\t\t\t<li *ngFor=\"let view of views\"><a class=\"dropdown-item\" (click)=\"add(view.key)\">{{view.name}}</a></li>\n\t\t\t</dexih-button-dropdown>\n\t\t\t<download-button class=\"mr-1\" (download)=\"download($event)\"></download-button>\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n\t\t</ng-template>\n\n\t\t<router-outlet></router-outlet>\n\n\t</dexih-widget>\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { Subscription, combineLatest, merge, Subject } from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { InputOutputColumns } from '../../hub.lineage.models';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { HubCache, ConnectionTables, eCacheStatus } from '../../hub.models';\nimport { eViewType, DexihDatalink, InputColumn, DexihColumnBase, SelectQuery,\n  DexihView, DownloadObject, eDataObjectType, ChartConfig, InputParameterBase, DexihActiveAgent, AnimateConfig } from '../../../shared/shared.models';\nimport { Functions } from '../../../shared/utils/functions';\nimport { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { parseStackingContexts } from 'html2canvas/dist/types/render/stacking-context';\n\n@Component({\n  selector: 'dexih-view-edit-form',\n  templateUrl: './view-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class ViewEditComponent implements OnInit, OnDestroy {\n  public viewKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n  public remoteAgent: DexihActiveAgent;\n\n  public showEdit = false;\n  public hasEdited = false;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _changesSubscription: Subscription;\n\n  private refreshDataSubject: Subject<void> = new Subject<void>();\n\n  sourceTypes = [\n    { key: eDataObjectType.Datalink, name: 'Datalink' },\n    { key: eDataObjectType.Table, name: 'Table' }\n  ];\n\n  eViewType = eViewType;\n  eDataObjectType = eDataObjectType;\n\n  public connectionTables: ConnectionTables[] = [];\n  public datalinks: DexihDatalink[] = [];\n\n  public showChart = false;\n  public inputColumns: InputColumn[];\n  public tableColumns: DexihColumnBase[];\n\n  private isLoaded = false;\n\n  private firstLoad = true;\n  private dialogOpen = false;\n\n  columns: Array<any>;\n  public baseData: Array<any>;\n  public data: Array<any>;\n\n  public animationValues = [];\n  public animationValue;\n  public animationTimer;\n  public animationColumnIndex: number;\n  public animationRowIndex: number;\n  public animationPaused = false;\n\n  private cancelToken = new CancelToken();\n\n  get animateConfig(): AnimateConfig {\n    return this.formsService?.currentForm?.controls.animateConfig.value;\n  }\n  set animateConfig(value: AnimateConfig) {\n    this.formsService?.currentForm?.controls.animateConfig.setValue(value);\n  }\n\n  get selectQuery(): SelectQuery {\n    return this.formsService?.currentForm?.controls.selectQuery.value;\n  }\n  set selectQuery(value: SelectQuery) {\n    this.formsService?.currentForm?.controls.selectQuery.setValue(value);\n  }\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.hubService.getRemoteAgentObservable()\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n        this.remoteAgent = result[3];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(() => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'View Edit');\n    }\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    if (this.hubCache && this.hubCache.isLoaded()) {\n      this.connectionTables = this.hubCache.getConnectionTables();\n      this.datalinks = this.hubCache.hub.dexihDatalinks;\n    }\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.viewKey = + this.params['viewKey'];\n\n      if (!this.viewKey) {\n        this.hubService.addHubErrorMessage('There was no view specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihColumnValidations) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n\n          let view = this.hubCache.hub.dexihViews.find(c => c.key === this.viewKey);\n\n          // create a copy of the view to avoid changes to the hub cache.\n          view = JSON.parse(JSON.stringify(view));\n          if (view.selectQuery == null) {\n            view.selectQuery = new SelectQuery();\n          }\n\n          if (view.animateConfig == null) {\n            view.animateConfig = new AnimateConfig()\n          }\n          this.inputColumns = view.inputValues;\n          this.showChart = view.viewType === eViewType.Chart;\n\n          this.formsService.view(view);\n\n          this.watchChanges();\n\n          this.getColumns();\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let view = new DexihView();\n      view.selectQuery = new SelectQuery();\n      view.animateConfig = new AnimateConfig();\n      this.formsService.view(view);\n      this.watchChanges();\n      this.showEdit = true;\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/view-new', `/view-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n  if (this.remoteAgent) {\n    if (!this.firstLoad) {\n      if (!this.dialogOpen) {\n        this.dialogOpen = true;\n        this.authService.confirmDialog('Remote Agent Available',\n          'A remote agent is available, would you like to refresh the data?').then(confirm => {\n            if (confirm) {\n              this.refresh();\n            }\n            this.dialogOpen = false;\n          });\n      }\n    } else {\n      if (this.formsService.currentForm.controls.autoRefresh.value) {\n        this.refresh();\n      }\n    }\n  }\n  }\n\n  watchChanges() {\n    if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    this._changesSubscription = merge(\n      this.formsService.currentForm.controls.sourceDatalinkKey.valueChanges,\n      this.formsService.currentForm.controls.sourceTableKey.valueChanges\n    ).subscribe(() => {\n      this.reset();\n      this.selectQuery = new SelectQuery();\n      this.animateConfig = new AnimateConfig();\n      this.getColumns();\n      this.refreshDatalink();\n      this.refresh();\n    });\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  toggleChart() {\n    if (this.showChart) {\n      this.showChart = false;\n      this.formsService.currentForm.controls.viewType.setValue(eViewType.Table);\n    } else {\n      this.showChart = true;\n      if (this.formsService.currentForm.controls.chartConfig.value == null) {\n        this.formsService.currentForm.controls.chartConfig.setValue(new ChartConfig());\n      }\n      this.formsService.currentForm.controls.viewType.setValue(eViewType.Chart);\n    }\n  }\n\n  getColumns() {\n\n    let viewForm = this.formsService.currentForm;\n    let viewInputs = <InputColumn[]>viewForm.controls.inputValues.value;\n\n    if (viewForm.controls.sourceType.value === eDataObjectType.Table && viewForm.controls.sourceTableKey.value > 0) {\n      let table = this.hubCache.getTable(viewForm.controls.sourceTableKey.value);\n      if (table) {\n        this.inputColumns = table.dexihTableColumns.filter(c => c.isInput).map(c => {\n          let input = viewInputs.find(i => i.name === c.name);\n          if (input) {\n          } else {\n          }\n          return {\n            datalinkKey: 0, datalinkName: '',\n            name: c.name, logicalName: c.logicalName, dataType: c.dataType, rank: c.rank,\n            value: c.defaultValue, defaultValue: c.defaultValue\n          };\n        }\n        );\n        this.tableColumns = table.dexihTableColumns;\n        return;\n      } else {\n        this.reset();\n      }\n    } else {\n      this.reset();\n    }\n\n    if (viewForm.controls.sourceType.value === eDataObjectType.Datalink && viewForm.controls.sourceDatalinkKey.value > 0) {\n      let datalink = this.datalinks.find(c => c.key === viewForm.controls.sourceDatalinkKey.value);\n      if (datalink) {\n        const ioColumns = new InputOutputColumns();\n        ioColumns.buildInputOutput(this.hubCache, datalink);\n        this.tableColumns = ioColumns.getDatalinkOutputColumns(datalink);\n\n        this.inputColumns = datalink.sourceDatalinkTable.dexihDatalinkColumns.filter(c => c.isInput).map(c => {\n          let input = viewInputs.find(i => i.name === c.name);\n          let value = null;\n          if (input) {\n            value = input.value;\n          } else {\n            value = c.defaultValue;\n          }\n          return {\n            datalinkKey: datalink.key, datalinkName: datalink.name,\n            name: c.name, logicalName: c.logicalName, dataType: c.dataType, rank: c.rank, value: value, defaultValue: c.defaultValue\n          };\n        });\n\n      } else {\n        this.reset();\n      }\n    } else {\n      this.reset();\n    }\n  }\n\n  reset() {\n    this.tableColumns = [];\n    this.inputColumns = [];\n    this.columns = null;\n    this.data = null;\n    this.baseData = null;\n  }\n\n  refreshDatalink() {\n    let viewForm = this.formsService.currentForm;\n\n    // clear current datalink parameters.\n    let viewParameters =  <FormArray> this.formsService.currentForm.controls.parameters;\n    for (let i = viewParameters.controls.length - 1; i >= 0; i--) {\n      if (viewParameters.controls[i].value.datalinkParameterKey) {\n        viewParameters.removeAt(i);\n      }\n    }\n\n    if (viewForm.controls.sourceType.value === eDataObjectType.Datalink && viewForm.controls.sourceDatalinkKey.value > 0) {\n      let datalink = this.datalinks.find(c => c.key === viewForm.controls.sourceDatalinkKey.value);\n      if (datalink) {\n        let datalinkParameters = datalink.parameters;\n\n        // add the datalink parameter back again.\n        for (let datalinkParameter of datalinkParameters) {\n          let parameter = Object.assign({}, datalinkParameter);\n          parameter['datalinkParameterKey'] = datalinkParameter.key;\n          parameter.key = this.hubCache.getNextSequence();\n          let parameterForm = this.formsService.parameter(parameter);\n          viewParameters.push(parameterForm);\n        }\n      }\n    }\n  }\n\n  refresh() {\n    let viewForm = this.formsService.currentForm;\n    let parameters: InputParameterBase[] = [];\n\n    let viewParameters =  (<FormGroup> this.formsService.currentForm.controls.parameters).getRawValue();\n\n    if (viewParameters) {\n      parameters = parameters.concat(viewParameters);\n    }\n\n    let view = <DexihView>viewForm.value;\n    view.selectQuery = viewForm.controls.selectQuery.value;\n    view.animateConfig = viewForm.controls.animateConfig.value;\n\n    if ((view.sourceType === eDataObjectType.Table && view.sourceTableKey > 0) ||\n      (view.sourceType === eDataObjectType.Datalink && view.sourceDatalinkKey > 0)) {\n\n      this.hubService.previewView(view, this.inputColumns, parameters, this.cancelToken).then((result) => {\n        this.refreshDataSubject.next();\n        this.columns = result.columns;\n        this.baseData = result.data;\n\n        if (!this.animateConfig.seriesColumn) {\n        //   this.initializeAnimation();\n        // } else {\n          this.data = this.baseData;\n        }\n      }).catch(() => {\n      });\n    }\n  }\n\n  download(format) {\n    let view = <DexihView>this.formsService.currentForm.value;\n    let downloadObject = new DownloadObject();\n    if (view.sourceType === eDataObjectType.Datalink) {\n      downloadObject.objectKey = view.sourceDatalinkKey;\n      downloadObject.objectType = eDataObjectType.Datalink;\n    }\n    if (view.sourceType === eDataObjectType.Table) {\n      downloadObject.objectKey = view.sourceTableKey;\n      downloadObject.objectType = eDataObjectType.Table;\n    }\n\n    downloadObject.query = this.selectQuery;\n    this.hubService.downloadData([downloadObject], false, format, this.cancelToken)\n  }\n\n  hasChanged() {\n    this.formsService.markAsChanged();\n  }\n\n  parameterChange() {\n    if (this.formsService.currentForm.controls.autoRefresh.value) {\n      this.refresh();\n    }\n  }\n\n  toggleEdit() {\n    this.showEdit = !this.showEdit;\n    this.hasEdited = true;\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.hasEdited && this.formsService.hasChanged) {\n        this.authService.confirmDialog('The view has not been saved',\n          'The view changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n            resolve(confirm);\n          }).catch(() => {\n            resolve(false);\n          });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.hasEdited && this.formsService.hasChanged) {\n      $event.returnValue = 'The view changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"container\" *ngIf=\"formsService\">\n\t<dexih-widget title=\"Edit View\" iconClass=\"fa fa-lg fa-fw fa-bar-chart\" [showCloseButton]=\"true\" [padding]=\"false\"\n\t (close)=\"close()\">\n\t\t<ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\" class=\"mr-1\"></dexih-invalid-form-details>\n\t\t\t<dexih-button-refresh class=\"mr-1\" (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n\t\t\t<download-button class=\"mr-1\" (download)=\"download($event)\"></download-button>\n\t\t\t\n\t\t\t<div class=\"btn-group btn-group-toggle mr-1\" data-toggle=\"buttons\" title=\"Table\">\n\t\t\t\t<label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===false}\">\n\t\t\t\t\t<input type=\"radio\" name=\"options\" value=\"table\" autocomplete=\"off\" (click)=\"toggleChart()\">\n\t\t\t\t\t<i class=\"fa fa-table\"></i>\n\t\t\t\t</label>\n\t\t\t\t<label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===true}\" title=\"Chart\">\n\t\t\t\t\t<input type=\"radio\" name=\"options\" value=\"chart\" autocomplete=\"off\" (click)=\"toggleChart()\">\n\t\t\t\t\t<i class=\"fa fa-bar-chart\"></i>\n\t\t\t\t</label>\n\t\t\t</div>\n\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\t\t\t<dexih-button-edit class=\"mr-1\" (click)=\"toggleEdit()\" [text]=\"showEdit ? 'Hide Edit' : 'Edit'\"></dexih-button-edit>\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n\t\t</ng-template>\n\n\t\t<dexih-widget-section *ngIf=\"formsService.currentForm && (showEdit || formsService.currentForm?.controls.parameters.length > 0 || datalinkParameters?.length > 0)\" title=\"Properties\" [showExpandButton]=\"true\">\n\t\t<form *ngIf=\"showEdit\" [formGroup]=\"formsService.currentForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<form-input label=\"View Name\" formControlName=\"name\" placeholder=\"Enter the view name.\" [autocapitalize]=\"on\" iconClass=\"fa fa-list\"\n\t\t\t\t\t [errors]=\"formsService.formErrors['name']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\">\n\t\t\t\t\t</form-textarea>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t<form-select label=\"Data Source Type\" formControlName=\"sourceType\" [items]=\"sourceTypes\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t\t iconClass=\"fa fa-database\" note='Specify the source type for this view' [enableFilter]=\"false\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-6\" *ngIf=\"formsService.currentForm.value.sourceType == eDataObjectType.Table\">\n\t\t\t\t\t\t\t<form-select label=\"Source Table\" formControlName=\"sourceTableKey\" [errors]=\"errors?.sourceTableKey\" [items]=\"connectionTables\"\n\t\t\t\t\t\t\t parentName=\"name\" childItems=\"dexihTables\" itemKey=\"key\" itemName=\"logicalName\" note=\"Select the source table\">\n\t\t\t\t\t\t\t <table-edit-button [key]=\"formsService.currentForm.controls.sourceTableKey.value\"></table-edit-button>\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-6\" *ngIf=\"formsService.currentForm.value.sourceType == eDataObjectType.Datalink\">\n\t\t\t\t\t\t\t<form-select label=\"Source Datalink\" formControlName=\"sourceDatalinkKey\" [errors]=\"errors?.sourceDatalinkKey\"\n\t\t\t\t\t\t\t [items]=\"datalinks\" itemKey=\"key\" itemName=\"name\" note='Select the source datalink'>\n\t\t\t\t\t\t\t <datalink-edit-button [key]=\"formsService.currentForm.controls.sourceDatalinkKey.value\"></datalink-edit-button>\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t\t<dexih-button-refresh (click)=\"refreshDatalink()\" text=\"Refresh Parameters\"></dexih-button-refresh>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<form-checkbox formControlName=\"autoRefresh\" label=\"Automatically refresh data when view is opened\"></form-checkbox>\n\t\t\t\t\t<form-checkbox label=\"View is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n\t\t\t\t\t</form-checkbox>\n\t\n\t\t\t\t</section>\n\n\t\t\t</fieldset>\n\t\t</form>\n\n\t\t<input-parameters [showEdit]=\"showEdit\" [parameters]=\"formsService.currentForm?.controls.parameters\" [formsService]=\"formsService\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\" (onChange)=\"parameterChange()\"></input-parameters>\n\n\t\t<div class=\"mt-3\"  *ngIf=\"!data || data.length === 0\">\n\t\t\t<dexih-button-refresh  class=\"mr-1\" (click)=\"refresh()\" text=\"Reload\" [autoCompact]=\"false\"></dexih-button-refresh>\n\t\t</div>\n\n\t\t</dexih-widget-section>\n\n\t\t<dexih-widget-section  *ngIf=\"inputColumns && inputColumns.length > 0\" title=\"InputColumns\" [showExpandButton]=\"true\">\n\t\t\t<span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t{{column.logicalName}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<form-input name=\"column{{i}}\" class=\"form-control p-0\" [placeholder]=\"'Enter ' + column.logicalName\" [(ngModel)]=\"column.value\"></form-input>\n\t\t\t</span>\n\t\t</dexih-widget-section>\n\n\t\t<series-animate [showEdit]=\"showEdit\" [animateConfig]=\"animateConfig\" [columns]=\"columns\" (hasChanged)=\"hasChanged()\" [baseData]=\"baseData\" [(data)]=\"data\"></series-animate>\n\n\t\t<dexih-widget-section  *ngIf=\"showEdit\" title=\"Query Configuration\" [showExpandButton]=\"true\">\n\t\t\t<query-builder  [selectQuery]=\"formsService.currentForm.controls.selectQuery.value\" [columns]=\"tableColumns\" [inputColumns]=\"inputColumns\" [parameters]=\"formsService.currentForm.controls.parameters.value\" (hasChanged)=\"hasChanged()\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\"></query-builder>\n\t\t</dexih-widget-section>\n\n\t\t<ng-template [ngIf]=\"columns?.length > 0 && data?.length > 0\">\n\t\t\t<dexih-table *ngIf=\"!showChart\" [enableMultiSelect]=\"false\" [enableSaveCsv]=\"true\" [columns]=\"columns\" [data]=\"data\" [hideTable]=\"showChart\">\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-refresh class=\"mr-1\" (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n\t\t\t\t</ng-template>\n\t\t\t</dexih-table>\n\n\t\t\t<div *ngIf=\"showChart\">\n\t\t\t<chart-builder \n\t\t\t\t[title]=\"formsService.currentForm.controls.name.value\" \n\t\t\t\t[columns]=\"columns\" \n\t\t\t\t[data]=\"data\" \n\t\t\t\t[config]=\"formsService.currentForm.controls.chartConfig.value\"\n\t\t\t\t[showEdit]=\"showEdit\"\n\t\t\t\t(hasChanged)=\"hasChanged()\">\n\t\t\t</chart-builder>\n\t\t</div>\n\t\t</ng-template>\n\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" title=\"Views\" path=\"/assets/help/reference/view.md\"></dexih-help>\n\n</div>","<div class=\"container-fluid\">\n\t<dexih-widget title=\"File Formats\" iconClass=\"fa fa-lg fa-fw fa-file-text-o\" [showCloseButton]=\"true\"\n\t\t(close)=\"close()\">\n\n\t\t<dexih-table \n\t\t[enableMultiSelect]=\"true\" \n\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t[columns]=\"columns\" \n\t\t[dataObservable]=\"tableData\"\n\t\t(rowClick)=\"editFileFormat($event)\" \n\t\t[tags]=\"this.hubCache.hub.dexihTags\">\n\t\t\t\n\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t<dexih-button-new *ngIf=\"hubCache.canWrite\" class=\"mr-1\" [routerLink]=\"['fileFormat-new']\"\n\t\t\t\t\ttitle=\"Create a new file format\"></dexih-button-new>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-fileFormat=\"item\">\n\t\t\t\t<actions-fileFormat-button [fileFormat]=\"fileFormat\" class=\"mr-1\"></actions-fileFormat-button>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t<dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t<dexih-button-delete *ngIf=\"hubCache.canWrite\" (click)=\"deleteFileFormats(items)\"\n\t\t\t\t\ttitle=\"Delete selected file formats\"></dexih-button-delete>\n\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.FileFormat\" [objects]=\"items\">\n\t\t\t\t</tags-update-button>\n\t\t\t</ng-template>\n\n\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" title=\"File Formats\" path=\"/assets/help/reference/fileFormat.md\"></dexih-help>\n\n</div>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubCache } from '../../hub.models';\nimport { DexihFileFormat, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'fileFormats',\n    templateUrl: './fileFormat-index.component.html',\n    styles: []\n})\nexport class FileFormatIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    fileFormats: Array<DexihFileFormat>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.updateFileFormats();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'File Format Index');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteFileFormats(fileFormats: Array<DexihFileFormat>) {\n        this.hubService.deleteFileFormats(fileFormats);\n    }\n\n    updateFileFormats() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let fileFormats = this.hubCache.hub.dexihFileFormats.filter(c => c.isValid).map(c => {\n                return {\n                    key: c.key,\n                    name: c.name,\n                    description: c.description,\n                    updateDate: c.updateDate,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.FileFormat, c.key)\n                }\n            });\n            this._tableData.next(fileFormats);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    editFileFormat(fileFormat: DexihFileFormat) {\n        this.router.navigate(['fileFormat-edit', fileFormat.key], { relativeTo: this.route });\n    }\n\n    export(items: Array<DexihFileFormat>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        items.forEach(item => { this.hubCache.cacheAddFileFormat(item.key, hub); });\n\n        let filename = items.length === 1 ? 'FileFormat - ' + items[0].name + '.json' : 'fileFormats.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n        // watch the current validation in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.FileFormat ||\n                hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateFileFormats();\n            }\n        });\n    }\n}\n","<div class=\"container\">\n\t<dexih-widget \n\t\ttitle=\"Edit Format\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-file-text-o\" \n\t\t[showCloseButton]=\"true\"\n\t\t[padding]=\"true\"\n\t\t(close)=\"close()\"\n\t\t>\n        <ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\" class=\"mr-1\"></dexih-invalid-form-details>\n            <save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\"  class=\"mr-1\"></save-button>\n            <cancel-button [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n\t\t<form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<form-input label=\"File Format Name\" formControlName=\"name\" placeholder=\"Enter the file format name.\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\" [autocapitalize]=\"true\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\" >\n\t\t\t\t\t</form-textarea>\n\t\t\t\t</section>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Delimiter\" formControlName=\"delimiter\" placeholder=\"Enter the delimiter\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t [errors]=\"formsService.formErrors['delimiter']\" note=\"The field delimiter (use \\t=tab, \\n=new line, \\r=carriage return).\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input type=\"number\" label=\"Buffer Size\" formControlName=\"bufferSize\" placeholder=\"Enter buffer size\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['bufferSize']\" note=\"The size of the internal buffer that is used when reader or writing data.\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input type=\"number\" label=\"Skip Header Rows Count\" formControlName=\"skipHeaderRows\" placeholder=\"Enter row count\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['skipHeaderRows']\" note=\"The number of rows at the start of the file that will be ignored.\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Has Header Record\" formControlName=\"hasHeaderRecord\" note=\"Tells the reader/writer if there is a header row in the CSV file.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Ignore Header White Space\" formControlName=\"ignoreHeaderWhiteSpace\" note=\"Tells the reader to ignore white space in the headers when matching the columns to the properties by name.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Match to Column to Header\" formControlName=\"matchHeaderRecord\" note=\"Tells the reader to use the column heading name to load the data.  If unchecked, columns will be read into fields in the order specified in the table columns.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Set White Space Cells to Null \" formControlName=\"setWhiteSpaceCellsToNull\" note=\"Set empty cells or cells containing only white spaces to null.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Allow Comments\" formControlName=\"allowComments\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t<div *ngIf=\"formsService.currentForm.controls.allowComments.value\">\n\t\t\t\t\t\t\t<form-input label=\"Comment\" formControlName=\"comment\" placeholder=\"Enter comment character\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t\t note=\"The value used to denote a line that is commented out.\" [errors]=\"formsService.formErrors['comment']\">\n\t\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Ignore Quotes\" formControlName=\"ignoreQuotes\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t<div *ngIf=\"!formsService.currentForm.controls.ignoreQuotes.value\">\n\t\t\t\t\t\t\t<form-input label=\"Quote\" formControlName=\"quote\" placeholder=\"Enter the quote\" [maxlength]=\"1\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t\t [errors]=\"formsService.formErrors['quote']\" note=\"The value used to escape fields that contain a delimiter, quote, or line ending.\">\n\t\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t</div>\t\t\t\t\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Quote All Fields\" formControlName=\"quoteAllFields\" note=\"Tells the writer whether all fields written should have quotes around them; regardless if the field contains anything that should be escaped.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Quote No Fields\" formControlName=\"quoteNoFields\" note=\"Tells the writer whether all fields written should not have quotes around them; regardless if the field contains anything that should be escaped.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Trim Fields\" formControlName=\"trimFields\" note=\"Tells the reader to trim whitespace from the beginning and ending of the field value when reading.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Trim Headers\" formControlName=\"trimHeaders\" note=\"Tells the reader to ignore white space from the beginning and ending of the headers when matching the columns to the properties by name.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Detect Column Count Changes\" formControlName=\"detectColumnCountChanges\" note=\"Check for changes in the number of column from row to row.  If true, the job will abend.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Ignore Reading Exceptions\" formControlName=\"ignoreReadingExceptions\" note=\"Tells the reader to ignore any issues when parsing the file.  Issues mean the file is bad in some way, and the parser isn't able to recover.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Will Abend On Missing Field\" formControlName=\"willThrowOnMissingField\" note=\"Indicates if the job should be abended if reading and an expected field is missing.\" >\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-checkbox label=\"Skip Empty Records\" formControlName=\"skipEmptyRecords\" note=\"Tells the reader a record should be skipped when reading if it's empty. A record is considered empty if all fields are empty.\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t</fieldset>\n\t\t</form>\n \n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"File Formats\" path=\"/assets/help/reference/fileFormat.md\"></dexih-help>\n</div>\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { Observable, Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { DexihFileFormat } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'dexih-fileFormat-edit-form',\n  templateUrl: './fileFormat-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class FileFormatEditComponent implements OnInit, OnDestroy {\n  public fileFormatKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  // public parseErrorActions = ParseErrorActions;\n  // public missingFieldActions = MissingFieldActions;\n  // public valueTrimmingOptions = ValueTrimmingOptions;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private isLoaded = false;\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router,\n  ) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'File Format Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n  }\n\n  load() {\n\n    if (this.hubCache.isLoaded()) {\n      if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded || this.isLoaded) { return; }\n      this.isLoaded = true;\n\n      if (this.action === 'edit') {\n        // get the hub key from the route data, and update the service.\n        this.fileFormatKey = + this.params['fileFormatKey'];\n\n        if (!this.fileFormatKey) {\n          this.hubService.addHubErrorMessage('There was no file format specified to edit.');\n        } else {\n          if (!this.hubCache.hub || !this.hubCache.hub.dexihColumnValidations) {\n            this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n          } else {\n\n            let fileFormat = this.hubCache.hub.dexihFileFormats.find(c => c.key === this.fileFormatKey);\n            this.formsService.fileFormat(fileFormat);\n          }\n        }\n      }\n\n      if (this.action === 'new') {\n        let fileFormat = new DexihFileFormat();\n        this.formsService.fileFormat(fileFormat);\n\n        // update the url with the saved key\n        this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n          let key = form.controls.key.value;\n          if (key) {\n            if (history.pushState) {\n              let newUrl = window.location.pathname.replace('/fileFormat-new', `/fileFormat-edit/${key}`)\n              this.router.navigateByUrl(newUrl);\n              this._formChangeSubscription.unsubscribe();\n            }\n          }\n        });\n      }\n    }\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n}\n","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter,\n    ViewChild, OnChanges, SimpleChanges } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubService } from '../../..';\nimport { Subscription, combineLatest, Subject } from 'rxjs';\nimport { HubCache, DexihInputParameter, DataCache, PreviewResults } from '../../../hub.models';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihWidgetComponent } from 'dexih-ngx-components';\nimport { CancelToken } from '../../../../+auth/auth.models';\nimport { DexihView, InputParameterBase, InputParameter, eDataObjectType, eViewType, DexihActiveAgent } from '../../../../shared/shared.models';\nimport { AuthService } from '../../../../+auth/auth.service';\n\n@Component({\n    selector: 'dashboard-item',\n    templateUrl: 'dashboard-item.component.html',\n    styleUrls: ['./dashboard-item.component.scss']\n})\n\nexport class DashboardItemComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() item: FormGroup;\n    @Input() showEdit = true;\n    @Input() showPreview = false;\n    @Input() refreshData: EventEmitter<string>;\n    @Input() isMaximized = false;\n\n    @Output() onRemove = new EventEmitter();\n    @Output() onMaximize = new EventEmitter<FormGroup>();\n\n    @ViewChild('widget', {static: true}) public widget: DexihWidgetComponent;\n\n    private _subscription: Subscription;\n    private _viewKeySubscription: Subscription;\n    private _refreshDataSubscription: Subscription;\n    private _parametersSubscription: Subscription;\n\n    hubCache: HubCache;\n    remoteAgent: DexihActiveAgent;\n\n    eViewType = eViewType;\n\n    views: DexihView[];\n    view: DexihView;\n    parameters: DexihInputParameter[];\n\n    private firstLoad = true;\n    private dialogOpen = false;\n\n    data: DataCache;\n    dataResult: PreviewResults;\n    public dataRows = [];\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    private cancelToken = new CancelToken();\n\n    public parentParameters;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private formsService: HubFormsService) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable()\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.remoteAgent = result[1];\n\n                if (this.hubService.isHubCacheLoaded) {\n                    this.views = this.hubCache.hub.dexihViews;\n                    if (this.item?.controls.viewKey) {\n                        this.view = this.hubCache.hub.dexihViews.find(c => c.key === this.item.controls.viewKey.value);\n\n                        this.data = <DataCache> this.item.controls.runTime.value.data;\n\n                        if (this.data) {\n                            this._refreshDataSubscription = this.data.data.subscribe(dataResult => {\n                                if (!dataResult) {\n                                    return;\n                                }\n\n                                this.dataResult = dataResult;\n\n                                if (!dataResult.viewConfig.animateConfig) {\n                                    this.dataRows = this.dataResult.data;\n                                }\n\n                                if (dataResult.status) {\n                                    this.hubService.addHubMessage(dataResult.status, false, this.view.name);\n                                }\n                            });\n\n                        } else if (this.remoteAgent) {\n                            if (!this.firstLoad) {\n                                if (!this.dialogOpen) {\n                                    this.dialogOpen = true;\n                                    this.authService.confirmDialog('Remote Agent Available',\n                                        'A remote agent is available, would you like to refresh the data?').then(confirm => {\n                                            if (confirm) {\n                                                this.refresh();\n                                            }\n                                            this.dialogOpen = false;\n                                        });\n                                }\n                            } else {\n                                this.refresh();\n                            }\n\n                            this.firstLoad = false;\n                        }\n                    }\n\n                    this.parentParameters = this.formsService.currentForm.controls.parameters.value;\n                    if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n                    this._parametersSubscription = this.formsService.currentForm.controls.parameters.valueChanges.subscribe(value => {\n                        this.parentParameters = value;\n                    });\n                }\n            });\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'View Index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._viewKeySubscription) { this._viewKeySubscription.unsubscribe(); }\n        if (this._refreshDataSubscription) { this._refreshDataSubscription.unsubscribe(); }\n        if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        let itemChange = changes['item'];\n        if (itemChange) {\n            let newItem = <FormGroup> itemChange.currentValue;\n\n            if (this.views && newItem.value) {\n                this.view = this.hubCache.hub.dexihViews.find(c => c.key === newItem.value);\n            }\n            if (this._viewKeySubscription) { this._viewKeySubscription.unsubscribe(); }\n            this._viewKeySubscription = newItem.controls.viewKey.valueChanges.subscribe(viewKey => {\n                this.formsService.updateDashboardItemView(newItem);\n            });\n        }\n    }\n\n    // public updateView(viewKey) {\n    //     if (this.views && viewKey) {\n    //         this.view = this.hubCache.hub.dexihViews.find(c => c.key === viewKey);\n    //         if (this.view) {\n    //             this.item.controls.name.setValue(this.view.name);\n    //             this.item.controls.runTime.value.data = new DataCache();\n\n    //             // reset parameters.\n    //             let formParameters = <FormArray> this.item.controls.parameters;\n    //             let currentParameters = <DexihInputParameter[]> formParameters.value;\n\n    //             formParameters.clear();\n\n    //             let parameters = <InputParameterBase[]> this.view.parameters;\n    //             if (this.view.sourceType === eDataObjectType.Datalink) {\n    //                 let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === this.view.sourceDatalinkKey);\n    //                 if (datalink && datalink.parameters) {\n    //                     parameters = parameters.concat(datalink.parameters);\n    //                 }\n    //             }\n\n    //             parameters.forEach(parameter => {\n    //                 let currentParameter = currentParameters.find( c => c.name === parameter.name);\n    //                 let newParameter = new InputParameterBase();\n    //                 if (currentParameter) {\n    //                     newParameter.name = currentParameter.name;\n    //                     newParameter.value = currentParameter.value;\n    //                 } else {\n    //                     newParameter.name = parameter.name;\n    //                     newParameter.value = parameter.value;\n    //                 }\n    //                 let newFormParameter = this.formsService.parameter(newParameter);\n    //                 formParameters.push(newFormParameter);\n    //             });\n    //         }\n    //     }\n    // }\n\n    public refresh() {\n        let preview = this.hubService.previewViewKey(this.item.controls.viewKey.value, null,\n            this.formsService.currentForm.controls.parameters.value,\n        this.item.controls.parameters.value, this.cancelToken);\n        this.data = <DataCache> this.item.controls.runTime.value.data;\n        this.data.refresh(preview);\n        preview.then(results => {\n            this.refreshDataSubject.next();\n            this.dataResult = results;\n            if (!this.dataResult.viewConfig.animateConfig) {\n                this.dataRows = this.dataResult.data;\n            }\n        }).catch(reason => {\n            this.hubService.addHubMessage(reason);\n        });\n    }\n\n    parameterChange() {\n        this.refresh();\n    }\n\n    public toggleEdit() {\n        this.showEdit = !this.showEdit;\n    }\n\n    removeItem($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        this.onRemove.emit();\n    }\n\n    public maximise() {\n        this.onMaximize.emit(this.item);\n    }\n}\n","<div class=\"side-menu\">\n    <div class=\"side-menu-content\">\n        <div class=\"spin-icon\">\n            <i class=\"fa fa-cog fa-spin\"></i>\n        </div>\n        <div class=\"side-menu-box\">\n            <div class=\"bg-light rounded p-1\">\n                <div>\n                    <dexih-button-refresh [compact]=\"true\" (click)=\"refresh()\"></dexih-button-refresh>\n                    <dexih-button-edit *ngIf=\"!this.showEdit\" class=\"ml-1\" [compact]=\"true\" (click)=\"toggleEdit()\">\n                    </dexih-button-edit>\n                    <dexih-button-preview *ngIf=\"this.showEdit\" class=\"ml-1\" [compact]=\"true\" (click)=\"toggleEdit()\">\n                    </dexih-button-preview>\n                    <dexih-button *ngIf=\"!isMaximized\" class=\"ml-1\" buttonClass=\"btn btn-primary\"\n                        iconClass=\"fa fa-window-maximize text-white\" (click)=\"maximise()\" tooltip=\"Maximize window\">\n                    </dexih-button>\n                    <dexih-button *ngIf=\"isMaximized\" class=\"ml-1\" buttonClass=\"btn btn-primary\"\n                        iconClass=\"fa fa-window-minimize text-white\" (click)=\"maximise()\" tooltip=\"Minimize window\">\n                    </dexih-button>\n                    <dexih-button-delete class=\"ml-1\" (click)=\"removeItem($event)\" [compact]=\"true\">\n                    </dexih-button-delete>\n                </div>\n\n                <div *ngIf=\"!showEdit && !showPreview && view\">\n\n                    <div class=\"m-1\" *ngIf=\"inputColumns && inputColumns.length > 0\">\n                        <span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n                            <div class=\"input-group-prepend\">\n                                <div class=\"input-group-text\">\n                                    {{column.logicalName}}\n                                </div>\n                            </div>\n                            <form-input name=\"column{{i}}\" class=\"form-control p-0\"\n                                [placeholder]=\"'Enter ' + column.logicalName\" [(ngModel)]=\"column.value\"></form-input>\n                        </span>\n                    </div>\n\n                    <div class=\"m-1\" *ngIf=\"item.controls.parameters.length > 0\">\n                        <input-parameters [showEdit]=\"false\" [parameters]=\"item.controls.parameters\"\n                            [formsService]=\"formsService\" [parentParameters]=\"parentParameters\"\n                            (onRefreshData)=\"refresh()\" [refreshEvent]=\"refreshDataSubject.asObservable()\">\n                        </input-parameters>\n                    </div>\n\n                    <div *ngIf=\"!data?.isRefreshing && dataResult?.columns?.length > 0 && dataResult?.viewConfig && dataResult?.data\"\n                        class=\"m-1\" style=\"z-index: 99999;\">\n                        <series-animate [showEdit]=\"false\" [showFrame]=\"false\"\n                            [animateConfig]=\"dataResult?.viewConfig.animateConfig\" [columns]=\"dataResult?.columns\"\n                            (hasChanged)=\"hasChanged()\" [baseData]=\"dataResult?.data\" [(data)]=\"dataRows\">\n                        </series-animate>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div *ngIf=\"showEdit\" class=\"p-3 gridster-item-content\">\n    <form [formGroup]=\"item\">\n        <section>\n            <form-input label=\"Item Name\" formControlName=\"name\" placeholder=\"Enter the dashboard item name.\"\n                [autocapitalize]=\"on\" iconClass=\"fa fa-list\">\n            </form-input>\n        </section>\n        <section>\n            <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n                placeholder=\"Enter the description.\">\n            </form-textarea>\n        </section>\n        <section>\n            <form-select label=\"Select View\" formControlName=\"viewKey\" [items]=\"views\" itemKey=\"key\" itemName=\"name\">\n                <view-edit-button [key]=\"item.controls.viewKey.value\"></view-edit-button>\n            </form-select>\n        </section>\n        <section>\n            <form-checkbox label=\"Show Header\" formControlName=\"header\">\n            </form-checkbox>\n            <form-checkbox label=\"Allow Scrolling\" formControlName=\"scrollable\">\n            </form-checkbox>\n        </section>\n    </form>\n\n    <input-parameters [showEdit]=\"showEdit\" [allowAddRemove]=\"false\" [parameters]=\"item.controls.parameters\" [formsService]=\"formsService\"\n        [parentParameters]=\"parentParameters\" (onRefreshData)=\"refresh()\" [refreshEvent]=\"refreshDataSubject.asObservable()\">\n    </input-parameters>\n\n</div>\n\n<ng-template [ngIf]=\"!showEdit\">\n\n    <div *ngIf=\"!showPreview && view\" class=\"box\" [ngStyle]=\"{'overflow': item.controls.scrollable.value ? 'scroll' : 'hidden'}\">\n        <div *ngIf=\"data?.isRefreshing; else notRefreshing\" class=\"p-3\">\n            <div class=\"dexih-loader\"></div> Refreshing, please wait...\n        </div>\n        \n        <ng-template #notRefreshing>\n\n            <div *ngIf=\"item.controls.header.value\" class=\"box-header bg-secondary text-white\">\n                <div class=\"m-3\">\n                    <b>{{item.controls.name.value}}</b>\n                </div>\n            </div>\n        \n            <div *ngIf=\"item.controls.description.value\" class=\"box-header\">\n                <div class=\"m-1\">\n                    <ngx-md [data]=\"item.controls.description.value\"></ngx-md>\n                </div>\n            </div>\n    \n\n            <div class=\"box-content\"\n                *ngIf=\"!data?.isRefreshing && dataResult?.columns?.length > 0 && dataResult?.data?.length > 0; else elseBlock\">\n\n                <dexih-table *ngIf=\"view.viewType == eViewType.Table\" [enableMultiSelect]=\"false\" [enableResponsive]=\"false\"\n                    [enableSaveCsv]=\"false\" [enableFilter]=\"false\" [columns]=\"dataResult.columns\" [data]=\"dataRows\">\n                </dexih-table>\n\n                <div class=\"h-100\">\n                <chart-view [responsive]=\"true\" *ngIf=\"view.viewType == eViewType.Chart\" [columns]=\"dataResult.columns\"\n                    [data]=\"dataRows\" [config]=\"view.chartConfig\">\n                </chart-view>\n            </div>\n            </div>\n            <ng-template #elseBlock>\n                <div class=\"alert alert-info\" (click)=\"refresh()\">\n                    <i class=\"fa fa-warning\"></i>\n                    Select to refresh the view.\n                </div>\n            </ng-template>\n        </ng-template>\n    </div>\n</ng-template>","import { Injectable, OnDestroy, OnInit, EventEmitter } from '@angular/core';\nimport { AbstractControl, FormArray, FormBuilder, FormControl, FormGroup, ValidatorFn, Validators, AsyncValidatorFn, ValidationErrors } from '@angular/forms';\nimport { BehaviorSubject, Observable, Subscription, combineLatest} from 'rxjs';\n\nimport { AuthService } from '../+auth/auth.service';\nimport { eLogLevel, LogFactory } from '../../logging';\nimport { InputOutputColumns } from './hub.lineage.models';\nimport {\n  HubCache,\n  eMappingStatus,\n  sharedObjectProperties,\n  SharedObjectProperty,\n  DexihInputParameter,\n  DataCache,\n} from './hub.models';\nimport { HubService } from './hub.service';\nimport { eImportAction, Import, DexihConnection, DexihTable, DexihTableColumn, eTypeCode,\n   DexihFileFormat, DexihView, DexihDashboard, DexihDashboardItem, DexihApi, DexihColumnValidation,\n   DexihCustomFunction, DexihCustomFunctionParameter, DexihHubVariable, DexihDatalinkTest,\n   DexihDatalinkTestStep, DexihDatalinkTestTable, DexihTrigger, DexihDatalinkStep, DexihDatalinkDependency,\n   DexihDatalinkStepColumn, DexihDatajob, DexihRemoteAgentHub, DexihDatalink, DexihDatalinkColumn,\n   DexihDatalinkTransform, DexihDatalinkTransformItem, DexihFunctionParameter, DexihFunctionArrayParameter,\n   DexihDatalinkProfile, DexihDatalinkTarget, DexihDatalinkTable,\n   eSourceType, eSharedObjectType, DexihListOfValues, InputParameterBase,\n   eDataObjectType, ListOfValuesItem, eTransformItemType, DexihTag, DexihViewParameter } from '../shared/shared.models';\nimport { filter } from 'rxjs/operators';\n\n@Injectable()\nexport class HubFormsService implements OnDestroy {\n  private hubCache: HubCache;\n\n  private _hubCacheSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private _valueChangesSubscription: Subscription;\n\n  private _connectionChangesSubscription1: Subscription;\n  private _connectionChangesSubscription2: Subscription;\n  private _connectionChangesSubscription3: Subscription;\n  private _tableChangesSubscription1: Subscription;\n  private _tableChangesSubscription2: Subscription;\n  private _tableColumnChangesSubscription1: Subscription;\n  private _tableColumnChangesSubscription2: Subscription;\n  private _tableColumnChangesSubscription3: Subscription;\n  private _datalinkChangesSubscription1: Subscription;\n  private _datalinkChangesSubscription2: Subscription;\n  private _datalinkChangesSubscription3: Subscription;\n  private _datalinkTestChangesSubscription: Subscription;\n  private _genericParameterSubscription: Subscription;\n  private _datalinkTargetChanges: Subscription[] = [];\n  private _parameterChanges: Subscription[] = [];\n\n  public currentForm: FormGroup;\n  private _currentFormObservable = new BehaviorSubject<FormGroup>(null);\n  public formErrors = {};\n  public hasChanged = false;\n  public formSaving = false;\n  public showAllErrors = false;\n  public IgnoreFormChange = false;\n  private ignoreHubCacheChange = false; // used to avoid recursive loop in the hubCacheChange subscription.\n  private formChangeCount = 0;\n\n  private updateDate: Date;\n\n  private saveMethod: string;\n  private property: SharedObjectProperty;\n  private formGroupFunc: (item) => void\n  private valueMethod: string;\n\n  private logger = new LogFactory('hub.forms.service');\n\n  validationMessages = {\n    'required': 'A value is required.',\n    'duplicateName': 'The value is already being used.',\n    'dataType': 'The data types are inconsistent.',\n    'invalidClass': 'The function method could not be found'\n  };\n\n  validationFieldMessages = {\n\n  };\n\n  constructor(\n    private fb: FormBuilder,\n    private hubService: HubService,\n    private authService: AuthService,\n\n  ) {\n    this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n      this.hubCache = hubCache\n    });\n  }\n\n  ngOnDestroy() {\n    this.clearFormSubscriptions();\n\n    this.currentForm = null;\n    this.updateDate = null;\n    this.formErrors = {};\n    this.hasChanged = false;\n    this.formSaving = false;\n    this.showAllErrors = false;\n    this.IgnoreFormChange = false;\n    // this.ignoreHubCacheChange = false; // used to avoid recursive loop in the hubCacheChange subscription.\n    this.formChangeCount = 0;\n  }\n\n  clearFormSubscriptions() {\n    this.logger.LogC(() => `clearFormSubscriptions started`, eLogLevel.Trace);\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    // if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._connectionChangesSubscription1) { this._connectionChangesSubscription1.unsubscribe(); }\n    if (this._connectionChangesSubscription2) { this._connectionChangesSubscription2.unsubscribe(); }\n    if (this._connectionChangesSubscription3) { this._connectionChangesSubscription3.unsubscribe(); }\n    if (this._tableChangesSubscription1) { this._tableChangesSubscription1.unsubscribe(); }\n    if (this._tableChangesSubscription2) { this._tableChangesSubscription2.unsubscribe(); }\n    if (this._tableColumnChangesSubscription1) { this._tableColumnChangesSubscription1.unsubscribe(); }\n    if (this._tableColumnChangesSubscription2) { this._tableColumnChangesSubscription2.unsubscribe(); }\n    if (this._tableColumnChangesSubscription3) { this._tableColumnChangesSubscription3.unsubscribe(); }\n    if (this._datalinkChangesSubscription1) { this._datalinkChangesSubscription1.unsubscribe(); }\n    if (this._datalinkChangesSubscription2) { this._datalinkChangesSubscription2.unsubscribe(); }\n    if (this._datalinkChangesSubscription3) { this._datalinkChangesSubscription3.unsubscribe(); }\n    if (this._datalinkTestChangesSubscription) { this._datalinkTestChangesSubscription.unsubscribe(); }\n    if (this._genericParameterSubscription) { this._genericParameterSubscription.unsubscribe(); }\n    this._datalinkTargetChanges.forEach(c => c.unsubscribe());\n    this._parameterChanges.forEach(c => c.unsubscribe());\n  }\n\n  private addMissing(item: any, form: FormGroup, itemTemplate: any, excludeKeys: string[] = []) {\n    if (!item) { return; }\n\n    let keys = Object.keys(itemTemplate);\n    let existingKeys = Object.keys(form.controls);\n    keys.forEach(key => {\n      if ((excludeKeys.findIndex(c => c === key) === -1)\n        && existingKeys.findIndex(c => c === key) === -1) {\n        let control = new FormControl(key);\n        let value = item[key];\n        if (typeof value === 'undefined') {\n          value = null;\n        }\n        control.setValue(value);\n        form.addControl(key, control);\n      }\n    });\n\n    this.updateDate = item['updateDate'];\n  }\n\n  public startForm(form: FormGroup) {\n    this.logger.LogC(() => `startForm started`, eLogLevel.Trace);\n\n    if (form) {\n      if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n      this._valueChangesSubscription = form.valueChanges.subscribe(data => {\n        this.onValueChanged(data)\n      });\n\n      this.onValueChanged(); // (re)set validation messages now\n    }\n\n    this.currentForm = form;\n    this._currentFormObservable.next(form);\n\n    this.hasChanged = false;\n\n    this.logger.LogC(() => `startForm finished`, eLogLevel.Trace);\n  }\n\n  public getCurrentFormObservable(): Observable<FormGroup> {\n    return this._currentFormObservable.asObservable();\n  }\n\n  // re-create any error messages whenever the form changes.\n  private onValueChanged(data?: any) {\n    if (this.IgnoreFormChange === false) {\n\n      this.logger.LogC(() => `onValueChanged started.  Counter = ${this.formChangeCount++}`, eLogLevel.Trace);\n\n      if (!this.currentForm || !this.currentForm.value) { return; }\n      const form = this.currentForm;\n\n      this.hasChanged = true;\n      this.formErrors = this.getFormErrorMessages(form, this.showAllErrors);\n\n      this.logger.LogC(() => `onValueChanged completed`, eLogLevel.Trace);\n    }\n  }\n\n  public markAsChanged() {\n    if (!this.currentForm || !this.currentForm.value) { return; }\n\n    this.hasChanged = true;\n    this.currentForm.markAsDirty();\n  }\n\n  public showErrors() {\n    this.showAllErrors = true;\n    this.onValueChanged();\n  }\n\n  // returns an object containing any error message for controls contained within the specified form.\n  public getFormErrorMessages(form: FormGroup, showAllErrors: boolean): {} {\n    let formErrors = {};\n\n    if (!form.controls) { return ''; }\n\n    for (const field of Object.keys(form.controls)) {\n      // clear previous error message (if any)\n      formErrors[field] = '';\n      const control = form.get(field);\n\n      // if the control is dirty or flag is set to show all errors.\n      if (control && (control.dirty || showAllErrors)) {\n        if (!control.valid) {\n          if (control instanceof FormArray) {\n\n          } else {\n            const messages = this.validationFieldMessages[field];\n            if (control && control.errors) {\n              for (const key of Object.keys(control.errors)) {\n                if (messages && messages[key]) {\n                  formErrors[field] += messages[key] + ' ';\n                } else if (this.validationMessages[key]) {\n                  formErrors[field] += this.validationMessages[key] + ' ';\n                } else {\n                  let message = this.createErrorMessage(key, control);\n                  formErrors[field] += message + ' ';\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return formErrors;\n  }\n\n  public getErrorMessage(control: AbstractControl): string {\n    if (control && control.errors) {\n      let errorMessage = '';\n\n      for (const key of Object.keys(control.errors)) {\n        if (this.validationMessages[key]) {\n          errorMessage += this.validationMessages[key] + ' ';\n        } else {\n          errorMessage = this.createErrorMessage(key, control);\n        }\n      }\n      return errorMessage;\n    } else {\n      return '';\n    }\n  }\n\n  private createErrorMessage(key: string, control: AbstractControl): string {\n    let message = '';\n    switch (key) {\n      case 'minlength':\n        message = 'Value is ' +\n          control.errors.minlength.actualLength +\n          ' characters long, required minimum length is '\n          + control.errors.minlength.requiredLength + ' characters.';\n        break;\n      case 'maxlength':\n        message = 'Value is ' +\n          control.errors.maxlength.actualLength +\n          ' characters long, required maximum length is '\n          + control.errors.maxlength.requiredLength + ' characters.';\n        break;\n      case 'maxvalue':\n        message = 'Value is ' +\n          control.value +\n          ' required maximum is '\n          + control.errors.maxvalue.required + '.';\n        break;\n      case 'minvalue':\n        message = 'Value is ' +\n          control.value +\n          ' required minimum is '\n          + control.errors.minvalue.required + '.';\n        break;\n      default:\n        message = 'Field error: ' + key;\n    }\n    return message;\n\n  }\n\n  watchChanges(changeClass: eSharedObjectType, keyField: string, description: string, formGroupFunc: (item) => void) {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    // if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n\n    if (this.formSaving) {\n      return;\n    }\n\n    // watch the current form in case it is changed in another session.\n    this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n      if (!this.ignoreHubCacheChange) {\n        this.ignoreHubCacheChange = true;\n        if (hubCacheChange.changeClass === changeClass &&\n          hubCacheChange.data && hubCacheChange.data[keyField] === this.currentForm.value[keyField]) {\n          switch (hubCacheChange.changeType) {\n            case eImportAction.Replace:\n              if (this.currentForm.pristine) {\n                let item = Object.assign({}, hubCacheChange.data);\n                formGroupFunc.call(this, item);\n              } else {\n                this.authService.confirmDialog('The ' + description + ' has changed',\n                  'Another session has updated this ' +\n                  description + ', would you like to discard any changes in this session and update with the new version?')\n                  .then(confirm => {\n                    if (confirm) {\n                      let item = Object.assign({}, hubCacheChange.data);\n                      this.ngOnDestroy() // clear old subscriptions\n                      formGroupFunc.call(this, item);\n                    }\n                  }).catch(reason => {\n\n                  });\n              }\n              break;\n            case eImportAction.Delete:\n              this.authService.confirmDialog('The ' + description + ' has been deleted',\n                'Another session has deleted this ' + description + ', would you like to discard current changes?')\n                .then(confirm => {\n                  if (confirm) {\n                    this.authService.navigateUp();\n                  }\n                }).catch(reason => {\n\n              });\n          }\n        }\n        this.ignoreHubCacheChange = false;\n      }\n    });\n\n    // this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n    //   if (!this.currentForm) { return; }\n\n    //   this.hubCache = hubCache;\n\n    //   let item = hubCache.getCacheItem(changeClass, this.currentForm.value[keyField]);\n\n    //   if (item) {\n    //     // if the version from the cache was updated more recently than current version, prompt user.\n    //     if (this.updateDate && this.updateDate < item.updateDate) {\n    //       this.authService.confirmDialog('The ' + description + ' has changed',\n    //         'This is likely due to a another session changing the ' +\n    //         description + ' whilst this session was disconnected.  ' +\n//         'Would you like to discard the changes and reload the newer version from the server (otherwise this will be created a a copy)?')\n    //         .then(confirm => {\n    //           if (confirm) {\n    //             let newItem = Object.assign({}, item);\n    //             this.ngOnDestroy() // clear old subscriptions\n    //             formGroupFunc.call(this, newItem);\n    //           }\n    //         }).catch(reason => {\n    //           this.currentForm.controls[keyField].setValue(0);\n    //         });\n    //     }\n    //   }\n    // });\n  }\n\n  public async save(navigateUp = false, saveAs = false) {\n    try {\n      if (!saveAs && (this.formSaving || !this.hasChanged)) {\n        return;\n      }\n\n      // if (!this.currentForm.valid) {\n      //   this.showAllErrors = true;\n      //   this.onValueChanged();\n\n      //   let confirm = await this.authService.confirmDialog('There are errors!',\n      //     'There are errors in the current form.  Confirm that would like to save the changes anyhow?');\n      //   if (!confirm) {\n      //     return;\n      //   }\n      // }\n\n      this.formSaving = true;\n\n      let value;\n      if (this.valueMethod) {\n        value = this[this.valueMethod]()\n      } else {\n        value = this.currentForm.getRawValue();\n      }\n\n      if (saveAs) {\n        let name = value.name;\n        while (this.hubCache.hub[this.property.cacheProperty].find(c => c.name === name)) {\n          name = await this.authService.promptDialog('Specify a new name',\n            // tslint:disable-next-line:max-line-length\n            `The name ${name} already exists.  Specify a new name for the ${this.property.displayName} and then select ok to save this as a copy.`,\n            '', name + ' 2');\n\n          if (!name) {\n            return;\n          }\n        }\n\n        value.name = name;\n        value.key = 0;\n      }\n\n      this.ignoreHubCacheChange = true;\n\n      const currentStatus =  value.currentStatus;\n      const entityStatus = value.entityStatus;\n      const previousStatus = value.previousStatus;\n      const runTime = value.runTime;\n\n      // remove status as they will not parse into json.\n      value.currentStatus = null;\n      value.entityStatus = null;\n      value.previousStatus = null;\n      value.runTime = null;\n\n      let result = await this.authService.post('/api/Hub/' + this.saveMethod, {\n        hubKey: this.hubCache.hub.hubKey,\n        value: value\n      }, 'Saving...');\n\n      let import1 = new Import();\n      import1[this.property.property] = [{ importAction: eImportAction.New, item: result }];\n      this.hubService.updateHubChange(import1);\n\n      if (this.formGroupFunc) {\n        // this.ignoreHubCacheChange = true;\n        this.formGroupFunc(result);\n\n        if (this.currentForm.controls.currentStatus) { this.currentForm.controls.currentStatus.setValue(currentStatus); }\n        if (this.currentForm.controls.entityStatus) { this.currentForm.controls.entityStatus.setValue(entityStatus); }\n        if (this.currentForm.controls.previousStatus) { this.currentForm.controls.previousStatus.setValue(previousStatus); }\n        if (this.currentForm.controls.runTime) { this.currentForm.controls.runTime.setValue(runTime); }\n        this.ignoreHubCacheChange = false;\n      }\n\n      this.formSaving = false;\n      this.hasChanged = false;\n\n      if (navigateUp) {\n        this.authService.navigateUp();\n      } else {\n        this.hubService.addHubSuccessMessage('The save operation completed.');\n      }\n    } catch (error) {\n      if (error) {\n        this.hubService.addHubMessage(error);\n        this.currentForm.markAsDirty();\n      }\n    } finally {\n      this.formSaving = false;\n    }\n  }\n\n  public saveLocal() {\n    let value;\n    if (this.valueMethod) {\n      value = this[this.valueMethod]()\n    } else {\n      value = this.currentForm.getRawValue();\n    }\n\n    const cache = this.hubCache;\n    const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n\n    if (this.property.cacheGetMethod) {\n      cache[this.property.cacheGetMethod](value, hub);\n    }\n\n    hub[this.property.cacheProperty].push(value);\n    let filename = this.property.displayName + '-' + value.name + '.json';\n    this.hubService.exportHub(hub, filename);\n  }\n\n  cancel() {\n    if (!this.formSaving) {\n      this.authService.navigateUp();\n    }\n  }\n\n  public getFormErrors(): string {\n    const form = this.currentForm;\n    return this.getFormErrorsRecursive(this.currentForm, 0, 0);\n  }\n\n  private getFormErrorsRecursive(form: FormGroup, depth: number, index: number): string {\n    let message = '';\n\n    for (const field of Object.keys(form.controls)) {\n      const control = form.get(field);\n\n      // if the control is dirty or flag is set to show all errors.\n      if (control && !control.valid) {\n        message += ' '.repeat(depth * 3) + `The control ${field} at position ${index} has the following error(s):<p></p>`;\n        if (control instanceof FormArray) {\n          const formArray = <FormArray>control;\n          formArray.controls.forEach((cont, formIndex) => {\n            message += this.getFormErrorsRecursive(<FormGroup>cont, depth + 1, formIndex);\n          });\n        } else if (control instanceof FormGroup) {\n          message += this.getFormErrorsRecursive(<FormGroup>control, depth + 1, 0);\n        } else {\n          for (const key of Object.keys(control.errors)) {\n            message += ' '.repeat(depth * 3 + 1) + key + ':' + this.createErrorMessage(key, control) + '<p></p>';\n          }\n        }\n      }\n    }\n\n    return message;\n  }\n\n  private stringCompare(value1: string, value2: string): boolean {\n    if (!value1 && !value2) {\n      return true;\n    }\n    if (!value1 || !value2) {\n      return false;\n    }\n\n    return value1.trim().toLowerCase() === value2.trim().toLowerCase();\n  }\n\n  public parameter(parameter: InputParameterBase): FormGroup {\n    let runTime = {showRefresh: parameter.listOfValuesKey > 0, isRefreshing: false, items: []};\n    if (parameter.value) {\n      if (parameter.rank === 0) {\n        runTime.items = [{key: parameter.value, name: parameter.valueDesc}];\n      }\n    }\n\n    const form = this.fb.group({\n      'name': [{value: parameter.name, disabled: parameter['datalinkParameterKey'] > 0 }, [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n      ]],\n      'runTime': [runTime],\n      'datalinkParameterKey': parameter['datalinkParameterKey'] // used specifically for view\n    }\n    );\n\n    this.addMissing(parameter, form, new InputParameterBase());\n\n    let subscription = form.controls.listOfValuesKey.valueChanges.subscribe(value => {\n        form.controls.runTime.setValue({showRefresh: form.controls.listOfValuesKey.value > 0, isRefreshing: false, items: []});\n    });\n    this._parameterChanges.push(subscription);\n\n    let subscription2 = form.controls.rank.valueChanges.subscribe(rank => {\n      let value = form.controls.value.value;\n        if (rank === 0) {\n          if (value && Array.isArray(value)) {\n            if (value.length === 0) {\n              form.controls.value.setValue(null);\n              form.controls.valueDesc.setValue(value[0]);\n            } else {\n              form.controls.value.setValue(value[0]);\n              form.controls.valueDesc.setValue(value[0]);\n            }\n          }\n        }\n\n        if (rank === 1) {\n          if (value && !Array.isArray(value)) {\n            form.controls.value.setValue(null);\n          }\n        }\n      });\n    this._parameterChanges.push(subscription2);\n\n    return form;\n  }\n\n  public connection(connection: DexihConnection) {\n    this.logger.LogC(() => `connection`, eLogLevel.Trace);\n\n    const connectionForm = this.fb.group({\n      'name': [connection.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateConnectionNameValidator()\n      ]],\n      'connectionStringDisplay': [connection.connectionString ? '(Connection string hidden)' : '', [\n      ]],\n      'passwordDisplay': [connection.password ? '**************************' : '', [\n      ]],\n      'connectionStringRaw': ['', [\n      ]],\n      'passwordRaw': ['', [\n      ]],\n    }, { validators: [this.requiredConnectionFields()] }\n    );\n\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Connection);\n    this.saveMethod = 'SaveConnection';\n    this.formGroupFunc = this.connection;\n    this.addMissing(connection, connectionForm, new DexihConnection());\n\n    this.clearFormSubscriptions();\n\n    // whenever the passwordDisplay or connectionStringDisplay changes, write the value to the raw\n    // this allows encrypted values to be loaded, then overwritten when use changes.\n    if (this._connectionChangesSubscription1) { this._connectionChangesSubscription1.unsubscribe(); }\n    this._connectionChangesSubscription1 = connectionForm.controls.passwordDisplay.valueChanges.subscribe(value => {\n      connectionForm.controls.passwordRaw.setValue(value);\n    });\n\n    if (this._connectionChangesSubscription2) { this._connectionChangesSubscription2.unsubscribe(); }\n    this._connectionChangesSubscription2 = connectionForm.controls.connectionStringDisplay.valueChanges.subscribe(value => {\n      connectionForm.controls.connectionStringRaw.setValue(value);\n    });\n\n    this.startForm(connectionForm);\n    this.watchChanges(eSharedObjectType.Connection, 'key', 'Connection', this.connection);\n\n    this.logger.LogC(() => `connection finished`, eLogLevel.Trace);\n  }\n\n  private duplicateConnectionNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihConnections.findIndex(c =>\n          c.key !== this.currentForm.value.key && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  requiredConnectionFields(): ValidatorFn {\n    return (group: FormGroup): { [key: string]: any } => {\n      if (this.currentForm) {\n        const useConnectionString = group.controls['useConnectionString'];\n        const connectionStringDisplay = group.controls['connectionStringDisplay'];\n        const server = group.controls['server'];\n\n        if (!useConnectionString || !connectionStringDisplay || !server) {\n          return;\n        }\n\n        connectionStringDisplay.setErrors(null);\n        server.setErrors(null);\n\n        // if use connection string is selected, connectionString is required.\n        if (useConnectionString.value && !connectionStringDisplay.value) {\n          connectionStringDisplay.setErrors({ 'required': true });\n        }\n\n        // use not connection string, server is required.\n        if (!useConnectionString.value) {\n          if (!server.value) {\n            server.setErrors({ 'required': true });\n          }\n        }\n        return;\n      }\n    };\n  }\n\n  public table(table: DexihTable) {\n    this.clearFormSubscriptions();\n    const tableForm = this.tableForm(table);\n\n    this.formGroupFunc = this.table;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Table);\n    this.saveMethod = 'SaveTable';\n    this.watchChanges(eSharedObjectType.Table, 'tableKey', 'table', this.table);\n    this.startForm(tableForm);\n  }\n\n  public tableForm(table: DexihTable): FormGroup {\n    const tableForm = this.fb.group({\n      'name': [table.name, [\n        Validators.required,\n        Validators.maxLength(250),\n        this.duplicateTableNameValidator()\n      ]],\n      'connectionKey': [table.connectionKey, [\n        Validators.required\n      ]],\n      'logicalName': [table.logicalName, [\n        Validators.required,\n        Validators.maxLength(250)\n      ]],\n      'useLogical': [this.hubCache.defaultTableLogicalName(table.schema, table.name) !== table.logicalName, [\n      ]],\n      'dexihTableColumns': this.fb.array([]),\n    }, { validator: this.requiredTableFields() }\n    );\n\n    let tableColumnsForm = <FormArray>tableForm.controls.dexihTableColumns;\n    table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n      tableColumnsForm.push(this.tableColumn(tableColumnsForm.value, column));\n    });\n\n    if (this._tableChangesSubscription1) { this._tableChangesSubscription1.unsubscribe(); }\n    this._tableChangesSubscription1 = tableForm.controls.useLogical.valueChanges.subscribe(value => {\n      if (!tableForm.controls.useLogical.value) {\n        tableForm.controls.logicalName.setValue(\n          this.hubCache.defaultTableLogicalName(tableForm.controls.schema.value, tableForm.controls.name.value));\n      }\n    });\n\n    if (this._tableChangesSubscription2) { this._tableChangesSubscription2.unsubscribe(); }\n    this._tableChangesSubscription2 = tableForm.controls.name.valueChanges.subscribe(value => {\n      if (!tableForm.controls.useLogical.value) {\n        tableForm.controls.logicalName.setValue(\n          this.hubCache.defaultTableLogicalName(tableForm.controls.schema.value, tableForm.controls.name.value));\n      }\n    });\n\n    this.addMissing(table, tableForm, new DexihTable());\n\n    return tableForm;\n  }\n\n  private duplicateTableNameValidator(): ValidatorFn {\n    // validate no matching tables names in the same connection.\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n\n        const no = this.hubCache.hub.dexihTables\n        .find(c => c.key !== this.currentForm.controls.key.value &&\n            c.isValid && this.stringCompare(c.name, name) && c.connectionKey === this.currentForm.value.connectionKey);\n          return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  requiredTableFields(): ValidatorFn {\n    return (group: FormGroup): { [key: string]: any } => {\n      if (this.currentForm) {\n        const useConnectionString = group.controls['useConnectionString'];\n        const connectionStringDisplay = group.controls['connectionStringDisplay'];\n        const server = group.controls['server'];\n\n        if (!useConnectionString || !connectionStringDisplay || !server) {\n          return;\n        }\n\n        connectionStringDisplay.setErrors(null);\n        server.setErrors(null);\n\n        // if use connection string is selected, connectionString is required.\n        if (useConnectionString.value && !connectionStringDisplay.value) {\n          connectionStringDisplay.setErrors({ 'required': true });\n        }\n\n        // use not connection string, server is required.\n        if (!useConnectionString.value) {\n          if (!server.value) {\n            server.setErrors({ 'required': true });\n          }\n        }\n        return;\n      }\n    };\n  }\n\n\n  tableColumn(siblingColumns: DexihTableColumn[], column: DexihTableColumn): FormGroup {\n    let childColumns = column.childColumns ? column.childColumns : [];\n    let columnForm = this.fb.group({\n      'name': [column.name, [\n        Validators.required,\n        Validators.maxLength(250),\n        this.duplicateTableColumnNameValidator(siblingColumns)\n      ]],\n      'logicalName': [column.logicalName, [\n        Validators.required,\n        Validators.maxLength(250)\n      ]],\n      'precision': [column.precision, [\n        this.columnMinRangeValidator(0),\n        this.columnMaxRangeValidator(30),\n      ]],\n      'scale': [column.scale, [\n        this.columnMinRangeValidator(0),\n        this.columnMaxRangeValidator(30),\n      ]],\n      'useLogical': [column.name !== column.logicalName, [\n      ]],\n      'isString': [column.dataType === eTypeCode.String || column.dataType === eTypeCode.CharArray ? true : false, [\n      ]],\n      'isNumber': [column.dataType === eTypeCode.Double || column.dataType === eTypeCode.Decimal ||\n        column.dataType === eTypeCode.Single ? true : false, [\n      ]],\n      'childColumns': this.fb.array(childColumns.filter(c => c.isValid).map(col => {\n        return this.tableColumn(childColumns, col);\n      })),\n      'runTime': {impact: eMappingStatus, lineage: eMappingStatus}\n    }\n    );\n\n    this.addMissing(column, columnForm, new DexihTableColumn());\n\n    // update isString and isNumber properties automatically when dataType changes.\n    if (this._tableColumnChangesSubscription1) { this._tableColumnChangesSubscription1.unsubscribe(); }\n    this._tableColumnChangesSubscription1 = columnForm.controls.dataType.valueChanges.subscribe(dataType => {\n      if (dataType === eTypeCode.String || dataType === eTypeCode.CharArray) {\n        columnForm.controls.isString.setValue(true);\n      } else {\n        columnForm.controls.isString.setValue(false);\n      }\n\n      if (dataType === eTypeCode.Double || dataType === eTypeCode.Decimal || dataType === eTypeCode.Single) {\n        columnForm.controls.isNumber.setValue(true);\n      } else {\n        columnForm.controls.isNumber.setValue(false);\n      }\n    });\n\n    // match logical name, unless the logical name is changed.\n    if (this._tableColumnChangesSubscription2) { this._tableColumnChangesSubscription2.unsubscribe(); }\n    this._tableColumnChangesSubscription2 = columnForm.controls.useLogical.valueChanges.subscribe(value => {\n      if (!columnForm.controls.useLogical.value) {\n        columnForm.controls.logicalName.setValue(columnForm.controls.name.value);\n      }\n    });\n\n    if (this._tableColumnChangesSubscription3) { this._tableColumnChangesSubscription3.unsubscribe(); }\n    this._tableColumnChangesSubscription3 = columnForm.controls.name.valueChanges.subscribe(value => {\n      if (!columnForm.controls.useLogical.value) {\n        columnForm.controls.logicalName.setValue(columnForm.controls.name.value);\n      }\n    });\n\n    for (const field of Object.keys(columnForm.controls)) {\n      let control = columnForm.controls[field];\n      if (control.validator) {\n        columnForm.controls[field].updateValueAndValidity();\n      }\n    }\n    return columnForm;\n  }\n\n  private duplicateTableColumnNameValidator(columnsArray: DexihTableColumn[]): ValidatorFn {\n    if (!columnsArray) { return null; }\n\n    // validate no matching tables names in the same connection.\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        if (control.parent) {\n          const key = control.parent.value.key;\n          const columnGroup = control.parent.value.columnGroup;\n          if (columnsArray) {\n            const no = columnsArray.findIndex(c =>\n              c.key !== key &&\n              c.columnGroup === columnGroup &&\n              c.isValid &&\n              this.stringCompare(c.name, name)) >= 0;\n            return no ? { 'duplicateName': { name } } : null;\n          }\n        }\n      }\n    };\n  }\n\n  private requiredNotZero(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      const name = control.value;\n      const value = control.value;\n      const no = !value || value === 0;\n      return no ? { 'required': { name } } : null;\n    }\n  }\n\n  private columnMinRangeValidator(min: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      const name = control.value;\n      const column = <FormGroup>control.parent;\n      if (column) {\n        if (column.controls.isNumber.value) {\n          const value = control.value;\n          const no = Number(value) >= min;\n          return no ? null : { 'minvalue': { name, required: min }};\n        } else {\n          return;\n        }\n      }\n    };\n  }\n\n  private columnMaxRangeValidator(max: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      const name = control.value;\n      const column = <FormGroup>control.parent;\n      if (column) {\n        if (column.controls.isNumber.value) {\n          const value = control.value;\n          const no = Number(value) <= max;\n          return no ? null : { 'maxvalue': { name , required: max } };\n        } else {\n          return;\n        }\n      }\n    };\n  }\n\n  public fileFormat(fileFormat: DexihFileFormat) {\n    const fileFormatForm = this.fb.group({\n      'name': [fileFormat.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateFileFormatNameValidator()\n      ]],\n      'quote': [fileFormat.quote, [\n        Validators.maxLength(1)\n      ]],\n    }\n    );\n\n    this.formGroupFunc = this.fileFormat;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.FileFormat);\n    this.saveMethod = 'SaveFileFormat';\n    this.addMissing(fileFormat, fileFormatForm, new DexihFileFormat());\n    this.clearFormSubscriptions();\n    this.watchChanges(eSharedObjectType.FileFormat, 'fileFormatKey', 'file format', this.fileFormat);\n    this.startForm(fileFormatForm);\n  }\n\n  duplicateFileFormatNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihFileFormats.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public view(view: DexihView) {\n\n    this.clearFormSubscriptions();\n\n    let parameters = view.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n    const viewForm = this.fb.group({\n      'name': [view.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateViewNameValidator()\n      ]],\n      'sourceType': [view.sourceType, [\n        Validators.required,\n      ]],\n      'sourceDatalinkKey': [view.sourceDatalinkKey],\n      'sourceTableKey': [view.sourceTableKey],\n      'parameters': this.fb.array(parameters),\n    }, { validator: this.validateViewSource() }\n    );\n\n    this.formGroupFunc = this.view;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.View);\n    this.saveMethod = 'SaveView';\n    this.addMissing(view, viewForm, new DexihView());\n    this.watchChanges(eSharedObjectType.View, 'viewKey', 'view', this.view);\n    this.startForm(viewForm);\n  }\n\n  duplicateViewNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihViews.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  private validateViewSource() {\n    return (group: FormGroup) => {\n      let sourceType = group.get('sourceType').value;\n      let sourceTableKey = group.get('sourceTableKey');\n      let sourceDatalinkKey = group.get('sourceDatalinkKey');\n\n      sourceTableKey.setErrors(null);\n      sourceDatalinkKey.setErrors(null);\n\n      if (sourceType === eDataObjectType.Table) {\n        if (!sourceTableKey.value) {\n          return sourceTableKey.setErrors({ required: true });\n        }\n      } else if (sourceType === eDataObjectType.Datalink) {\n        if (!sourceDatalinkKey.value) {\n          return sourceDatalinkKey.setErrors({ required: true });\n        }\n      }\n    };\n  }\n\n  public dashboard(dashboard: DexihDashboard) {\n    this.clearFormSubscriptions();\n\n    let parameters = dashboard.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n\n    const form = this.fb.group({\n      'name': [dashboard.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateDashboardNameValidator()\n      ]],\n      'dexihDashboardItems': this.fb.array([]),\n      'parameters': this.fb.array(parameters),\n      'runTime': {showEdit: false, lock: true},\n    }, { }\n    );\n\n    let dashboardItemsForm = <FormArray>form.controls.dexihDashboardItems;\n    dashboard.dexihDashboardItems.filter(c => c.isValid).forEach(item => {\n      dashboardItemsForm.push(this.dashboardItem(item));\n    });\n\n    this.formGroupFunc = this.dashboard;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Dashboard);\n    this.saveMethod = 'SaveDashboard';\n    this.addMissing(dashboard, form, new DexihDashboard());\n    this.watchChanges(eSharedObjectType.Dashboard, 'dashboardKey', 'dashboard', this.dashboard);\n    this.startForm(form);\n  }\n\n  duplicateDashboardNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihDashboards.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public dashboardItem(dashboardItem: DexihDashboardItem): FormGroup {\n    let parameters = dashboardItem.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n    const form = this.fb.group({\n      'name': [dashboardItem.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n      ]],\n      'parameters': this.fb.array(parameters),\n      'runTime': {resizeEvent: new EventEmitter<any[]>(), data: new DataCache()},\n    }\n    );\n\n    this.addMissing(dashboardItem, form, new DexihDashboardItem());\n\n    return form;\n  }\n\n  // updates the parameters when a new dashboard item is created.\n  public updateDashboardItemView(item: FormGroup) {\n    let views = this.hubCache.hub.dexihViews;\n    if (views && item.controls.viewKey.value) {\n        let view = this.hubCache.hub.dexihViews.find(c => c.key === item.controls.viewKey.value);\n        if (this.view) {\n            item.controls.name.setValue(this.view.name);\n            item.controls.runTime.value.data = new DataCache();\n\n            // reset parameters.\n            let formParameters = <FormArray> item.controls.parameters;\n            let currentParameters = <DexihInputParameter[]> formParameters.value;\n\n            formParameters.clear();\n\n            let parameters = <InputParameterBase[]> view.parameters;\n            if (view.sourceType === eDataObjectType.Datalink) {\n                let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === view.sourceDatalinkKey);\n                if (datalink && datalink.parameters) {\n                    parameters = parameters.concat(datalink.parameters);\n                }\n            }\n\n            parameters.forEach(parameter => {\n                let currentParameter = currentParameters.find( c => c.name === parameter.name);\n                let newParameter = new InputParameterBase();\n                if (currentParameter) {\n                    newParameter.name = currentParameter.name;\n                    newParameter.value = currentParameter.value;\n                } else {\n                    newParameter.name = parameter.name;\n                    newParameter.value = parameter.value;\n                    newParameter.listOfValuesKey = parameter.listOfValuesKey;\n                }\n                let newFormParameter = this.parameter(newParameter);\n                formParameters.push(newFormParameter);\n            });\n        }\n    }\n}\n\n  public listOfValuesItem(item: ListOfValuesItem) {\n    const form = this.fb.group({\n      'key': [item.key, [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n      ]],\n    }\n    );\n\n    this.addMissing(item, form, new ListOfValuesItem());\n\n    return form;\n  }\n\n  public listOfValues(listOfValues: DexihListOfValues) {\n\n    let staticData: FormGroup[]\n    if (listOfValues.staticData) {\n      staticData = listOfValues.staticData.map(item => {\n        return this.listOfValuesItem(item);\n      });\n    } else {\n      staticData = [];\n    }\n\n    const lovForm = this.fb.group({\n      'name': [listOfValues.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateLovNameValidator()\n      ]],\n      'sourceType': [listOfValues.sourceType, [\n        Validators.required,\n      ]],\n      'sourceDatalinkKey': [listOfValues.sourceDatalinkKey],\n      'sourceTableKey': [listOfValues.sourceTableKey],\n      'staticData': this.fb.array(staticData),\n    }, { validator: this.validateViewSource() }\n    );\n\n    this.formGroupFunc = this.listOfValues;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.ListOfValues);\n    this.saveMethod = 'SaveListOfValues';\n    this.addMissing(listOfValues, lovForm, new DexihListOfValues());\n    this.clearFormSubscriptions();\n    this.watchChanges(eSharedObjectType.ListOfValues, 'listOfValuesKey', 'listOfValues', this.listOfValues);\n    this.startForm(lovForm);\n  }\n\n  duplicateLovNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihListOfValues.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public api(api: DexihApi) {\n    this.clearFormSubscriptions();\n\n    let parameters = api.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n    const apiForm = this.fb.group({\n      'name': [api.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n      ]],\n      'sourceType': [api.sourceType, [\n        Validators.required,\n      ]],\n      'sourceDatalinkKey': [api.sourceDatalinkKey],\n      'sourceTableKey': [api.sourceTableKey],\n      'parameters': this.fb.array(parameters),\n    }, { validator: this.validateDatalinkTable() }\n    );\n\n    this.formGroupFunc = this.api;\n    this.saveMethod = 'SaveApi';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Api);\n    this.addMissing(api, apiForm, new DexihApi());\n    this.watchChanges(eSharedObjectType.Api, 'apiKey', 'api', this.api);\n    this.startForm(apiForm);\n  }\n\n  public validation(validation: DexihColumnValidation) {\n    const validationForm = this.fb.group({\n      'name': [validation.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateValidationNameValidator()\n      ]],\n    }\n    );\n\n    this.formGroupFunc = this.validation;\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.ColumnValidation);\n    this.saveMethod = 'SaveColumnValidation';\n    this.addMissing(validation, validationForm, new DexihColumnValidation());\n    this.watchChanges(eSharedObjectType.ColumnValidation, 'key', 'column validation', this.validation);\n    this.startForm(validationForm);\n  }\n\n  duplicateValidationNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihColumnValidations.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid\n          && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public customFunction(customFunction: DexihCustomFunction) {\n    const customFunctionForm = this.fb.group({\n      'name': [customFunction.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateCustomFunctionNameValidator()\n      ]],\n      'dexihCustomFunctionParameters': this.fb.array(customFunction.dexihCustomFunctionParameters.filter(c => c.isValid).map(parameter => {\n        return this.customFunctionParametersFormGroup(parameter);\n      })),\n\n    }\n    );\n\n    this.formGroupFunc = this.customFunction;\n    this.saveMethod = 'SaveCustomFunction';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.CustomFunction);\n    this.addMissing(customFunction, customFunctionForm, new DexihCustomFunction());\n    this.watchChanges(eSharedObjectType.CustomFunction, 'customFunctionKey', 'custom function', this.customFunction);\n    this.startForm(customFunctionForm);\n  }\n\n  duplicateCustomFunctionNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihCustomFunctions.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid\n          && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public customFunctionParametersFormGroup(parameter: DexihCustomFunctionParameter): FormGroup {\n    const parameterForm = this.fb.group({\n      'name': [parameter.name, [\n        Validators.required,\n        Validators.minLength(1),\n        Validators.maxLength(50),\n      ]],\n    });\n\n    this.addMissing(parameter, parameterForm, new DexihCustomFunctionParameter());\n    return parameterForm;\n  }\n\n  public hubVariable(hubVariable: DexihHubVariable) {\n    const hubVariableForm = this.fb.group({\n      'name': [hubVariable.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateHubVariableNameValidator()\n      ]],\n      'valueRaw': [hubVariable.isEncrypted ? null : hubVariable.value]\n    }\n    );\n\n    this.formGroupFunc = this.hubVariable;\n    this.saveMethod = 'SaveHubVariable';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.HubVariable);\n    this.addMissing(hubVariable, hubVariableForm, new DexihHubVariable());\n    this.watchChanges(eSharedObjectType.HubVariable, 'hubVariable', 'hub variable', this.hubVariable);\n    this.startForm(hubVariableForm);\n  }\n\n  duplicateHubVariableNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihHubVariables.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid\n          && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public tag(tag: DexihTag) {\n    const form = this.fb.group({\n      'name': [tag.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateTagNameValidator()\n      ]],\n    }\n    );\n\n    this.formGroupFunc = this.tag;\n    this.saveMethod = 'SaveTag';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Tags);\n    this.addMissing(tag, form, new DexihTag());\n    this.watchChanges(eSharedObjectType.Tags, 'tag', 'hub variable', this.tag);\n    this.startForm(form);\n  }\n\n  duplicateTagNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihTags.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid\n          && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public datalinkTest(datalinkTest: DexihDatalinkTest) {\n    const form = this.fb.group({\n      'name': [datalinkTest.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateDatalinkTestNameValidator()\n      ]],\n      'dexihDatalinkTestSteps': this.fb.array([]),\n    });\n\n    let testStepsForm = <FormArray>form.controls.dexihDatalinkTestSteps;\n    datalinkTest.dexihDatalinkTestSteps.filter(c => c.isValid).forEach(step => {\n      testStepsForm.push(this.datalinkTestStep(step));\n    });\n\n    this.formGroupFunc = this.datalinkTest;\n    this.saveMethod = 'SaveDatalinkTest';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.DatalinkTest);\n    this.addMissing(datalinkTest, form, new DexihDatalinkTest());\n    this.watchChanges(eSharedObjectType.DatalinkTest, 'datalinkTest', 'datalink test', this.datalinkTest);\n    this.startForm(form);\n  }\n\n  duplicateDatalinkTestNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihDatalinkTests.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid\n          && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  public datalinkTestStep(step: DexihDatalinkTestStep): FormGroup {\n    const form = this.fb.group({\n      'dexihDatalinkTestTables': this.fb.array([]),\n    });\n\n    let testTablesForm = <FormArray>form.controls.dexihDatalinkTestTables;\n    step.dexihDatalinkTestTables.filter(c => c.isValid).forEach(table => {\n      testTablesForm.push(this.datalinkTestTable(table));\n    });\n\n    this.addMissing(step, form, new DexihDatalinkTestStep());\n\n    if (this._datalinkTestChangesSubscription) {this._datalinkTestChangesSubscription.unsubscribe(); }\n    this._datalinkTestChangesSubscription = form.controls.datalinkKey.valueChanges.subscribe(datalinkKey => {\n      let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n\n      while (testTablesForm.length > 0) {testTablesForm.removeAt(0); }\n\n      if (datalink.sourceDatalinkTable.sourceTableKey) {\n          let testTable = new DexihDatalinkTestTable();\n          testTable.tableKey = datalink.sourceDatalinkTable.sourceTableKey;\n          testTable.isValid = true;\n          testTablesForm.push(this.datalinkTestTable(testTable));\n      }\n\n      datalink.dexihDatalinkTransforms.filter(c => c.joinDatalinkTable && c.joinDatalinkTable.sourceTableKey).forEach(transform => {\n          let testTable = new DexihDatalinkTestTable();\n          testTable.tableKey = transform.joinDatalinkTable.sourceTableKey;\n          testTable.isValid = true;\n          testTablesForm.push(this.datalinkTestTable(testTable));\n      });\n    });\n    return form;\n  }\n\n  public datalinkTestTable(table: DexihDatalinkTestTable): FormGroup {\n    const form = this.fb.group({});\n    this.addMissing(table, form, new DexihDatalinkTestTable());\n    return form;\n  }\n\n\n\n  /// ***********\n  /// Datajob forms\n  /// ***********\n\n  public triggerFormGroup(trigger: DexihTrigger): FormGroup {\n    let triggerForm = this.fb.group({\n    });\n\n    this.addMissing(trigger, triggerForm, new DexihTrigger());\n    return triggerForm;\n  }\n\n  public datalinkStepFormGroup(datajobForm: FormGroup, step: DexihDatalinkStep): FormGroup {\n\n    let parameters = step.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n    let stepForm = this.fb.group({\n      'key': [step.key, [\n      ]],\n      'name': [step.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateStepNameValidator(datajobForm)\n      ]],\n      'datalinkKey': [step.datalinkKey, [\n        Validators.required\n      ]],\n      'dexihDatalinkDependencies': this.fb.array(step.dexihDatalinkDependencies.filter(c => c.isValid).map(dep => {\n        return this.datalinkDependencyFormGroup(dep);\n      })),\n      'dexihDatalinkStepColumns': this.fb.array(step.dexihDatalinkStepColumns.filter(c => c.isValid).map(col => {\n        return this.datalinkStepColumnFormGroup(col);\n      })),\n      'parameters': this.fb.array(parameters)\n    });\n\n    this.addMissing(step, stepForm, new DexihDatalinkStep());\n    return stepForm;\n  }\n\n  public datalinkDependencyFormGroup(dep: DexihDatalinkDependency): FormGroup {\n    let depForm = this.fb.group({\n    });\n\n    this.addMissing(dep, depForm, new DexihDatalinkDependency());\n    return depForm;\n  }\n\n  public datalinkStepColumnFormGroup(col: DexihDatalinkStepColumn): FormGroup {\n    let colForm = this.fb.group({\n    });\n\n    this.addMissing(col, colForm, new DexihDatalinkStepColumn());\n    return colForm;\n  }\n\n  public datajob(datajob: DexihDatajob): void {\n    this.clearFormSubscriptions();\n\n    const triggers = datajob.dexihTriggers.filter(c => c.isValid).map(trigger => {\n      return this.triggerFormGroup(trigger);\n    });\n\n    let parameters = datajob.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n    const stepsArray = this.fb.array([]);\n\n    const datajobForm = this.fb.group({\n      'key': [datajob.key, [\n      ]],\n      'name': [datajob.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateDatajobNameValidator()\n      ]],\n      'auditConnectionKey': [datajob.auditConnectionKey, [\n        this.requiredNotZero()\n      ]],\n      'failAction': [datajob.failAction, [\n        Validators.required\n      ]],\n      'dexihDatalinkSteps': stepsArray,\n      'dexihTriggers': this.fb.array(triggers),\n      'parameters': this.fb.array(parameters)\n    });\n\n    datajob.dexihDatalinkSteps.filter(c => c.isValid).forEach(step => {\n      stepsArray.push(this.datalinkStepFormGroup(datajobForm, step));\n    });\n\n    this.formGroupFunc = this.datajob;\n    this.saveMethod = 'SaveDatajob';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Datajob);\n    this.addMissing(datajob, datajobForm, new DexihDatajob());\n    this.watchChanges(eSharedObjectType.Datajob, 'key', 'data job', this.datajob);\n    this.startForm(datajobForm);\n  }\n\n  duplicateDatajobNameValidator(): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihDatajobs.findIndex(c =>\n          c.key !== this.currentForm.controls.key.value && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n\n  duplicateStepNameValidator(datajobForm: FormGroup): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        if (control && control.parent) {\n          let key = control.parent.controls['key'].value;\n          const no = datajobForm.value.dexihDatalinkSteps.findIndex(c =>\n            c.key !== key && c.isValid && c.name === name) >= 0;\n          return no ? { 'duplicateName': { name } } : null;\n        }\n      }\n    };\n  }\n\n  public remoteAgent(remoteAgent: DexihRemoteAgentHub) {\n    const remoteAgentForm = this.fb.group({\n    }\n    );\n\n    // this.formGroupFunc = this.remoteAgentSettings;\n    // this.saveMethod = 'SaveRemoteAgent';\n    // this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.RemoteAgent);\n    this.clearFormSubscriptions();\n    this.addMissing(remoteAgent, remoteAgentForm, new DexihRemoteAgentHub());\n    this.startForm(remoteAgentForm);\n  }\n\n  //\n  //\n  // Datalink Edit Forms\n  //\n  //\n\n  // gets the datalink object with embedded data stripped off.\n  public getDatalinkValue(): DexihDatalink {\n    const datalink = this.currentForm.value;\n\n    // causes problems with target table as output columns seems to get set null in the form.\n    // datalink.dexihDatalinkTransforms.forEach(t => {\n    //   t.inputColumns = null;\n    //   t.outputColumns = null;\n    // });\n\n    // datalink.targetTable = null;\n\n    return datalink;\n  }\n\n  datalinkTableColumn(siblingColumns: DexihDatalinkColumn[], column: DexihDatalinkColumn): FormGroup {\n    let childColumns = column.childColumns ? column.childColumns : [];\n\n    let columnForm = this.fb.group({\n      'name': [column.name, [\n        Validators.required,\n        Validators.maxLength(250),\n        this.duplicateDatalinkColumnNameValidator(siblingColumns)\n      ]],\n      'logicalName': [column.logicalName, [\n        Validators.required,\n        Validators.maxLength(250)\n      ]],\n      'precision': [column.precision, [\n        this.columnMinRangeValidator(0),\n        this.columnMaxRangeValidator(30),\n      ]],\n      'scale': [column.scale, [\n        this.columnMinRangeValidator(0),\n        this.columnMaxRangeValidator(30),\n      ]],\n      'useLogical': [column.name !== column.logicalName, [\n      ]],\n      'isString': [column.dataType === eTypeCode.String  || column.dataType === eTypeCode.CharArray ? true : false, [\n      ]],\n      'isNumber': [column.dataType === eTypeCode.Double || column.dataType === eTypeCode.Decimal ||\n        column.dataType === eTypeCode.Single ? true : false, [\n      ]],\n      'childColumns': this.fb.array(childColumns.filter(c => c.isValid).map(col => {\n        return this.datalinkTableColumn(childColumns, col);\n      })),\n      'runTime': {impact: eMappingStatus, lineage: eMappingStatus}\n    });\n\n    this.addMissing(column, columnForm, new DexihDatalinkColumn());\n\n    // update isString and isNumber properties automatically when dataType changes.\n    if (this._tableColumnChangesSubscription1) { this._tableColumnChangesSubscription1.unsubscribe(); }\n    this._tableColumnChangesSubscription1 = columnForm.controls.dataType.valueChanges.subscribe(dataType => {\n      if (dataType === eTypeCode.String  || dataType === eTypeCode.CharArray) {\n        columnForm.controls.isString.setValue(true);\n      } else {\n        columnForm.controls.isString.setValue(false);\n      }\n\n      if (dataType === eTypeCode.Double || dataType === eTypeCode.Decimal || dataType === eTypeCode.Single) {\n        columnForm.controls.isNumber.setValue(true);\n      } else {\n        columnForm.controls.isNumber.setValue(false);\n      }\n    });\n\n    // match logical name, unless the logical name is changed.\n    if (this._tableColumnChangesSubscription2) { this._tableColumnChangesSubscription2.unsubscribe(); }\n    this._tableColumnChangesSubscription2 = columnForm.controls.useLogical.valueChanges.subscribe(value => {\n      if (!columnForm.controls.useLogical.value) {\n        columnForm.controls.logicalName.setValue(columnForm.controls.name.value);\n      }\n    });\n\n    if (this._tableColumnChangesSubscription3) { this._tableColumnChangesSubscription3.unsubscribe(); }\n    this._tableColumnChangesSubscription3 = columnForm.controls.name.valueChanges.subscribe(value => {\n      if (!columnForm.controls.useLogical.value) {\n        columnForm.controls.logicalName.setValue(columnForm.controls.name.value);\n      }\n    });\n\n    for (const field of Object.keys(columnForm.controls)) {\n      let control = columnForm.controls[field];\n      if (control.validator) {\n        columnForm.controls[field].updateValueAndValidity();\n      }\n    }\n    return columnForm;\n  }\n\n  private duplicateDatalinkColumnNameValidator(columnsArray: DexihDatalinkColumn[]): ValidatorFn {\n    // validate no matching tables names in the same connection.\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (!columnsArray) { return null; }\n      if (this.currentForm) {\n        const name = control.value;\n        if (control.parent) {\n          const key = control.parent.value.key;\n          if (columnsArray) {\n            const no = columnsArray.findIndex(c =>\n              c.key !== key && c.isValid && this.stringCompare(c.name, name)) >= 0;\n            return no ? { 'duplicateName': { name } } : null;\n          }\n        }\n      }\n    };\n  }\n\n  public datalinkTransformFormGroup(transform: DexihDatalinkTransform): FormGroup {\n    const transformForm = this.fb.group({\n      'datalinkTransformKey': [transform.key, [\n      ]],\n      'name': [transform.name, [\n        // Validators.required,\n        // Validators.minLength(3),\n        // Validators.maxLength(50),\n      ]],\n      'datalinkKey': [transform.datalinkKey, [\n        Validators.required\n      ]],\n      'joinDatalinkTable': transform.joinDatalinkTable ? this.sourceDatalinkTableFormGroup(transform.joinDatalinkTable) : null,\n      'nodeDatalinkColumn': transform.nodeDatalinkColumn ? transform.nodeDatalinkColumn : null,\n      'isValid': true,\n\n      'runTime': {inputColumns: null, outputColumns: null, transformColumns: null},\n    });\n\n    transformForm.addControl('dexihDatalinkTransformItems', this.fb.array(transform.dexihDatalinkTransformItems\n      .filter(c => c.isValid).map(item => {\n        return this.datalinkDatalinkTransformItemFormGroup(transformForm, item);\n      })));\n\n    this.addMissing(transform, transformForm, new DexihDatalinkTransform());\n    return transformForm;\n  }\n\n  // public datalinkTransformTableFormGroup(table: DexihTable): FormGroup {\n  //   if (table) {\n  //     const tableForm = this.fb.group({\n  //       'isInternal': true,\n  //       'dexihTableColumns': this.fb.array([]),\n  //     });\n\n  //     let tableColumnsForm = <FormArray>tableForm.controls.dexihTableColumns;\n  //     table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n  //       tableColumnsForm.push(this.tableColumn(tableForm, column));\n  //     });\n\n  //     this.addMissing(table, tableForm);\n  //     return tableForm;\n  //   } else {\n  //     return null;\n  //   }\n  // }\n\n  public  datalinkDatalinkTransformItemFormGroup(datalinkTransformForm: FormGroup, item: DexihDatalinkTransformItem): FormGroup {\n    const itemForm = this.fb.group({\n      'dexihFunctionParameters': this.fb.array(item.dexihFunctionParameters.filter(c => c.isValid).map(parameter => {\n        return this.datalinkFunctionParametersFormGroup(parameter);\n      })),\n      // 'standardFunction': item.standardFunction,\n      'targetDatalinkColumn': [item.targetDatalinkColumn, [\n        this.duplicateOutputColumn(datalinkTransformForm)\n      ]],\n      'functionClassName': [item.functionClassName],\n      'functionMethodName': [item.functionMethodName],\n      'isValid': true\n    }, {asyncValidators: [this.invalidClassName()]});\n\n    this.addMissing(item, itemForm, new DexihDatalinkTransformItem());\n\n    // itemForm.controls.functionMethodName.setAsyncValidators(this.invalidClassName(itemForm));\n\n    // when ever generic parameter changes, change all underlying types.\n    if (this._genericParameterSubscription) { this._genericParameterSubscription.unsubscribe(); }\n    this._genericParameterSubscription = itemForm.controls.genericTypeCode.valueChanges.subscribe(() => {\n      let typeCode = itemForm.controls.genericTypeCode.value;\n      let parameters = <FormArray> itemForm.controls.dexihFunctionParameters;\n      parameters.controls.filter(c => c.value.isGeneric).forEach(p => {\n        let param = <FormGroup>p;\n        param.controls.dataType.setValue(typeCode);\n        let arrayParams = <FormArray> param.controls.arrayParameters;\n        arrayParams.controls.forEach(ap => {\n          let aParam = <FormGroup>ap;\n          aParam.controls.dataType.setValue(typeCode);\n        });\n      });\n    });\n\n\n    return itemForm;\n  }\n\n  duplicateOutputColumn(datalinkTransformForm: FormGroup): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const column = <DexihDatalinkColumn>control.value;\n        const transformColumns = <DexihDatalinkColumn[]>datalinkTransformForm.controls.runTime.value.transformColumns;\n        if (transformColumns && column) {\n          const no = transformColumns.filter(c => c.name === column.name).length > 1;\n          return no ? { 'duplicateName': { name } } : null;\n        } else {\n          return null;\n        }\n      }\n    };\n  }\n\n  invalidClassName(): AsyncValidatorFn {\n    return (control: AbstractControl): Promise<ValidationErrors | null> => {\n      const datalinkTransformItemForm = <FormGroup>control;\n      datalinkTransformItemForm.controls.functionMethodName.setErrors(null);\n      if (this.currentForm && datalinkTransformItemForm.controls.transformItemType\n        && datalinkTransformItemForm.controls.transformItemType.value === eTransformItemType.BuiltInFunction ) {\n        return new Promise((resolve, reject) => {\n          this.hubService.GetFunctionReference(datalinkTransformItemForm.value).then(func => {\n          if (func) {\n            resolve(null);\n          } else {\n            const value = datalinkTransformItemForm.controls.functionClassName.value + '.' +\n              datalinkTransformItemForm.controls.functionMethodName.value;\n              datalinkTransformItemForm.controls.functionMethodName.setErrors({ 'invalidClass': { value } });\n            resolve({ 'invalidClass': { value } });\n          }\n        }).catch(reason => {\n          reject(reason);\n        });\n      });\n      } else {\n        return Promise.resolve(null);\n      }\n    };\n  }\n\n  public datalinkFunctionParametersFormGroup(parameter: DexihFunctionParameter): FormGroup {\n    const parameterForm = this.fb.group({\n      // 'name': [, [ // used for adding new columns\n      // ]],\n      'datalinkColumn': parameter.datalinkColumn,\n      'runTime': parameter['runTime'],\n      'arrayParameters': this.fb.array(parameter.arrayParameters.filter(c => c.isValid).map(p => {\n        return this.datalinkFunctionArrayParametersFormGroup(p);\n      })),\n    }, { validator: this.inconsistentDataType()});\n\n    this.addMissing(parameter, parameterForm, new DexihFunctionParameter());\n\n    return parameterForm;\n  }\n\n  public datalinkFunctionArrayParametersFormGroup(parameter: DexihFunctionArrayParameter): FormGroup {\n    const parameterForm = this.fb.group({\n      // 'name': [, [ // used for adding new columns\n      // ]],\n      'datalinkColumn': parameter.datalinkColumn,\n      'runTime': parameter['runTime'],\n    }, { validator: this.inconsistentDataType()});\n\n    this.addMissing(parameter, parameterForm, new DexihFunctionArrayParameter());\n\n    return parameterForm;\n  }\n\n  inconsistentDataType(): ValidatorFn {\n    return (group: FormGroup): { [key: string]: any } => {\n      if (this.currentForm) {\n        const datalinkColumn = group.controls.datalinkColumn;\n        if (datalinkColumn && datalinkColumn.value) {\n          const dataType = datalinkColumn.value.dataType;\n          const parameterDataType = group.controls.dataType?.value;\n          if (dataType !== parameterDataType) {\n            datalinkColumn.setErrors({'dataType': { dataType }});\n            return { 'dataType': { dataType }};\n          } else {\n            datalinkColumn.setErrors(null);\n          }\n        }\n      }\n      return null;\n    };\n  }\n\n  public datalinkProfileFormGroup(profile: DexihDatalinkProfile): FormGroup {\n    const profileForm = this.fb.group({\n      'isValid': true\n    });\n\n    this.addMissing(profile, profileForm, new DexihDatalinkProfile());\n    return profileForm;\n  }\n\n  public datalinkTargetFormGroup(target: DexihDatalinkTarget, table: DexihTable = null): FormGroup {\n\n    if (!table && target.tableKey) {\n      table = this.hubCache.getTable(target.tableKey);\n    }\n    // if (!table) {\n    //   table = new DexihTable();\n    // }\n\n    const targetForm = this.fb.group({\n      'table': table ? this.tableForm(table) : null,\n      'runTime': {inputColumns: null},\n      'nodeDatalinkColumn': target.nodeDatalinkColumn ? target.nodeDatalinkColumn : null,\n      'isValid': true\n    });\n\n    this.addMissing(target, targetForm, new DexihDatalinkTarget());\n\n    let subscription = targetForm.controls.tableKey.valueChanges.subscribe(tableKey => {\n      if (tableKey > 0) {\n        table = this.hubCache.getTable(tableKey);\n        const tableForm = table ? this.tableForm(table) : null;\n        targetForm.setControl('table', tableForm);\n      }\n    });\n\n    this._datalinkTargetChanges.push(subscription);\n\n    return targetForm;\n  }\n\n\n  public sourceDatalinkTableFormGroup(datalinkTable: DexihDatalinkTable): FormGroup {\n    const form = this.fb.group({\n      'sourceType': [datalinkTable.sourceType, [\n        Validators.required,\n      ]],\n      'sourceTableKey': [datalinkTable.sourceTableKey, [\n      ]],\n      'sourceDatalinkKey': [datalinkTable.sourceDatalinkKey, [\n      ]],\n      'isValid': true,\n      'dexihDatalinkColumns': this.fb.array([]),\n    }, { validator: this.validateDatalinkTable() });\n\n    let tableColumnsForm = <FormArray>form.controls.dexihDatalinkColumns;\n    datalinkTable.dexihDatalinkColumns.filter(c => c.isValid).forEach(column => {\n      tableColumnsForm.push(this.datalinkTableColumn(tableColumnsForm.value, column));\n    });\n\n    this.addMissing(datalinkTable, form, new DexihDatalinkTable());\n    return form;\n  }\n\n  private validateDatalinkTable() {\n    return (group: FormGroup) => {\n      let sourceType = group.get('sourceType').value;\n      let sourceTableKey = group.get('sourceTableKey');\n      let sourceDatalinkKey = group.get('sourceDatalinkKey');\n\n      sourceTableKey.setErrors(null);\n      sourceDatalinkKey.setErrors(null);\n\n      if (sourceType === eSourceType.Table) {\n        if (!sourceTableKey.value) {\n          return sourceTableKey.setErrors({ required: true });\n        }\n      } else if (sourceType === eSourceType.Datalink) {\n        if (!sourceDatalinkKey.value) {\n          return sourceDatalinkKey.setErrors({ required: true });\n        }\n      }\n    };\n  }\n\n  private missingSourceDatalinkKey(sourceType: eSourceType): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      return sourceType === eSourceType.Datalink && !control.value ? { 'required': 'required' } : null;\n    };\n  }\n\n  datalink(datalink: DexihDatalink): void {\n    this.logger.LogC(() => `datalink key:${datalink.key} datalink:${datalink.name}`, eLogLevel.Debug);\n\n    this.clearFormSubscriptions();\n\n    let profiles = datalink.dexihDatalinkProfiles.filter(c => c.isValid).map(profile => {\n      return this.datalinkProfileFormGroup(profile);\n    });\n\n    let targets = datalink.dexihDatalinkTargets.filter(c => c.isValid).map(target => {\n      return this.datalinkTargetFormGroup(target);\n    });\n\n    let transforms = datalink.dexihDatalinkTransforms.filter(c => c.isValid).map(transform => {\n      return this.datalinkTransformFormGroup(transform);\n    });\n\n    let parameters = datalink.parameters.filter(c => c.isValid).map(parameter => {\n      return this.parameter(parameter);\n    });\n\n\n    const datalinkForm = this.fb.group({\n      'name': [datalink.name, [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(50),\n        this.duplicateDatalinkNameValidator(datalink.key)\n      ]],\n      'sourceDatalinkTable': this.sourceDatalinkTableFormGroup(datalink.sourceDatalinkTable),\n      'auditConnectionKey': [datalink.auditConnectionKey, [\n        // Validators.required,\n      ]],\n      'updateStrategy': [datalink.updateStrategy, [\n        // Validators.required,\n      ]],\n      'dexihDatalinkTransforms': this.fb.array(transforms),\n      'dexihDatalinkProfiles': this.fb.array(profiles),\n      'dexihDatalinkTargets': this.fb.array(targets),\n      'parameters': this.fb.array(parameters),\n      'isValid': true\n    });\n\n    let templateDatalink = new DexihDatalink();\n    templateDatalink.sourceDatalinkTable = new DexihDatalinkTable();\n    this.addMissing(datalink, datalinkForm, templateDatalink);\n\n    this.formGroupFunc = this.datalink;\n    this.saveMethod = 'SaveDatalink';\n    this.property = sharedObjectProperties.find(c => c.type === eSharedObjectType.Datalink);\n    this.valueMethod = 'getDatalinkValue';\n\n    // whenever the datalink changes, update any transforms input/output columns.\n    if (this._datalinkChangesSubscription1) { this._datalinkChangesSubscription1.unsubscribe(); }\n    this._datalinkChangesSubscription1 = datalinkForm.valueChanges.subscribe(() => {\n      this.updateTransformFormColumns(datalinkForm);\n    });\n    this.updateTransformFormColumns(datalinkForm);\n\n    this.watchChanges(eSharedObjectType.Datalink, 'key', 'datalink', this.datalink);\n    this.startForm(datalinkForm);\n  }\n\n  private duplicateDatalinkNameValidator(datalinkKey: number): ValidatorFn {\n    return (control: AbstractControl): { [key: string]: any } => {\n      if (this.currentForm) {\n        const name = control.value;\n        const no = this.hubCache.hub.dexihDatalinks.findIndex(c =>\n          c.key !== datalinkKey && c.isValid && this.stringCompare(c.name, name)) >= 0;\n        return no ? { 'duplicateName': { name } } : null;\n      }\n    };\n  }\n\n  private updateTransformFormColumns(datalinkForm: FormGroup) {\n    if (this.IgnoreFormChange === false) {\n      this.IgnoreFormChange = true;\n      const transformsArray = <FormArray>datalinkForm.controls.dexihDatalinkTransforms;\n      const datalink = <DexihDatalink> datalinkForm.value;\n      const ioColumns = new InputOutputColumns();\n\n      ioColumns.buildInputOutput(this.hubCache, datalink);\n\n      transformsArray.controls.forEach(transformFormControl => {\n        const datalinkTransformForm = <FormGroup>transformFormControl;\n        const datalinkTransform = datalinkTransformForm.value;\n\n        // const inputColumns = ioColumns.getInputColumns(this.hubCache, datalink, datalinkTransform, []);\n        // const outputColumns = ioColumns.getOutputColumns(this.hubCache, datalink, datalinkTransform);\n\n        const transform = datalink.dexihDatalinkTransforms.find(c => c.key === datalinkTransform.datalinkTransformKey);\n\n        datalinkTransformForm.controls.runTime.setValue(transform['runTime']);\n\n        const items = <FormArray>datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        items.controls.forEach(item => {\n          const transformItemForm = <FormGroup>item;\n          if (transformItemForm.controls.targetDatalinkColumn) {\n            transformItemForm.controls.targetDatalinkColumn.updateValueAndValidity();\n          }\n          if (transformItemForm.controls.sourceDatalinkColumn) {\n            transformItemForm.controls.sourceDatalinkColumn.updateValueAndValidity();\n          }\n\n          const params = <FormArray>transformItemForm.controls.dexihFunctionParameters;\n          params.controls.forEach(param => {\n            const paramForm = <FormGroup>param;\n            if (paramForm.controls.datalinkColumn) {\n              paramForm.controls.datalinkColumn.updateValueAndValidity();\n            }\n          });\n        });\n      });\n\n      const targetsArray = <FormArray>datalinkForm.controls.dexihDatalinkTargets;\n      targetsArray.controls.forEach((targetForm: FormGroup) => {\n        let target = datalink.dexihDatalinkTargets.find(c => c.key === targetForm.controls.key.value);\n        if (target) {\n          targetForm.controls.runTime.setValue(target['runTime']);\n        }\n      });\n\n      this.IgnoreFormChange = false;\n    }\n  }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Validation Rules\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-check-square-o\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t<actions-columnValidation-button [columnValidation]=\"item\" class=\"mr-1\"></actions-columnValidation-button>\n\t\t\t\t\t<dependent-items-button class=\"mr-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.ColumnValidation'></dependent-items-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t\t<dexih-button-delete class=\"mr-1\" *ngIf=\"hubCache.canWrite\" (click)=\"deleteValidations(items)\"></dexih-button-delete>\n\t\t\t\t\t<tags-update-button class=\"mr-1\" [objectType]=\"eSharedObjectType.ColumnValidation\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\t\t\t\t\n\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-new *ngIf=\"hubCache.canWrite\" [routerLink]=\"['columnValidation-new']\" class=\"mr-1\"></dexih-button-new>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\n    </dexih-widget>\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { DexihColumnValidation, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'columnValidations',\n  templateUrl: './columnValidation-index.component.html',\n  styles: []\n})\nexport class ColumnValidationIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    validations: Array<DexihColumnValidation>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.updateValidations();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Column Validation Index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteValidations(validations: Array<DexihColumnValidation>) {\n        this.hubService.deleteColumnValidations(validations);\n    }\n\n    updateValidations() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let validations = this.hubCache.hub.dexihColumnValidations.filter(c => c.isValid)\n                .map(c => {\n                    return {\n                        key: c.key,\n                        name: c.name,\n                        description: c.description,\n                        updateDate: c.updateDate,\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.ColumnValidation, c.key)\n                    }\n                });\n            this._tableData.next(validations);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(validation: DexihColumnValidation) {\n        this.router.navigate(['columnValidation-edit', validation.key], { relativeTo: this.route});\n    }\n\n    export(items: Array<DexihColumnValidation>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        items.forEach(item => { this.hubCache.cacheAddColumnValidation(item.key, hub); });\n\n        let filename = items.length === 1 ? 'ColumnValidation - ' + items[0].name + '.json' : 'columnValidations.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n      // watch the current validation in case it is changed in another session.\n      this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n          if (hubCacheChange.changeClass === eSharedObjectType.ColumnValidation\n            || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n            this.updateValidations();\n          }\n      });\n  }\n}\n","\t<div class=\"container\">\n\t<dexih-widget \n\ttitle=\"Edit Validation\" \n\ticonClass=\"fa fa-lg fa-fw fa-check-square-o\" \n\t[showCloseButton]=\"true\"\n\t(close)=\"close()\"\n\t[padding]=\"true\"\n\t>\n        <ng-template #header>\n\t\t\t<div class=\"d-inline-flex\">\n\t\t\t\t<ng-template [ngIf]=\"hubCache && hubCache.status === eCacheStatus.Loaded\">\n\t\t\t\t\t<dexih-invalid-form-details class=\"mr-1\" [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\"></dexih-invalid-form-details>\n\t\t\t\t\t<div *ngIf=\"hubCache.canWrite\" >\n\t\t\t\t\t\t<div class=\"input-group mr-1\">\n\t\t\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-primary\" type=\"button\" (click)=\"test()\"><i\tclass=\"fa fa-check-circle-o\"></i></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" placeholder=\"Test value\" [(ngModel)]=\"testValue\" style=\"max-width: 100px\" aria-label=\"\" aria-describedby=\"basic-addon1\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<save-button class=\"mr-1\" *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\"></save-button>\n\t\t\t\t</ng-template>\n\t\t\t\t<cancel-button class=\"mr-1\" [formsService]=\"formsService\"></cancel-button>\n\t\t\t</div>\n        </ng-template>\n\n\t\t<form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section *ngIf=\"testResult\">\n\t\t\t\t\t<div class=\"alert \" [class.alert-danger]=\"testResult.success == false\" [class.alert-success]=\"testResult.success == true\">\n\t\t\t\t\t\tTest Result = {{testResult.success}} \n\t\t\t\t\t\t<div *ngIf=\"testResult.cleanedValue\">Cleaned Value = {{testResult.cleanedValue}} </div>\n\t\t\t\t\t\t<div *ngIf=\"testResult.rejectReason\">Reject Reason = {{testResult.rejectReason}} </div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Column Validation Name\" formControlName=\"name\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\" [autocapitalize]=\"true\" [errors]=\"formsService.formErrors['name']\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Data Type\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t<section>\n\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\"  formControlName=\"description\" placeholder=\"Enter the description.\" >\n\t\t\t\t</form-textarea>\n\t\t\t</section>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Validation Fail Action\" formControlName=\"invalidAction\" [items]=\"InvalidActions\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t\tnote='Action to take when the validation fails.'>\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"formsService.currentForm.value.invalidAction==eInvalidAction.Clean || formsService.currentForm.value.invalidAction==eInvalidAction.RejectClean\" class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Clean Action\" formControlName=\"cleanAction\" [items]=\"cleanActions\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t\tnote='Clean Action to apply'>\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<section *ngIf=\"(formsService.currentForm.value.invalidAction == eInvalidAction.RejectClean || formsService.currentForm.value.invalidAction == eInvalidAction.Clean) && formsService.currentForm.value.cleanAction == eCleanAction.CleanValue\" >\n\t\t\t\t\t<form-input label=\"Clean Value\" formControlName=\"cleanValue\" placeholder=\"Enter the clean value.\" iconClass=\"fa fa-list\" >\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\n\t\t\t\t<section >\n\t\t\t\t\t<form-checkbox label=\"Ignore null values.\" formControlName=\"allowDbNull\" >\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t\t<div class=\"form-row\" *ngIf=\"formsService.currentForm.value.dataType==eTypeCode.String || formsService.currentForm.value.dataType==eTypeCode.Char\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Minimum String Length\" formControlName=\"minLength\" placeholder=\"Enter the minimum string length\" type=\"number\" iconClass=\"fa fa-list\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Maximum String Length\" formControlName=\"maxLength\" placeholder=\"Enter the maximum string length\" type=\"number\" iconClass=\"fa fa-list\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<section *ngIf=\"formsService.currentForm.value.dataType==eTypeCode.String || formsService.currentForm.value.dataType==eTypeCode.Char\" >\n\t\t\t\t\t\t<form-input label=\"Simple Pattern Match\" formControlName=\"patternMatch\" placeholder=\"Provide a match string\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\tnote=\"Simple pattern match, use the format - A=Upper, a=Lower, Z=Any Character, 9=numeric.  (For example: AA999 matches AS123)\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section *ngIf=\"formsService.currentForm.value.dataType==eTypeCode.String || formsService.currentForm.value.dataType==eTypeCode.Char\" >\n\t\t\t\t\t\t<form-input label=\"Regular Expression Match\" formControlName=\"regexMatch\" placeholder=\"Provide a regular expression\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\tnote=\"Use a standard regular expression to validate.  For example [A-Za-z0-9] will ensure string only contains characters and numbers.\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\n\n\t\t\t\t<div class=\"form-row\" *ngIf=\"formsService.currentForm.value.dataType!=eTypeCode.String && formsService.currentForm.value.dataType!=eTypeCode.Char\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Minimum Value\" formControlName=\"minValue\" placeholder=\"Enter the minimum value\" type=\"number\" iconClass=\"fa fa-list\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Maximum Value\" formControlName=\"maxValue\" placeholder=\"Enter the maximum value\" type=\"number\" iconClass=\"fa fa-list\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-tags label=\"Restrict to list of values\" formControlName=\"listOfValues\" placeholder=\"Provide a list of values which are valid.\" >\n\t\t\t\t\t</form-tags>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-tags label=\"Excluded list of values\" formControlName=\"listOfNotValues\" placeholder=\"Provide a list of values which are valid.\" >\n\t\t\t\t\t</form-tags>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-select label=\"Restrict to values that exist in a lookup table column\" \n\t\t\t\t\t\tformControlName=\"lookupColumnKey\" \n\t\t\t\t\t\t[items]=\"connections\" \n\t\t\t\t\t\tgrandParentName=\"name\"\n\t\t\t\t\t\tparentName=\"name\"\n\t\t\t\t\t\titemKey=\"key\"\n\t\t\t\t\t\titemName=\"name\"\n\t\t\t\t\t\tchildItems=\"dexihTables\"\n\t\t\t\t\t\tgrandChildItems=\"dexihTableColumns\"\n\t\t\t\t\t\t[allowNullSelect]=\"true\"\n\t\t\t\t\t\tnote='Checks the selected table column, and ensures the value contains at least one match.'>\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\n\t\t\t\t<section >\n\t\t\t\t\t<form-checkbox label=\"Only lookup values where the 'is current' column is true.\" formControlName=\"lookupIsValid\" >\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t\t<section >\n\t\t\t\t\t<form-checkbox label=\"Allow valid when lookup returns multiple rows.\" formControlName=\"lookupMultipleRecords\" >\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\t\t\t\t\n\t\t\t</fieldset>\n\t\t</form>\n \n    </dexih-widget>\n\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { HubCache, InvalidActions, CleanActions, eCacheStatus } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { TypeCodes } from '../../hub.remote.models';\nimport { eInvalidAction, eCleanAction, eTypeCode, DexihConnection, DexihColumnValidation } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-columnValidation-edit-form',\n  templateUrl: './columnValidation-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class ColumnValidationEditComponent implements OnInit, OnDestroy {\n\n  private columnValidationKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public params: Params;\n  public pageTitle: string;\n\n  eInvalidAction = eInvalidAction;\n  eCleanAction = eCleanAction;\n  eTypeCode = eTypeCode;\n  InvalidActions = InvalidActions;\n  CleanActions = CleanActions;\n\n  typeCodes = TypeCodes;\n  invalidActions = InvalidActions;\n  cleanActions = CleanActions;\n\n  public testValue: string;\n  public testResult: any;\n\n  public lookupColumnValue = '';\n\n  public connections: Array<DexihConnection>;\n  private isLoaded = false;\n\n  public eCacheStatus = eCacheStatus;\n  public cancelToken: CancelToken = new CancelToken();\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private _lookupColumnSubscription: Subscription;\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Column Validation');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._lookupColumnSubscription) { this._lookupColumnSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  private load() {\n    this.connections = this.hubCache.getConnectionTables();\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.columnValidationKey = +this.params['validationKey'];\n\n      if (!this.columnValidationKey) {\n        this.hubService.addHubErrorMessage('There was no validation specified to edit.');\n        // this.errorMessage = 'There was no validation specified to edit.';\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihColumnValidations) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let validation = this.hubCache.hub.dexihColumnValidations.find(c => c.key === this.columnValidationKey);\n          this.formsService.validation(validation);\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let validation = new DexihColumnValidation();\n      this.formsService.validation(validation);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/columnValidation-new', `/columnValidation-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n    this.isLoaded = true;\n\n    this.getValidationLookupColumn();\n    if (this._lookupColumnSubscription) { this._lookupColumnSubscription.unsubscribe(); }\n    this._lookupColumnSubscription = this.formsService.currentForm.controls.lookupColumnKey.valueChanges.subscribe(() => {\n      this.getValidationLookupColumn();\n    });\n  }\n\n  getValidationLookupColumn() {\n    let lookupColumnKey = this.formsService.currentForm.controls.lookupColumnKey.value;\n    if (lookupColumnKey) {\n      let column = this.hubCache.getColumn(lookupColumnKey);\n      if (column) {\n        let table = this.hubCache.getTable(column.tableKey);\n        this.lookupColumnValue = 'Exists in table:' + table.name + ', column:' + column.name;\n      } else {\n        this.lookupColumnValue = 'Column not found.  Re-select a valid column.';\n      }\n    } else {\n      this.lookupColumnValue = '';\n    }\n  }\n\n  test() {\n    this.hubService.testColumnValidation(this.formsService.currentForm.value, this.testValue, this.cancelToken).then(result => {\n      this.testResult = result;\n    });\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The view has not been saved',\n          'The column validation changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The column validation changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"container\">\n\t<dexih-widget \n\t\ttitle=\"Edit Connection\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-database\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t\t[padding]=\"true\"\n\t\t>\n        <ng-template #header>\n\t\t\t<dexih-invalid-form-details class=\"mr-1\" [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\"></dexih-invalid-form-details>\n\t\t\t<dexih-button class=\"mr-1\" *ngIf=\"hubCache.canWrite\" buttonClass=\"btn btn-success\" [busy]=\"refreshingConnection\" iconClass=\"fa fa-thumbs-o-up\" (click)=\"!refreshingConnection && refreshConnection()\" title=\"Test the connection against the source.\">Test</dexih-button>\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\n\t\t\t<ng-template [ngIf]=\"hubCache.canWrite && connectionReference\">\n\t\t\t\t<ng-template [ngIf]=\"connectionReference.connectionCategory == eConnectionCategory.SqlDatabase || connectionReference.connectionCategory == eConnectionCategory.DatabaseFile || connectionReference.connectionCategory == eConnectionCategory.NoSqlDatabase || connectionReference.connectionCategory == eConnectionCategory.Hub\">\n\t\t\t\t\t<dexih-button class=\"mr-1\" *ngIf=\"formsService.currentForm.controls.key.value\" [routerLink]=\"['../../connection-import', formsService.currentForm.controls.key.value]\" iconClass=\"fa fa-plus\">Import Tables</dexih-button>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-template [ngIf]=\"connectionReference.connectionCategory == eConnectionCategory.File\">\n\t\t\t\t\t<dexih-button class=\"mr-1\" *ngIf=\"formsService.currentForm.controls.key.value\" [routerLink]=\"['../../../tables', 'table-new', formsService.currentForm.controls.key.value]\" iconClass=\"fa fa-plus\">New File</dexih-button>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-template [ngIf]=\"connectionReference.connectionCategory == eConnectionCategory.WebService\">\n\t\t\t\t\t<dexih-button class=\"mr-1\" *ngIf=\"formsService.currentForm.controls.key.value\" [routerLink]=\"['../../../tables', 'table-new', formsService.currentForm.controls.key.value]\"  iconClass=\"fa fa-plus\">New WebService</dexih-button>\n\t\t\t\t</ng-template>\n\t\t\t</ng-template>\n\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n\t\t<form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\">\n\t\t\t<!--dummy hidden password to stop chrome/firefox/safari autocompletion password.-->\n\t\t\t<input id=\"fake_user_name\" name=\"fake_user[name]\" style=\"position:absolute; top:-5000px;\" type=\"text\" value=\"Fake Auto-fill\">\n\t\t\t<input id=\"fake_password\" type=\"password\" name=\"fake_password[password]\" style=\"position:absolute; top:-5000px;\" type=\"text\" value=\"Fake Auto-fill\">\n\n\t\t\t<fieldset>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<form-select label=\"Purpose\" formControlName=\"purpose\" placeholder=\"Connection purpose\" iconClass=\"fa fa-database\"\n\t\t\t\t\t\t\t[items]=\"eConnectionPurposeItems\" itemName=\"name\" itemKey=\"key\" [enableFilter]=\"false\"\n\t\t\t\t\t\t\t[errors]=\"formsService.formErrors.purpose\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Name\" formControlName=\"name\" placeholder=\"Enter a name for the connection\" [autocapitalize]=\"true\" iconClass=\"fa fa-database\"\n\t\t\t\t\t\t\t[errors]=\"formsService.formErrors.name\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Database Type\" [(ngModel)]=\"connectionReference\" [ngModelOptions]=\"{standalone: true}\" (ngModelChange)=\"selectDatabaseType($event)\" \n\t\t\t\t\t\t\t[items]=\"connectionTypes\" itemName=\"name\" itemKey=\"name\" [enableKeySelect]=\"false\"\n\t\t\t\t\t\t\ticonClass=\"fa fa-database\" [sortItems]=\"true\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<section>\n                    <form-textarea label=\"Description\" formControlName=\"description\" [showMarkdown]=\"true\" placeholder=\"Enter the description.\"  [errors]=\"formsService.formErrors.description\">\n                    </form-textarea>\n                </section>\n\n\t\t\t\t<span *ngIf=\"connectionReference\">\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<markdown [data]=\"connectionReference.description\" (click)=\"getRoute($event)\"></markdown>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<span *ngIf=\"connectionReference.allowsConnectionString == true\">\n\t\t\t\t\t\t<section >\n\t\t\t\t\t\t\t<form-checkbox label=\"Use a connection string\" formControlName=\"useConnectionString\" >\n\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t<section *ngIf=\"formsService.currentForm.controls.useConnectionString.value == true\">\n\t\t\t\t\t\t\t<form-input *ngIf=\"!formsService.currentForm.controls.useConnectionStringVariable.value\"\n\t\t\t\t\t\t\t\tlabel=\"Connection String\" (keydown)=\"connectionStringChanged()\" formControlName=\"connectionStringDisplay\" placeholder=\"Enter a the connection string\" iconClass=\"fa fa-database\" [errors]=\"formsService.formErrors.connectionStringDisplay\">\n\t\t\t\t\t\t\t\t<span *ngIf=\"!formsService.formErrors.connectionStringRaw\"> (<a href=\"javascript:void(0)\" *ngIf=\"revealingConnectionString == false\" (click)=\"revealConnectionString()\"> <i class=\"fa fa-refresh\"></i> Reveal </a>\n\t\t\t\t\t\t\t\t<span *ngIf=\"revealingConnectionString == true\" > <i class=\"fa fa-spin fa-refresh\"></i> Revealing... please wait </span>)</span>\n\t\t\t\t\t\t\t</form-input>\n\n\t\t\t\t\t\t\t<form-select *ngIf=\"formsService.currentForm.controls.useConnectionStringVariable.value\"\n\t\t\t\t\t\t\t\tlabel=\"Connection String\" \n\t\t\t\t\t\t\t\tformControlName=\"connectionString\" \n\t\t\t\t\t\t\t\t[items]=\"variables\" \n\t\t\t\t\t\t\t\ticonClass=\"fa fa-at\" \n\t\t\t\t\t\t\t\t[sortItems]=\"true\" \n\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t\t\ttextEntryNote=\"Enter the variable name surrounded by {}\">\n\t\t\t\t\t\t\t</form-select>\n\n\t\t\t\t\t\t\t<form-checkbox label=\"Use a variable for connection string\" formControlName=\"useConnectionStringVariable\" (click)=\"clearConnectionString()\" >\n\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span *ngIf=\"formsService.currentForm.controls.useConnectionString.value == false\">\n\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t<form-select \n\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\" \n\t\t\t\t\t\t\t\t[label]=\"connectionReference.serverDescription\" \n\t\t\t\t\t\t\t\tformControlName=\"server\" \n\t\t\t\t\t\t\t\tplaceholder=\"Enter the details.\" \n\t\t\t\t\t\t\t\ticonClass=\"fa fa-server\" \n\t\t\t\t\t\t\t\t[errors]=\"formsService.formErrors.server\"\n\t\t\t\t\t\t\t\t[items]=\"variables\" \n\t\t\t\t\t\t\t\t[enableFilter]=\"true\"\n\t\t\t\t\t\t\t\t[note]=\"connectionReference.serverHelp\"\n\t\t\t\t\t\t\t></form-select> \n\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t<section *ngIf=\"connectionReference.allowsWindowsAuth == true\">\n\t\t\t\t\t\t\t<form-checkbox label=\"Use windows authentication\" formControlName=\"useWindowsAuth\">\n\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t<div *ngIf=\"connectionReference.allowsUserPassword && (formsService.currentForm.controls.useWindowsAuth.value == false || connectionReference.allowsWindowsAuth == false)\" class=\"form-row\">\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-select \n\t\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\" \n\t\t\t\t\t\t\t\t\tlabel=\"User Name\" \n\t\t\t\t\t\t\t\t\tformControlName=\"username\" \n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter user name\" \n\t\t\t\t\t\t\t\t\ticonClass=\"fa fa-user\" \n\t\t\t\t\t\t\t\t\t[errors]=\"formsService.formErrors.username\"\n\t\t\t\t\t\t\t\t\t[items]=\"variables\" \n\t\t\t\t\t\t\t\t\t[enableFilter]=\"true\"\n\t\t\t\t\t\t\t\t></form-select> \n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-input *ngIf=\"formsService.currentForm.controls.usePasswordVariable.value == false\" label=\"Password\" (keydown)=\"passwordChanged()\" formControlName=\"passwordDisplay\" type=\"password\" placeholder=\"Enter a password\"  iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.password\">\n\t\t\t\t\t\t\t\t</form-input>\n\n\t\t\t\t\t\t\t\t<form-select *ngIf=\"formsService.currentForm.controls.usePasswordVariable.value\"\n\t\t\t\t\t\t\t\t\tlabel=\"Password\" \n\t\t\t\t\t\t\t\t\tformControlName=\"password\" \n\t\t\t\t\t\t\t\t\t[items]=\"variables\" \n\t\t\t\t\t\t\t\t\ticonClass=\"fa fa-at\" \n\t\t\t\t\t\t\t\t\t[sortItems]=\"true\" \n\t\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t</form-select>\n\n\t\t\t\t\t\t\t\t<form-checkbox label=\"Use a variable for password\" formControlName=\"usePasswordVariable\" (click)=\"clearPassword()\" >\n\t\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div *ngIf=\"connectionReference.allowsToken && (formsService.currentForm.controls.useWindowsAuth.value == false || connectionReference.allowsWindowsAuth == false)\" class=\"form-row\">\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-input *ngIf=\"formsService.currentForm.controls.usePasswordVariable.value == false\" label=\"Secure Token\" (keydown)=\"passwordChanged()\" formControlName=\"passwordDisplay\" type=\"password\" placeholder=\"Enter secure token\"  iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.password\">\n\t\t\t\t\t\t\t\t</form-input>\n\n\t\t\t\t\t\t\t\t<form-select *ngIf=\"formsService.currentForm.controls.usePasswordVariable.value\"\n\t\t\t\t\t\t\t\t\tlabel=\"Secure Token\" \n\t\t\t\t\t\t\t\t\tformControlName=\"password\" \n\t\t\t\t\t\t\t\t\t[items]=\"variables\" \n\t\t\t\t\t\t\t\t\ticonClass=\"fa fa-at\" \n\t\t\t\t\t\t\t\t\t[sortItems]=\"true\" \n\t\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t</form-select>\n\n\t\t\t\t\t\t\t\t<form-checkbox label=\"Use a variable for token\" formControlName=\"usePasswordVariable\" (click)=\"clearPassword()\" >\n\t\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<section *ngIf=\"connectionReference.requiresDatabase\" ng-disabled=\"refreshingConnection || creatingDatabase\" >\n\t\t\t\t\t\t\t<form-select \n\t\t\t\t\t\t\t\t[label]=\"connectionReference.databaseDescription\" \n\t\t\t\t\t\t\t\tformControlName=\"defaultDatabase\" \n\t\t\t\t\t\t\t\t[items]=\"databases\" \n\t\t\t\t\t\t\t\t[defaultItem]=\"formsService.currentForm.value.defaultDatabase\" \n\t\t\t\t\t\t\t\ticonClass=\"fa fa-database\" \n\t\t\t\t\t\t\t\t[sortItems]=\"true\" \n\t\t\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t\t\ttextEntryNote=\"Enter the database name\"\n\t\t\t\t\t\t\t\t(textValueChange)=\"newDatabaseName($event)\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t(<a href=\"javascript:void(0)\" *ngIf=\"refreshingConnection == false\" (click)=\"refreshConnection()\"> <i class=\"fa fa-refresh\"></i> Refresh </a>\n\t\t\t\t\t\t\t<span *ngIf=\"refreshingConnection == true\" > <i class=\"fa fa-spin fa-refresh\"></i> Refreshing... please wait </span>) (\n\t\t\t\t\t\t\t\t<a href=\"javascript:void(0)\" *ngIf=\"creatingDatabase == false\" (click)=\"createDatabase()\"> <i class=\"fa fa-edit\"></i> New Database </a>\n\t\t\t\t\t\t\t\t<span *ngIf=\"creatingDatabase == true\"> <i class=\"fa fa-spin fa-refresh\"></i> Creating database... please wait </span>)\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t<form-input  type=\"number\" label=\"Connection Timeout\" formControlName=\"connectionTimeout\" iconClass=\"fa fa-clock-o\"\t[errors]=\"formsService.formErrors.connectionTimeout\"\n\t\t\t\t\t\t\tnote=\"The duration in seconds the remote agent will wait to establish a connection.\">\n\t\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t<form-input type=\"number\" label=\"Command Timeout\" formControlName=\"commandTimeout\" iconClass=\"fa fa-clock-o\"\t[errors]=\"formsService.formErrors.commandTimeout\"\n\t\t\t\t\t\t\tnote=\"The duration in seconds the remote agent will for a command to start returning a result.\">\n\t\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<section *ngIf=\"formsService.currentForm.controls.purpose.value == 'Managed'\">\n\t\t\t\t\t\t<form-checkbox label=\"Multi-use Managed Database (table keys will be added to table names to allow multiple hubs to use same database)\"\n\t\t\t\t\t\t\tformControlName=\"embedTableKey\" [errors]=\"formsService.formErrors.embedTableKey\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\n\t\t\t\t</span>\n\t\t\t</fieldset>\n\n\t\t</form>\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Connections\" path=\"/assets/help/reference/connection.md\"></dexih-help>\n\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { LogFactory, eLogLevel } from '../../../../logging';\nimport { eConnectionPurpose, eConnectionCategory, ConnectionReference, DexihConnection, RemoteLibraries, eConnectionPurposeItems } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-connection-edit-form',\n  templateUrl: './connection-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class ConnectionEditComponent implements OnInit, OnDestroy {\n\n  public connectionKey: number;\n  private connectionTypes: Array<ConnectionReference>;\n  private hubCache: HubCache;\n  private remoteLibraries: RemoteLibraries;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _purposeSubscription: Subscription;\n\n  public savingConnection = false;\n  public refreshingConnection = false;\n  public revealingConnectionString = false;\n  public creatingDatabase = false;\n\n  public databases: Array<string> = [];\n\n  public eConnectionPurposeItems = eConnectionPurposeItems.filter( c => c.key > 0);\n  public eConnectionPurpose = eConnectionPurpose;\n  public eConnectionCategory = eConnectionCategory;\n\n  public cancelToken: CancelToken = new CancelToken();\n\n  public connectionReference: ConnectionReference;\n  private isLoaded = false;\n\n  public variables = [];\n\n  private logger = new LogFactory('connection-edit');\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit() {\n    this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.hubService.getRemoteLibrariesObservable()\n      ).subscribe(async result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n        this.remoteLibraries = result[3];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        this.variables = this.hubCache.hub.dexihHubVariables.map(c => '{' + c.name + '}');\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(async confirm => {\n                if (confirm) {\n                    await this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            await this.load();\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Connection Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._purposeSubscription) { this._purposeSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  private async load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.connectionKey = + this.params['connectionKey'];\n\n      this.logger.LogC(() => `edit connection key ${this.connectionKey}.`, eLogLevel.Trace);\n\n      if (!this.connectionKey) {\n        this.hubService.addHubErrorMessage('There was no connection specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihConnections) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let connection = this.hubCache.hub.dexihConnections.find(c => c.key === this.connectionKey);\n          if (!connection) {\n            this.hubService.addHubErrorMessage('The specified connection could not be found.');\n            this.logger.LogC(() => `edit connection with key ${this.connectionKey} not found.`, eLogLevel.Warning);\n          } else {\n            this.updateDatabaseTypes(connection.purpose);\n            this.connectionReference = await this.hubService.GetConnectionReference(connection);\n            this.formsService.connection(connection);\n            if (connection.defaultDatabase) {\n              this.databases = [connection.defaultDatabase];\n            }\n            this.logger.LogC(() => `edit connection, form loaded.`, eLogLevel.Trace);\n          }\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let connection = new DexihConnection();\n      connection.purpose = +this.params['purpose'];\n\n      this.logger.LogC(() => `new connection, purpose ${connection.purpose}.`, eLogLevel.Trace);\n\n      this.updateDatabaseTypes(connection.purpose);\n      this.formsService.connection(connection);\n\n      this.updateUrl();\n\n      this.logger.LogC(() => `new connection, form loaded.`, eLogLevel.Trace);\n    }\n\n    if (this.action === 'copy') {\n\n      let connection = new DexihConnection();\n\n      let previousConnectionKey = + this.params['connectionKey'];\n      let previousConnection = this.hubCache.hub.dexihConnections.find(c => c.key === previousConnectionKey);\n      Object.assign(connection, previousConnection);\n      connection.name += ' (copy)';\n      connection.key = null;\n      this.connectionReference = await this.hubService.GetConnectionReference(connection);\n\n      this.logger.LogC(() => `copy connection, connectionKey ${previousConnectionKey}.`, eLogLevel.Trace);\n      this.updateDatabaseTypes(connection.purpose);\n      this.formsService.connection(connection);\n\n      this.updateUrl();\n\n      this.logger.LogC(() => `new connection, form loaded.`, eLogLevel.Trace);\n    }\n\n    if (this._purposeSubscription) { this._purposeSubscription.unsubscribe(); }\n    this._purposeSubscription = this.formsService.currentForm.controls.purpose.valueChanges.subscribe(purpose => {\n        this.updateDatabaseTypes(purpose);\n    });\n  }\n\n  private updateUrl() {\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let url = window.location.pathname;\n            let index = url.indexOf('/connection-new');\n            if (index > 0) {\n              let newUrl = url.substr(0, index) + `/connection-edit/${key}`;\n              this.router.navigateByUrl(newUrl);\n            }\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n  }\n\n  private updateDatabaseTypes(purpose: eConnectionPurpose) {\n    this.connectionTypes = this.remoteLibraries.connections.filter(d =>\n      (purpose === eConnectionPurpose.Source && d.allowsSourceConnection) ||\n      (purpose === eConnectionPurpose.Managed && d.allowsManagedConnection) ||\n      (purpose === eConnectionPurpose.Target && d.allowsTargetConnection));\n  }\n\n  async selectDatabaseType(connectionReference: ConnectionReference) {\n    this.formsService.currentForm.controls.connectionClassName.setValue(connectionReference.connectionClassName);\n    this.formsService.currentForm.controls.connectionAssemblyName.setValue(connectionReference.connectionAssemblyName);\n\n    // For integration hub connections, pre-fill some information.\n    if (this.connectionReference.connectionCategory === eConnectionCategory.Hub) {\n      if (!this.formsService.currentForm.controls.server.value) {\n        const uri = location.protocol + '//' + location.hostname + (location.port ? ':' + location.port : '');\n        this.formsService.currentForm.controls.server.setValue(uri);\n      }\n      if (!this.formsService.currentForm.controls.username.value) {\n        const user = this.authService.getUser()\n        if (user) {\n          this.formsService.currentForm.controls.username.setValue(user.email);\n        }\n      }\n    }\n  }\n\n  connectionStringChanged() {\n    this.logger.LogC(() => `connectionStringChanged.`, eLogLevel.Trace);\n    if (this.formsService.currentForm.controls.connectionString.value) {\n      this.formsService.currentForm.controls.connectionString.setValue(null);\n      this.formsService.currentForm.controls.connectionStringDisplay.setValue('');\n    }\n  }\n\n  clearConnectionString() {\n    this.formsService.currentForm.controls.connectionString.setValue(null);\n    this.formsService.currentForm.controls.connectionStringDisplay.setValue('');\n  }\n\n  revealConnectionString() {\n    this.logger.LogC(() => `revealConnectionString.`, eLogLevel.Trace);\n    this.revealingConnectionString = true;\n\n    this.hubService.decrypt(this.formsService.currentForm.controls.connectionString.value, this.cancelToken)\n      .then(result => {\n        this.formsService.currentForm.controls.connectionStringDisplay.setValue(result);\n        this.revealingConnectionString = false;\n      }).catch(reason => {\n        this.hubService.addHubMessage(reason);\n        this.revealingConnectionString = false;\n      });\n  }\n\n  passwordChanged() {\n    this.logger.LogC(() => `passwordChanged.`, eLogLevel.Trace);\n\n    if (this.formsService.currentForm.controls.password.value) {\n      this.formsService.currentForm.controls.password.setValue(null);\n      this.formsService.currentForm.controls.passwordDisplay.setValue('');\n    }\n  }\n\n  clearPassword() {\n    this.formsService.currentForm.controls.password.setValue(null);\n    this.formsService.currentForm.controls.passwordDisplay.setValue('');\n  }\n\n  async refreshConnection() {\n    this.logger.LogC(() => `refreshConnection.`, eLogLevel.Trace);\n\n    await this.encryptConnection();\n\n    this.refreshingConnection = true;\n    this.hubService.refreshConnection(this.formsService.currentForm.value, this.cancelToken)\n      .then(result => {\n        this.hubService.addHubSuccessMessage('The connection was successful.');\n        this.databases = result;\n        this.refreshingConnection = false;\n      }).catch(reason => {\n        this.hubService.addHubMessage(reason);\n        this.refreshingConnection = false;\n      });\n  }\n\n  newDatabaseName(value: string) {\n    this.formsService.currentForm.controls.defaultDatabase.setValue(value);\n  }\n\n  createDatabase() {\n    this.creatingDatabase = true;\n\n    this.authService.promptDialog('Create Database', 'Enter the name for the new database?').then(async result => {\n      if (result) {\n        await this.encryptConnection();\n\n        let connection = Object.assign({}, this.formsService.currentForm.value);\n        connection.defaultDatabase = result;\n\n        this.hubService.createDatabase(connection, this.cancelToken)\n          .then(() => {\n            this.hubService.addHubSuccessMessage('The database was created successfully.');\n            this.databases = [result];\n            this.formsService.currentForm.controls.defaultDatabase.setValue(result);\n            this.creatingDatabase = false;\n          }).catch(reason => {\n            this.hubService.addHubMessage(reason);\n            this.creatingDatabase = false;\n          });\n      } else {\n        this.creatingDatabase = false;\n      }\n    }).catch(() => {\n      this.creatingDatabase = false;\n    });\n  }\n\n  async encryptConnection() {\n    let form = this.formsService.currentForm;\n\n    let passwordRaw = form.controls.passwordRaw.value;\n    if (passwordRaw) {\n      let password = await this.hubService.encrypt(passwordRaw, this.cancelToken);\n      form.controls.password.setValue(password);\n      form.controls.passwordRaw.setValue(null);\n    }\n\n    let connectionStringRaw = form.controls.connectionStringRaw.value;\n    if (connectionStringRaw) {\n      let connectionString = await this.hubService.encrypt(connectionStringRaw, this.cancelToken);\n      form.controls.connectionString.setValue(connectionString);\n      form.controls.connectionStringRaw.setValue(null);\n    }\n  }\n\n  async save() {\n    await this.encryptConnection();\n    await this.formsService.save();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The connection has not been saved',\n          'The connection changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  public getRoute(event) {\n    this.authService.getRoute(event);\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The connection changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget [title]=\"'Import Tables for ' + connection?.name\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-database\" \n\t\t[showIf]=\"showPage\"\n\t\t[loadingMessage]=\"showPageMessage\"\n\t\t[showCloseButton] = \"true\"\n\t\t(close)=\"close()\"\n\t\t[padding]=\"false\"\n\t>\n\t\t<ng-template #header>\n\n\t\t</ng-template>\n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"editTable($event)\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-splitdropdown class=\"mr-1\" *ngIf=\"hubCache.canWrite\" text=\"Import\" buttonClass=\"btn btn-success\" iconClass=\"fa fa-cloud-download\" (buttonClick)=\"importSelected(items)\" title=\"Import selected tables\" >\n\t\t\t\t\t\t<a class=\"dropdown-item\" (click)=\"newDatalinks(items)\" title=\"Import tables and create default staging datalinks\">Import &amp; Create Datalinks</a>\n\t\t\t\t\t</dexih-button-splitdropdown>\n\t\t\t\t\t\t\t\n\t\t\t\t\t<dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected tables\"></dexih-button-delete>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-table=\"item\">\n\t\t\t\t\t<dexih-button-edit class=\"mr-1\"  *ngIf=\"table.key\" [routerLink]=\"['table-edit', table.key]\" queryParamsHandling preserveFragment (click)=\"deleteSelected(items)\" title=\"Edit this table\"></dexih-button-edit>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #filter select=\"filter\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-download\" [text]=\"tableFilter\" title=\"Filter by import status\" [pullRight]=\"true\">\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"tableFilter=='All'\" (click)=\"setTableFilter('All')\">All</a>\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"tableFilter=='Imported'\" (click)=\"setTableFilter('Imported')\">Imported</a>\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"tableFilter=='NonImported'\" (click)=\"setTableFilter('NonImported')\">Non Imported</a>\n\t\t\t\t\t</dexih-button-dropdown>\n\t\n\t\t\t\t\t<dexih-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-table\" [text]=\"viewFilter\" title=\"Filter by tables/views\" [pullRight]=\"true\">\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"viewFilter=='All'\" (click)=\"setViewFilter('All')\">All</a>\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"viewFilter=='Imported'\" (click)=\"setViewFilter('Tables')\">Tables</a>\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"viewFilter=='NonImported'\" (click)=\"setViewFilter('Views')\">Views</a>\n\t\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\n    </dexih-widget>\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache, EntityStatus } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { DexihConnection, DexihTable, eTableType, eStatus, eImportAction, eSharedObjectType, ConnectionReference } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n    selector: 'connections',\n    templateUrl: './connection-import.component.html',\n    styles: []\n})\nexport class ConnectionImportComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n    connectionKey: number;\n    connection: DexihConnection;\n    connectionReference: ConnectionReference;\n    names: Array<string>;\n    tables: Array<DexihTable>;\n\n    showPage = false;\n    showPageMessage = 'Loading...';\n\n    tableFilter: string;\n    viewFilter: string;\n\n    private cancelToken = new CancelToken();\n\n    columns = [\n        { name: 'schema', title: 'Schema', format: '' },\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'tableType', title: 'Type', enum: eTableType, format: 'Enum' },\n        { name: 'entityStatus.message', title: 'Latest Status' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<DexihTable>> = this._tableData.asObservable();\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n        this.tableFilter = 'All';\n        this.viewFilter = 'Tables';\n    }\n\n    ngOnInit() {\n        this.showPageMessage = 'Querying source database tables.  Please wait...';\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable()\n            ).subscribe(async result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                let remoteAgent = result[3];\n\n                this.connectionKey = + params['connectionKey'];\n\n                if (!this.connectionKey) {\n                    this.hubService.addHubErrorMessage('There was no connection specified to import tables.');\n                    this.close();\n                } else {\n                    if (this.hubCache.isLoaded()) {\n                        this.connection = this.hubCache.hub.dexihConnections\n                            .find(connection => connection.key === this.connectionKey);\n\n                        this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n\n                        this.showPage = false;\n\n                        if (remoteAgent) {\n                            if (this.connection) {\n                                this.getTables(this.connection);\n                            } else {\n                                this.hubService.addHubErrorMessage('The connection could not be found.');\n                                this.close();\n                            }\n                        } else {\n                            this.showPageMessage = 'Waiting for an active remote agent...';\n                        }\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Connection Import');\n        }\n\n        // watch for any changes in the connections.\n        this.watchChanges();\n    }\n\n    setTableFilter(tableFilter) {\n        this.tableFilter = tableFilter;\n        this.updateFilter();\n    }\n\n    setViewFilter(viewFilter) {\n        this.viewFilter = viewFilter;\n        this.updateFilter();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    updateFilter() {\n        let tables;\n        switch (this.tableFilter) {\n            case 'Imported':\n                tables = this.tables.filter(c => c.key > 0);\n                break;\n            case 'NonImported':\n                tables = this.tables.filter(c => c.key === 0 || !c.key);\n                break;\n            default:\n                tables = this.tables;\n                break;\n        }\n\n        switch (this.viewFilter) {\n            case 'Views':\n                tables = tables.filter(c => c.tableType === eTableType.View);\n                break;\n            case 'Tables':\n                tables = tables.filter(c => c.tableType === eTableType.Table);\n                break;\n        }\n\n        this._tableData.next(tables);\n    }\n\n    getTables(connection: DexihConnection) {\n        this.showPage = false;\n        this.showPageMessage = 'Importing tables from remote database...';\n\n        this.hubService.getDatabaseTableNames(connection, this.cancelToken)\n            .then(tables => {\n                this.tables = tables;\n\n                let cacheTables = this.hubCache.hub.dexihTables.filter(c => c.connectionKey === connection.key);\n\n                for (let i = 0; i < tables.length; i++) {\n                    let cacheTable = null;\n                    let table = tables[i];\n\n                    if (cacheTables) {\n                        cacheTable = cacheTables.find(t => t.name === table.name && t.schema === table.schema);\n\n                        if (!cacheTable && this.connectionReference && this.connectionReference.defaultSchema === table.schema) {\n                            cacheTable = cacheTables.find(t => t.name === table.name && !t.schema)\n                        }\n                    }\n\n                    if (cacheTable) {\n                        this.tables[i] = cacheTable;\n                    } else {\n                        table.connectionKey = connection.key;\n                        table.tableType = <eTableType>table.tableType;\n                        table.entityStatus = new EntityStatus();\n                    }\n                }\n\n                this.showPage = true;\n                this.showPageMessage = '';\n\n                this.updateFilter();\n\n\n            }).catch(reason => {\n                this.hubService.addHubMessage(reason);\n            });\n    }\n\n\n    import(table: DexihTable) {\n        this.hubService.importTables([table], true, this.cancelToken).then(importResult => {\n            this.mergeTables(importResult);\n            // if (importResult) {\n            //     importResult[0].entityStatus.isBusy = false;\n            // }\n        }).catch(reason => {\n            table.entityStatus.isBusy = false;\n            table.entityStatus.lastStatus = eStatus.Error;\n            table.entityStatus.message = reason.message;\n        });\n    }\n\n    deleteTable(table: DexihTable) {\n        this.hubService.deleteTables([table]).then(result => {\n            table.entityStatus.isBusy = false;\n        }).catch(reason => {\n            table.entityStatus.isBusy = false;\n            table.entityStatus.lastStatus = eStatus.Error;\n            table.entityStatus.message = reason.message;\n        });\n    }\n\n    importSelected(selected: Array<DexihTable>) {\n        let selectedTables = selected.filter(t => !t.entityStatus.isBusy);\n        selectedTables.forEach(t => t.entityStatus.isBusy = true);\n        this.hubService.importTables(selectedTables, true, this.cancelToken).then(result => {\n            this.mergeTables(result);\n            // selectedTables.forEach(t => t.entityStatus.isBusy = false);\n        }).catch(reason => {\n            selectedTables.forEach(t => t.entityStatus.isBusy = false);\n        });\n    }\n\n    mergeTables(tables: Array<DexihTable>) {\n        if (!tables) { return; }\n        tables.forEach(table => {\n            let index = this.tables.findIndex(t => t.name === table.name && t.schema === table.schema);\n\n            if (index >= 0) {\n                this.tables[index] = table;\n            }\n        });\n\n        this.updateFilter();\n    }\n\n    deleteSelected(selected: Array<DexihTable>) {\n        let selectedTables = selected.filter(t => !t.entityStatus.isBusy && t.key > 0);\n\n        if (selectedTables.length === 0) {\n            this.authService.informationDialog(\n                'Can not delete', 'None of the selected tables can be deleted, as they are either busy, or have not been imported.');\n        }\n        selectedTables.forEach(t => t.entityStatus.isBusy = true);\n        this.hubService.deleteTables(selectedTables).then(result => {\n            selectedTables.forEach(t => t.entityStatus.isBusy = false);\n        }).catch(reason => {\n            selectedTables.forEach(t => t.entityStatus.isBusy = false);\n        });\n    }\n\n    editTable(table: DexihTable) {\n        if (table && table.key) {\n            this.router.navigate(['table-edit', table.key], { relativeTo: this.route.parent });\n        }\n    }\n\n    newDatalinks(items: Array<DexihTable>) {\n        let selectedTables = items.filter(t => !t.entityStatus.isBusy);\n        selectedTables.forEach(t => t.entityStatus.isBusy = true);\n        this.hubService.importTables(selectedTables, true, this.cancelToken).then(result => {\n            this.mergeTables(result);\n\n            let tableKeys = result.map(c => c.key).join('|');\n            this.router.navigate(['datalink-new', tableKeys, 0], { relativeTo: this.route.parent });\n\n        }).catch(reason => {\n            selectedTables.forEach(t => t.entityStatus.isBusy = false);\n        });\n\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Table) {\n                if (hubCacheChange.changeType === eImportAction.Replace || hubCacheChange.changeType === eImportAction.New) {\n                    let table: DexihTable = hubCacheChange.data;\n\n                    if (table.connectionKey === this.connectionKey) {\n                        let index = this.tables.findIndex(t => t.name === table.name && t.schema === table.schema);\n                        if (index >= 0) {\n                            this.tables[index] = table;\n                            this.updateFilter();\n                        }\n                    }\n                }\n                if (hubCacheChange.changeType === eImportAction.Delete) {\n                    let deletedTable: DexihTable = hubCacheChange.data;\n                    if (deletedTable.connectionKey === this.connectionKey) {\n                        let previousTable = this.tables.find(t => t.key === deletedTable.key);\n                        if (previousTable) {\n                            // table has been delete, so clear key attributes so it appears deleted.\n                            previousTable.key = null;\n                            previousTable.entityStatus.isBusy = false;\n                            previousTable.updateDate = null;\n                            previousTable.createDate = null;\n                            this.updateFilter();\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<div class=\"container-fluid\">\n\t<dexih-widget title=\"Connections\" iconClass=\"fa fa-lg fa-fw fa-database\" [showCloseButton]=\"true\" (close)=\"close()\">\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\" \n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\" \n\t\t\t[dataObservable]=\"tableData\" \n\t\t\t(rowClick)=\"editConnection($event)\" \t\t\t\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t>\n\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t<actions-connection-button [connections]=\"items\"></actions-connection-button>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.Connection\" [objects]=\"items\" ></tags-update-button>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #filter select=\"filter\" let-items=\"items\">\n\t\t\t\t<dexih-button-dropdown class=\"mr-1\" [autoCompact]=\"false\" buttonClass=\"btn-primary\" iconClass=\"fa fa-filter\" [text]=\"eConnectionPurpose[purposeFilter]\" title=\"Filter by a purpose\"\n\t\t\t\t[pullRight]=\"true\">\n\t\t\t\t   <a class=\"dropdown-item\" [class.active]=\"purposeFilter=='All'\" routerLink='.' [queryParams]=\"{purposeFilter: 'All'}\" title=\"All Connections\">All</a>\n\t\t\t\t   <a *ngFor=\"let purpose of eConnectionPurposeItems | gtFilter:'key':0\" [class.active]=\"purposeFilter==purpose.key\" class=\"dropdown-item\" routerLink='.'\n\t\t\t\t\t[queryParams]=\"{purposeFilter: purpose.key}\" [title]=\"purpose.name\">{{purpose.name}}</a>\n\t\t\t   </dexih-button-dropdown>\t\t\t</ng-template>\n\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\"  title=\"Connections\" path=\"/assets/help/reference/connection.md\"></dexih-help>\n\n</div>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { DexihConnection, eConnectionPurpose, DexihHub, eSharedObjectType, eConnectionPurposeItems } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'connections',\n    templateUrl: './connection-index.component.html',\n    styles: []\n})\nexport class ConnectionIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    pageTitle: string;\n\n    hubCache: HubCache;\n    purposeFilter: eConnectionPurpose;\n    eConnectionPurpose = eConnectionPurpose;\n    eConnectionPurposeItems = eConnectionPurposeItems;\n    public eSharedObjectType = eSharedObjectType;\n    connections: Array<DexihConnection>;\n\n    columns = [\n        { name: 'name', title: 'Name', format: 'Md', footer: 'description', tags: 'tags' },\n        { name: 'purpose', title: 'Purpose', format: '' },\n        { name: 'type', title: 'Type', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the connections.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                let queryParams = result[2];\n                this.hubCache = result[3];\n\n                this.purposeFilter = + queryParams['purposeFilter'];\n                if (!this.purposeFilter) { this.purposeFilter = 0; }\n\n                this.pageTitle = eConnectionPurpose[this.purposeFilter] + ' Connections';\n                this.updateConnections();\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Connection Index');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteConnection(connection: DexihConnection) {\n        this.hubService.deleteConnections([connection]).catch(reason => {\n        });\n    }\n\n    deleteConnections(connections: Array<DexihConnection>) {\n        this.hubService.deleteConnections(connections);\n    }\n\n    editConnection(connection) {\n        this.router.navigate(['connection-edit', connection.key], { relativeTo: this.route });\n    }\n\n    async updateConnections() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let connections: Array<DexihConnection>;\n            if (this.purposeFilter === 0 || !this.purposeFilter) {\n                connections = this.hubCache.hub.dexihConnections;\n            } else {\n                connections = this.hubCache.hub.dexihConnections\n                    .filter(c => c.purpose === this.purposeFilter);\n            }\n\n            let tableData = []\n            for await (const connection of connections)  {\n                let connectionReference = await this.hubService.GetConnectionReference(connection);\n                tableData.push({\n                    key: connection.key,\n                    connectionAssemblyName: connection.connectionAssemblyName,\n                    connectionClassName: connection.connectionClassName,\n                    purpose: eConnectionPurpose[connection.purpose],\n                    type: connectionReference ? connectionReference.name : 'Unknown (' + connection.connectionClassName + ')',\n                    name: connection.name,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.Connection, connection.key),\n                    description: connection.description,\n                    updateDate: connection.updateDate\n                });\n            };\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    export(connections: Array<DexihConnection>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        connections.forEach(connection => { this.hubCache.cacheAddConnection(connection.key, hub); });\n\n        let filename = connections.length === 1 ? 'Connection - ' + connections[0].name + '.json' : 'connections.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Connection\n                || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateConnections();\n            }\n        });\n    }\n}\n","<div class=\"container\">\n    <dexih-widget *ngIf=\"!(tableData | async)?.length\" title=\"Import Objects\"  iconClass=\"fa fa-lg fa-fw fa-level-down\"  [showCloseButton]=\"true\"\n        (close)=\"close()\"     >\n        <ul class=\"list-group\">\n            <li class=\"list-group-item list-group-item-info rounded-0\">\n                <h5>Drop Export Files</h5>\n            </li>\n            <li class=\"list-group-item \">\n                <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                    <div class=\"form-row\">\n                        <section class=\"form-group col-md-6\">\n                            Drop import files\n                        </section>\n                        <section class=\"form-group col-md-6\">\n                            <div class=\"custom-file w-auto pull-right\">\n                                <input #fileInput type=\"file\" class=\"custom-file-input \" (change)=\"uploadFile($event)\">\n                                <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\n                            </div>\n                        </section>\n                    </div>\n                </div>\n            </li>\n            <li class=\"list-group-item list-group-item-info\">\n                <h5>Import Options</h5>\n            </li>\n            <li class=\"list-group-item \">\n                    <fieldset>\n                        <div class=\"form-row\">\n                            <section *ngFor=\"let action of importOptions\" class=\"form-group col-md-6\">\n                                <form-select label=\"{{eSharedObjectType[action.objectType]}} Action\" [(ngModel)]=\"action.action\" [items]=\"importActions\" itemKey=\"key\" itemName=\"name\"\n                                    note='Action when importing {{eSharedObjectType[action.objectType]}}'>\n                                </form-select>\n                            </section>\n                        </div>\n                    </fieldset>\n            </li>\n        </ul>\n\n    </dexih-widget>\n\n    <dexih-widget *ngIf=\"(tableData | async)?.length > 0\" title=\"Import Package\" iconClass=\"fa fa-lg fa-fw fa-level-down\" [showCloseButton]=\"true\" (close)=\"reset()\">\n        <div *ngIf=\"import?.warnings?.length > 0\" class=\"alert alert-warning\" >\n            <ul *ngFor=\"let warning of import.warnings\" class=\"list-item\">\n                Warning: {{warning}}\n            </ul>\n        </div>\n\n        <dexih-table [enableMultiSelect]=\"true\" [columns]=\"columns\" [dataObservable]=\"tableData\">\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button iconClass=\"fa fa-upload\" buttonClass=\"btn-primary\" (click)=\"importSelected(items)\" text=\"Import Selected\" class=\"ml-1\"></dexih-button>\n            </ng-template>\n            \n            <ng-template #actions let-items=\"items\">\n                    <dexih-button iconClass=\"fa fa-cloud-upload\" buttonClass=\"btn-primary\" (click)=\"importAll()\" text=\"Import All\"></dexih-button>\n                    <dexih-button-close class=\"ml-1\" (click)=\"reset()\"></dexih-button-close>\n                </ng-template>\n            </dexih-table>\n\n    </dexih-widget>\n\n</div>","import { Component, OnInit, OnDestroy, ViewChild, ElementRef } from '@angular/core';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { Observable, BehaviorSubject, Subscription} from 'rxjs';\nimport { importActions, HubCache, sharedObjectProperties } from '../../hub.models';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { Import, eImportAction, ImportAction, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'import',\n    templateUrl: './import.component.html',\n    providers: [HubFormsService]\n})\n\nexport class ImportComponent implements OnInit, OnDestroy {\n    @ViewChild('fileInput', { static: true }) fileInput: ElementRef;\n\n    private _hubCacheSubscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public automaticUpload = true;\n\n    pageTitle = 'Import Objects';\n    showPage = false;\n    showPageMessage = 'Loading...';\n    messageId: string;\n\n    importActions = importActions;\n\n    public import: Import;\n    public importOptions: ImportAction[];\n    eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', format: 'Md', description: 'description' },\n        { name: 'objectType', title: 'Type', format: '' },\n        { name: 'importAction', title: 'Action', format: 'Enum', enum: eImportAction },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        public hubFormsService: HubFormsService\n    ) { }\n\n    ngOnInit() {\n        this.importOptions = sharedObjectProperties.map(c => <ImportAction> { action: eImportAction.Replace, objectType: c.type })\n\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            this.hubCache = hubCache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    public doImport(file: File) {\n\n        const form: FormData = new FormData();\n        form.append('file', file, file.name);\n        form.append('hubKey', this.hubCache.hub.hubKey.toString());\n\n        for (let i = 0; i < this.importOptions.length; i++) {\n            form.append(`ImportActions[${i}].Action`, this.importOptions[i].action.toString());\n            form.append(`ImportActions[${i}].ObjectType`, this.importOptions[i].objectType.toString());\n        }\n\n        this.authService.postForm('/api/Hub/ImportPlan', form).then(result => {\n            this.import = result;\n            this.refreshImport();\n        });\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doImport(files[0]);\n        // this.fileInput.nativeElement.value = '';\n    }\n\n    public filesDrop(files: any) {\n        this.doImport(files[0]);\n    }\n\n    public refreshImport() {\n        let objects = [];\n\n        sharedObjectProperties.forEach(o => {\n            let items = this.import[o.property];\n\n            items.forEach(item => {\n                objects.push({\n                    objectType: o.property,\n                    name: item.item.name,\n                    importAction: item.importAction,\n                    item: item,\n                })\n            });\n        });\n\n        this._tableData.next(objects);\n    }\n\n    public reset() {\n        this._tableData.next(null);\n    }\n\n    public importSelected(items) {\n        let newImport = new Import();\n\n        items.forEach(item => {\n            if (!newImport[item.objectType]) {\n                newImport[item.objectType] = [];\n            }\n            newImport[item.objectType].push(item.item);\n        });\n\n        this.hubService.importPackage(newImport).then(() => {\n            this.authService.navigateUp();\n        });\n    }\n\n    public importAll() {\n        this.hubService.importPackage(this.import).then(() => {\n            this.authService.navigateUp();\n        });\n    }\n\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Export\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-feed\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t\t<dexih-table \n\t\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t\t[columns]=\"columns\"\n\t\t\t\t[data]=\"data\"\n\t\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t\t>\n\t\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" text=\"Export Selected\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-api=\"item\">\n\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" text=\"Export All\" (click)=\"exportAll()\"></dexih-button-save-local>\n\t\t\t\t\t</ng-template>\n\n\t\t\t</dexih-table>\n\n\t\t</dexih-widget>\n\t\t\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache, SharedObject } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { DexihApi, DexihHub } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'export',\n    templateUrl: './export.component.html',\n    styles: []\n})\nexport class ExportComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'label', title: 'Item Type'},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    public data: Array<SharedObject>;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.hubCache = result[0];\n\n                if (!this.hubCache.isLoaded()) { return; }\n\n\n                let data: SharedObject[] = this.hubCache.getSharedObjects();\n                this.data = data;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'View Index');\n        }\n    }\n\n    exportAll() {\n        this.export(this.data);\n    }\n\n    export(items: Array<SharedObject>) {\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        items.forEach(item => {\n            this.hubCache.cacheAddObject(item.type, item.item, hub);\n        });\n\n        let filename = items.length === 1 ? `${items[0].label}-${items[0].type}.json` : `hub-${this.hubCache.hub.name}.json`;\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<div class=\"container-fluid\">\n\t<dexih-widget title=\"Data Jobs\" iconClass=\"fa fa-lg fa-fw fa-calendar\"\n\t[showCloseButton]=\"true\"\n\t(close)=\"close()\"\n\t>\n\n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\" \n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\" \n\t\t\t[dataObservable]=\"tableData\" \n\t\t\t(rowClick)=\"editDatajob($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t>\n\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.Datajob'></dependent-items-button>\n\t\t</ng-template>\n\n\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-datajob=\"item\">\n\t\t\t\t<datalink-status [datajobKey]='datajob?.key'></datalink-status>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.Datajob\" [objects]=\"items\" ></tags-update-button>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t<actions-datajob-button [datajobs]=\"items\"></actions-datajob-button>\n\t\t\t</ng-template>\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" title=\"Datalinks\" path=\"/assets/help/reference/datajob.md\"></dexih-help>\n\n</div>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubCache } from '../../hub.models';\nimport { DexihDatajob, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'datajobs',\n    templateUrl: './datajob-index.component.html',\n    styles: []\n})\nexport class DatajobIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    datajobs: Array<DexihDatajob>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the datajobs.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.updateDatajobs();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datajob Index');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    // deleteDatajob(datajob: DexihDatajob) {\n    //     this.hubService.deleteDatajobs([datajob]).catch(reason => {\n    //     });\n    // }\n\n    // deleteDatajobs(datajobs: Array<DexihDatajob>) {\n    //     this.hubService.deleteDatajobs(datajobs);\n    // }\n\n    updateDatajobs() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let datajobs = this.hubCache.hub.dexihDatajobs\n            .filter(c => c.isValid)\n            .map(c => {\n                return {\n                    key: c.key,\n                    name: c.name,\n                    description: c.description,\n                    updateDate: c.updateDate,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.Datajob, c.key)\n                }\n            });\n            this._tableData.next(datajobs);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    // runDatajobs(datajobs, truncateTarget, resetIncremental) {\n    //     this.hubService.runDatajobs(datajobs, truncateTarget, resetIncremental, null);\n    // }\n\n    // activateDatajobs(datajobs) {\n    //     this.hubService.activateDatajobs(datajobs);\n    // }\n\n    // cancelDatajobs(datajobs: Array<DexihDatajob>) {\n    //     this.hubService.deactivateDatajobs(datajobs.map(c => c.key));\n    // }\n\n    editDatajob(datajob: DexihDatajob) {\n        this.router.navigate(['datajob-edit', datajob.key], { relativeTo: this.route });\n    }\n\n    // exportDatajobs(datajobs: Array<DexihDatajob>) {\n    //     const cache = this.hubCache;\n    //     const hub = new DexihHub(this.hubCache.hub.hubKey, '');\n    //     datajobs.forEach(datajob => { this.hubCache.cacheAddDatajob(datajob.key, hub); });\n\n    //     let filename = datajobs.length === 1 ? 'Datajob - ' + datajobs[0].name + '.json' : 'datajobs.json';\n\n    //     this.hubService.exportHub(hub, filename);\n    // }\n\n    watchChanges() {\n        // watch the current datajob in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Datajob || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateDatajobs();\n            }\n        });\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Datalinks\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-exchange\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t<dexih-table \n\t\t\ttableClass=\"table table-striped table-hover m-0\"\n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\" [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"editDatalink($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<actions-datalink-button [datalinks]=\"items\" ></actions-datalink-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #filter select=\"filter\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-dropdown class=\"mr-1\" [autoCompact]=\"false\" buttonClass=\"btn btn-primary\" iconClass=\"fa fa-filter\" [text]=\"eDatalinkType[typeFilter]\" title=\"Filter by a purpose\" [pullRight]=\"true\">\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='All'\" routerLink='.' [queryParams]=\"{typeFilter: 'All'}\" title=\"All Datalinks\">All</a>\n\t\t\t\t\t\t<a *ngFor=\"let datalinkType of eDatalinkTypeItems | gtFilter: 'key': 0\" [class.active]=\"typeFilter==datalinkType.key\" class=\"dropdown-item\" routerLink='.' [queryParams]=\"{typeFilter: datalinkType.key}\" [title]=\"datalinkType.name\">{{datalinkType.name}}</a>\n\t\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.Datalink\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n\t\t\t\t\t<datalink-status [datalinkKey]='item?.key'></datalink-status>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.Datalink'></dependent-items-button>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Datalinks\" path=\"/assets/help/reference/datalink.md\"></dexih-help>\n</div>\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { eDatalinkType, DexihDatalink, eSourceType, eSharedObjectType, eDatalinkTypeItems, DexihTag } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'datalink-index',\n    templateUrl: './datalink-index.component.html',\n    styles: []\n})\nexport class DatalinkIndexComponent implements OnInit, OnDestroy {\n    hubCache: HubCache;\n    typeFilter: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    public eSharedObjectType = eSharedObjectType;\n    public eDatalinkType = eDatalinkType;\n    public eDatalinkTypeItems = eDatalinkTypeItems;\n\n    columns = [\n        { name: 'name', title: 'Name', format: 'Md', footer: 'description', tags: 'tags' },\n        { iconClass: 'sharedIcon', tooltip: 'sharedToolTip', width: '1%', align: 'center' },\n        { name: 'datalinkType', title: 'Datalink Type', format: '' },\n        { name: 'sourceName', title: 'Source', format: '' },\n        { name: 'targetName', title: 'Target', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<DexihDatalink>>(null);\n    tableData: Observable<Array<DexihDatalink>> = this._tableData.asObservable();\n\n    constructor(private hubService: HubService, private authService: AuthService, private router: Router, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let queryParams = result[2];\n                this.hubCache = result[3];\n\n                if (!this.hubCache.isLoaded()) { return; }\n\n                this.typeFilter = + queryParams['typeFilter'];\n                if (!this.typeFilter) {\n                    this.typeFilter = 0;\n                }\n                this.updateDatalinks();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Index');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    private updateDatalinks() {\n        let newDatalinks: Array<DexihDatalink>;\n        if (this.hubCache.isLoaded()) {\n            if (!this.hubCache.hub.dexihDatalinks) {\n                this._tableData.next(new Array<DexihDatalink>());\n            } else {\n\n                if (this.typeFilter === 0 || !this.typeFilter) {\n                    newDatalinks = this.hubCache.hub.dexihDatalinks;\n                } else {\n                    newDatalinks = this.hubCache.hub.dexihDatalinks.filter(d => d.datalinkType === this.typeFilter);\n                }\n\n                let datalinkData = new Array<any>();\n\n                newDatalinks.forEach(d => {\n                    let sourceName = '';\n                    let targetName = '';\n\n                    switch (d.sourceDatalinkTable.sourceType) {\n                        case eSourceType.Table:\n                            let sourceTable = this.hubCache.getTable(d.sourceDatalinkTable.sourceTableKey);\n                            sourceName = sourceTable ? sourceTable.logicalName : 'Error, not found';\n                            break;\n                        case eSourceType.Datalink:\n                            let sourceDatalink = this.hubCache.hub.dexihDatalinks\n                                .find(c => c.key === d.sourceDatalinkTable.sourceDatalinkKey);\n                            sourceName = sourceDatalink ? 'Datalink: ' + sourceDatalink.name : 'Error, not found';\n                            break;\n                        case eSourceType.Rows:\n                            sourceName = 'Static Rows';\n                            break;\n                    }\n\n                    if (d.isQuery) {\n                        targetName = 'None specified.';\n                    } else {\n                        targetName = d.dexihDatalinkTargets.filter(t => t.isValid).map(c => {\n                            let table = this.hubCache.getTable(c.tableKey);\n                            return table && table.logicalName || 'Error, not found';\n                        }).join(', ');\n                    }\n\n                    datalinkData.push({\n                        key: d.key,\n                        datalinkType: this.eDatalinkType[d.datalinkType],\n                        name: d.name,\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.Datalink, d.key),\n                        description: d.description,\n                        sourceName: sourceName,\n                        targetName: targetName,\n                        updateDate: d.updateDate,\n                        sharedIcon: d.isShared ? 'fa fa-group' : 'fa fa-user-secret',\n                        sharedToolTip: d.isShared ? 'Table is shared' : 'Table is private'\n                    });\n                });\n\n                this._tableData.next(datalinkData);\n            }\n        }\n\n    }\n\n    // ngOnDestroy() {\n    //    this.hubSubscription.unsubscribe();\n    // }\n\n    editDatalink(datalink: DexihDatalink) {\n        this.router.navigate(['datalink-edit', 'edit', datalink.key],\n            { queryParamsHandling: 'merge', relativeTo: this.route.parent });\n    }\n\n    watchChanges() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Datalink || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateDatalinks();\n            }\n        });\n    }\n}\n\n\n","<div class=\"container\">\n\t<dexih-widget title=\"New Datalink(s)\"  \n\t\ticonClass=\"fa fa-lg fa-fw fa-exchange\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"!savingDatalink && cancel()\"\n\t\t[padding]=\"true\"\n\t\t>\n\t\t<ng-template #header>\n\t\t\t<dexih-button-save class=\"mr-1\" (click)=\"!savingDatalink && saveDatalink()\" [busy]=\"savingDatalink\"></dexih-button-save>\n\t\t\t<dexih-button-cancel (click)=\"!savingDatalink && cancel()\" [busy]=\"savingDatalink\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<ng-template #subHeader>\n\t\t\t<label class=\"label\">Create datalinks for the following source table(s):</label>\n\t\t\t<div>\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<span class=\"col alert alert-primary m-1\" *ngFor=\"let sourceTable of sourceTables | fieldSort: 'name'\">\n\t\t\t\t\t\t{{sourceTable.name}}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"sourceTableKeys\"  [formGroup]=\"mainForm\">\n\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input *ngIf=\"sourceTables.length == 1\" label=\"Datalink Name\" formControlName=\"name\" placeholder=\"Datalink name (leave blank for auto naming)\" [autocapitalize]=\"true\"\n\t\t\t\t\t\t iconClass=\"fa fa-comment\" [errors]=\"formErrors.name\"></form-input>\n\t\t\t\t\t\t<form-input *ngIf=\"sourceTables.length > 1\" disabled label=\"Datalink Name\" placeholder=\"Datalink name can not be specified when creating multiple datalinks.\"\n\t\t\t\t\t\t iconClass=\"fa fa-comment\"></form-input>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select formControlName=\"datalinkType\" label=\"Type\" [items]=\"eDatalinkTypeItems\" itemKey=\"key\" itemName=\"description\" [errors]=\"formErrors.datalinkType\"></form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select formControlName=\"targetConnectionKey\" label=\"Target Connection\" [items]=\"managedConnections\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" note=\"Specify the connection for the target table.\" [errors]=\"formErrors.targetConnectionKey\" [allowNullSelect]=\"true\" selectNullMessage=\"No target table\"></form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select formControlName=\"auditConnectionKey\" label=\"Audit Connection\" [items]=\"managedConnections\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" note=\"Specify the connection to store execution results.\" [errors]=\"formErrors.auditConnectionKey\"\n\t\t\t\t\t\t [allowNullSelect]=\"true\" selectNullMessage=\"No datalink auditing\"></form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\n\t\t<form *ngIf=\"sourceTableKeys\" >\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"col col-11\">\n\t\t\t\t\t\t\t<form-checkbox label=\"Include source columns in target table\" [ngModel]=\"addSourceColumns\" name=\"addSourceColumns\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"col col-11\">\n\t\t\t\t\t\t\t<label class=\"label\">\n\t\t\t\t\t\t\t\tSpecify the audit columns (in addition to source columns) to be included in the target table.\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<form-checkbox label=\"Select All/None\" (ngModelChange)=\"selectAllAuditColumns()\" [ngModel]=\"allAuditColumns\" name=\"selectAllAuditColumns\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section *ngFor=\"let auditColumnType of auditColumnTypes\" class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t<form-checkbox [label]=\"auditColumnType.name\" [(ngModel)]=\"auditColumnType.value\" [ngModelOptions]=\"{standalone: true}\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HubService } from '../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { eDatalinkType, DexihConnection, DexihTable, eConnectionPurpose, eDeltaType, eSharedObjectType, eDatalinkTypeItems } from '../../../shared/shared.models';\n\n@Component({\n\n  selector: 'dexih-datalink-new-form',\n  templateUrl: './datalink-new.component.html'\n})\nexport class DatalinkNewComponent implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n  private _valueChangesSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n  private hubCache: HubCache;\n\n  public pageTitle: string;\n\n  hasChanged = false;\n  showAllErrors = false;\n\n  private tableKeys: Array<number>;\n\n  public sourceTableKeys: Array<number>;\n  public name: string;\n  public datalinkType: eDatalinkType;\n  public targetConnectionKey: number;\n  public auditConnectionKey: number;\n  public addSourceColumns = true;\n\n  public managedTargetConnections: Array<DexihConnection>;\n  public managedConnections: Array<DexihConnection>;\n\n  public sourceTables: Array<DexihTable>;\n\n  public eConnectionPurpose = eConnectionPurpose;\n\n  public auditColumnTypes = [\n    { key: eDeltaType.AutoIncrement, name: 'Auto Incrementing Key', value: false },\n    { key: eDeltaType.IsCurrentField, name: 'Is Current Flag', value: false },\n    { key: eDeltaType.Version, name: 'Record Version', value: false },\n    { key: eDeltaType.ValidFromDate, name: 'Valid From Date', value: false },\n    { key: eDeltaType.ValidToDate, name: 'Valid To Date', value: false },\n    { key: eDeltaType.CreateDate, name: 'Created Date', value: false },\n    { key: eDeltaType.UpdateDate, name: 'Updated Date', value: false },\n    { key: eDeltaType.CreateAuditKey, name: 'Created by AuditKey Reference', value: false },\n    { key: eDeltaType.UpdateAuditKey, name: 'Updated by AuditKey Reference', value: false }\n  ];\n\n  public allAuditColumns = false;\n\n  eDatalinkTypeItems = eDatalinkTypeItems;\n\n  public savingDatalink = false;\n\n  mainForm: FormGroup;\n\n  formErrors = {\n    'name': '',\n    'targetConnectionKey': '',\n    'auditConnectionKey': '',\n    'datalinkType': ''\n  };\n\n  validationMessages = {\n    'name': {\n      'required': 'Name is required.',\n      'minlength': 'Name must be at least 4 characters long.',\n      'maxlength': 'Name cannot be more than 50 characters long.',\n    },\n    'targetConnectionKey': {\n    },\n    'auditConnectionKey': {\n    },\n    'datalinkType': {\n      'required': 'Datalink Type is required.',\n    },\n  };\n\n\n  constructor(\n    private hubService: HubService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private fb: FormBuilder) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let params = result[1];\n        this.hubCache = result[2];\n\n        this.managedTargetConnections = this.hubCache.hub.dexihConnections\n          .filter(c => c.purpose === eConnectionPurpose.Managed || c.purpose === eConnectionPurpose.Target)\n\n        this.managedConnections = this.hubCache.hub.dexihConnections\n          .filter(c => c.purpose === eConnectionPurpose.Managed)\n\n        let tableKeys: string = params['sourceTableKeys'];\n        this.tableKeys = tableKeys.split('|').map(c => +c);\n\n        if (this.hubCache.status === eCacheStatus.Loaded) {\n          this.updateTables();\n\n          this.targetConnectionKey = +params['targetConnectionKey'];\n\n          if (!this.targetConnectionKey) {\n            let targetConnection = this.hubCache.hub.dexihConnections.find(c => c.purpose === eConnectionPurpose.Managed);\n            if (targetConnection) {\n              this.targetConnectionKey = targetConnection.key;\n            }\n          }\n          this.auditConnectionKey = this.targetConnectionKey;\n          this.datalinkType = eDatalinkType.General;\n\n          this.buildForm();\n\n          this.watchChanges();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Datalink New');\n    }\n\n\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n  }\n\n  updateTables() {\n\n    this.sourceTableKeys = new Array<number>();\n    this.sourceTables = new Array<DexihTable>();\n\n    if (this.tableKeys && this.hubCache.hub.dexihConnections) {\n      this.hubCache.hub.dexihTables.forEach(table => {\n        if (this.tableKeys.findIndex(t => t === table.key) >= 0) {\n          this.sourceTableKeys.push(table.key);\n          this.sourceTables.push(table);\n        }\n      });\n    }\n  }\n\n  buildForm(): void {\n    this.mainForm = this.fb.group({\n      'name': [this.name, [\n      ]],\n      'targetConnectionKey': [this.targetConnectionKey > 0 ? this.targetConnectionKey : null, [\n        // Validators.required,\n      ]],\n      'auditConnectionKey': [this.auditConnectionKey > 0 ? this.auditConnectionKey : null, [\n        // Validators.required,\n      ]],\n      'datalinkType': [this.datalinkType, [\n        Validators.required,\n      ]],\n    });\n\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    this._valueChangesSubscription = this.mainForm.valueChanges.subscribe(data => this.onValueChanged());\n    this.onValueChanged(); // (re)set validation messages now\n\n\n    this.hasChanged = false;\n  }\n\n  onValueChanged() {\n    if (!this.mainForm) { return; }\n    const form = this.mainForm;\n\n    this.hasChanged = true;\n\n    for (const field of Object.keys(this.formErrors)) {\n      // clear previous error message (if any)\n      this.formErrors[field] = '';\n      const control = form.get(field);\n\n      if (control && (control.dirty || this.showAllErrors) && !control.valid) {\n        const messages = this.validationMessages[field];\n        for (const key of Object.keys(control.errors)) {\n          this.formErrors[field] += messages[key] + ' ';\n        }\n      }\n    }\n  }\n\n  selectAllAuditColumns() {\n    this.allAuditColumns = !this.allAuditColumns;\n    this.auditColumnTypes.forEach(c => c.value = this.allAuditColumns);\n  }\n\n  saveDatalink() {\n    if (this.mainForm.valid) {\n\n      let value = this.mainForm.value;\n      this.savingDatalink = true;\n      let auditColumns = this.auditColumnTypes.filter(c => c.value).map(c => c.key);\n      this.hubService.createDatalinks(\n        this.sourceTableKeys,\n        value.name,\n        value.datalinkType,\n        value.targetConnectionKey,\n        null,\n        null,\n        value.auditConnectionKey,\n        this.addSourceColumns,\n        auditColumns).then(result => {\n          this.savingDatalink = false;\n          if (result.length === 1) {\n            this.openDatalink(result[0].key);\n          } else {\n            this.router.navigate(['/hub', this.hubCache.hub.hubKey, 'datalinks'], { relativeTo: this.route.root });\n          }\n        }).catch(() => {\n          this.savingDatalink = false;\n        });\n    } else {\n      this.showAllErrors = true;\n      this.onValueChanged();\n    }\n  }\n\n  cancel() {\n    this.location.back();\n  }\n\n  // delay the open datalink until the hub cache is updated with the new datalink.\n  openDatalink(key: number, iteration = 0) {\n    if (iteration >= 10 ) {\n      this.router.navigate(['/hub', this.hubCache.hub.hubKey, 'datalinks'], { relativeTo: this.route.root });\n    }\n    setTimeout(() => {\n      if (this.hubCache.hub.dexihDatalinks.findIndex(c => c.key === key) >= 0) {\n        this.router.navigate(['/hub', this.hubCache.hub.hubKey, 'datalinks', 'datalink-edit', 'edit', key],\n        { relativeTo: this.route.root });\n      } else {\n        this.openDatalink(key, iteration++);\n      }\n    }, 500);\n  }\n\n  watchChanges() {\n    // watch the current connection in case it is changed in another session.\n    this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n        if (hubCacheChange.changeClass === eSharedObjectType.Table) {\n            this.updateTables();\n        }\n    });\n}\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { eDataObjectType } from '../../../shared/shared.models';\n\n@Component({\n\n    selector: 'datalink-preview-data',\n    templateUrl: './datalink-preview-data.component.html'\n})\nexport class DatalinkPreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public key: number;\n    public previewUpdates: boolean;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n                this.key = +params['datalinkKey'];\n                this.previewUpdates = params['previewUpdates'] === 'true';\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n}\n","<div class=\"container-fluid\">\n\n    <dexih-widget title=\"Preview Datalink\" iconClass=\"fa fa-lg fa-fw fa-exchange\" [showCloseButton]=\"true\"\n        (close)=\"close()\">\n        <preview-data [key]='key' [previewUpdates]='previewUpdates' [viewSource]='eDataObjectType.Datalink'></preview-data>\n    </dexih-widget>\n</div>","<div *ngIf=\"!connectionTables || connectionTables.length === 0\" class=\"alert alert-danger m-3\">\n    There are no files configured.  Create a file based connection, and add at least one file definition.\n    <hr>\n    <div>\n        <dexih-button-new routerLink=\"/hub/{{hubCache?.hub.hubKey}}/connections/connection-new/Source\" text=\"New Connection\" [autoCompact]=\"false\"></dexih-button-new>\n        <dexih-button *ngFor=\"let connection of fileConnections\" routerLink=\"/hub/{{hubCache?.hub.hubKey}}/connections/tables/table-new/{{connection.key}}\" [autoCompact]=\"false\" [title]=\"\">New Table ({{connection.name}})</dexih-button>\n    </div>\n</div>\n\n<div *ngIf=\"connectionTables && connectionTables.length > 0\" class=\"container\">\n    <dexih-widget [title]=\"'Manage Files: ' + table?.name\" iconClass=\"fa fa-lg fa-fw fa-table\" [showCloseButton]=\"true\"\n        (close)=\"close()\"     >\n        <ng-template #header>\n            <dexih-button-dropdown class=\"mr-1\" iconClass=\"fa fa-file-o\" text=\"New File\">\n                    <a *ngFor=\"let connection of fileConnections\" class=\"dropdown-item\" routerLink=\"/hub/{{hubCache?.hub.hubKey}}/connections/tables/table-new/{{connection.key}}\" [title]=\"\">{{connection.name}}</a>\n            </dexih-button-dropdown>\n            <dexih-button-dropdown *ngIf=\"connectionReference?.allowFlatFiles && table?.autoManageFiles\" iconClass=\"fa fa-filter\" [text]=\"eFlatFilePath[path]\" title=\"Select the file location\" [pullRight]=\"true\">\n                    <a *ngFor=\"let item of eFlatFilePathItems\" class=\"dropdown-item\" [class.active]=\"path=='item.name'\" routerLinkActive=\"active\" data-toggle=\"tab\" routerLink=\".\" [queryParams]=\"{tableKey: tableKey, path: item.key}\">\n                            <i class=\"fa fa-elipsis-h\"></i>{{item.name}}</a>\n            </dexih-button-dropdown>\n        </ng-template>\n\n        <ul *ngIf=\"table\" class=\"list-group\">\n            <li class=\"list-group-item\">\n                <section>\n                    <form-select label=\"Flat File\" [(ngModel)]=\"tableKey\" [ngModelOptions]=\"{standalone: true}\"\n                        (ngModelChange)=\"updateTable($event)\" [items]=\"connectionTables\" parentName=\"name\" childItems=\"dexihTables\"\n                        itemKey=\"key\" itemName=\"logicalName\" note=\"Select the flat file to manage\">\n                    </form-select>\n                </section>\n                <section *ngIf=\"!connectionReference?.allowFlatFiles\">\n                    <form-select label=\"Update Strategy\" [(ngModel)]=\"updateStrategy\" [ngModelOptions]=\"{standalone: true}\"\n                        [items]=\"updateStrategies\" itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-database\"\n                        note='Specify how records should be inserted/updated in the target table.'\n                        >\n                    </form-select>\n                </section>\n            </li>\n            <li class=\"list-group-item list-group-item-info rounded-0\">\n                <h5>Drop Files to Upload</h5>\n            </li>\n            <li class=\"list-group-item \">\n                <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                    Drop Files to Upload Here\n                    <div class=\"custom-file w-25 float-right\">\n                        <input type=\"file\" class=\"custom-file-input\" onclick=\"this.value=null\" (change)=\"uploadFile($event)\">\n                        <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose files</label>\n                    </div>\n                </div>\n            </li>\n            <li class=\"list-group-item list-group-item-info  rounded-0\">\n                <h5>Upload Queue</h5>\n            </li>\n            <li class=\"list-group-item p-0\">\n                <dexih-table [enableMultiSelect]=\"true\" [columns]=\"uploadColumns\" [data]=\"uploadedFiles\">\n\n                    <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                        <dexih-button class=\"mr-1\" iconClass=\"fa fa-upload\" buttonClass='btn-primary' (click)=\"uploadSelected(items)\">Upload</dexih-button>\n                        <dexih-button-cancel class=\"mr-1\" (click)=\"cancelSelected(items)\"></dexih-button-cancel>\n                        <dexih-button-delete (click)=\"removeSelected(items)\" text=\"Remove\"></dexih-button-delete>\n                    </ng-template>\n\n                    <ng-template #actions let-items=\"items\">\n                        <section>\n                            <form-checkbox [(ngModel)]=\"automaticUpload\" label=\"Automatically upload files when added to the queue.\"></form-checkbox>\n                        </section>\n                    </ng-template>\n\n                    <ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n                        <div *ngIf=\"item.isRunning()\" class=\"progress\" style=\"margin-bottom: 0;\">\n                            <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': item.progress + '%' }\"></div>\n                        </div>\n                        <span >\n                            <i class='fa' [ngClass]=\"{\n                                'fa-check': item.status === eFileStatus.Complete, \n                                'fa-exclamation-circle': item.status === eFileStatus.Error,\n                                'fa-ban': item.status === eFileStatus.Cancelled}\"></i>{{item.status}}</span>\n                    </ng-template>\n                </dexih-table>\n            </li>\n            <ng-template [ngIf]=\"connectionReference?.allowFlatFiles\">\n            <li class=\"list-group-item list-group-item-info rounded-0\">\n                <h5>Files (Local directory:\n                    <a href='file://///{{localPath}}'>{{localPath}}</a>)</h5>\n\n            </li>\n            <li class=\"list-group-item p-0\">\n                <dexih-table [enableMultiSelect]=\"true\" [columns]=\"columns\" [dataObservable]=\"tableData\">\n\n                    <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                        <dexih-button-delete class=\"mr-1\" (click)=\"deleteSelected(items)\"></dexih-button-delete>\n                        <dexih-button-download class=\"mr-1\" (click)=\"downloadSelected(items)\"></dexih-button-download>\n                        <dexih-button-dropdown class=\"mr-1\" iconClass=\"fa fa-mail-forward\" text=\"Move\" [pullRight]=\"true\">\n                            <a class=\"dropdown-item\" *ngIf=\"path != eFlatFilePath.Incoming\" (click)=\"moveSelected(items, eFlatFilePath.Incoming)\">To Incoming</a>\n                            <a class=\"dropdown-item\" *ngIf=\"path != eFlatFilePath.Outgoing\" (click)=\"moveSelected(items, eFlatFilePath.Outgoing)\">To Processed</a>\n                            <a class=\"dropdown-item\" *ngIf=\"path != eFlatFilePath.Processed\" (click)=\"moveSelected(items, eFlatFilePath.Processed)\">To Processed</a>\n                            <a class=\"dropdown-item\" *ngIf=\"path != eFlatFilePath.Rejected\" (click)=\"moveSelected(items, eFlatFilePath.Rejected)\">To Rejected</a>\n                        </dexih-button-dropdown>\n                    </ng-template>\n\n                    <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n                        <dexih-button-preview [routerLink]=\"['/hub', hubCache?.hub.hubKey, 'summary', 'files', 'manage', tableKey, 'file-preview', path, item.fileName]\"></dexih-button-preview>\n                    </ng-template>\n\n                    <ng-template #actions let-items=\"items\">\n                        <dexih-button-dropdown *ngIf=\"table?.autoManageFiles\" class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-filter\" [text]=\"eFlatFilePath[path]\"\n                            title=\"Select the file location\" [pullRight]=\"true\">\n                            <a *ngFor=\"let item of eFlatFilePathItems\" class=\"dropdown-item\" [class.active]=\"path=='item.name'\" routerLinkActive=\"active\" data-toggle=\"tab\" routerLink=\".\" [queryParams]=\"{tableKey: tableKey, path: item.key}\">\n                                <i class=\"fa fa-elipsis-h\"></i>{{item.name}}</a>\n                        </dexih-button-dropdown>\n                        <dexih-button-refresh (click)=\"refreshFiles()\"></dexih-button-refresh>\n                    </ng-template>\n                </dexih-table>\n            </li>\n        </ng-template>\n        </ul>\n    </dexih-widget>\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { HubCache, FileProperties, eCacheStatus, ConnectionTables, updateStrategies } from '../../hub.models';\nimport { Message, FileHandler, eFileStatus, CancelToken } from '../../../+auth/auth.models';\nimport { DexihTable, eFlatFilePath, DexihConnection, eConnectionCategory, eFlatFilePathItems, eConnectionPurpose,\n    ConnectionReference, RemoteLibraries, eUpdateStrategy, eUpdateStrategyItems } from '../../../shared/shared.models';\n\n\n@Component({\n    selector: 'files-manage',\n    templateUrl: './files-manage.component.html'\n})\nexport class FilesManageComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n    public table: DexihTable;\n    public connectionReference: ConnectionReference;\n    public updateStrategy: eUpdateStrategy = eUpdateStrategy.Reload;\n\n    public updateStrategies = updateStrategies;\n\n    public path = eFlatFilePath.None;\n    public localPath: string;\n    public eFlatFilePath = eFlatFilePath;\n    public eFlatFilePathItems = eFlatFilePathItems.filter(c => c.key > 0);\n    public eFileStatus = eFileStatus;\n\n    public connectionTables: ConnectionTables[];\n\n    public remoteLibraries: RemoteLibraries;\n\n    public hubCache: HubCache;\n\n    public automaticUpload = true;\n\n    public uploadedFiles: FileHandler[] = [];\n    public cancelToken: CancelToken = new CancelToken();\n\n    pageTitle = 'Manage Files';\n    showPage = false;\n    showPageMessage = 'Loading...';\n\n    columns = [\n        { name: 'fileName', title: 'File Name', format: '' },\n        { name: 'length', title: 'Size', format: '' },\n        { name: 'lastModified', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<FileProperties>>(null);\n    tableData: Observable<Array<FileProperties>> = this._tableData.asObservable();\n\n    uploadColumns = [\n        { name: 'file.name', title: 'File Name', format: '' },\n        { name: 'file.size', title: 'Size', format: '' },\n    ];\n\n    public fileConnections: DexihConnection[];\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private route: ActivatedRoute,\n        private router: Router) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(true),\n                this.hubService.getRemoteLibrariesObservable(),\n            ).subscribe(result => {\n                let params = result[0];\n                let queryParams = result[1];\n                this.hubCache = result[2];\n                this.remoteLibraries = result[3];\n\n                // if (this.hubCache.status !== eCacheStatus.Loaded) { return; }\n\n                // if the connection is a file connection or not a source connection\n                this.fileConnections = this.hubCache.hub.dexihConnections\n                    .filter(c => {\n                        let ref = this.remoteLibraries.connections.find(con =>\n                            c.connectionAssemblyName === con.connectionAssemblyName\n                            && c.connectionClassName === con.connectionClassName);\n                        if (ref) {\n                            return (ref.connectionCategory === eConnectionCategory.File || c.purpose !== eConnectionPurpose.Source);\n                        } else {\n                            return false;\n                        }\n                    });\n\n                let connectionTables = this.hubCache.getConnectionTables();\n\n                this.connectionTables = connectionTables.filter(c => {\n                    if (c.dexihTables.length > 0) {\n                        return this.fileConnections.find(fc => c.key === fc.key) == null ? false : true;\n                    }\n                });\n\n                let hasChanged = false;\n                this.tableKey = +queryParams['tableKey'];\n                if (!this.tableKey) {\n                    if (this.connectionTables.length > 0 && this.connectionTables[0].dexihTables.length > 0) {\n                        this.tableKey = this.connectionTables[0].dexihTables[0].key;\n                        hasChanged = true;\n                    }\n                }\n\n                this.path = +queryParams['path'];\n                if (!this.path) {\n                    this.path = eFlatFilePath.Incoming;\n                    hasChanged = true;\n                }\n\n                if (hasChanged) {\n                    this.router.navigate(\n                        [],\n                        {\n                          relativeTo: this.route,\n                          queryParams: { tableKey: this.tableKey, path: this.path},\n                          queryParamsHandling: 'merge', // remove to replace all query params by provided\n                        });\n                        return;\n                }\n\n                this.table = this.hubCache.getTable(this.tableKey);\n                let connection = this.hubCache.getConnection(this.table.connectionKey);\n                this.connectionReference = this.remoteLibraries.connections.find(con =>\n                    connection.connectionAssemblyName === con.connectionAssemblyName\n                    && connection.connectionClassName === con.connectionClassName);\n\n                if (!this.table && this.tableKey) {\n                    this.hubService.addHubErrorMessage(`The table with the key ${this.tableKey} could not be found.`);\n                } else if (this.table) {\n                    this.pageTitle = 'Manage files for ' + this.table.name;\n                    this.showPage = true;\n                    this.refreshFiles();\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Files Manage');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    updateTable(tableKey: number) {\n        this.router.navigate(\n            [],\n            {\n              relativeTo: this.route,\n              queryParams: { tableKey: tableKey, path: 'incoming'},\n              queryParamsHandling: 'merge', // remove to replace all query params by provided\n            });\n    }\n\n    refreshFiles() {\n        if (this.connectionReference.allowsFlatFiles) {\n            this.hubService.getFileList(this.table, this.path, this.cancelToken).then(result => {\n                this._tableData.next(result);\n            }).catch(reason => {\n                this._tableData.next([]);\n            });\n        }\n    }\n\n    public uploadSelected(items: Array<FileHandler>) {\n        items.forEach(item => {\n            this.authService.upload(item).then(status => {\n                if (status.success) {\n                    this.hubService.addHubSuccessMessage(`File ${item.file.name} uploaded successfully.`)\n                    this.refreshFiles();\n                } else {\n                    this.hubService.addHubMessage(status);\n                }\n            }).catch(reason => {\n                this.hubService.addHubMessage(reason);\n            });\n        });\n    }\n\n    public removeSelected(items: Array<FileHandler>) {\n        items.forEach(item => {\n            let index = this.uploadedFiles.findIndex(c => c.id === item.id);\n            if (index >= 0) {\n                this.uploadedFiles.splice(index, 1);\n            }\n        });\n    }\n\n    public cancelSelected(items: Array<FileHandler>) {\n        items.forEach(item => item.cancel());\n    }\n\n    public deleteSelected(items: Array<FileProperties>) {\n        let files = items.map(c => c.fileName);\n        this.hubService.deleteFiles(this.table, this.path, files, this.cancelToken).then(c => {\n            if (c) {\n                this.refreshFiles();\n            }\n        }).catch();\n    }\n\n    public moveSelected(items: Array<FileProperties>, toPath: eFlatFilePath) {\n        let files = items.map(c => c.fileName);\n        this.hubService.moveFiles(this.table, this.path, toPath, files, this.cancelToken).then(c => {\n            if (c) {\n                this.refreshFiles();\n            }\n        }).catch(reason => {\n            this.hubService.addHubMessage(status);\n        });\n}\n\n    public downloadSelected(items: Array<FileProperties>) {\n        let files = items.map(c => c.fileName);\n        this.hubService.downloadFiles(this.table, this.path, files, this.cancelToken).then(c => {\n            if (c) {\n                this.refreshFiles();\n            }\n        }).catch();\n    }\n\n    public preview(item: FileProperties) {\n        this.router.navigate(['hub', this.hubCache.hub.hubKey, 'summary', 'files', 'manage', this.tableKey, this.path, item.fileName]);\n    }\n\n    public close() {\n        this.authService.navigateUp();\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doUpload(files);\n        return false;\n    }\n\n    public doUpload(files) {\n        Array.prototype.forEach.call(files, file => {\n            this.hubService.uploadFile(this.table, this.path, this.updateStrategy, file.name, this.cancelToken).then(url => {\n                let fileHandler = new FileHandler(file, url);\n                if (this.automaticUpload) {\n                    this.authService.upload(fileHandler).then(status => {\n                        if (status.success) {\n                            this.hubService.addHubSuccessMessage(`File ${file.name} uploaded successfully.`)\n                            this.refreshFiles();\n                        } else {\n                            this.hubService.addHubMessage(status);\n                        }\n                    }).catch(reason => {\n                        this.hubService.addHubMessage(reason);\n                    });\n\n                }\n                this.uploadedFiles.push(fileHandler);\n                this.uploadedFiles = [...this.uploadedFiles];\n            }).catch(reason => {\n                this.hubService.addHubMessage(reason);\n            });\n        });\n    }\n\n    public filesDrop(files: any) {\n        this.doUpload(files);\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Hub Variables\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-at\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n \n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-hubVariable=\"item\">\n\t\t\t\t\t<dexih-button-edit class=\"mr-1\" [routerLink]=\"['hubVariable-edit', hubVariable.key]\" queryParamsHandling preserveFragment></dexih-button-edit>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t\t<dexih-button-delete *ngIf=\"hubCache.canWrite\" class=\"mr-1\" (click)=\"deleteHubVariables(items)\"></dexih-button-delete>\n\t\t\t\t\t<tags-update-button class=\"mr-1\" [objectType]=\"eSharedObjectType.HubVariable\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-new *ngIf=\"hubCache.canWrite\" class=\"mr-1\" [routerLink]=\"['hubVariable-new']\"></dexih-button-new>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Hub Variables\" path=\"/assets/help/reference/hubVariable.md\"></dexih-help>\n\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Observable, Subscription, BehaviorSubject, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DexihHubVariable, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'hubVariable',\n  templateUrl: './hubVariable-index.component.html',\n  styles: []\n})\nexport class HubVariableIndexComponent implements OnInit, OnDestroy {\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    hubVariables: Array<DexihHubVariable>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', format: '', tags: 'tags'},\n        { name: 'value', title: 'Value', format: ''},\n        { name: 'isEncrypted', title: 'Encrypted?', format: 'Boolean'},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        this._subscription = combineLatest(\n            this.hubService.getHubCacheObservable()\n        ).subscribe(result => {\n          this.hubCache = result[0];\n          this.updateVariables();\n        });\n    } catch (e) {\n        this.hubService.addHubClientErrorMessage(e, 'Hub Variables Index');\n      }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteHubVariables(variables: Array<DexihHubVariable>) {\n        this.hubService.deleteHubVariables(variables);\n    }\n\n    updateVariables() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let variables = this.hubCache.hub.dexihHubVariables.filter(c => c.isValid).map(c => {\n                return {\n                    key: c.key,\n                    name: c.name,\n                    description: c.description,\n                    updateDate: c.updateDate,\n                    value: c.isEncrypted ? '(Encrypted)' : c.value,\n                    isEncrypted: c.isEncrypted,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.HubVariable, c.key)\n                }\n            });\n            this._tableData.next(variables);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(variable: DexihHubVariable) {\n        this.router.navigate(['hubVariable-edit', variable.key], { relativeTo: this.route});\n    }\n\n    export(variables: Array<DexihHubVariable>) {\n        let vars = this.hubCache.hub.dexihHubVariables.filter(c => {\n            return variables.findIndex(d => d.key === c.key) >= 0\n        });\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        hub.dexihHubVariables = vars;\n        let filename = 'hub_variables.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n\n    watchChanges() {\n      // watch the current validation in case it is changed in another session.\n      this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n          if (hubCacheChange.changeClass === eSharedObjectType.HubVariable || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n            this.updateVariables();\n          }\n      });\n  }\n}\n","<div class=\"container\">\n\t<dexih-widget \n\ttitle=\"Edit Variable\" \n\ticonClass=\"fa fa-lg fa-fw fa-at\" \n\t[showCloseButton]=\"true\"\n\t[padding]=\"true\"\n\t(close)=\"close()\"\n\t>\n        <ng-template #header>\n            <dexih-button-save *ngIf=\"hubCache.canWrite\" class=\"mr-1\" (click)=\"save()\"></dexih-button-save>\n            <cancel-button [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n\t\t<form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\" >\n\t\t\t<!--dummy hidden password to stop chrome/firefox autocompletion password.-->\n\t\t\t<input id=\"fake_user_name\" name=\"fake_user[name]\" style=\"position:absolute; top:-5000px;\" type=\"text\" value=\"Fake Auto-fill\">\n\t\t\t<input id=\"fake_password\" type=\"password\" name=\"fake_password[password]\" style=\"position:absolute; top:-5000px;\" type=\"text\" value=\"Fake Auto-fill\">\n\n\t\t\t<fieldset>\n\n\t\t\t\t\t\t\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Hub Variable Name\" formControlName=\"name\" placeholder=\"Enter the name.\" [autocapitalize]=\"true\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\" >\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input [label]=\"formsService.currentForm.controls.isEnvironmentVariable.value ? 'Environment Variable Name' : 'Hub Variable Value'\" [type]=\"formsService.currentForm.controls.isEncrypted.value ? 'password' : 'text'\" formControlName=\"valueRaw\" placeholder=\"Enter the value.\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['value']\" autocomplete=\"off\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<section >\n\t\t\t\t\t<form-checkbox label=\"Encrypt value\" formControlName=\"isEncrypted\" >\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t\t<section >\n\t\t\t\t\t<form-checkbox label=\"Use an environment variable on the remote agent\" formControlName=\"isEnvironmentVariable\" >\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t</fieldset>\n\t\t</form>\n \n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\"  title=\"Hub Variables\" path=\"/assets/help/reference/hubVariable.md\"></dexih-help>\n\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DexihHubVariable } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-hubVariable-edit-form',\n  templateUrl: './hubVariable-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class HubVariableEditComponent implements OnInit, OnDestroy {\n\n  private hubVariableKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _isEncryptedSubscription: Subscription;\n  private isLoaded = false;\n\n  private cancelToken = new CancelToken();\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.pageTitle = data['pageTitle'];\n        this.action = data['action'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Variables');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._isEncryptedSubscription) { this._isEncryptedSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.hubVariableKey = + this.params['hubVariableKey'];\n\n      if (!this.hubVariableKey) {\n        this.hubService.addHubErrorMessage('There was no variable specified to edit.');\n        // this.errorMessage = 'There was no validation specified to edit.';\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihHubVariables) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let hubVariable = this.hubCache.hub.dexihHubVariables.find(c => c.key === this.hubVariableKey);\n          this.formsService.hubVariable(hubVariable);\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let hubVariable = new DexihHubVariable();\n      hubVariable.value = '';\n      hubVariable.name = '';\n      this.formsService.hubVariable(hubVariable);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/hubVariable-new', `/hubVariable-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n    this._isEncryptedSubscription = this.formsService.currentForm.controls.isEncrypted.valueChanges.subscribe(isEncrypted => {\n      if (!isEncrypted) {\n        this.formsService.currentForm.controls.valueRaw.setValue('');\n      }\n    });\n  }\n\n  async save() {\n    let form = this.formsService.currentForm;\n\n    let isEncrypted = form.controls.isEncrypted.value;\n    if (isEncrypted) {\n      let valueRaw = form.controls.valueRaw.value;\n        if (valueRaw) {\n          let value = await this.hubService.encrypt(valueRaw, this.cancelToken);\n          form.controls.value.setValue(value);\n          form.controls.valueRaw.setValue(null);\n        }\n      } else {\n        let valueRaw = form.controls.valueRaw.value;\n        form.controls.value.setValue(valueRaw);\n      }\n\n    await this.formsService.save();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n}\n","<dexih-message class=\"p-3\" #DexihMessage></dexih-message>\n\n<div class=\"container-fluid\">\n\t<dexih-widget-vertical>\n\t<dexih-widget title=\"Invite Users\" iconClass=\"fa fa-lg fa-fw fa-birthday-cake\" [padding]=\"true\">\n\t\t\n\t\t<ng-template #subHeader>\n\t\t\t<dexih-button-save [disabled]=\"emails.length == 0\" (click)=\"addUsers()\" text=\"Add User(s)\"></dexih-button-save>\n\t\t</ng-template>\n\n\t\t<form >\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<form-select label=\"Permission\" [(ngModel)]=\"permission\" name=\"permission\" [items]=\"ePermissionItems\" itemKey=\"key\" itemName=\"name\" note='Permission level to grant to emails' [enableFilter]=\"false\">\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-tags label=\"Email Addresses / User names\" [(ngModel)]=\"emails\" name=\"emails\" note=\"Provide a list of user names or email addresses of users to join the hub.\">\n\t\t\t\t\t</form-tags>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<form-checkbox label=\"Send invites\" [(ngModel)]=\"sendInvites\" name=\"sendInvites\" note=\"Emails which are not registered to use the integration hub will be sent an invite to join.\">\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget>\n\n\t<dexih-widget title=\"Current Users\" iconClass=\"fa fa-lg fa-fw fa-group\">\n\t\t<dexih-table [enableMultiSelect]=\"true\" [columns]=\"columns\"\n\t\t [dataObservable]=\"tableData\">\n\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t<dexih-button-delete class=\"mr-1\" (click)=\"deleteUsers(items)\"></dexih-button-delete>\n\t\t\t\t<dexih-button-dropdown buttonClass=\"btn-primary\" iconClass=\"fa fa-lock\" text=\"Set Permission\">\n\t\t\t\t\t<a *ngFor=\"let permission of ePermissionItems\" class=\"dropdown-item\" (click)=\"setPermission(permission.key, items)\">{{permission.name}}</a>\n\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t<dexih-button-dropdown buttonClass=\"btn-primary\" iconClass=\"fa fa-bell\" text=\"Set User Alert\" class=\"ml-1\">\n\t\t\t\t\t<a class=\"dropdown-item\" (click)=\"setUserAlert(true, items)\">Receive alert emails</a>\n\t\t\t\t\t<a class=\"dropdown-item\" (click)=\"setUserAlert(false, items)\">Do not receive alert emails.</a>\n\t\t\t\t</dexih-button-dropdown>\n\t\t\t</ng-template>\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t</dexih-widget-vertical>\n</div>","import { Component, OnInit, OnDestroy, Input, ViewChild } from '@angular/core';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { DexihMessageComponent } from  '../../../shared/ui/dexihMessage/dexih-message.component';\nimport { UserAuthorization } from '../../../+admin/admin.models';\nimport { ePermission, ePermissionItems } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'users',\n  templateUrl: './manage-users-index.component.html',\n  styles: []\n})\nexport class ManageUsersIndexComponent implements OnInit, OnDestroy {\n  @ViewChild('DexihMessage', { static: true }) public dexihMessage: DexihMessageComponent;\n\n    columns = [\n        { name: 'userName', title: 'User Name', format: ''},\n        { name: 'firstName', title: 'First Name', format: ''},\n        { name: 'lastName', title: 'Last Name', format: ''},\n        { name: 'permission', title: 'Permission', enum: ePermission, format: 'Enum'},\n        { name: 'receiveAlerts', title: 'Receives Alert Emails', format: 'Boolean'}\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    ePermission = ePermission;\n    ePermissionItems = ePermissionItems;\n    permission = ePermission.PublishReader;\n    emails: string[] = [];\n    sendInvites = true;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this.refreshUsers();\n    }\n\n    ngOnDestroy() {\n    }\n\n    refreshUsers() {\n        this.hubService.getHubUsers().then(result => {\n            this._tableData.next(result);\n        });\n    }\n\n    setPermission(permission: ePermission, users: Array<UserAuthorization>) {\n        const userNames = users.map(c => c.userName);\n\n        this.authService.confirmDialog('Confirm Permission Change',\n            `This action will change the selected user(s) hub permission to ${ePermission[this.permission]}.  Proceed?`).then(confirm => {\n                if (confirm) {\n                    this.hubService.setUserPermissions(userNames, permission, false).then(result => {\n                        this.dexihMessage.addSuccessMessage('The specified user(s) permission have been updated.');\n                        this.refreshUsers();\n                    });\n                }\n            });\n    }\n\n    setUserAlert(alertEmail: boolean, users: Array<UserAuthorization>) {\n        const userIds = users.map(c => c.id);\n\n        this.hubService.setUserAlerts(userIds, alertEmail, false).then(result => {\n            this.dexihMessage.addSuccessMessage('The specified user(s) alert email status have been updated.');\n            this.refreshUsers();\n        });\n    }\n\n    deleteUsers(users: Array<UserAuthorization>) {\n        const emails = users.map(c => c.userName);\n\n        this.authService.confirmDialog('Confirm Delete Users',\n        `This action will delete the selected user(s) from using this hub.  Proceed?`).then(confirm => {\n            if (confirm) {\n                this.hubService.removeUsers(emails).then(result => {\n                    this.dexihMessage.addSuccessMessage('The specified users have been removed from the hub.');\n                    this.refreshUsers();\n                });\n            }\n        });\n    }\n\n    addUsers() {\n        if (this.emails.length > 0 && this.permission) {\n            this.authService.confirmDialog('Add Users',\n            // tslint:disable-next-line:max-line-length\n            `This action will added users with the specified emails to this hub with permission ${ePermission[this.permission]}.  Proceed?`).then(confirm => {\n                if (confirm) {\n                    this.hubService.setUserPermissions(this.emails, this.permission, this.sendInvites).then(result => {\n                        this.emails = [];\n                        this.dexihMessage.addSuccessMessage('The specified users have been added to the hub.');\n                        this.refreshUsers();\n                    });\n                }\n            });\n        }\n    }\n}\n","<div class=\"container-fluid\">\n\t<dexih-widget title=\"Hub Remote Agents\"\n\t\ticonClass=\"fa fa-lg fa-fw fa-wifi\"\n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t\t>\n\t\t<ng-template #header>\n\t\t\t<dexih-button-dropdown buttonClass=\"btn btn-sm btn-outline-secondary\" iconClass=\"fa fa-filter\" [text]=\"statusFilter\" title=\"Filter by a status\" [pullRight]=\"true\">\n\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"statusFilter=='All'\" routerLink='.' [queryParams]=\"{statusFilter: 'All'}\" title=\"All Items\">All</a>\n\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"statusFilter=='Ready'\" routerLink='.' [queryParams]=\"{statusFilter: 'Ready'}\" title=\"Ready\">Ready</a>\n\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"statusFilter=='Offline'\" routerLink='.' [queryParams]=\"{statusFilter: 'Offline'}\" title=\"Offline Items\">Offline</a>\n\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"statusFilter=='Unauthorized'\" routerLink='.' [queryParams]=\"{statusFilter: 'Unauthorized'}\" title=\"Unauthorized Items\">Unauthorized</a>\n\t\t\t</dexih-button-dropdown>\n        </ng-template>\n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-delete class=\"mr-1\" (click)=\"deleteSelected(items)\" title=\"Delete selected remote agents\"></dexih-button-delete>\n\t\t\t\t\t<dexih-button class=\"mr-1\" iconClass=\"fa fa-check\" buttonClass=\"btn-primary\" (click)=\"authorize(items)\" title=\"Authorize the selected agents for this hub\">Authorize</dexih-button>\n\t\t\t\t\t<dexih-button class=\"mr-1\" iconClass=\"fa fa-times\" buttonClass=\"btn-danger\" (click)=\"deAuthorize(items)\" title=\"De-Authorize the selected agents\">De-Authorize</dexih-button>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-remoteItem=\"item\">\n\t\t\t\t\t<dexih-button-edit [routerLink]=\"['agent-edit', remoteItem.remoteAgentKey, remoteItem.remoteAgentHubKey]\" class=\"mr-1\" ></dexih-button-edit>\n\t\t\t\t</ng-template>\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-download [routerLink]=\"['/hubs/index/agents/download']\" iconClass=\"fa fa-download\" text=\"Download Agent\" class=\"mr-1\" ></dexih-button-download>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\t</dexih-widget>\n</div>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { DexihRemoteAgent, DexihRemoteAgentHub, eSharedObjectType, eDataPrivacyStatus } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'remoteagents',\n    templateUrl: './remoteAgent-index.component.html',\n    styles: []\n})\nexport class RemoteAgentIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    remoteAgents: Array<DexihRemoteAgent>;\n    hubCache: HubCache;\n\n    statusFilter: string;\n\n    columns = [\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'connected', title: 'Connected', format: 'Boolean' },\n        { name: 'isAuthorized', title: 'Authorized?', format: 'Boolean' },\n        { name: 'user', title: 'User', format: ''},\n        { name: 'dataPrivacyStatus', title: 'Data Privacy', format: 'Enum', enum: eDataPrivacyStatus },\n        { name: 'isEncrypted', title: 'Encrypted?', format: 'Boolean' },\n        { name: 'ipAddress', title: 'Current IP Address', format: '' },\n        { name: 'remoteAgentId', title: 'Id', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n        { name: 'lastLoginDateTime', title: 'Last Login', format: 'Calendar' },\n        { name: 'lastLoginIpAddress', title: 'Last IP Address', format: '' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(private hubService: HubService, private authService: AuthService, private router: Router, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n                this.authService.getRemoteAgentsObservable(),\n                this.hubService.getRemoteAgentObservable() // this is included to ensure refresh when active agent changes.\n            ).subscribe(result => {\n                let queryParams = result[0];\n                this.hubCache = result[1];\n                this.remoteAgents = result[2];\n\n                if (!this.hubCache.isLoaded()) { return; }\n\n                this.statusFilter = queryParams['statusFilter'];\n                if (!this.statusFilter) { this.statusFilter = 'All'; }\n\n                this.updateRemoteAgents();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Remote Agent index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    private updateRemoteAgents() {\n        if (!(this.hubCache && this.hubCache.hub)) { return; }\n\n        let data: any[] = this.hubCache.hub.dexihRemoteAgentHubs.map(a => {\n            let remoteAgent = this.remoteAgents ? this.remoteAgents.find(c => c.remoteAgentKey === a.remoteAgentKey) : null;\n            let activeAgent = remoteAgent && remoteAgent['activeAgents'] && remoteAgent['activeAgents'].length > 0\n                ? remoteAgent['activeAgents'][0] : null;\n\n            return {\n                remoteAgentHubKey: a.remoteAgentHubKey,\n                connected: activeAgent !== null,\n                isAuthorized: a.isAuthorized,\n                name: activeAgent ? activeAgent.name : ( remoteAgent ? remoteAgent.name : 'Unknown') ,\n                user: activeAgent ? activeAgent.user : '',\n                dataPrivacyStatus: activeAgent ? activeAgent.dataPrivacyStatus : '',\n                isEncrypted: activeAgent ? activeAgent.isEncrypted : '',\n                ipAddress: activeAgent ? activeAgent.ipAddress : '',\n                remoteAgentKey: a.remoteAgentKey,\n                updateDate: a.updateDate,\n                lastLoginDateTime: remoteAgent ? remoteAgent.lastLoginDateTime : '',\n                lastLoginIpAddress: remoteAgent ? remoteAgent.lastLoginIpAddress : '',\n                remoteAgentId: remoteAgent ? remoteAgent.remoteAgentId : ''\n            };\n        });\n\n        if (this.remoteAgents) {\n            this.remoteAgents.forEach(a => {\n                let activeAgent = a['activeAgents'] && a['activeAgents'].length > 0 ? a['activeAgents'][0] : null;\n\n                if (activeAgent && data.findIndex(d => d.remoteAgentKey === a.remoteAgentKey) < 0) {\n                    data.push({\n                        remoteAgentHubKey: 0,\n                        connected: true,\n                        isAuthorized: false,\n                        name: activeAgent.name,\n                        user:  activeAgent.user,\n                        dataPrivacyStatus: activeAgent.dataPrivacyStatus,\n                        isEncrypted: activeAgent.isEncrypted,\n                        ipAddress: activeAgent.ipAddress,\n                        remoteAgentKey: a.remoteAgentKey,\n                        remoteAgentId: a.remoteAgentId,\n                        updateDate: '',\n                        });\n                }\n            });\n        }\n        this._tableData.next(data);\n    }\n\n    watchChanges() {\n        // watch the current remote hubs\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.RemoteAgent) {\n                this.updateRemoteAgents();\n            }\n        });\n    }\n\n    async authorize(remoteAgents: Array<any>) {\n        for await (const remoteAgent of remoteAgents) {\n            if (!remoteAgent.isAuthorized) {\n                let agentHub: DexihRemoteAgentHub;\n                if (remoteAgent.remoteAgentHubKey) {\n                    agentHub = this.hubCache.hub.dexihRemoteAgentHubs.find(c => c.remoteAgentHubKey === remoteAgent.remoteAgentHubKey);\n                    agentHub.isAuthorized = true;\n                } else {\n                    agentHub = {\n                        hubKey: this.hubCache.hub.hubKey,\n                        remoteAgentHubKey: 0,\n                        remoteAgentKey: remoteAgent.remoteAgentKey,\n                        isAuthorized: true,\n                        isValid: true,\n                        createDate: null,\n                        isDefault: false,\n                        updateDate: null\n                    }\n                    agentHub['allowExternalConnect'] = true;\n                    agentHub['isSelected'] = false;\n                }\n                await this.hubService.saveRemoteAgent(agentHub);\n            }\n        };\n    }\n\n    deAuthorize(remoteAgents: Array<DexihRemoteAgentHub>) {\n        remoteAgents.forEach(remoteAgent => {\n            if (remoteAgent.isAuthorized) {\n                if (remoteAgent.remoteAgentHubKey) {\n                    let agent = this.hubCache.hub.dexihRemoteAgentHubs.find(c => c.remoteAgentHubKey === remoteAgent.remoteAgentHubKey);\n                    if (agent) {\n                        agent.isAuthorized = false;\n                        this.hubService.saveRemoteAgent(agent);\n                    }\n                }\n            }\n        });\n    }\n\n    deleteSelected(remoteAgents: Array<DexihRemoteAgentHub>) {\n        remoteAgents.forEach(remoteAgent => {\n            if (remoteAgent.remoteAgentHubKey) {\n                let agent = this.hubCache.hub.dexihRemoteAgentHubs.find(c => c.remoteAgentHubKey === remoteAgent.remoteAgentHubKey);\n                if (agent) {\n                    agent.isAuthorized = false;\n                    this.hubService.deleteRemoteAgent(agent);\n                }\n            }\n        });\n    }\n\n    edit(remoteAgent: DexihRemoteAgentHub) {\n        this.router.navigate(['agent-edit', remoteAgent.remoteAgentKey, remoteAgent.remoteAgentHubKey], { relativeTo: this.route });\n    }\n}\n","<dexih-message #DexihMessage></dexih-message>\n\n<div class=\"container\">\n    <dexih-widget \n\t\ttitle=\"Edit Hub Remote Agent\" \n        iconClass=\"fa fa-lg fa-fw fa-database\" \n        [padding]=\"true\"\n        [showCloseButton]=\"true\"\n        (close)=\"close()\"\n    >\n        <ng-template #header>\n            <dexih-button-edit [routerLink]=\"['/hubs', 'index', 'agents', 'edit', remoteAgentKey]\"></dexih-button-edit>\n            <dexih-button-save [disabled]=\"!formsService.hasChanged\" (click)=\"save()\" class=\"pl-1\"></dexih-button-save>\n            <cancel-button [formsService]=\"formsService\" class=\"pl-1\"></cancel-button>\n        </ng-template>\n\n        <ng-template #header>\n\n        </ng-template>\n\n        <div *ngIf=\"isNew\" class=\"alert alert-primary\">\n            Creating a new hub -> remote agent authorization\n        </div>\n\n        <form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\">\n            <fieldset>\n                <section >\n                    <form-input label=\"Agent name\" [disabled]=\"true\" note=\"This can be changed in the agents appsettings.json config file.\" [(ngModel)]=\"name\" [ngModelOptions]=\"{standalone: true}\" iconClass=\"fa fa-comment\"></form-input>\n                </section>\n\n                <section>\n\t\t\t\t\t<form-checkbox label=\"Is default agent for this Hub\" formControlName=\"isDefault\" >\n\t\t\t\t\t</form-checkbox>\n                </section>\n\n                <section>\n\t\t\t\t\t<form-checkbox label=\"Is Authorized for this Hub.\" formControlName=\"isAuthorized\" >\n\t\t\t\t\t</form-checkbox>\n                </section>\n            </fieldset>\n        </form>\n    </dexih-widget>\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { DexihRemoteAgentHub, DexihRemoteAgent } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'remote-agents',\n    templateUrl: './remoteAgent-edit.component.html',\n    providers: [HubFormsService]\n})\nexport class RemoteAgentEditComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n\n    private remoteAgentKey: number;\n    private remoteAgentHubKey: number;\n\n    hubCache: HubCache;\n    name: string;\n\n    remoteAgents: DexihRemoteAgent[];\n    remoteAgentHub: DexihRemoteAgentHub;\n\n    public isNew = false;\n\n    ipAddress: string;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        public formsService: HubFormsService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.authService.getRemoteAgentsObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.remoteAgents = result[3];\n\n                if (!this.hubCache.isLoaded() || !this.remoteAgents) { return; }\n\n                this.remoteAgentKey = +params['remoteAgentKey'];\n                this.remoteAgentHubKey = +params['remoteAgentHubKey'];\n\n                if (!this.remoteAgentKey) {\n                    this.hubService.addHubErrorMessage('There was no remote agent specified to edit.');\n                    // this.errorMessage = 'There was no validation specified to edit.';\n                } else {\n                    let remoteAgent = this.remoteAgents.find(c => c.remoteAgentKey === this.remoteAgentKey);\n                    let activeAgent = remoteAgent['activeAgents'] &&\n                        remoteAgent['activeAgents'].length > 0 ? remoteAgent['activeAgents'][0] : null;\n                    this.name = activeAgent ? activeAgent.name : '';\n                    this.ipAddress = activeAgent ? activeAgent.ipAddress : null;\n                    this.remoteAgentHub = this.hubCache.hub.dexihRemoteAgentHubs.find(c => c.remoteAgentHubKey === this.remoteAgentHubKey);\n\n                    if (!this.remoteAgentHub) {\n                        this.remoteAgentHub = {\n                            hubKey: this.hubCache.hub.hubKey,\n                            remoteAgentHubKey: 0,\n                            remoteAgentKey: remoteAgent.remoteAgentKey,\n                            isAuthorized: true,\n                            isValid: true,\n                            createDate: null,\n                            isDefault: false,\n                            updateDate: null\n                        }\n                        this.remoteAgentHub['allowExternalConnect'] = true;\n                        this.remoteAgentHub['isSelected'] = false;\n                        this.isNew = true;\n                    }\n\n                    this.formsService.remoteAgent(this.remoteAgentHub);\n\n                    if (this.remoteAgentHub.remoteAgentHubKey === 0) {\n                        this.formsService.hasChanged = true;\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Remote Agent Edit');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    addCurrentIp() {\n        if (this.ipAddress) {\n            let form = this.formsService.currentForm;\n            let ipAddressesControl = form.controls.ipAddresses;\n            let ipAddresses = <string[]> ipAddressesControl.value;\n\n            if (ipAddresses.findIndex(c => c === this.ipAddress) < 0) {\n                ipAddresses.push(this.ipAddress);\n                ipAddressesControl.setValue(ipAddresses);\n            }\n        }\n    }\n\n    save() {\n        let form = this.formsService.currentForm;\n        let remoteAgentHub = form.value;\n        this.hubService.saveRemoteAgent(remoteAgentHub).then((success) => {\n            if (success) {\n                this.hubService.addHubSuccessMessage('The remote agent updated successfully.');\n                this.authService.navigateUp();\n            }\n        });\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Shared Data\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-newspaper-o\" \n\t\t[showCloseButton]=\"true\"\n\t\t[padding]=\"false\"\n\t\t(close)=\"close()\"\n\t>\n\n\t<dexih-table \n\t\t[enableMultiSelect]=\"true\"\n\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t[columns]=\"columns\"\n\t\t[dataObservable]=\"tableData\"\n\t\t(rowClick)=\"preview($event)\"\n\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t>\n\n\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t<dexih-button-preview (click)=\"preview(item)\"></dexih-button-preview>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-objects=\"items\">\n\t\t\t\t<dexih-button-download class=\"mr-1\" (click)=\"downloadData(objects)\"></dexih-button-download>\n\t\t\t\t<dexih-button-private *ngIf=\"hubCache.canWrite\"  (click)=\"unshareSelectedTables(objects)\"></dexih-button-private>\n\t\t\t</ng-template>\n\n\t\t\t<ng-template #filter select=\"filter\" let-items=\"items\">\n\t\t\t\t<dexih-button-dropdown buttonClass=\"btn-primary mr-1\" iconClass=\"fa fa-filter\" [text]=\"typeFilter\" title=\"Filter by a purpose\" [pullRight]=\"true\">\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='All'\" routerLink='.' [queryParams]=\"{typeFilter: 'All'}\" title=\"All Items\">All</a>\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='Datalink'\" routerLink='.' [queryParams]=\"{typeFilter: 'Datalink'}\" title=\"Datalinks\">Datalinks</a>\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='Table'\" routerLink='.' [queryParams]=\"{typeFilter: 'Table'}\" title=\"Tables\">Tables</a>\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='View'\" routerLink='.' [queryParams]=\"{typeFilter: 'View'}\" title=\"Views\">Views</a>\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='Dashboard'\" routerLink='.' [queryParams]=\"{typeFilter: 'Dashboard'}\" title=\"Dashboards\">Dashboards</a>\n\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"typeFilter=='Api'\" routerLink='.' [queryParams]=\"{typeFilter: 'Api'}\" title=\"Apis\">Apis</a>\n\t\t\t\t</dexih-button-dropdown>\n\t\t\t</ng-template>\n\t</dexih-table>\n\n    </dexih-widget>\n</div>\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../hub.service';\nimport { HubCache } from '../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../+auth/auth.service';\nimport { DexihDatalink, eSourceType, eDownloadFormat, DownloadObject,\n    eDataObjectType, eSharedObjectType } from '../../shared/shared.models';\nimport { CancelToken } from '../../+auth/auth.models';\n\n@Component({\n    selector: 'sharedData-index',\n    templateUrl: './sharedData-index.component.html',\n    styles: []\n})\nexport class SharedDataIndexComponent implements OnInit, OnDestroy {\n    hubCache: HubCache;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'objectTypeName', title: 'Type', format: '' },\n        { name: 'name', title: 'Name', format: '', tags: 'tags' },\n        { name: 'description', title: 'Description', format: 'Md' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    typeFilter: string;\n\n    private _tableData = new BehaviorSubject<Array<DexihDatalink>>(null);\n    tableData: Observable<Array<DexihDatalink>> = this._tableData.asObservable();\n\n    constructor(private hubService: HubService, private authService: AuthService, private router: Router, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let queryParams = result[2];\n                this.hubCache = result[3];\n\n                this.watchChanges();\n\n                this.typeFilter = queryParams['typeFilter'];\n                if (!this.typeFilter) {\n                    this.typeFilter = 'All';\n                }\n\n                this.route.snapshot.data['pageTitle'] =  this.typeFilter;\n\n                this.updateSharedData();\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Shared Data Index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    private updateSharedData() {\n        let objects = new Array<any>();\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            if (!this.hubCache.hub.dexihDatalinks && !this.hubCache.hub.dexihConnections) {\n                this._tableData.next(new Array<DexihDatalink>());\n            } else {\n                if (this.typeFilter === 'All' || this.typeFilter === 'Datalink') {\n                    this.hubCache.hub.dexihDatalinks.filter(d => d.isShared).forEach(datalink => {\n                        objects.push({\n                            objectKey: datalink.key,\n                            objectTypeName: eDataObjectType[eDataObjectType.Datalink],\n                            objectType: eDataObjectType.Datalink,\n                            name: datalink.name,\n                            description: datalink.description,\n                            updateDate: datalink.updateDate,\n                            tags: this.hubCache.getObjectTags(eSharedObjectType.Datalink, datalink.key)\n                        });\n                    });\n                }\n\n                if (this.typeFilter === 'All' || this.typeFilter === 'Table') {\n                    this.hubCache.hub.dexihTables.filter(c => c.isShared).forEach(table => {\n                        objects.push({\n                            objectKey: table.key,\n                            objectTypeName: eDataObjectType[eDataObjectType.Table],\n                            objectType: eDataObjectType.Table,\n                            name: table.logicalName + ' (' + table.name + ')',\n                            description: table.description,\n                            updateDate: table.updateDate,\n                            tags: this.hubCache.getObjectTags(eSharedObjectType.TagObjects, table.key)\n                        });\n                    });\n                }\n\n                if (this.typeFilter === 'All' || this.typeFilter === 'View') {\n                    this.hubCache.hub.dexihViews.filter(c => c.isShared).forEach(view => {\n                        objects.push({\n                            objectKey: view.key,\n                            objectTypeName: eDataObjectType[eDataObjectType.View],\n                            objectType: eDataObjectType.View,\n                            name: view.name,\n                            description: view.description,\n                            updateDate: view.updateDate,\n                            tags: this.hubCache.getObjectTags(eSharedObjectType.View, view.key)\n                        });\n                    });\n                }\n\n                if (this.typeFilter === 'All' || this.typeFilter === 'Dashboard') {\n                    this.hubCache.hub.dexihDashboards.filter(c => c.isShared).forEach(dashboard => {\n                        objects.push({\n                            objectKey: dashboard.key,\n                            objectTypeName: eDataObjectType[eDataObjectType.Dashboard],\n                            objectType: eDataObjectType.Dashboard,\n                            name: dashboard.name,\n                            description: dashboard.description,\n                            updateDate: dashboard.updateDate,\n                            tags: this.hubCache.getObjectTags(eSharedObjectType.Dashboard, dashboard.key)\n                        });\n                    });\n                }\n\n                if (this.typeFilter === 'All' || this.typeFilter === 'Api') {\n                    this.hubCache.hub.dexihApis.filter(c => c.isShared).forEach(api => {\n                        objects.push({\n                            objectKey: api.key,\n                            objectTypeName: eDataObjectType[eDataObjectType.Api],\n                            objectType: eDataObjectType.Api,\n                            name: api.name,\n                            description: api.description,\n                            updateDate: api.updateDate,\n                            tags: this.hubCache.getObjectTags(eSharedObjectType.Api, api.key)\n                        });\n                    });\n                }\n\n                this._tableData.next(objects);\n            }\n        }\n\n    }\n\n    public downloadData(dataObjects: Array<any>) {\n        this.hubService.downloadData(dataObjects, true, eDownloadFormat.Csv, this.cancelToken).then(() => {\n            this.hubService.addHubSuccessMessage('The specified data is being downloaded.');\n        }).catch(() => {\n            //            this.hubService.addHubErrorMessage(reason);\n        });\n    }\n\n    public preview(dataObject: DownloadObject) {\n        if (dataObject.objectType === eDataObjectType.Table) {\n            this.router.navigate(['table-preview', dataObject.objectKey], { relativeTo: this.route });\n        }\n        if (dataObject.objectType === eDataObjectType.Datalink) {\n            this.router.navigate(['datalink-preview', dataObject.objectKey], { relativeTo: this.route });\n        }\n        if (dataObject.objectType === eDataObjectType.View) {\n            this.router.navigate(['view-preview', dataObject.objectKey], { relativeTo: this.route });\n        }\n        if (dataObject.objectType === eDataObjectType.Dashboard) {\n            this.router.navigate(['dashboard-preview', dataObject.objectKey], { relativeTo: this.route });\n        }\n        if (dataObject.objectType === eDataObjectType.Api) {\n            this.router.navigate(['api-preview', dataObject.objectKey], { relativeTo: this.route });\n        }\n    }\n\n    public unshareSelectedTables(dataObjects: Array<DownloadObject>) {\n        let datalinkKeys = dataObjects.filter(c => c.objectType === eDataObjectType.Datalink).map(c => c.objectKey);\n        if (datalinkKeys.length > 0) {\n            this.hubService.shareItems(datalinkKeys, eDataObjectType.Datalink, false);\n        }\n\n        let tableKeys = dataObjects.filter(c => c.objectType === eDataObjectType.Table).map(c => c.objectKey);\n        if (tableKeys.length > 0) {\n            this.hubService.shareItems(tableKeys, eDataObjectType.Table, false);\n        }\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Datalink || hubCacheChange.changeClass === eSharedObjectType.Table) {\n                this.updateSharedData();\n            }\n        });\n\n    }\n}\n\n\n","<div class=\"container-fluid\">\n    <dexih-widget [title]=\"title\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-table\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t\t[showIf]=\"hubCache?.hub\"\n\t>\n\n\t\t<ng-template #header>\n\n\n\t\t</ng-template>\n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"editTable($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t>\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<actions-table-button [tables]=\"items\" [refreshTables]=\"true\" ></actions-table-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-table=\"item\">\n\t\t\t\t\t<datalink-status [tableKey]='table?.key'></datalink-status>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #filter select=\"filter\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-dropdown *ngIf=\"hubCache?.hub\" class=\"mr-1\"[autoCompact]=\"false\" buttonClass=\"btn btn-primary\" iconClass=\"fa fa-database\" [text]=\"connectionName\" title=\"Filter by a connection\" [pullRight]=\"true\">\n\t\t\t\t\t\t<a *ngFor=\"let connection of (hubCache.hub.dexihConnections | equalFilter :'isValid':true )\" class=\"dropdown-item\" routerLink=\".\" [queryParams]=\"{connectionKey: connection.key}\">{{connection.name}}</a>\n\t\t\t\t\t</dexih-button-dropdown>\n\t\t\n\t\t\t\t\t<dexih-button-dropdown class=\"mr-1\" [autoCompact]=\"false\" buttonClass=\"btn btn-primary\" iconClass=\"fa fa-filter\" [text]=\"eConnectionPurpose[purposeFilter]\" title=\"Filter by a purpose\" [pullRight]=\"true\">\n\t\t\t\t\t\t<a class=\"dropdown-item\" [class.active]=\"purposeFilter=='0'\" routerLink='.' [queryParams]=\"{purposeFilter: 'All'}\" title=\"All Connections\">All</a>\n\t\t\t\t\t\t<a *ngFor=\"let purpose of eConnectionPurposeItems | gtFilter:'key':0\" [class.active]=\"purposeFilter==purpose.key\" class=\"dropdown-item\" routerLink='.' [queryParams]=\"{purposeFilter: purpose.key}\" [title]=\"purpose.name\">{{purpose.name}}</a>\n\t\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t</ng-template>\n\t\t\t\t\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.Table\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.Table'></dependent-items-button>\n\t\t\t\t</ng-template>\n\n\n\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Datalinks\" path=\"/assets/help/reference/table.md\"></dexih-help>\n\n</div>\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubCache } from '../../hub.models';\nimport { DexihTable, eConnectionCategory, eSharedObjectType, eConnectionPurposeItems, eConnectionPurpose, eTableType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'table-index',\n    templateUrl: './table-index.component.html',\n    styles: []\n})\nexport class TableIndexComponent implements OnInit, OnDestroy {\n    private _hubCacheChangeSubscription: Subscription;\n    private _subscription: Subscription;\n\n    hubCache: HubCache;\n    purposeFilter: string;\n    connectionKey: number;\n    connectionName: string;\n    eConnectionPurposeItems = eConnectionPurposeItems;\n    eConnectionPurpose = eConnectionPurpose;\n    eSharedObjectType = eSharedObjectType;\n\n    title: string;\n\n    columns = [\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description', tags: 'tags' },\n        { iconClass: 'sharedIcon', tooltip: 'sharedToolTip', width: '1%', align: 'center' },\n        { name: 'tableType', title: 'Table Type', format: 'Enum', enum: eTableType },\n        { name: 'connectionName', title: 'Connection', footer: 'connectionType', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<DexihTable>>(null);\n    tableData: Observable<Array<DexihTable>> = this._tableData.asObservable();\n\n\n    constructor(private hubService: HubService, private authService: AuthService, private router: Router, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(async result => {\n                let data = result[0];\n                let params = result[1];\n                let queryParams = result[2];\n                this.hubCache = result[3];\n\n                if (!this.hubCache.isLoaded()) { return; }\n                this.purposeFilter = queryParams['purposeFilter'];\n                if (!this.purposeFilter) { this.purposeFilter = 'All' }\n\n                this.connectionKey = +queryParams['connectionKey'];\n                if (this.connectionKey) {\n                    let connection = this.hubCache.hub.dexihConnections.find(c => c.key === this.connectionKey);\n                    if (connection) {\n                        this.connectionName = connection.name;\n                    }\n                } else {\n                    this.connectionName = 'All';\n                }\n\n                await this.updateTableData();\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Index');\n        }\n\n        // watch for any changes in the connections.\n        this.watchChanges();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    async updateTableData() {\n        this.title = 'Tables ';\n        this.connectionName = 'All';\n\n        if (this.purposeFilter && this.purposeFilter !== 'All') {\n            this.title += ': ' + eConnectionPurpose[this.purposeFilter];\n        }\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let tableData = [];\n            for await (const table of this.hubCache.hub.dexihTables) {\n                let connection = this.hubCache.hub.dexihConnections.find(c => c.key === table.connectionKey);\n                let connectionReference = await this.hubService.GetConnectionReference(connection);\n\n                if (\n                    ((this.purposeFilter === 'All' || !this.purposeFilter) ||\n                        (connection && connection.purpose.toString() === this.purposeFilter)) &&\n                    (!this.connectionKey || table.connectionKey === this.connectionKey)\n                ) {\n                    let name: string;\n                    if (table.tableType === eTableType.Query) {\n                        name = '(Sql Query)';\n                    } else {\n                        if (table.schema) {\n                            name = table.schema + '.' + table.name;\n                        } else {\n                            name = table.name;\n                        }\n                    }\n\n                    let tableName;\n                    if (this.hubCache.defaultTableLogicalName(table.schema, table.name) === table.logicalName) {\n                        tableName = table.logicalName\n                    } else {\n                        tableName = `${table.logicalName} (${table.name})`\n                    }\n\n                    let description = '';\n                    if ( table.logicalName !== table.name) { description = `Name: ${table.name}`}\n                    if (description) { description += '<br>' }\n                    if (table.description ) { description += table.description; }\n\n                    tableData.push({\n                        key: table.key,\n                        connectionType: connection ? eConnectionPurpose[connection.purpose] : 'undefined',\n                        connectionName: connection ? connection.name : 'undefined',\n                        description: description,\n                        tableType: table.tableType,\n                        name: name,\n                        logicalName: table.logicalName,\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.Table, table.key),\n                        updateDate: table.updateDate,\n                        connectionKey: connection ? connection.key : '',\n                        isFile: connectionReference ? connectionReference.connectionCategory === eConnectionCategory.File : false,\n                        sharedIcon: table.isShared ? 'fa fa-group' : 'fa fa-user-secret',\n                        sharedToolTip: table.isShared ? 'Table is shared' : 'Table is private'\n                    });\n                }\n            };\n\n            if (this.connectionKey) {\n                let connection = this.hubCache.hub.dexihConnections.find(c => c.key === this.connectionKey);\n                if (connection) {\n                    this.connectionName = connection.name;\n                    this.title += ' for connection - ' + connection.name;\n                }\n            }\n\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    routeSibling(path) {\n        this.router.navigate(['..', path]);\n    }\n\n\n    editTable(table: DexihTable) {\n        this.router.navigate(['table-edit', table.key], { queryParamsHandling: 'merge', relativeTo: this.route.parent });\n    }\n\n\n    getConnection(connectionKey: number) {\n        return this.hubCache.hub.dexihConnections.find(c => c.key === connectionKey);\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Table || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateTableData();\n            }\n        });\n    }\n\n\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { eDataObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'table-preview-data',\n    templateUrl: './table-preview-data.component.html'\n})\nexport class TablePreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public key: number;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    public title = 'Preview Table';\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.hubService.getHubCacheObservable(true),\n            ).subscribe(result => {\n                let params = result[0];\n                let hubCache = result[1];\n                this.key = +params['tableKey'];\n\n                let table = hubCache.getTable(this.key);\n                if (table) {\n                    this.title = 'Preview Table - ' + table.logicalName;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Preview Data');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget [title]=\"title\" iconClass=\"fa fa-lg fa-fw fa-exchange\" [showCloseButton]=\"true\"\n        (close)=\"close()\">\n        <preview-data [key]='key' [viewSource]='eDataObjectType.Table'></preview-data>\n    </dexih-widget>\n</div>","<div class=\"container-fluid\">\n    <dexih-widget title=\"Custom Functions\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-code\" \n\t\t[showCloseButton]=\"true\"\n\t\t[padding]=\"false\"\n\t\t(close)=\"close()\"\n\t>\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t\t<dexih-button-delete class=\"mr-1\" *ngIf=\"hubCache.canWrite\" (click)=\"deleteCustomFunctions(items)\"></dexih-button-delete>\n\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.CustomFunction\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-new *ngIf=\"hubCache.canWrite\" class=\"mr-1\" [routerLink]=\"['customFunction-new']\"></dexih-button-new>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Custom Functions\" path=\"/assets/help/reference/function.md\"></dexih-help>\n\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubCache } from '../../hub.models';\nimport { DexihCustomFunction, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'customFunction',\n  templateUrl: './customFunction-index.component.html',\n  styles: []\n})\nexport class CustomFunctionIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    customFunctions: Array<DexihCustomFunction>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags'},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.updateCustomFunctions();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Column Validation Index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteCustomFunctions(functions: Array<DexihCustomFunction>) {\n        this.hubService.deleteCustomFunctions(functions);\n    }\n\n    updateCustomFunctions() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let functions = this.hubCache.hub.dexihCustomFunctions.filter(c => c.isValid)\n                .map(c => {\n                    return {\n                        key: c.key,\n                        name: c.name,\n                        description: c.description,\n                        updateDate: c.updateDate,\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.CustomFunction, c.key)\n                    }\n                });\n            this._tableData.next(functions);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(customFunction: DexihCustomFunction) {\n        this.router.navigate(['customFunction-edit', customFunction.key], { relativeTo: this.route});\n    }\n\n    export(items: Array<DexihCustomFunction>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        items.forEach(item => { this.hubCache.cacheAddCustomFunction(item.key, hub); });\n\n        let filename = items.length === 1 ? 'CustomFunction - ' + items[0].name + '.json' : 'customFunctions.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n      // watch the current validation in case it is changed in another session.\n      this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n          if (hubCacheChange.changeClass === eSharedObjectType.CustomFunction ||\n            hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n            this.updateCustomFunctions();\n          }\n      });\n  }\n}\n","import { Component, Input, Output, ViewChild, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TypeFunctions, TypeCodes, eBasicType } from '../../hub.remote.models';\n\n@Component({\n\n    selector: 'customFunction-parameter',\n    templateUrl: './customFunction-parameter.component.html'\n})\nexport class CustomFunctionParameterComponent implements OnInit, OnDestroy {\n\n    @Input() public customFunctionParameterForm: FormGroup = null;\n\n    @Output() public addParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n    @Output() public removeParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n\n\n    private type: TypeFunctions;\n    eBasicType = eBasicType;\n    typeCodes = TypeCodes;\n\n    public staticValue: string;\n\n    ignoreChanges = false;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnDestroy() {\n    }\n\n    add() {\n        this.addParameter.emit(this.customFunctionParameterForm);\n    }\n\n    remove() {\n        this.removeParameter.emit(this.customFunctionParameterForm);\n    }\n\n}\n","<form [formGroup]=\"customFunctionParameterForm\" class=\"mb-1\">\n        <div class=\"input-group\">\n            <input type=\"text\" class=\"form-control\" formControlName=\"name\" placeholder=\"Enter a name for the parameter\">\n\n            <!-- <form-input [border]=\"false\" class=\"form-control p-0\" formControlName=\"name\" type=\"text\" placeholder=\"Enter a name for the parameter\"></form-input> -->\n\n            <form-select [border]=\"false\" class=\"form-control p-0\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\" itemName=\"name\">\n            </form-select>\n\n            <div class=\"input-group-append\">\n                <div class=\"input-group-text p-0\">\n                    <span class=\"p-1\">Array Dimensions (0-non array)</span>\n                    <input class=\" mx-1\" type=\"number\" formControlName=\"rank\">\n                </div>\n                <div class=\"input-group-text p-0\">\n                    <button type=\"button\" (click)=\"add()\" class=\"btn btn-sm border-0 bg-transparent\" value=\"Add\">\n                        <i class=\"fa fa-plus-square-o\"></i>\n                    </button>\n                </div>\n                <div class=\"input-group-text p-0\">\n                    <button type=\"button\" (click)=\"remove()\" class=\"btn btn-sm border-0 bg-transparent\" value=\"Remove\">\n                        <i class=\"fa fa-minus-square-o\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n</form>","<div class=\"container\">\n\t<dexih-widget-vertical>\n\t<dexih-widget \n\t\ttitle=\"Edit Function\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-code\" \n\t\t[showCloseButton]=\"true\"\n\t\t[padding]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t<ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\" class=\"mr-1\"></dexih-invalid-form-details>\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"formsService.currentForm\"  [formGroup]=\"formsService.currentForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section *ngIf=\"testResult\">\n\t\t\t\t\t<div class=\"alert \" [class.alert-danger]=\"testResult.success == false\" [class.alert-success]=\"testResult.success == true\">\n\t\t\t\t\t\tTest Result = {{testResult.success}}\n\t\t\t\t\t\t<div *ngIf=\"testResult.cleanedValue\">Cleaned Value = {{testResult.cleanedValue}} </div>\n\t\t\t\t\t\t<div *ngIf=\"testResult.rejectReason\">Reject Reason = {{testResult.rejectReason}} </div>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-select label=\"Function Type\" formControlName=\"functionType\" [items]=\"functionTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-question\">\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-input label=\"Custom Function Name\" formControlName=\"name\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\" [autocapitalize]=\"true\" [errors]=\"formsService.formErrors['name']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\n\t\t\t\t<section>\n\t\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\">\n\t\t\t\t\t</form-textarea>\n\t\t\t\t</section>\n\n\t\t\t\t<ng-template [ngIf]=\"functionType\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div class=\"label mb-1\">\n\t\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div *ngIf=\"inputParameters.length === 0\" class=\"mb-1\">\n\t\t\t\t\t\t\t<dexih-button\n\t\t\t\t\t\t\t\t(click)=\"addParameter(null, eParameterDirection.Input)\"\n\t\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\"\n\t\t\t\t\t\t\t\ttitle=\"Click to add a parameter\" >Add Parameter\n\t\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div *ngFor=\"let parameter of inputParameters; let i = index\" [ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t\t\t\t<customFunction-parameter [customFunctionParameterForm]=\"parameter\" (addParameter)=\"addParameter($event, eParameterDirection.Input)\"\n\t\t\t\t\t\t\t (removeParameter)=\"removeParameter($event)\"></customFunction-parameter>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"functionType != eFunctionType.Condition\">\n\t\t\t\t\t\t<div class=\"label mb-1\">\n\t\t\t\t\t\t\tOutput Parameters\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div [ngStyle]=\"{'z-index': 101, 'position': 'relative'}\">\n\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t<div class=\"input-group mb-1\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t<input class=\"form-control\" readonly value=\"Return Data Type\" />\n\t\t\t\t\t\t\t\t\t<form-select [border]=\"false\" class=\"form-control p-0\"  formControlName=\"returnType\" [items]=\"typeCodes\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t\t\t\t\t</form-select>\n\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t\t<div *ngIf=\"outputParameters.length === 0\">\n\t\t\t\t\t\t\t\t\t<dexih-button\n\t\t\t\t\t\t\t\t\t(click)=\"addParameter(null, eParameterDirection.Output)\"\n\t\t\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\"\n\t\t\t\t\t\t\t\t\ttitle=\"Click to add a parameter\" >Add Parameter</dexih-button>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<div *ngFor=\"let parameter of outputParameters; let i = index\" [ngStyle]=\"{'z-index': 100-i, 'position': 'relative'}\">\n\t\t\t\t\t\t\t\t<customFunction-parameter [customFunctionParameterForm]=\"parameter\" (addParameter)=\"addParameter($event, eParameterDirection.Output)\"\n\t\t\t\t\t\t\t\t (removeParameter)=\"removeParameter($event)\"></customFunction-parameter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<br>\n\t\t\t\t\t</div>\n\t\t\t\t\tFunction Code\n\t\t\t\t\t<textarea class='form-control' rows=\"20\" width=\"100%\" spellcheck=\"false\" formControlName=\"methodCode\"></textarea>\n\t\t\t</ng-template>\n\t\t\t</fieldset>\n\t\t</form>\n\t\t</dexih-widget>\n\t\t<dexih-widget title=\"Test Function\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-code\" [padding]=\"true\" >\n\n\t\t<ng-template #header>\n\t\t\t<dexih-button class=\"mr-1\" buttonClass=\"btn btn-success\" (click)=\"test()\">Syntax Check</dexih-button>\n\t\t\t<dexih-button class=\"mr-1\" buttonClass=\"btn btn-success\" (click)=\"test(inputParameterValues)\">Run</dexih-button>\n\t\t\t<dexih-button-save-local (click)=\"downloadCode(inputParameterValues)\" text=\"Sample Code\"></dexih-button-save-local>\n\t\t</ng-template>\n\n\t\t<dexih-message [message]=\"syntaxMessage\"></dexih-message>\n\n\t\t<form>\n\t\t\t<fieldset>\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"label\" *ngIf=\"inputParameters.length > 0\">\n\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let inputParameter of inputParameters; let i = index\" [ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<div *ngIf=\"inputParameter.controls.rank.value > 0; else showValue\">\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<dexih-button\n\t\t\t\t\t\t\t\t\t(click)=\"addParameterValue(i)\"\n\t\t\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\"\n\t\t\t\t\t\t\t\t\ttitle=\"Click to add a parameter\" >\n\t\t\t\t\t\t\t\t\tAdd {{inputParameter.controls.name.value}} value\n\t\t\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div *ngFor=\"let value of inputParameterValues[i]; let j = index\">\n\n\t\t\t\t\t\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t\t\t\t\t\t<div class=\"form-control\">\n\t\t\t\t\t\t\t\t\t\t\t{{inputParameter.controls.name.value + '[' + j + ']'}}\n\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t<form-input [border]=\"false\" class=\"form-control p-0\" [(ngModel)]=\"inputParameterValues[i][j]\" [name]=\"'inputParameterValues-' + i + '-' + j\" type=\"text\" placeholder=\"Enter a test value for the parameter\"></form-input>\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"input-group-text p-0\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" (click)=\"addParameterValue(i, j)\" class=\"btn btn-sm border-0 bg-transparent\" value=\"Add\">\n\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-plus-square-o\"></i>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div class=\"input-group-text p-0\">\n\t\t\t\t\t\t\t\t\t\t\t<button type=\"button\" (click)=\"removeParameterValue(i, j)\" class=\"btn btn-sm border-0 bg-transparent\" value=\"Remove\">\n\t\t\t\t\t\t\t\t\t\t\t\t<i class=\"fa fa-minus-square-o\"></i>\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<ng-template #showValue>\n\t\t\t\t\t\t\t<form-input [label]=\"inputParameter.controls.name.value\" [(ngModel)]=\"inputParameterValues[i]\" [name]=\"'inputParameterValues' + i\"\n\t\t\t\t\t\t\t type=\"text\" placeholder=\"Enter a test value for the parameter\"></form-input>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</div>\n\t\t\t\t\t<form-input label=\"Return Value\" [disabled]=\"true\" [(ngModel)]=\"returnParameterValue\" name=\"returnParameterValue\" type=\"text\"></form-input>\n\t\t\t\t\t<div class=\"label\" *ngIf=\"outputParameters.length > 0\">\n\t\t\t\t\t\tOutputs Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let outputParameter of outputParameters; let i = index\" [ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-input [disabled]=\"true\" [label]=\"outputParameter.controls.name.value\" [(ngModel)]=\"outputParameterValues[i]\"\n\t\t\t\t\t\t [name]=\"'outputParameterValues' + i\" type=\"text\"></form-input>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" title=\"Custom Functions\" path=\"/assets/help/reference/function.md\"></dexih-help>\n\n</dexih-widget-vertical>\n</div>","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\nimport { HubCache, eCacheStatus} from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Observable ,  Subscription, combineLatest} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { TypeCodes, functionTypes } from '../../hub.remote.models';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { Message, CancelToken } from '../../../+auth/auth.models';\nimport { eParameterDirection, eFunctionType, DexihCustomFunction, eTypeCode,\n  DexihCustomFunctionParameter, DexihDatalinkTransformItem, eTransformItemType, DexihFunctionParameter } from '../../../shared/shared.models';\n\n@Component({\n\n  selector: 'dexih-customFunction-edit-form',\n  templateUrl: './customFunction-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class CustomFunctionEditComponent implements OnInit, OnDestroy {\n\n  private customFunctionKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  typeCodes = TypeCodes;\n  eParameterDirection = eParameterDirection;\n\n  outputParameters = [];\n  inputParameters = [];\n\n  outputParameterValues = [];\n  inputParameterValues = [];\n  returnParameterValue;\n\n  functionType: eFunctionType;\n  functionTypes = functionTypes;\n  eFunctionType = eFunctionType;\n\n  syntaxMessage: Message;\n\n  public testValue: string;\n  public testResult: any;\n\n  public lookupColumnValue = '';\n  private isLoaded = false;\n\n  public cancelToken: CancelToken = new CancelToken();\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _functionTypeSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Column Validation');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._functionTypeSubscription) { this._functionTypeSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  private load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.customFunctionKey = + this.params['customFunctionKey'];\n\n      if (!this.customFunctionKey) {\n        this.hubService.addHubErrorMessage('There was no custom function specified to edit.');\n        // this.errorMessage = 'There was no validation specified to edit.';\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihCustomFunctions) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let customFunction = this.hubCache.hub.dexihCustomFunctions.find(c => c.key === this.customFunctionKey);\n          this.formsService.customFunction(customFunction);\n          this.functionType = this.formsService.currentForm.controls.functionType.value;\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let customFunction = new DexihCustomFunction();\n      customFunction.key = this.hubCache.getNextSequence();\n      this.formsService.customFunction(customFunction);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key >= 0) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/customFunction-new', `/customFunction-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n\n      this.functionType = this.formsService.currentForm.controls.functionType.value;\n    }\n\n    this._functionTypeSubscription = this.formsService.currentForm.controls.functionType.valueChanges.subscribe(functionType => {\n      this.functionType = functionType;\n      if (this.functionType === eFunctionType.Condition\n        || this.functionType === eFunctionType.JoinCondition || this.functionType === eFunctionType.Validate) {\n        this.formsService.currentForm.controls.returnType.setValue(eTypeCode.Boolean);\n        this.updateParameters();\n      }\n    });\n\n    this.updateParameters();\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.formsService.currentForm && !this.formsService.currentForm.pristine) {\n        this.authService.confirmDialog('Function has changed',\n        'The function has changed.  Would you like to discard the changes and return to the previous screen?'\n        ).then(confirm => {\n          resolve(confirm);\n        }).catch(reason => {\n          resolve(false);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  parametersArray(): FormArray {\n    return <FormArray> this.formsService.currentForm.controls.dexihCustomFunctionParameters;\n  }\n\n  private updateParameters() {\n    let parameters = this.parametersArray();\n    this.inputParameters = parameters.controls.sort((a, b) => a.value.position - b.value.position)\n      .filter(c => c.value.direction === eParameterDirection.Input);\n\n  this.outputParameters = parameters.controls.sort((a, b) => a.value.position - b.value.position)\n    .filter(c => c.value.direction === eParameterDirection.Output);\n\n    this.inputParameterValues.length = this.inputParameters.length;\n    this.outputParameterValues.length = this.outputParameters.length;\n  }\n\n  addParameter(parameter: FormGroup, direction: eParameterDirection) {\n    try {\n      let newParameter = new DexihCustomFunctionParameter();\n      if (parameter) {\n        let oldParameter = parameter.value;\n        newParameter.dataType = oldParameter.dataType;\n        newParameter.name = oldParameter.name;\n        newParameter.position = oldParameter.position + 1;\n      }\n\n      newParameter.key = this.hubCache.getNextSequence();\n      newParameter.name = '';\n      newParameter.direction = direction;\n      newParameter.rank = 0;\n      newParameter.isValid = true;\n\n      let parameters = this.parametersArray();\n      let newParameterForm = this.formsService.customFunctionParametersFormGroup(newParameter);\n      parameters.push(newParameterForm);\n\n      // reset the positions\n      parameters.controls.sort((a, b) => a.value.position - b.value.position).forEach((p, index) => {\n        (<FormGroup>p).controls.position.setValue(index * 10);\n      });\n\n      this.updateParameters();\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, add parameter');\n    }\n\n  }\n\n  addParameterValue(index: number, valueIndex: number) {\n    if (Array.isArray(this.inputParameterValues[index])) {\n      this.inputParameterValues[index].splice(valueIndex + 1, 0, '');\n    } else {\n      this.inputParameterValues[index] = new Array(1);\n    }\n  }\n\n  removeParameterValue(index: number, valueIndex: number) {\n    this.inputParameterValues[index].splice(valueIndex, 1);\n  }\n\n  removeParameter(parameter: FormGroup) {\n    try {\n      let inputParameters = this.parametersArray();\n      let index: number = inputParameters.controls.indexOf(parameter);\n      if (index > -1) {\n        inputParameters.removeAt(index);\n      }\n\n      this.updateParameters();\n\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, remove parameter');\n    }\n  }\n\n  downloadCode(parameters = null) {\n    let tmpTransform = this.createDataTransformItem();\n\n    this.hubService.downloadCustomFunction(tmpTransform, parameters);\n  }\n\n  test(parameters = null) {\n    let tmpTransform = this.createDataTransformItem();\n\n    this.hubService.testCustomFunction(tmpTransform, parameters, this.cancelToken).then(result => {\n      this.syntaxMessage = new Message(true, 'The function has successfully compiled.', null, null);\n\n      if (result && result.length > 0) {\n        result.forEach((value, index) => {\n          if (index === 0) {\n            this.returnParameterValue = value;\n          } else {\n            this.outputParameterValues[index - 1] = value;\n          }\n        });\n      } else {\n        this.returnParameterValue = null;\n        this.outputParameterValues.forEach(c => c = null );\n     }\n    }).catch(reason => {\n      let converted = reason;\n      if (reason.stack) {\n          converted = new Message(false, 'Client Error: ' + reason.message, reason.stack, '');\n      }\n      this.syntaxMessage = converted;\n      this.returnParameterValue = null;\n      this.outputParameterValues.forEach(c => c = null );\n    });\n  }\n\n  createDataTransformItem(): DexihDatalinkTransformItem {\n    let selectedCustomFunction: DexihCustomFunction = this.formsService.currentForm.value;\n\n    let item = new DexihDatalinkTransformItem();\n    item.functionCode = selectedCustomFunction.methodCode;\n    item.functionResultCode = selectedCustomFunction.resultCode;\n    item.transformItemType = eTransformItemType.CustomFunction;\n\n    let parameters: DexihFunctionParameter[] = [];\n\n      selectedCustomFunction.dexihCustomFunctionParameters.sort((a, b) => a.position - b.position)\n        .forEach((param: DexihCustomFunctionParameter, index: number) => {\n        if (param) {\n          let newParameter = new DexihFunctionParameter();\n          newParameter.key = 0;\n          newParameter.datalinkTransformItemKey = 0;\n          newParameter.name = param.name;\n          newParameter.rank = param.rank;\n          newParameter.direction = param.direction;\n          newParameter.dataType = param.dataType;\n          newParameter.position = index;\n          newParameter.isValid = true;\n\n          parameters.push(newParameter);\n        }\n      });\n\n      let returnParam = new DexihFunctionParameter();\n      returnParam.key = 0;\n      returnParam.datalinkTransformItemKey = 0;\n      returnParam.name = 'Return';\n      returnParam.rank = 0;\n      returnParam.direction = eParameterDirection.ReturnValue;\n      returnParam.dataType = selectedCustomFunction.returnType;\n      returnParam.position = 0;\n      returnParam.isValid = true;\n      parameters.push(returnParam);\n\n      // item.returnType = selectedCustomFunction.returnType;\n      item.dexihFunctionParameters = parameters;\n\n      return item;\n\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Datalink Tests\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-flag-checkered\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n \n\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.DatalinkTest'></dependent-items-button>\n\t\t\t</ng-template>\n\n\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.DatalinkTest\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<actions-datalinkTest-button [datalinkTests]=\"items\"></actions-datalinkTest-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n\t\t\t\t\t<datalink-status [datalinkTestKey]='item?.key'></datalink-status>\n\t\t\t\t</ng-template>\n\t\n\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Datalink Test\" path=\"/assets/help/reference/datalinkTest.md\"></dexih-help>\n\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Observable, Subscription, BehaviorSubject, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache } from '../../hub.models';\nimport { DexihDatalinkTest, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n  selector: 'datalink-test',\n  templateUrl: './datalinkTest-index.component.html',\n  styles: []\n})\nexport class DatalinkTestIndexComponent implements OnInit, OnDestroy {\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n    private cancelToken: CancelToken = new CancelToken();\n\n    datalinkTests: Array<DexihDatalinkTest>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', format: '', tags: 'tags'},\n        { name: 'description', title: 'Description', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        this._subscription = combineLatest(\n            this.hubService.getHubCacheObservable()\n        ).subscribe(result => {\n          this.hubCache = result[0];\n          this.update();\n        });\n    } catch (e) {\n        this.hubService.addHubClientErrorMessage(e, 'Datalink Tests Index');\n      }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    delete(items: Array<DexihDatalinkTest>) {\n        this.hubService.deleteDatalinkTests(items);\n    }\n\n    snapshot(items: Array<DexihDatalinkTest>) {\n        this.hubService.runDatalinkTestSnapshot(items, this.cancelToken);\n    }\n\n    run(items: Array<DexihDatalinkTest>) {\n        let keys = items.map(c => c.key);\n        this.hubService.runDatalinkTests(keys, this.cancelToken);\n    }\n\n    update() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let items = this.hubCache.hub.dexihDatalinkTests.filter(c => c.isValid).map(c => {\n                return {\n                    key: c.key,\n                    name: c.name,\n                    description: c.description,\n                    updateDate: c.updateDate,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.DatalinkTest, c.key)\n                }\n            });\n            this._tableData.next(items);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(item: DexihDatalinkTest) {\n        this.router.navigate(['datalinkTest-edit', item.key], { relativeTo: this.route});\n    }\n\n    export(tests: Array<DexihDatalinkTest>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(this.hubCache.hub.hubKey, '');\n        hub.dexihDatalinkTests = tests;\n        let filename = 'datalink_tests.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n\n    watchChanges() {\n      // watch the current validation in case it is changed in another session.\n      this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n          if (hubCacheChange.changeClass === eSharedObjectType.DatalinkTest ||\n            hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n            this.update();\n          }\n      });\n  }\n}\n","<div class=\"container\">\n\t<dexih-widget title=\"New Datalink Test(s)\"    iconClass=\"fa fa-lg fa-fw fa-exchange\" [showCloseButton]=\"true\" (close)=\"!saving && cancel()\"\n\t [padding]=\"true\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-save class=\"mr-1\" (click)=\"!saving && save()\" [busy]=\"saving\"></dexih-button-save>\n\t\t\t<dexih-button-cancel (click)=\"!saving && cancel()\" [busy]=\"saving\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<ng-template #subHeader>\n\t\t\t<label class=\"label\">Create automatic tests for the following datalink(s):</label>\n\t\t\t<div>\n\t\t\t\t<div class=\"list-group d-inline-block\">\n\t\t\t\t\t<span class=\"list-group-item\" *ngFor=\"let datalink of sourceDatalinks\">\n\t\t\t\t\t\t{{datalink.name}}\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"sourceDatalinkKeys\" [formGroup]=\"mainForm\">\n\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input *ngIf=\"sourceDatalinks.length == 1\" label=\"Test Name\" formControlName=\"name\" placeholder=\"Test name (leave blank for auto naming)\"\n\t\t\t\t\t\t iconClass=\"fa fa-comment\" [errors]=\"formErrors.name\"></form-input>\n\t\t\t\t\t\t<form-input *ngIf=\"sourceDatalinks.length > 1\" disabled label=\"Test Name\" placeholder=\"Test name can not be specified when creating multiple tests.\"\n\t\t\t\t\t\t iconClass=\"fa fa-comment\"></form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Audit Connection\" formControlName=\"auditConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" [errors]=\"formErrors.auditConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t\t\t\tnote=\"Connection where test results are stored.\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select formControlName=\"sourceConnectionKey\" label=\"Input Connection\" [items]=\"managedConnections\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" note=\"Specify the connection to use for any datalink source data.\" [errors]=\"formErrors.sourceConnectionKey\"\n\t\t\t\t\t\t [allowNullSelect]=\"true\" selectNullMessage=\"No source table\"></form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select formControlName=\"targetConnectionKey\" label=\"Target Connection\" [items]=\"managedConnections\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" note=\"Specify the connection for target data.\" [errors]=\"formErrors.targetConnectionKey\"\n\t\t\t\t\t\t [allowNullSelect]=\"true\" selectNullMessage=\"No target table\"></form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"col col-11\">\n\t\t\t\t\t\t\t<form-checkbox label=\"Snapshot and copy current source/target data into the test connections.\" formControlName=\"snapshotData\"\n\t\t\t\t\t\t\t name=\"snapshotData\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\n\t</dexih-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { HubService } from '../../hub.service';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { Location } from '@angular/common';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { DexihConnection, DexihDatalink, eConnectionPurpose } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-datalinkTest-new-form',\n  templateUrl: './datalinkTest-new.component.html'\n})\nexport class DatalinkTestNewComponent implements OnInit, OnDestroy {\n\n  private _subscription: Subscription;\n  private _valueChangesSubscription: Subscription;\n  private cancelToken: CancelToken = new CancelToken();\n\n  private hubCache: HubCache;\n\n  public pageTitle: string;\n\n  hasChanged = false;\n  showAllErrors = false;\n\n  public name: string;\n  public auditConnectionKey: number;\n  public sourceConnectionKey: number;\n  public targetConnectionKey: number;\n\n  public managedConnections: Array<DexihConnection>;\n\n  public sourceDatalinkKeys: Array<number>;\n  public sourceDatalinks: Array<DexihDatalink>;\n\n  public saving = false;\n\n  mainForm: FormGroup;\n\n  formErrors = {\n    'name': '',\n    'auditConnectionKey': '',\n    'sourceConnectionKey': '',\n    'targetConnectionKey': '',\n    'snapshotData': '',\n  };\n\n  validationMessages = {\n    'name': {\n      'required': 'Name is required.',\n      'minlength': 'Name must be at least 4 characters long.',\n      'maxlength': 'Name cannot be more than 50 characters long.',\n    },\n    'auditConnectionKey': {\n    },\n    'targetConnectionKey': {\n    },\n    'sourceConnectionKey': {\n    },\n    'snapshotData': {\n    },\n  };\n\n\n  constructor(\n    private hubService: HubService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private fb: FormBuilder) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        let params = result[1];\n        this.hubCache = result[2];\n\n        this.managedConnections = this.hubCache.hub.dexihConnections\n          .filter(c => c.purpose === eConnectionPurpose.Managed)\n\n        if (this.hubCache.status === eCacheStatus.Loaded) {\n          let datalinkKeys: string = params['datalinkKeys'];\n          this.sourceDatalinkKeys = new Array<number>();\n          this.sourceDatalinks = new Array<DexihDatalink>();\n\n          if (datalinkKeys && this.hubCache.hub.dexihConnections) {\n            let datalinkKeyArray = datalinkKeys.split('|');\n            this.hubCache.hub.dexihDatalinks.forEach(datalink => {\n              if (datalinkKeyArray.findIndex(t => t === datalink.key.toString()) >= 0) {\n                this.sourceDatalinkKeys.push(datalink.key);\n                this.sourceDatalinks.push(datalink);\n              }\n            });\n          }\n\n          let targetConnection = this.hubCache.hub.dexihConnections.find(c => c.purpose === eConnectionPurpose.Managed);\n          if (targetConnection) {\n            this.targetConnectionKey = targetConnection.key;\n          }\n          this.sourceConnectionKey = this.targetConnectionKey;\n          this.auditConnectionKey = this.targetConnectionKey;\n\n          this.buildForm();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Datalink New');\n    }\n\n\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  buildForm(): void {\n    this.mainForm = this.fb.group({\n      'name': [this.name, [\n      ]],\n      'auditConnectionKey': [this.auditConnectionKey > 0 ? this.auditConnectionKey : null, [\n        // Validators.required,\n      ]],\n      'targetConnectionKey': [this.targetConnectionKey > 0 ? this.targetConnectionKey : null, [\n        // Validators.required,\n      ]],\n      'sourceConnectionKey': [this.sourceConnectionKey > 0 ? this.sourceConnectionKey : null, [\n        // Validators.required,\n      ]],\n      'snapshotData': [true, [\n        // Validators.required,\n      ]],\n    });\n\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    this._valueChangesSubscription = this.mainForm.valueChanges.subscribe(data => this.onValueChanged(data));\n    this.onValueChanged(); // (re)set validation messages now\n    this.hasChanged = false;\n  }\n\n  onValueChanged(data?: any) {\n    if (!this.mainForm) { return; }\n    const form = this.mainForm;\n\n    this.hasChanged = true;\n\n    for (const field of Object.keys(this.formErrors)) {\n      // clear previous error message (if any)\n      this.formErrors[field] = '';\n      const control = form.get(field);\n\n      if (control && (control.dirty || this.showAllErrors) && !control.valid) {\n        const messages = this.validationMessages[field];\n        for (const key of Object.keys(control.errors)) {\n          this.formErrors[field] += messages[key] + ' ';\n        }\n      }\n    }\n  }\n\n  save() {\n    if (this.mainForm.valid) {\n      let value = this.mainForm.value;\n      this.saving = true;\n      this.hubService.newDatalinkTest(\n        this.name,\n        this.sourceDatalinkKeys,\n        value.auditConnectionKey,\n        value.targetConnectionKey,\n        value.sourceConnectionKey\n      ).then(async result => {\n        if (value.snapshotData) {\n          await this.hubService.runDatalinkTestSnapshot([result], this.cancelToken);\n        }\n          this.router.navigate(['/hub', this.hubCache.hub.hubKey, 'datalinkTests', 'datalinkTest-edit', result.key],\n            { relativeTo: this.route.root });\n      }).catch(reason => {\n        this.saving = false;\n      });\n    } else {\n      this.showAllErrors = true;\n      this.onValueChanged();\n    }\n  }\n\n  cancel() {\n    this.location.back();\n  }\n}\n","<div class=\"container\">\n\t<dexih-widget title=\"Edit API\" iconClass=\"fa fa-lg fa-fw fa-feed\" [showCloseButton]=\"true\" [padding]=\"false\"\n\t\t(close)=\"close()\">\n\t\t<ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\"\n\t\t\t\tclass=\"mr-1\"></dexih-invalid-form-details>\n\t\t\t<download-button class=\"mr-1\" (download)=\"download($event)\"></download-button>\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n\t\t</ng-template>\n\n\t\t<dexih-widget-section title=\"Properties\" [showExpandButton]=\"true\">\n\t\t\t<form *ngIf=\"formsService.currentForm\" [formGroup]=\"formsService.currentForm\">\n\t\t\t\t<fieldset>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<form-input label=\"Api Name\" formControlName=\"name\" placeholder=\"Enter the api name.\"\n\t\t\t\t\t\t\t[autocapitalize]=\"true\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n\t\t\t\t\t\t\tplaceholder=\"Enter the description.\">\n\t\t\t\t\t\t</form-textarea>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-checkbox label=\"Auto Start\" formControlName=\"autoStart\"\n\t\t\t\t\t\t\t\t\tnote=\"Re-start the API when the remote agent is restarted.\">\n\t\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-input label=\"Log Directory\" formControlName=\"logDirectory\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Enter a directory to log api updates.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t\t\t\t[errors]=\"formsService.formErrors['logDirectory']\"\n\t\t\t\t\t\t\t\t\tnote=\"Directory to create detailed logs of API calls.  Leave blank to exclude file logging.\">\n\t\t\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-checkbox label=\"Cache Queries\" formControlName=\"cacheQueries\"\n\t\t\t\t\t\t\t\t\tnote=\"Cache API called to improve performance\">\n\t\t\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-time label=\"Reset Cache Interval\" formControlName=\"cacheResetInterval\"\n\t\t\t\t\t\t\t\t\t[errors]=\"formsService.formErrors['resetCacheInterval']\"\n\t\t\t\t\t\t\t\t\tnote=\"The interval to reset the cache (forcing a reload of new data).\">\n\t\t\t\t\t\t\t\t</form-time>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t\t<form-select label=\"Data Source Type\" formControlName=\"sourceType\" [items]=\"sourceTypes\"\n\t\t\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n\t\t\t\t\t\t\t\t\tnote='Specify the source type for this view' [enableFilter]=\"false\">\n\t\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\"\n\t\t\t\t\t\t\t\t*ngIf=\"formsService.currentForm.value.sourceType == eSourceType.Table\">\n\t\t\t\t\t\t\t\t<form-select label=\"Source Table\" formControlName=\"sourceTableKey\"\n\t\t\t\t\t\t\t\t\t[errors]=\"errors?.sourceTableKey\" [items]=\"connectionTables\" parentName=\"name\"\n\t\t\t\t\t\t\t\t\tchildItems=\"dexihTables\" itemKey=\"key\" itemName=\"logicalName\"\n\t\t\t\t\t\t\t\t\tnote=\"Select the source table\">\n\t\t\t\t\t\t\t\t\t<table-edit-button [key]=\"formsService.currentForm.controls.sourceTableKey.value\"></table-edit-button>\n\t\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t\t<section class=\"form-group col-md-6\"\n\t\t\t\t\t\t\t\t*ngIf=\"formsService.currentForm.value.sourceType == eSourceType.Datalink\">\n\t\t\t\t\t\t\t\t<form-select label=\"Source Datalink\" formControlName=\"sourceDatalinkKey\"\n\t\t\t\t\t\t\t\t\t[errors]=\"errors?.sourceDatalinkKey\" [items]=\"datalinks\" itemKey=\"key\"\n\t\t\t\t\t\t\t\t\titemName=\"name\" note='Select the source datalink'>\n\t\t\t\t\t\t\t\t\t<datalink-edit-button [key]=\"formsService.currentForm.controls.sourceDatalinkKey.value\"></datalink-edit-button>\n\t\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\t\t\t\t</fieldset>\n\t\t\t</form>\n\t\t</dexih-widget-section>\n\n\t\t<dexih-widget-section *ngIf=\"formsService.currentForm\"  title=\"Parameters\" [showExpandButton]=\"true\" [padding]=\"true\">\n\t\t\t<input-parameters [showEdit]=\"true\" [parameters]=\"formsService.currentForm.controls.parameters\"\n\t\t\t\t[formsService]=\"formsService\">\n\t\t\t</input-parameters>\n\t\t</dexih-widget-section>\n\n\t\t<dexih-widget-section title=\"Data\" [showExpandButton]=\"true\">\n\n\t\t\t<div class=\"d-flex flex-wrap pt-1\" *ngIf=\"inputColumns && inputColumns.length > 0\">\n\t\t\t\t<span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n\t\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t{{column.logicalName}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<form-input name=\"column{{i}}\" class=\"form-control p-0\"\n\t\t\t\t\t\t[placeholder]=\"'Enter ' + column.logicalName\" [(ngModel)]=\"column.value\"></form-input>\n\t\t\t\t</span>\n\t\t\t</div>\n\n\t\t\t<section>\n\t\t\t\t<h5>Data Configuration</h5>\n\t\t\t\t<query-builder [selectQuery]=\"selectQuery\" [columns]=\"tableColumns\" [inputColumns]=\"inputColumns\" [parameters]=\"formsService?.currentForm?.controls.parameters.value\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\">\n\t\t\t\t</query-builder>\n\t\t\t</section>\n\n\t\t\t<dexih-table [enableMultiSelect]=\"false\" [enableSaveCsv]=\"true\" [columns]=\"columns\" [data]=\"data\">\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-refresh class=\"mr-1\" (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n\t\t\t\t</ng-template>\n\t\t\t</dexih-table>\n\t\t</dexih-widget-section>\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" title=\"Connections\" path=\"/assets/help/reference/api.md\"></dexih-help>\n</div>","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubCache, eCacheStatus, ConnectionTables } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { Subscription, combineLatest, merge, Subject} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { InputOutputColumns } from '../../hub.lineage.models';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { eSourceType, DexihDatalink, InputColumn, DexihColumnBase, SelectQuery, DexihApi, DownloadObject, eDataObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'dexih-api-edit-form',\n  templateUrl: './api-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class ApiEditComponent implements OnInit, OnDestroy {\n  public apiKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _changesSubscription: Subscription;\n\n  public refreshDataSubject: Subject<void> = new Subject<void>();\n\n  sourceTypes = [\n    { key: eSourceType.Datalink, name: 'Datalink' },\n    { key: eSourceType.Table, name: 'Table' }\n  ];\n\n  eSourceType = eSourceType;\n\n  public connectionTables: ConnectionTables[] = [];\n  public datalinks: DexihDatalink[] = [];\n\n  public inputColumns: InputColumn[];\n  public tableColumns: DexihColumnBase[];\n  selectQuery: SelectQuery = new SelectQuery();\n\n  columns: Array<any>;\n  public data: Array<any> = [];\n  private isLoaded = false;\n\n  private cancelToken = new CancelToken();\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.hubCache && this.hubCache.isLoaded()) {\n          this.connectionTables = this.hubCache.getConnectionTables();\n          this.datalinks = this.hubCache.hub.dexihDatalinks;\n        }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n        if (this.hubCache.isLoaded()) {\n          if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded || this.isLoaded) { return; }\n          this.isLoaded = true;\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Api Edit');\n    }\n  }\n\n  load() {\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.apiKey = + this.params['apiKey'];\n\n      if (!this.apiKey) {\n        this.hubService.addHubErrorMessage('There was no api specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihApis) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n\n          let api = this.hubCache.hub.dexihApis.find(c => c.key === this.apiKey);\n\n          this.selectQuery = api.selectQuery;\n          if (!this.selectQuery) { this.selectQuery = new SelectQuery(); }\n\n          this.formsService.api(api);\n          this.watchChanges();\n\n          this.getColumns();\n          // this.refresh();\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let api = new DexihApi();\n      this.formsService.api(api);\n      this.watchChanges();\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/api-new', `/api-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n  }\n\n  watchChanges() {\n    if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    this._changesSubscription = merge(\n      this.formsService.currentForm.controls.sourceDatalinkKey.valueChanges,\n      this.formsService.currentForm.controls.sourceTableKey.valueChanges\n    ).subscribe(() => {\n      this.reset();\n      this.selectQuery = new SelectQuery();\n      this.getColumns();\n  //    this.refresh();\n  });\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  getColumns() {\n    let apiForm = this.formsService.currentForm;\n\n    if (apiForm.controls.sourceType.value === eSourceType.Table && apiForm.controls.sourceTableKey.value > 0) {\n      let table = this.hubCache.getTable(apiForm.controls.sourceTableKey.value);\n      if (table) {\n        this.tableColumns = table.dexihTableColumns;\n        this.inputColumns = this.getInputColumns(table.dexihTableColumns);\n        return;\n      } else {\n        this.reset();\n      }\n    } else {\n      this.reset();\n    }\n\n    if (apiForm.controls.sourceType.value === eSourceType.Datalink && apiForm.controls.sourceDatalinkKey.value > 0) {\n      let datalink = this.datalinks.find(c => c.key === apiForm.controls.sourceDatalinkKey.value);\n      if (datalink) {\n        const ioColumns = new InputOutputColumns();\n        ioColumns.buildInputOutput(this.hubCache, datalink);\n        this.tableColumns = ioColumns.getDatalinkOutputColumns(datalink);\n        this.inputColumns = this.getInputColumns(datalink.sourceDatalinkTable.dexihDatalinkColumns);\n      } else {\n        this.reset();\n      }\n    } else {\n      this.reset();\n    }\n  }\n\n  getInputColumns(columns: DexihColumnBase[]): InputColumn[] {\n    let inputColumns = columns.filter(c => c.isInput).map(c => {\n      return <InputColumn>  {\n          name: c.name, logicalName: c.logicalName, dataType: c.dataType, rank: c.rank, value: c.defaultValue};\n    });\n\n    return inputColumns;\n  }\n\n  reset() {\n    this.tableColumns = [];\n    this.inputColumns = [];\n    this.columns = null;\n    this.data = null;\n  }\n\n  refresh() {\n    let apiForm = this.formsService.currentForm;\n    if (apiForm.controls.sourceType.value === eSourceType.Datalink) {\n      this.hubService.previewDatalinkKeyData(apiForm.controls.sourceDatalinkKey.value, false,\n        this.selectQuery, this.inputColumns, apiForm.controls.parameters.value, this.cancelToken).then((result) => {\n        this.refreshDataSubject.next();\n        this.columns = result.columns;\n        this.data = result.data;\n      }).catch(() => {\n      });\n\n    }\n    if (apiForm.controls.sourceType.value === eSourceType.Table) {\n      this.hubService.previewTableKeyData(apiForm.controls.sourceTableKey.value,\n          false, this.selectQuery, this.inputColumns, apiForm.controls.parameters.value, this.cancelToken).then((result) => {\n        this.columns = result.columns;\n        this.data = result.data;\n      }).catch(() => {\n      });\n    }\n  }\n\n  download(format) {\n    let api = <DexihApi>this.formsService.currentForm.value;\n    let downloadObject = new DownloadObject();\n    if (api.sourceType === eSourceType.Table) {\n      downloadObject.objectKey = api.sourceDatalinkKey;\n      downloadObject.objectType = eDataObjectType.Datalink;\n    }\n    if (api.sourceType === eSourceType.Table) {\n      downloadObject.objectKey = api.sourceTableKey;\n      downloadObject.objectType = eDataObjectType.Table;\n    }\n\n    downloadObject.query = this.selectQuery;\n    this.hubService.downloadData([downloadObject], false, format, this.cancelToken)\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The api has not been saved',\n          'The api changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The api changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Api's\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-feed\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t\t<dexih-table \n\t\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t\t[columns]=\"columns\"\n\t\t\t\t[dataObservable]=\"tableData\"\n\t\t\t\t(rowClick)=\"editApi($event)\"\n\t\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t\t>\n\t\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.ColumnValidation\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.Api'></dependent-items-button>\n\t\t\t\t\t</ng-template>\n\t\n\n\t\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t\t<actions-api-button [apis]=\"items\"></actions-api-button>\n\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n\t\t\t\t\t\t<api-status [apiKey]='item?.key'></api-status>\n\t\t\t\t\t</ng-template>\n\t\t\t</dexih-table>\n\n\t\t</dexih-widget>\n\t\t\n\t\t<dexih-help class=\"m-3\"  title=\"Connections\" path=\"/assets/help/reference/api.md\"></dexih-help>\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { DexihApi, eSourceType, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'apis',\n    templateUrl: './api-index.component.html',\n    styles: []\n})\nexport class ApiIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    apis: Array<DexihApi>;\n\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { iconClass: 'sharedIcon', tooltip: 'sharedToolTip', width: '1%', align: 'center' },\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'apiSource', title: 'Api Source' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.updateApis();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'View Index');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    editApi(api: DexihApi) {\n        this.router.navigate(['api-edit', api.key], { relativeTo: this.route });\n    }\n\n    updateApis() {\n        if (this.hubCache.isLoaded()) {\n            let apis: Array<DexihApi>;\n            apis = this.hubCache.hub.dexihApis.filter(c => c.isValid);\n\n            let tableData = apis.map(api => {\n                return {\n                    key: api.key,\n                    name: api.name,\n                    apiSource: this.getSourceDetails(api),\n                    updateDate: api.updateDate,\n                    sharedIcon: api.isShared ? 'fa fa-group' : 'fa fa-user-secret',\n                    sharedToolTip: api.isShared ? 'Table is shared' : 'Table is private',\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.ColumnValidation, api.key)\n                };\n            });\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    getSourceDetails(api: DexihApi): string {\n        if (api.sourceType === eSourceType.Table) {\n            let table = this.hubCache.getTable(api.sourceTableKey);\n            if (table) {\n                return 'Table: ' + table.name;\n            } else {\n                return 'Error: Table not found';\n            }\n        } else {\n            let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === api.sourceDatalinkKey);\n            if (datalink) {\n                return 'Datalink: ' + datalink.name;\n            } else {\n                return 'Error: Datalink not found';\n            }\n        }\n\n        return 'Error: Source not configured';\n    }\n\n\n\n    watchChanges() {\n        // watch the current validation in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Api || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateApis();\n            }\n        });\n    }\n}\n","<div class=\"container\">\n    <dexih-widget title=\"Datalink Options\" iconClass=\"fa fa-lg fa-fw fa-exchange\"  [showCloseButton]=\"true\" (close)=\"close()\" [padding]=\"true\">\n            <ng-template #header>\n                <dexih-button-refresh class=\"mr-1\" (click)=\"runDatalinks()\" text=\"Run Now\"></dexih-button-refresh>\n                <dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n            </ng-template>\n\n        <ng-template #subHeader>\n            <label class=\"label\">Run the following datalink(s):</label>\n            <div class=\"d-flex flex-wrap\">\n                <div class=\"alert alert-primary m-1\" *ngFor=\"let datalink of datalinks | fieldSort: 'name'\">\n                    {{datalink.name}}\n                </div>\n            </div>\n        </ng-template>\n            \n\t\t<form>\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"col\">\n\t\t\t\t\t\t\t<form-checkbox label=\"Truncate all target tables before execution.\" [(ngModel)]=\"truncateTable\" [ngModelOptions]=\"{standalone: true}\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n                    <div class=\"form-row\">\n                        <section class=\"col\">\n                                <form-checkbox label=\"Reset the source incremental value, and load all source rows.\" [(ngModel)]=\"resetIncremental\" [ngModelOptions]=\"{standalone: true}\"></form-checkbox>\n                            </section>\n                        </div>\n\n                    <div class=\"form-row\">\n                        <section class=\"col\">\n                            <form-input label=\"Incremental Value\" [(ngModel)]=\"resetValue\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"\" iconClass=\"fa fa-list\" note=\"Use a specific incremental value to start loading source rows from (leave empty for null value)\" >\n                                </form-input>\n                        </section>\n                    </div>\n    \n    \n                    <div class=\"d-flex flex-wrap pt-1\" *ngIf=\"inputColumns && inputColumns.length > 0\" >\n                        <div class=\"input-group-text\">\n                            Input Values\n                        </div>\n                \n                        <span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n                            <div class=\"input-group-prepend\">\n                                <div class=\"input-group-text\">\n                                    {{column.logicalName}}\n                                </div>\n                            </div>\n                            <form-input name=\"column{{i}}\" class=\"form-control p-0\" [placeholder]=\"column.logicalName\" [(ngModel)]=\"column.value\"></form-input>\n                        </span>\n                    </div>\n\n                    <div *ngIf=\"parameters && parameters.length > 0\" >\n                        <label class=\"label\">Parameters:</label>\n                        <input-parameters-view [parameters]=\"parameters\"></input-parameters-view>\n                    </div>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\n    </dexih-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubCache } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { DexihDatalink, InputColumn, InputParameter, InputParameterBase } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'datalink-run',\n    templateUrl: './datalink-run.component.html'\n})\nexport class DatalinkRunComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    private datalinks: DexihDatalink[];\n    private hubCache: HubCache;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public inputColumns: InputColumn[];\n    public parameters: InputParameterBase[];\n\n    public truncateTable = false;\n    public resetIncremental = false;\n    public resetValue = '';\n\n    isRefreshing = false;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache.isLoaded()) {\n                    let datalinkKeys: string = params['datalinkKeys'];\n                    this.datalinks = new Array<DexihDatalink>();\n\n                    if (datalinkKeys) {\n                        this.inputColumns = [];\n                        this.parameters = [];\n                        let datalinkKeyArray = datalinkKeys.split('|').map(c => +c);\n                        datalinkKeyArray.forEach(datalinkKey => {\n                            let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n                            this.datalinks.push(datalink);\n                            datalink.sourceDatalinkTable.dexihDatalinkColumns.filter(c => c.isInput).forEach(c => {\n                                this.inputColumns.push({datalinkKey: datalinkKey, datalinkName: datalink.name,\n                                    name: c.name, logicalName: c.logicalName,\n                                    dataType: c.dataType, rank: c.rank, value: c.defaultValue, defaultValue: c.defaultValue });\n                            });\n                            datalink.parameters.forEach( c => {\n                                if (this.parameters.findIndex( p => p.name === c.name ) < 0) {\n                                    this.parameters.push(c);\n                                }\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    runDatalinks() {\n        this.hubService.runDatalinks(this.datalinks.map(c => c.key), this.truncateTable,\n            this.resetIncremental, this.resetValue, this.inputColumns, this.parameters, this.cancelToken);\n        this.authService.navigateUp();\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { eSearchObjectType, SearchObjectTypes } from '../hub.models';\n\n@Pipe({\n  name: 'objectTypeName'\n})\nexport class ObjectTypePipe implements PipeTransform {\n\n  transform(value: eSearchObjectType): any {\n    return SearchObjectTypes.find(c => c.key === value).name;\n  }\n}\n","<div class=\"container-fluid\">\n\t<dexih-widget title=\"Search Results\" iconClass=\"fa fa-lg fa-fw fa-search\" [showCloseButton]=\"true\" [padding]=\"true\" (close)=\"close()\">\n\t\t<form *ngIf=\"searchForm\" [formGroup]=\"searchForm\">\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Search Term\" formControlName=\"searchString\" placeholder=\"Search...\" iconClass=\"fa fa-search\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-select label=\"Restrict to\" formControlName=\"searchObject\" [items]=\"searchObjectTypes\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\n\t\t<div role=\"content\">\n\t\t\t<div class=\"well\" *ngIf=\"!searchResults || searchResults?.length == 0\">\n\t\t\t\t<h5>No search results available.</h5>\n\t\t\t</div>\n\n\t\t\t<div class=\"well\">\n\t\t\t\t<ul class=\"list-group \">\n\t\t\t\t\t<li *ngFor=\"let searchResult of searchResults\" class=\"list-group-item\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<h5>{{searchResult.objectType | objectTypeName }}</h5>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"col-xs-9\" [ngSwitch]=\"searchResult.objectType\">\n\t\t\t\t\t\t\t<datajob-view *ngSwitchCase=\"eSearchObjectType.Datajob\" [datajob]=\"searchResult.object\"></datajob-view>\n\t\t\t\t\t\t\t<datalink-view *ngSwitchCase=\"eSearchObjectType.Datalink\" [datalink]=\"searchResult.object\"></datalink-view>\n\t\t\t\t\t\t\t<connection-view *ngSwitchCase=\"eSearchObjectType.Connection\" [connection]=\"searchResult.object\"></connection-view>\n\t\t\t\t\t\t\t<table-view *ngSwitchCase=\"eSearchObjectType.Table\" [connection]=\"searchResult.objectParent\" [table]=\"searchResult.object\"></table-view>\n\t\t\t\t\t\t\t<table-column-view *ngSwitchCase=\"eSearchObjectType.TableColumn\" [table]=\"searchResult.objectParent\" [column]=\"searchResult.object\"></table-column-view>\n\t\t\t\t\t\t\t<columnValidation-view *ngSwitchCase=\"eSearchObjectType.ColumnValidation\" [columnValidation]=\"searchResult.object\"></columnValidation-view>\n\t\t\t\t\t\t\t<fileFormat-view *ngSwitchCase=\"eSearchObjectType.FileFormat\" [fileFormat]=\"searchResult.object\"></fileFormat-view>\n\t\t\t\t\t\t\t<view-view *ngSwitchCase=\"eSearchObjectType.View\" [view]=\"searchResult.object\"></view-view>\n\t\t\t\t\t\t\t<api-view *ngSwitchCase=\"eSearchObjectType.Api\" [api]=\"searchResult.object\"></api-view>\n\t\t\t\t\t\t\t<dashboard-view *ngSwitchCase=\"eSearchObjectType.Dashboard\" [dashboard]=\"searchResult.object\"></dashboard-view>\n\t\t\t\t\t\t\t<listOfValues-view *ngSwitchCase=\"eSearchObjectType.ListOfValues\" [listOfValues]=\"searchResult.object\"></listOfValues-view>\n\t\t\t\t\t\t\t<datalinkTest-view *ngSwitchCase=\"eSearchObjectType.DatalinkTest\" [datalinkTest]=\"searchResult.object\"></datalinkTest-view>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t</dexih-widget>\n</div>","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { HubService } from '../hub.service';\nimport { AuthService } from '../../+auth/auth.service';\nimport { HubCache, SearchResult, eSearchObjectType, SearchObjectTypes } from '../hub.models';\nimport { Observable, Subscription, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n    selector: 'search',\n    templateUrl: './search.component.html',\n})\n\nexport class SearchComponent implements OnInit, OnDestroy {\n\n    private _subscription: Subscription;\n    private _searchSubscription: Subscription;\n    public hubCache: HubCache;\n\n    public searchForm: FormGroup;\n\n    searchObjectTypes = SearchObjectTypes;\n    eSearchObjectType = eSearchObjectType;\n\n    private isFirst = false;\n\n    searchResults: Array<SearchResult>;\n\n    constructor(public hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private fb: FormBuilder\n    ) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let params = result[0];\n                this.hubCache = result[1];\n\n                if (!this.isFirst) {\n                    this.isFirst = false;\n                    let searchObject = +params['searchObject'];\n                    if (!searchObject) {\n                        searchObject = 0;\n                    }\n\n                    this.searchForm = this.fb.group({\n                        'searchString': [params['search'], [\n                        ]],\n                        'searchObject': [searchObject, [\n                        ]],\n                    });\n\n                    this.updateSearch();\n\n                    if (this._searchSubscription) { this._searchSubscription.unsubscribe(); }\n                    this._searchSubscription = this.searchForm.valueChanges\n                        .pipe(debounceTime(500))\n                        .subscribe(newValue => {\n                            this.updateSearch();\n                        });\n                }\n\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Search');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._searchSubscription) { this._searchSubscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    updateSearch() {\n        if (!this.hubCache.isLoaded()) { return; }\n\n        this.searchResults = this.hubCache.search(this.searchForm.value.searchString, this.searchForm.value.searchObject);\n\n        if (history.pushState) {\n            let newUrl = this.hubCache.getHubUrl() + '/search';\n            let searchString = this.searchForm.value.searchString;\n            let searchObject = this.searchForm.value.searchObject;\n            if (searchString) {\n                newUrl += '/' + searchObject + '/' + searchString;\n            }\n            this.router.navigateByUrl(newUrl);\n        }\n    }\n}\n\n\n","import { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { SharedModule } from '../../shared/shared.module';\nimport { SearchComponent } from './search.component';\nimport { ObjectTypePipe } from './object-type.pipe';\nimport { HubSharedModule} from '../hub.shared.module';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        HubSharedModule,\n        ReactiveFormsModule\n    ],\n    exports: [],\n    declarations: [SearchComponent, ObjectTypePipe],\n    providers: [],\n})\nexport class SearchModule { }\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Dashboards\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-pie-chart\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t\t<dexih-table \n\t\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t\t[columns]=\"columns\"\n\t\t\t\t[dataObservable]=\"tableData\"\n\t\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t\t>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.Dashboard'></dependent-items-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.Dashboard\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t\t<actions-dashboard-button [dashboards]=\"items\"></actions-dashboard-button>\n\t\t\t\t\t</ng-template>\n\t\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Dashboards\" path=\"/assets/help/reference/dashboard.md\"></dexih-help>\n</div>\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubCache } from '../../hub.models';\nimport { DexihDashboard, DexihHub, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'dashboards',\n    templateUrl: './dashboard-index.component.html',\n    styles: []\n})\nexport class DashboardIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    dashboards: Array<DexihDashboard>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { iconClass: 'sharedIcon', tooltip: 'sharedToolTip', width: '1%', align: 'center' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.updateDashboards();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Dashboard Index');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    delete(dashboard: Array<DexihDashboard>) {\n        // TDB\n        this.hubService.deleteDashboards(dashboard);\n    }\n\n    updateDashboards() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let dashboards: Array<DexihDashboard>;\n            dashboards = this.hubCache.hub.dexihDashboards.filter(c => c.isValid);\n            let tableData = dashboards.map(dashboard => {\n                return {\n                    key: dashboard.key,\n                    name: dashboard.name,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.Dashboard, dashboard.key),\n                    updateDate: dashboard.updateDate,\n                    sharedIcon: dashboard.isShared ? 'fa fa-group' : 'fa fa-user-secret',\n                    sharedToolTip: dashboard.isShared ? 'Table is shared' : 'Table is private'\n                };\n            });\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(dashboard: DexihDashboard) {\n        this.router.navigate(['dashboard-edit', dashboard.key], { relativeTo: this.route });\n    }\n\n    // TBD\n    export(items: Array<DexihDashboard>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(cache.hub.hubKey, '');\n        items.forEach(item => { cache.cacheAddDashboard(item.key, hub); });\n\n        let filename = items.length === 1 ? 'Dashboard - ' + items[0].name + '.json' : 'dashboards.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    // TBD\n    watchChanges() {\n        // watch the current validation in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Dashboard || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateDashboards();\n            }\n        });\n    }\n}\n","<div class=\"container\">\n    <dexih-widget title=\"Datajob Options\" iconClass=\"fa fa-lg fa-fw fa-exchange\"  [showCloseButton]=\"true\" (close)=\"close()\" [padding]=\"true\">\n            <ng-template #header>\n                <dexih-button-refresh class=\"mr-1\" (click)=\"run()\" text=\"Run Now\"></dexih-button-refresh>\n                <dexih-button-refresh class=\"mr-1\" (click)=\"activate()\" text=\"Activate Triggers\"></dexih-button-refresh>\n                <dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n            </ng-template>\n\n        <ng-template #subHeader>\n            <label class=\"label\">Run the following datajobs(s):</label>\n            <div>\n                <div class=\"row\">\n                    <span class=\"col alert alert-primary m-1\" *ngFor=\"let datajob of datajobs | fieldSort: 'name'\">\n                        {{datajob.name}}\n                    </span>\n                </div>\n            </div>\n        </ng-template>\n            \n\t\t<form>\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"col\">\n\t\t\t\t\t\t\t<form-checkbox label=\"Truncate all target tables before execution.\" [(ngModel)]=\"truncateTable\" [ngModelOptions]=\"{standalone: true}\"></form-checkbox>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\n                    <div class=\"form-row\">\n                        <section class=\"col\">\n                                <form-checkbox label=\"Reset the source incremental value, and load all source rows.\" [(ngModel)]=\"resetIncremental\" [ngModelOptions]=\"{standalone: true}\"></form-checkbox>\n                            </section>\n                        </div>\n\n                    <div class=\"form-row\">\n                        <section class=\"col\">\n                            <form-input label=\"Incremental Value\" [(ngModel)]=\"resetValue\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"\" iconClass=\"fa fa-list\" note=\"Use a specific incremental value to start loading source rows from (leave empty for null value)\" >\n                                </form-input>\n                        </section>\n                    </div>\n    \n    \n                    <div class=\"d-flex flex-wrap pt-1\" *ngIf=\"parameters && parameters.length > 0\" >\n                        <div class=\"input-group-text\">\n                            Input Parameters\n                        </div>\n                \n                        <input-parameters-view [parameters]=\"parameters\"></input-parameters-view>\n                    </div>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\n    </dexih-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { DexihDatajob, InputParameter } from '../../../shared/shared.models';\nimport { HubCache } from '../../hub.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'datajob-run',\n    templateUrl: './datajob-run.component.html'\n})\nexport class DatajobRunComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    private datajobs: DexihDatajob[];\n    private hubCache: HubCache;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n\n    public truncateTable = false;\n    public resetIncremental = false;\n    public resetValue = '';\n\n    parameters: InputParameter[];\n\n    isRefreshing = false;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache.isLoaded()) {\n                    let datajobKeys: string = params['datajobKeys'];\n                    this.datajobs = new Array<DexihDatajob>();\n\n                    if (datajobKeys) {\n                        this.parameters = [];\n                        let datajobKeyArray = datajobKeys.split('|').map(c => +c);\n                        datajobKeyArray.forEach(datajobKey => {\n                            let datajob = this.hubCache.hub.dexihDatajobs.find(c => c.key === datajobKey);\n                            this.datajobs.push(datajob);\n                            datajob.parameters.forEach(c => {\n                                if (this.parameters.findIndex(p => c.name === p.name) < 0) {\n                                    this.parameters.push({name: c.name, value: c.value, rank: c.rank});\n                                }\n                            });\n                        });\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datajob Run');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    run() {\n        this.hubService.runDatajobs(this.datajobs, this.truncateTable,\n            this.resetIncremental, this.resetValue, this.parameters, this.cancelToken);\n        this.authService.navigateUp();\n    }\n\n    activate() {\n        this.hubService.activateDatajobs(this.datajobs, this.parameters, this.cancelToken);\n        this.authService.navigateUp();\n    }\n\n}\n","<div class=\"container\" *ngIf=\"formsService.currentForm\">\n\t<dexih-widget title=\"Edit List of Values\" iconClass=\"fa fa-lg fa-list-alt\" [showCloseButton]=\"true\" [padding]=\"false\"\n\t\t(close)=\"close()\">\n\t\t<ng-template #header>\n\t\t\t<dexih-invalid-form-details [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\" class=\"mr-1\"></dexih-invalid-form-details>\n\t\t\t<save-button *ngIf=\"hubCache.canWrite\" [formsService]=\"formsService\" class=\"mr-1\"></save-button>\n\t\t\t<cancel-button [formsService]=\"formsService\"></cancel-button>\n\t\t</ng-template>\n\n\t\t<form [formGroup]=\"formsService.currentForm\" class=\"m-3\">\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<form-input label=\"List of Values\" formControlName=\"name\"\n\t\t\t\t\t\tplaceholder=\"Enter the list of values name.\" [autocapitalize]=\"on\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t[errors]=\"formsService.formErrors['name']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n\t\t\t\t\t\tplaceholder=\"Enter the description.\">\n\t\t\t\t\t</form-textarea>\n\t\t\t\t</section>\n\t\t\t\t<section>\n\t\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t\t<form-select label=\"Data Source Type\" formControlName=\"sourceType\" [items]=\"sourceTypes\"\n\t\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n\t\t\t\t\t\t\t\tnote='Specify the source type for this view' [enableFilter]=\"false\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-6\"\n\t\t\t\t\t\t\t*ngIf=\"formsService.currentForm.value.sourceType == eLOVObjectType.Table\">\n\t\t\t\t\t\t\t<form-select label=\"Source Table\" formControlName=\"sourceTableKey\"\n\t\t\t\t\t\t\t\t[errors]=\"errors?.sourceTableKey\" [items]=\"connectionTables\" parentName=\"name\"\n\t\t\t\t\t\t\t\tchildItems=\"dexihTables\" itemKey=\"key\" itemName=\"logicalName\"\n\t\t\t\t\t\t\t\tnote=\"Select the source table\">\n\t\t\t\t\t\t\t\t<table-edit-button [key]=\"formsService.currentForm.controls.sourceTableKey.value\"></table-edit-button>\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-6\"\n\t\t\t\t\t\t\t*ngIf=\"formsService.currentForm.value.sourceType == eLOVObjectType.Datalink\">\n\t\t\t\t\t\t\t<form-select label=\"Source Datalink\" formControlName=\"sourceDatalinkKey\"\n\t\t\t\t\t\t\t\t[errors]=\"errors?.sourceDatalinkKey\" [items]=\"datalinks\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t\t\tnote='Select the source datalink'>\n\t\t\t\t\t\t\t\t<datalink-edit-button [key]=\"formsService.currentForm.controls.sourceDatalinkKey.value\"></datalink-edit-button>\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-row\" *ngIf=\"tableColumns\">\n\t\t\t\t\t\t<section class=\"form-group col-md-4\">\n\t\t\t\t\t\t\t<form-select label=\"Key Column\" formControlName=\"keyColumn\" [items]=\"tableColumns\"\n\t\t\t\t\t\t\t\titemKey=\"name\" itemName=\"name\" iconClass=\"fa fa-key\" [allowNullSelect]=\"true\" [enableFilter]=\"false\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-4\">\n\t\t\t\t\t\t\t<form-select label=\"Name Column\" formControlName=\"nameColumn\" [items]=\"tableColumns\"\n\t\t\t\t\t\t\t\titemKey=\"name\" itemName=\"name\" iconClass=\"fa fa-circle-o\" [allowNullSelect]=\"true\" [enableFilter]=\"false\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t\t<section class=\"form-group col-md-4\">\n\t\t\t\t\t\t\t<form-select label=\"Description Column\" formControlName=\"descriptionColumn\"\n\t\t\t\t\t\t\t\t[items]=\"tableColumns\" itemKey=\"name\" itemName=\"name\" [allowNullSelect]=\"true\" iconClass=\"fa fa-comment-o\"\n\t\t\t\t\t\t\t\t[enableFilter]=\"false\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t<div class=\"form-row\" *ngIf=\"tableColumns\">\n\t\t\t\t\t\t<section class=\"form-group col-md-12\">\n\t\t\t\t\t\t\t<div class=\"d-flex flex-wrap pt-1\">\n\t\t\t\t\t\t\t\t<form-checkbox class=\"input-group-prepend\" label=\"Cache Lookup\" formControlName=\"cache\" [border]=\"true\"></form-checkbox>\n\t\t\t\t\t\t\t\t<form-input type=\"number\" class=\"pl-1\" *ngIf=\"formsService.currentForm.controls.cache.value\" labelLeft=\"Cache Seconds\" placeholder=\"seconds\" title=\"Specify the number of seconds to cache the lookup\" formControlName=\"cacheSeconds\"></form-input>\n\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</fieldset>\n\t\t</form>\n\n\t\t<dexih-widget-section *ngIf=\"formsService.currentForm.value.sourceType == eLOVObjectType.Static\" title=\"Static Values\"\n\t\t\t[showExpandButton]=\"true\">\n\t\t\t<ng-template #header>\n\t\t\t\t<dexih-button class=\"mr-1\" (click)=\"add(-1)\" iconClass=\"fa fa-plus\">Insert Item</dexih-button>\n\t\t\t\t<dexih-button-delete (click)=\"clear()\" text=\"Clear All\"></dexih-button-delete>\n\t\t\t</ng-template>\n\t\t\n\t\t\t<form *ngFor=\"let itemForm of formsService.currentForm.controls.staticData.controls; let i = index;\"\n\t\t\t\t[formGroup]=\"itemForm\" class=\"flex-fill\">\n\t\t\t\t<div class=\"input-group\">\t\t\n\t\t\t\t\t<div class=\"form-control p-0\">\n\t\t\t\t\t\t<form-input [border]=\"false\" formControlName=\"key\" type=\"text\" placeholder=\"Key Value\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-control p-0\">\n\t\t\t\t\t\t<form-input [border]=\"false\" formControlName=\"name\" type=\"text\" placeholder=\"Item name\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"form-control p-0\">\n\t\t\t\t\t\t<form-input [border]=\"false\" formControlName=\"key\" type=\"text\" placeholder=\"Description\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"input-group-append flex-shrink-1 ml-1 \">\n\t\t\t\t\t\t<button class=\"btn btn-light\" type=\"button\" (click)=\"add(i)\"  value=\"Add\">\n\t\t\t\t\t\t\t<i class=\"fa fa-plus-square-o\"></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"btn btn-light\" type=\"button\" (click)=\"remove(i)\"  value=\"Remove\">\n\t\t\t\t\t\t\t<i class=\"fa fa-minus-square-o\"></i>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</form>\n\n\t\t</dexih-widget-section>\n\t\t\n\t\t<ng-template [ngIf]=\"formsService.currentForm.value.sourceType !== eLOVObjectType.Static\">\n\t\t\t<dexih-widget-section title=\"Query Configuration\" [showExpandButton]=\"true\">\n\t\t\t\t<query-builder [selectQuery]=\"formsService.currentForm.controls.selectQuery.value\" [columns]=\"tableColumns\"\n\t\t\t\t\t[inputColumns]=\"inputColumns\" [parameters]=\"null\" (hasChanged)=\"hasChanged()\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refreshData()\"></query-builder>\n\t\t\t</dexih-widget-section>\n\t\t\n\t\t\t<div *ngIf=\"!data\" class=\"m-3\">\n\t\t\t\t<dexih-button-refresh (click)=\"refreshData()\" text=\"Reload\" [autoCompact]=\"false\"></dexih-button-refresh>\n\t\t\t</div>\n\t\t\n\t\t\t<dexih-table *ngIf=\"data\" [enableMultiSelect]=\"false\" [enableSaveCsv]=\"true\" [columns]=\"columns\" [data]=\"data\">\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-refresh class=\"mr-1\" (click)=\"refreshData()\" text=\"Reload\"></dexih-button-refresh>\n\t\t\t\t</ng-template>\n\t\t\t</dexih-table>\n\t\t</ng-template>\n\t</dexih-widget>\n\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubCache, eCacheStatus, ConnectionTables } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest, merge, Subject} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DexihListOfValues, DexihDatalink, eLOVObjectType,\n  DexihColumnBase, eLOVObjectTypeItems, SelectQuery, ListOfValuesItem } from '../../../shared/shared.models';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { InputOutputColumns } from '../../hub.lineage.models';\nimport { FormGroup, FormArray } from '@angular/forms';\n\n@Component({\n\n  selector: 'dexih-listOfValues-edit-form',\n  templateUrl: './listOfValues-edit.component.html',\n  providers: [HubFormsService]\n})\nexport class ListOfValuesEditComponent implements OnInit, OnDestroy {\n\n  private listOfValuesKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _sourceChangeSubscription: Subscription;\n  private isLoaded = false;\n\n  private refreshDataSubject: Subject<void> = new Subject<void>();\n\n  private cancelToken = new CancelToken();\n\n  public eLOVObjectType = eLOVObjectType;\n  public connectionTables: ConnectionTables[] = [];\n  public datalinks: DexihDatalink[] = [];\n\n  public tableColumns: DexihColumnBase[];\n  public sourceTypes = eLOVObjectTypeItems.filter( c => c.key > 0);\n\n  columns = [\n    { name: 'key', title: 'Key'},\n    { name: 'name', title: 'Name'},\n    { name: 'description', title: 'Description'},\n];\n  public data: Array<any>;\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.pageTitle = data['pageTitle'];\n        this.action = data['action'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit List Of Values');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._sourceChangeSubscription) { this._sourceChangeSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    this.connectionTables = this.hubCache.getConnectionTables();\n    this.datalinks = this.hubCache.hub.dexihDatalinks;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.listOfValuesKey = + this.params['listOfValuesKey'];\n\n      if (!this.listOfValuesKey) {\n        this.hubService.addHubErrorMessage('There was no list of values specified to edit.');\n        // this.errorMessage = 'There was no validation specified to edit.';\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihListOfValues) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n          let listOfValues = this.hubCache.hub.dexihListOfValues.find(c => c.key === this.listOfValuesKey);\n          if (! listOfValues.selectQuery) {\n            listOfValues.selectQuery = new SelectQuery();\n          }\n          this.formsService.listOfValues(listOfValues);\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let listOfValues = new DexihListOfValues();\n      listOfValues.selectQuery = new SelectQuery();\n      this.formsService.listOfValues(listOfValues);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/listOfValues-new', `/listOfValues-edit/${key}`);\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n\n    this.refreshColumns();\n\n    let currentForm = this.formsService.currentForm;\n\n    // if any source table/datalink changed, refresh the columns.\n    this._sourceChangeSubscription = merge(\n      currentForm.controls.sourceType.valueChanges,\n      currentForm.controls.sourceTableKey.valueChanges,\n      currentForm.controls.sourceDatalinkKey.valueChanges).subscribe(() => {\n        this.refreshColumns();\n    });\n  }\n\n  refreshColumns() {\n    let currentForm = this.formsService.currentForm;\n    let sourceType = <eLOVObjectType> currentForm.controls.sourceType.value;\n\n    switch (sourceType) {\n      case eLOVObjectType.Datalink:\n        let datalinkKey = currentForm.controls.sourceDatalinkKey.value;\n        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n        if (datalink) {\n          // get the outputs from the last transform in the datalink\n          const ioColumns = new InputOutputColumns();\n          ioColumns.buildInputOutput(this.hubCache, datalink);\n          this.tableColumns = ioColumns.getDatalinkOutputColumns(datalink);\n        } else {\n          if (datalinkKey > 0) {\n            this.hubService.addHubErrorMessage(`The datalink with the key ${datalinkKey} could not be found.`);\n          }\n          this.tableColumns = null;\n        }\n        break;\n      case eLOVObjectType.Table:\n        let tableKey = currentForm.controls.sourceTableKey.value;\n        let table = this.hubCache.hub.dexihTables.find(c => c.key === tableKey);\n        if (table) {\n          this.tableColumns = table.dexihTableColumns;\n        } else {\n          if (tableKey > 0) {\n            this.hubService.addHubErrorMessage(`The table with the key ${tableKey} could not be found.`);\n          }\n          this.tableColumns = null;\n        }\n        break;\n      }\n  }\n\n  refreshData() {\n    let form = this.formsService.currentForm;\n\n    let listOfValues = <DexihListOfValues>form.value;\n\n    this.hubService.previewListOfValues(listOfValues, true, this.cancelToken).then((data) => {\n      this.data = data;\n      this.refreshDataSubject.next();\n    }).catch((reason) => {\n      this.hubService.addHubMessage(reason);\n    });\n  }\n\n  hasChanged() {\n\n  }\n\n  add(index: number) {\n    let currentForm = <FormGroup> this.formsService.currentForm;\n    let item = this.formsService.listOfValuesItem(new ListOfValuesItem());\n    let staticData = <FormArray> currentForm.controls.staticData;\n    staticData.insert(index + 1, item);\n  }\n\n  remove(index: number) {\n    let currentForm = <FormGroup> this.formsService.currentForm;\n    let staticData = <FormArray> currentForm.controls.staticData;\n    staticData.removeAt(index);\n  }\n\n  clear() {\n    let currentForm = <FormGroup> this.formsService.currentForm;\n    let staticData = <FormArray> currentForm.controls.staticData;\n    while(staticData.controls.length > 0) {\n      staticData.removeAt(0);\n    }\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"List Of Values\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-list-alt\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t(rowClick)=\"edit($event)\"\n\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t<dexih-button-edit class=\"mr-1\" [routerLink]=\"['listOfValues-edit', item.key]\" queryParamsHandling preserveFragment></dexih-button-edit>\n\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.ListOfValues'></dependent-items-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t<dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n\t\t\t\t\t<dexih-button-delete *ngIf=\"hubCache.canWrite\" class=\"mr-1\" (click)=\"delete(items)\"></dexih-button-delete>\n\t\t\t\t\t<tags-update-button class=\"mr-1\" [objectType]=\"eSharedObjectType.ListOfValues\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<dexih-button-new *ngIf=\"hubCache.canWrite\" class=\"mr-1\" [routerLink]=\"['listOfValues-new']\"></dexih-button-new>\n\t\t\t\t</ng-template>\n\t\t</dexih-table>\n\t</dexih-widget>\n</div>\n\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Observable, Subscription, BehaviorSubject, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { DexihListOfValues, eSharedObjectType, eLOVObjectType } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'listOfValues',\n  templateUrl: './listOfValues-index.component.html',\n  styles: []\n})\nexport class ListOfValuesIndexComponent implements OnInit, OnDestroy {\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    listOfValues: Array<DexihListOfValues>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', format: '', tags: 'tags'},\n        { name: 'sourceType', title: 'Source Type', format: 'Enum', enum: eLOVObjectType},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        this._subscription = combineLatest(\n            this.hubService.getHubCacheObservable()\n        ).subscribe(result => {\n          this.hubCache = result[0];\n          this.update();\n        });\n    } catch (e) {\n        this.hubService.addHubClientErrorMessage(e, 'Hub List of Values Index');\n      }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    delete(lov: Array<DexihListOfValues>) {\n        this.hubService.deleteListOfValues(lov);\n    }\n\n    update() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let listOfValues = this.hubCache.hub.dexihListOfValues.filter(c => c.isValid).map(c => {\n                return {\n                    key: c.key,\n                    name: c.name,\n                    description: c.description,\n                    updateDate: c.updateDate,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.ListOfValues, c.key)\n                }\n            });\n            this._tableData.next(listOfValues);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    edit(lov: DexihListOfValues) {\n        this.router.navigate(['listOfValues-edit', lov.key], { relativeTo: this.route});\n    }\n\n    export(lov: Array<DexihListOfValues>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(cache.hub.hubKey, '');\n        hub.dexihListOfValues = lov;\n        lov.forEach(lovItem => {\n            cache.getListOfValuesCache(lovItem, hub);\n        });\n        let filename = 'list_of_values.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n\n    watchChanges() {\n      // watch the current validation in case it is changed in another session.\n      this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n          if (hubCacheChange.changeClass === eSharedObjectType.ListOfValues || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n            this.update();\n          }\n      });\n  }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Tags\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-tags\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t\t<dexih-table \n\t\t\t\t[enableMultiSelect]=\"true\"\n                [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n                [columns]=\"columns\"\n\t\t\t\t[dataObservable]=\"tableData\"\n                (rowClick)=\"edit($event)\"\n                rowStatusHeading=\"Color\"\n\t\t\t\t>\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-hubVariable=\"item\">\n\t\t\t\t\t<dexih-button-edit class=\"mr-1\" (click)=\"edit(item)\"></dexih-button-edit>\n\t\t\t\t</ng-template>\n\n                    <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                        <dexih-button-save-local class=\"mr-1\" (click)=\"export(items)\"></dexih-button-save-local>\n                        <dexih-button-delete class=\"mr-1\" *ngIf=\"hubCache.canWrite\" (click)=\"delete(items)\"></dexih-button-delete>\n                    </ng-template>\n    \n                    <ng-template #actions let-items=\"items\">\n                        <dexih-button-new class=\"mr-1\" *ngIf=\"hubCache.canWrite\" (click)=\"new()\"></dexih-button-new>\n                    </ng-template>\n\n                    <ng-template #rowStatus select=\"rowStatus\" let-item=\"item\">\n\t\t\t\t\t\t<div (click)=\"edit(item)\" class=\"alert p-1 text-center\" [ngStyle]=\"{'background-color': item.color, 'margin-bottom': '0' }\">\n                            <span class=\"blend-text  font-weight-bold\">{{item.name}}</span>\n                        </div>\n\t\t\t\t\t</ng-template>\n    \n                    <ng-template #tableHeader>\n                        <div [@slideDown]='state' class=\"card mt-2\" style=\"width: 100%;\">\n                            <div class=\"card-header text-white bg-primary\">\n                                <b>Add/Edit Tag</b>\n                            </div>\n                            <div class=\"card-body\">\n                                <form *ngIf=\"formsService.currentForm\" [formGroup]=\"formsService.currentForm\">\n                                    <div class=\"form-row\">\n                                        <section class=\"form-group col-md-3\">\n                                            <form-input label=\"Tag Name\" formControlName=\"name\" placeholder=\"Enter the name.\"\n                                                [autocapitalize]=\"true\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\">\n                                            </form-input>\n                                        </section>\n                                        <section class=\"form-group col-md-9\">\n                                            <div>\n                                                <label class=\"mt-1\">Color</label>\n                        \n                                                <div class=\"input-group m-0\">\n                                                    <label class=\"btn mr-1\" style=\"height: '38px'; width: '76px'\" [style.background-color]=\"formsService.currentForm.controls.color.value\">\n                                                        <input formControlName=\"color\" hidden type=\"color\">\n                                                    </label>\n                                                    <form-input class=\"mr-3\" style=\"height: '38px'; width: '90px'\" formControlName=\"color\" placeholder=\"color\"></form-input>\n                                                    <div class=\"btn-group-toggle\" data-toggle=\"buttons\">\n                                                        <button *ngFor=\"let color of colors\" class=\"btn mr-1\" (click)=\"selectColor(color)\" [style.background-color]=\"color.color\" style=\"height: '38px'; width: '38px'\"></button>\n                                                    </div>\n                                                </div>\n                        \n                                            </div>\n                                        </section>\n                                    </div>\n                                    <div class=\"form-row\">\n                                        <section class=\"col-md-12\">\n                                            <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\" >\n                                            </form-textarea>\n                                        </section>\n                                    </div>\n                        \n                                </form>\n                            </div>\n                            <div class=\"card-footer\">\n                                <dexih-button-save class=\"mr-1\" (click)=\"save()\"></dexih-button-save>\n                                <dexih-button-cancel class=\"mr-1\" (click)=\"cancel()\"></dexih-button-cancel>\n                            </div>\n                        </div>\n                    </ng-template>\n    \n\t\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Views\" path=\"/assets/help/reference/tag.md\"></dexih-help>\n\n</div>\n\n\n","import { Route, RouterModule, Routes } from '@angular/router';\n\nimport { ColumnValidationEditComponent, ColumnValidationIndexComponent } from './columnValidation';\nimport { ConnectionEditComponent } from './connection/connection-edit';\nimport { ConnectionImportComponent } from './connection/connection-import';\nimport { ConnectionIndexComponent } from './connection/connection-index';\nimport { ImportComponent, ExportComponent } from './copy';\nimport { DatajobIndexComponent } from './datajob/datajob-index';\nimport { DatalinkIndexComponent } from './datalink/datalink-index';\nimport { DatalinkNewComponent } from './datalink/datalink-new';\nimport { DatalinkPreviewDataComponent } from './datalink/datalink-preview-data';\nimport { FileFormatEditComponent, FileFormatIndexComponent } from './fileFormat';\nimport { FilesManageComponent, FilesBulkLoadComponent } from './files';\nimport { HubVariableEditComponent, HubVariableIndexComponent } from './hubVariable';\nimport { ManageUsersIndexComponent } from './manage/manage-users-index/manage-users-index.component';\nimport { RemoteAgentEditComponent, RemoteAgentIndexComponent } from './remoteAgent';\nimport { ResultsIndexComponent, ResultsViewComponent } from './results';\nimport { SharedDataIndexComponent } from './sharedData/sharedData-index.component';\nimport { TableIndexComponent } from './table/table-index';\nimport { TablePreviewDataComponent } from './table/table-preview-data';\nimport { CustomFunctionIndexComponent, CustomFunctionEditComponent } from './customFunction';\nimport { ItemEditGuard } from './item-edit.guard';\nimport { DatalinkTestIndexComponent, DatalinkTestNewComponent } from './test'\nimport { ViewEditComponent } from './view/view-edit';\nimport { ViewIndexComponent } from './view/view-index';\nimport { ApiEditComponent } from './api/api-edit';\nimport { ApiIndexComponent } from './api/api-index';\nimport { DatalinkRunComponent } from './datalink/datalink-run/datalink-run.component';\nimport { SearchComponent } from './search';\nimport { DashboardEditComponent, DashboardIndexComponent } from './dashboard';\nimport { DatajobRunComponent } from './datajob/datajob-run/datajob-run.component';\nimport { DexihDashboard, DexihView, DexihApi } from '../shared/shared.models';\nimport { ListOfValuesEditComponent } from './listOfValues/listOfValues-edit';\nimport { ListOfValuesIndexComponent } from './listOfValues/listOfValues-index';\nimport { TagsComponent } from './tags/tags.component';\n\nconst resultViewRoute: Route = { path: 'result-view/:auditConnectionKey/:auditKey', children: [\n        {path: '', pathMatch: 'full', component: ResultsViewComponent, data: { pageTitle: 'Detailed Result' }},\n        { path: 'result-view/:auditConnectionKey/:auditKey', children: [\n            {path: '', pathMatch: 'full', component: ResultsViewComponent, data: { pageTitle: 'Child Result' }},\n            { path: 'result-view/:auditConnectionKey/:auditKey', children: [\n                {path: '', pathMatch: 'full', component: ResultsViewComponent, data: { pageTitle: 'GrandChild Result' }},\n            ]\n        }\n        ]\n    }\n    ]\n};\n\nconst tableRoutes: Routes = [\n    { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n        loadChildren: () => import('./table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n    { path: 'table-new',  data: {  pageTitle: 'New Table', action: 'new'},\n        loadChildren: () => import('./table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n    { path: 'table-new/:connectionKey',  data: {  pageTitle: 'New Table', action: 'new'},\n        loadChildren: () => import('./table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n    { path: 'datalink-new/:sourceTableKeys/:targetConnectionKey',\n        component: DatalinkNewComponent, data: { action: 'new', pageTitle: 'New Datalink' } },\n    { path: 'table-preview/:tableKey', component: TablePreviewDataComponent, data: { pageTitle: 'Preview Table' } },\n];\n\nconst datalinkRoutes: Routes = [\n    { path: 'datalink-edit', loadChildren: () => import('./datalink/datalink-edit/datalink-edit.module').then(m => m.DatalinkEditModule)},\n    { path: 'datalink-preview/:datalinkKey/:previewUpdates', component: DatalinkPreviewDataComponent,\n        data: { pageTitle: 'Preview Datalink' } },\n    { path: 'table-preview/:tableKey', component: TablePreviewDataComponent, data: { pageTitle: 'Preview Table' } },\n    { path: 'datalink-run/:datalinkKeys', component: DatalinkRunComponent, data: { pageTitle: 'Run Datalink' } },\n    resultViewRoute\n];\n\nconst tablesRoute: Route = { path: 'tables', data: { pageTitle: 'Tables' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: TableIndexComponent, data: { pageTitle: 'Tables' }},\n    {path: '', children: (<Routes>tableRoutes)},\n    {path: '', children: (<Routes>datalinkRoutes)},\n    ])\n};\n\nconst connectionRoutes: Routes = [\n    { path: 'connection-edit/:connectionKey', component: ConnectionEditComponent, canDeactivate: [ItemEditGuard],\n        data: {action: 'edit', pageTitle: 'Edit Connection' }},\n    { path: 'connection-import/:connectionKey', data: { pageTitle: 'Import Tables'}, children: [\n        {path: '', pathMatch: 'full', component: ConnectionImportComponent, data: { pageTitle: 'Import Tables' }} ,\n        { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n                loadChildren: () => import('./table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n        { path: 'datalink-new/:sourceTableKeys/:targetConnectionKey',\n        component: DatalinkNewComponent, data: { action: 'new', pageTitle: 'New Datalink' } },\n    ]},\n    { path: 'connection-new/:purpose', component: ConnectionEditComponent, data: {action: 'new', pageTitle: 'New Connection' }},\n    { path: 'connection-copy/:connectionKey', component: ConnectionEditComponent, data: {action: 'copy', pageTitle: 'New Connection' }}\n];\n\nconst connectionsRoute: Route =  { path: 'connections', data: {pageTitle: 'Connections' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: ConnectionIndexComponent, data: {pageTitle: 'Connections' }},\n    {path: '', children: (<Routes>connectionRoutes)},\n    tablesRoute\n    ])\n};\n\nconst agentRoutes: Routes = [\n    { path: '', pathMatch: 'full', component: RemoteAgentIndexComponent, data: { pageTitle: 'Remote Agents' }},\n    { path: 'agent-edit/:remoteAgentKey/:remoteAgentHubKey', component: RemoteAgentEditComponent, data: { pageTitle: 'Edit Agent' }}\n];\n\nconst agentsRoute: Route = { path: 'agents', data: { pageTitle: 'Remote Agents' }, children: agentRoutes\n};\n\nconst resultRoutes: Routes = [\n    { path: 'results', data: { pageTitle: 'Execution Results' }, children: [\n        {path: '', pathMatch: 'full', component: ResultsIndexComponent, data: { pageTitle: 'Execution Results' } },\n        resultViewRoute\n    ] },\n    resultViewRoute\n];\n\nconst manageRoute: Route = { path: 'manage', children: (<Routes>[\n    { path: 'manage-users', component: ManageUsersIndexComponent, data: {pageTitle: 'Manage Users'}}\n    ])\n};\n\nconst importRoute: Route = { path: 'import', children: (<Routes>[\n    { path: '', pathMatch: 'full', component: ImportComponent, data: {pageTitle: 'Import Objects'}}\n    ])\n};\n\nconst exportRoute: Route = { path: 'export', children: (<Routes>[\n    { path: '', pathMatch: 'full', component: ExportComponent, data: {pageTitle: 'Export Objects'}}\n    ])\n};\n\nconst sharedDataRoute: Route = { path: 'sharedData', data: { pageTitle: 'Shared Data' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: SharedDataIndexComponent},\n    {path: '', children: [\n        { path: 'table-preview/:tableKey', component: TablePreviewDataComponent, data: { pageTitle: 'Preview Table' } },\n        { path: 'datalink-preview/:datalinkKey', component: DatalinkPreviewDataComponent, data: { pageTitle: 'Preview Datalink' } },\n        { path: 'dashboard-preview/:dashboardKey', data: { pageTitle: 'Preview Dashboard', action: 'edit'},\n        loadChildren: () => import('./dashboard/dashboard-edit/dashboard-edit.module').then(m => m.DashboardEditModule)},\n        { path: 'view-preview/:viewKey', component: ViewEditComponent, data: { pageTitle: 'Preview View', action: 'edit' } },\n        { path: 'api-preview/:apiKey', component: ApiEditComponent, data: { pageTitle: 'Preview Api', action: 'edit' } }\n    ]}])\n};\n\nconst customFunctionRoutes: Routes = [\n    { path: 'customFunction-edit/:customFunctionKey', component: CustomFunctionEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit Custom Function'}},\n    { path: 'customFunction-new', component: CustomFunctionEditComponent, data: { action: 'new', pageTitle: 'New Custom Function'}},\n];\n\nconst customFunctionRoute: Route = { path: 'customFunctions', data: { pageTitle: 'Custom Functions' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: CustomFunctionIndexComponent},\n    {path: '', children: (<Routes>customFunctionRoutes)},\n    ])\n};\n\nconst columnValidationRoutes: Routes = [\n    { path: 'columnValidation-edit/:validationKey', component: ColumnValidationEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit Validation'}},\n    { path: 'columnValidation-new', component: ColumnValidationEditComponent, data: { action: 'new', pageTitle: 'New Validation'}},\n];\n\nconst columnValidationsRoute: Route = { path: 'columnValidations', data: { pageTitle: 'Column Validations' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: ColumnValidationIndexComponent},\n    {path: '', children: (<Routes>columnValidationRoutes)},\n    ])\n};\n\nconst fileFormatRoutes: Routes = [\n    { path: 'fileFormat-edit/:fileFormatKey', component: FileFormatEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit FileFormat'}},\n    { path: 'fileFormat-new', component: FileFormatEditComponent, data: { action: 'new', pageTitle: 'New FileFormat'}},\n];\n\nconst fileFormatsRoute: Route = { path: 'fileFormats', data: { pageTitle: 'File Formats' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: FileFormatIndexComponent},\n    {path: '', children: (<Routes>fileFormatRoutes)}\n    ])\n};\n\nconst viewRoutes: Routes = [\n    { path: 'view-edit/:viewKey', component: ViewEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit View'}},\n    { path: 'view-new', component: ViewEditComponent, data: { action: 'new', pageTitle: 'New View'}},\n];\n\nconst viewRoute: Route = { path: 'views', data: { pageTitle: 'Views' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: ViewIndexComponent},\n    {path: '', children: (<Routes>viewRoutes)}\n    ])\n};\n\nconst dashboardRoutes: Routes = [\n    { path: 'dashboard-edit/:dashboardKey', data: { pageTitle: 'Edit Dashboard', action: 'edit'},\n        loadChildren: () => import('./dashboard/dashboard-edit/dashboard-edit.module').then(m => m.DashboardEditModule)},\n    { path: 'dashboard-new',  data: {  pageTitle: 'New Dashboard', action: 'new'},\n        loadChildren: () => import('./dashboard/dashboard-edit/dashboard-edit.module').then(m => m.DashboardEditModule)},\n];\n\nconst dashboardRoute: Route = { path: 'dashboards', data: { pageTitle: 'Dashboards' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: DashboardIndexComponent},\n    {path: '', children: (<Routes>dashboardRoutes)}\n    ])\n};\n\nconst lovRoutes: Routes = [\n    { path: 'listOfValues-edit/:listOfValuesKey', component: ListOfValuesEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit List Of Values'}},\n    { path: 'listOfValues-new', component: ListOfValuesEditComponent, data: { action: 'new', pageTitle: 'New List of Values'}},\n];\n\nconst lovRoute: Route = { path: 'listOfValues', data: { pageTitle: 'List of Values' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: ListOfValuesIndexComponent},\n    {path: '', children: (<Routes>lovRoutes)}\n    ])\n};\n\nconst apiRoutes: Routes = [\n    { path: 'api-edit/:apiKey', component: ApiEditComponent, canDeactivate: [ItemEditGuard],\n        data: { action: 'edit', pageTitle: 'Edit Api'}},\n    { path: 'api-new', component: ApiEditComponent, data: { action: 'new', pageTitle: 'New Api'}},\n];\n\nconst apiRoute: Route = { path: 'apis', data: { pageTitle: 'Apis' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: ApiIndexComponent},\n    {path: '', children: (<Routes>apiRoutes)}\n    ])\n};\nconst hubVariableRoutes: Routes = [\n    { path: 'hubVariable-edit/:hubVariableKey', component: HubVariableEditComponent, data: { action: 'edit',\n        pageTitle: 'Edit Hub Variable'}},\n    { path: 'hubVariable-new', component: HubVariableEditComponent, data: { action: 'new', pageTitle: 'New Hub Variable'}},\n];\n\nconst hubVariablesRoute: Route = { path: 'hubVariables', data: { pageTitle: 'Hub Variables' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: HubVariableIndexComponent},\n    {path: '', children: (<Routes>hubVariableRoutes)}\n    ])\n};\n\nconst tagsRoute: Route = { path: 'tags', component: TagsComponent}\n\nconst datalinkTestRoutes: Routes = [\n    { path: 'datalinkTest-edit/:datalinkTestKey', data: { pageTitle: 'Edit Datalink Test', action: 'edit'},\n            loadChildren: () => import('./test/datalinkTest-edit/datalinkTest-edit.module').then(m => m.DatalinkTestEditModule)},\n    { path: 'datalinkTest-new',  data: {  pageTitle: 'New Datalink Test', action: 'new'},\n            loadChildren: () => import('./test/datalinkTest-edit/datalinkTest-edit.module').then(m => m.DatalinkTestEditModule)},\n    { path: 'datalinkTest-new/:datalinkKeys', component: DatalinkTestNewComponent,\n        data: {  pageTitle: 'New Datalink Test', action: 'new'}},\n    resultViewRoute\n];\n\nconst datalinkTestsRoute: Route = { path: 'datalinkTests', data: { pageTitle: 'Datalink Tests' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: DatalinkTestIndexComponent},\n    {path: '', children: (<Routes>datalinkTestRoutes)},\n    {path: '', children: (<Routes>resultRoutes)},\n    ])\n};\n\nconst filesRoutes: Routes = [\n    { path: 'manage', children: (<Routes> [\n        { path: '', component: FilesManageComponent, data: { action: 'edit', pageTitle: 'Manage Files'}},\n        { path: ':tableKey', data: { action: 'edit', pageTitle: 'Manage Files'}, children: (<Routes> [\n            { path: '', component: FilesManageComponent, data: { action: 'edit', pageTitle: 'Manage Files'}},\n            { path: 'file-preview/:path/:fileName', component: TablePreviewDataComponent, data: { pageTitle: 'Preview File' } }\n        ])}\n    ])},\n    { path: 'bulk-load', children: (<Routes> [\n       {path: '', data: { action: 'new', pageTitle: 'Bulk Load Files'},\n        loadChildren: () => import('./files/files-bulk-load/files-bulk-load.module').then(m => m.FilesBulkLoadModule)},\n       {path: ':connectionKey', data: { action: 'new', pageTitle: 'Bulk Load Files'},\n        loadChildren: () => import('./files/files-bulk-load/files-bulk-load.module').then(m => m.FilesBulkLoadModule)},\n    ])},\n];\n\nconst filesRoute: Route = { path: 'files', data: { pageTitle: 'Files' }, children: (<Routes>[\n    {path: '', children: (<Routes>filesRoutes)}\n    ])\n};\n\nconst datalinksRoute = { path: 'datalinks', data: { pageTitle: 'Data Links' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', data: { pageTitle: 'Data Links' }, component: DatalinkIndexComponent},\n    {path: '', children: (<Routes>datalinkRoutes)},\n    {path: '', children: (<Routes>resultRoutes)},\n    ])\n};\n\n// const publishedRoute: Route = { path: 'published', children: (<Routes>[\n//     { path: '', redirectTo: 'All'},\n//     { path: ':typeFilter', children: (<Routes> [\n//         {path: '', pathMatch: 'full', component: DatalinkIndexComponent, data: { pageTitle: 'Published' }},\n//     {path: '', children: (<Routes>datalinkRoutes)},\n//     {path: '', children: (<Routes>resultRoutes)},\n//     ])}\n//     ])\n// };\n\nconst datajobRoutes: Routes = [\n    { path: 'datajob-edit/:datajobKey', data: { pageTitle: 'Edit Data Job', action: 'edit'},\n            loadChildren: () => import('./datajob/datajob-edit/datajob-edit.module').then(m => m.DatajobEditModule)},\n    { path: 'datajob-new',  data: {  pageTitle: 'New Data Job', action: 'new'},\n            loadChildren: () => import('./datajob/datajob-edit/datajob-edit.module').then(m => m.DatajobEditModule)},\n    { path: 'datajob-run/:datajobKeys', component: DatajobRunComponent, data: { pageTitle: 'Run datajobs' } },\n\n];\n\nconst datajobsRoute: Route = { path: 'datajobs', data: { pageTitle: 'Data Jobs' }, children: (<Routes>[\n    {path: '', pathMatch: 'full', component: DatajobIndexComponent},\n    {path: '', children: (<Routes>datajobRoutes)},\n    {path: '', children: (<Routes>resultRoutes)},\n    ])\n};\n\nconst searchRoute: Route =  { path: 'search',  data: {pageTitle: 'Search'}, children: (<Routes> [\n    { path: '', pathMatch: 'full', redirectTo: '0/' },\n\n    // { path: '', loadChildren: './hub.base.module#HubBaseModule' },\n     { path: ':searchObject/:search', pathMatch: 'full', component: SearchComponent, },\n     { path: ':searchObject/:search', loadChildren: () => import('./hub.base.module').then(m => m.HubBaseModule) }\n  ])\n };\n\nconst routes: Routes = (<Routes>[\n    agentsRoute,\n    connectionsRoute,\n//    publishedRoute,\n    datalinksRoute,\n    tablesRoute,\n    datajobsRoute,\n  // resultsRoute,\n    columnValidationsRoute,\n    customFunctionRoute,\n    fileFormatsRoute,\n    viewRoute,\n    dashboardRoute,\n    lovRoute,\n    apiRoute,\n    hubVariablesRoute,\n    manageRoute,\n    importRoute,\n    exportRoute,\n    sharedDataRoute,\n    filesRoute,\n    datalinkTestsRoute,\n    tagsRoute,\n    searchRoute,\n    { path: '', children : connectionRoutes},\n    { path: '', children : datalinkRoutes},\n    { path: '', children : tableRoutes},\n    { path: '', children : datajobRoutes},\n    { path: '', children : resultRoutes},\n    { path: '', children : customFunctionRoutes},\n    { path: '', children : columnValidationRoutes},\n    { path: '', children : fileFormatRoutes},\n    { path: '', children : viewRoutes},\n    { path: '', children : dashboardRoutes},\n    { path: '', children : lovRoutes},\n    { path: '', children : apiRoutes},\n    { path: '', children : hubVariableRoutes},\n    { path: '', children : filesRoutes},\n    { path: '', children : agentRoutes},\n    { path: '', children : datalinkTestRoutes},\n]);\n\nexport const BaseRouting = RouterModule.forChild(routes);\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription, BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { HubCache } from '../hub.models';\nimport { DexihTag, eSharedObjectType } from '../../shared/shared.models';\nimport { HubService } from '..';\nimport { AuthService } from '../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubFormsService } from '../hub.forms.service';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\n\n@Component({\n    selector: 'tags',\n    templateUrl: 'tags.component.html',\n    providers: [HubFormsService],\n    animations: [\n        // trigger name for attaching this animation to an element using the [@triggerName] syntax\n        trigger('slideDown', [\n            state('hide', style({ height: 0, overflow: 'hidden' })),\n            state('show', style({ height: '*', overflow: 'unset' })),\n            transition('hide <=> show', animate('200ms ease-in')),\n        ])\n        ]\n})\nexport class TagsComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    tags: Array<DexihTag>;\n    state = 'hide';\n\n    colors = [\n        { name: 'primary', color: '#3a5f8d' },\n        { name: 'secondary', color : '#89B3BF'},\n        { name: 'success', color : '#479762'},\n        { name: 'warning', color : '#c4872a' },\n        { name: 'danger', color : '#f44336' },\n        { name: 'yellow', color : 'yellow'},\n        { name: 'pink', color : 'pink'},\n        { name: 'purple', color : 'purple'},\n        { name: 'dark', color : '#1F2624'},\n    ]\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        public formsService: HubFormsService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let params = result[0];\n                this.hubCache = result[1];\n\n                if (params['key']) {\n                    let tag = this.hubCache.hub.dexihTags.find(c => c.key === +params['key']);\n                    if (tag) {\n                        let editTag = this.hubCache.hub.dexihTags.find(c => c.key === tag.key);\n                        this.formsService.tag(editTag);\n                        this.state = 'show';\n                    }\n                }\n\n                this.update();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'View Index');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n\n    update() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let tags: Array<DexihTag>;\n            tags = this.hubCache.hub.dexihTags.filter(c => c.isValid);\n            let tableData = tags.map(tag => {\n                return {\n                    key: tag.key,\n                    name: tag.name,\n                    description: tag.description,\n                    color: tag.color,\n                    updateDate: tag.updateDate,\n                };\n            });\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    new() {\n        let tag = new DexihTag();\n        this.formsService.tag(tag);\n        this.state = 'show';\n    }\n\n    edit(tag: DexihTag) {\n        let editTag = this.hubCache.hub.dexihTags.find(c => c.key === tag.key);\n        this.formsService.tag(editTag);\n        this.state = 'show';\n        if (history.pushState) {\n            this.router.navigateByUrl(window.location.pathname + `?key=${tag.key}`);\n        }\n        document.body.scrollTop = 0; // For Safari\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n    }\n\n    delete(tags: DexihTag[]) {\n        this.hubService.deleteTags(tags);\n    }\n\n    save() {\n        this.formsService.save(false).then(() => {\n            this.hide();\n        }).catch();\n    }\n\n    cancel() {\n        this.hide();\n    }\n\n    hide() {\n        this.state = 'hide';\n        if (history.pushState) {\n            if (window.location.search) {\n                this.router.navigateByUrl(window.location.pathname);\n            }\n          }\n    }\n\n    selectColor(color) {\n        this.formsService.currentForm.controls.color.setValue(color.color);\n    }\n\n    export(items: Array<DexihTag>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(cache.hub.hubKey, '');\n        items.forEach(item => { cache.cacheAddTag(item.key, hub); });\n\n        let filename = items.length === 1 ? 'Tag - ' + items[0].name + '.json' : 'tags.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n        // watch the current validation in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Tags) {\n                this.update();\n            }\n        });\n    }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { SharedModule } from '../shared/shared.module';\nimport { ColumnValidationEditComponent, ColumnValidationIndexComponent } from './columnValidation';\nimport { ConnectionEditComponent, ConnectionImportComponent, ConnectionIndexComponent } from './connection';\nimport { ImportComponent, ExportComponent } from './copy';\nimport { DatajobIndexComponent } from './datajob';\nimport { DatalinkIndexComponent, DatalinkNewComponent } from './datalink';\nimport { DatalinkPreviewDataComponent } from './datalink/datalink-preview-data';\nimport { FileFormatIndexComponent } from './fileFormat';\nimport { FilesManageComponent, FilesBulkLoadComponent } from './files';\nimport { BaseRouting } from './hub.base.routing';\nimport { HubService } from './hub.service';\nimport { HubSharedModule } from './hub.shared.module';\nimport { HubVariableEditComponent, HubVariableIndexComponent } from './hubVariable';\nimport { ItemEditGuard } from './item-edit.guard';\nimport { ManageUsersIndexComponent } from './manage/manage-users-index/manage-users-index.component';\nimport { RemoteAgentEditComponent, RemoteAgentIndexComponent } from './remoteAgent';\nimport { ResultsIndexComponent } from './results';\nimport { ResultsViewModule } from './results/results-view/results-view.module';\nimport { SharedDataIndexComponent } from './sharedData/sharedData-index.component';\nimport { TableIndexComponent } from './table/table-index';\nimport { CustomFunctionIndexComponent, CustomFunctionEditComponent, CustomFunctionParameterComponent } from './customFunction';\nimport { DatalinkTestIndexComponent, DatalinkTestNewComponent } from './test'\nimport { ViewIndexComponent } from './view/view-index';\nimport { ViewEditComponent } from './view/view-edit';\nimport { DashboardIndexComponent } from './dashboard';\nimport { ApiIndexComponent } from './api/api-index';\nimport { ApiEditComponent } from './api/api-edit';\nimport { DatalinkRunComponent } from './datalink/datalink-run/datalink-run.component';\nimport { SearchModule} from './search';\nimport { DatajobRunComponent } from './datajob/datajob-run/datajob-run.component';\nimport { ListOfValuesEditComponent } from './listOfValues/listOfValues-edit';\nimport { ListOfValuesIndexComponent } from './listOfValues/listOfValues-index';\nimport { TagsComponent } from './tags/tags.component';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        BaseRouting,\n        ReactiveFormsModule,\n        HubSharedModule,\n        ResultsViewModule,\n        SearchModule,\n    ],\n    declarations: [\n        ConnectionIndexComponent,\n        ConnectionEditComponent,\n        ConnectionImportComponent,\n        DatalinkIndexComponent,\n        DatalinkPreviewDataComponent,\n        DatalinkRunComponent,\n        DatajobRunComponent,\n        TableIndexComponent,\n        DatalinkNewComponent,\n        RemoteAgentIndexComponent,\n        RemoteAgentEditComponent,\n        ResultsIndexComponent,\n        DatajobIndexComponent,\n        ColumnValidationIndexComponent, ColumnValidationEditComponent,\n        FileFormatIndexComponent,\n        ViewIndexComponent,\n        ApiIndexComponent, ApiEditComponent,\n        HubVariableEditComponent, HubVariableIndexComponent,\n        ImportComponent, ExportComponent,\n        FilesManageComponent,\n        ManageUsersIndexComponent,\n        SharedDataIndexComponent,\n        CustomFunctionIndexComponent, CustomFunctionEditComponent, CustomFunctionParameterComponent,\n        DatalinkTestIndexComponent, DatalinkTestNewComponent,\n        DashboardIndexComponent,\n        ListOfValuesEditComponent, ListOfValuesIndexComponent,\n        TagsComponent\n    ],\n    providers: [ ItemEditGuard ],\n    exports: [ ]\n})\nexport class HubBaseModule {\n\n    static forRoot(): ModuleWithProviders<HubBaseModule> {\n        return {\n            ngModule: HubBaseModule,\n            providers: [HubService, ItemEditGuard]\n        };\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../../../shared/shared.module';\n\nimport { ResultsViewComponent } from './results-view.component';\nimport { StatsComponent } from './stats.component';\nimport { ProgressComponent } from './progress.component';\nimport { ProfileResultsComponent } from './profile-results.component';\nimport { PreviewResultsComponent } from './preview-results.component';\nimport { HubSharedModule } from '../../hub.shared.module';\n\n\n@NgModule({\n    imports: [SharedModule, HubSharedModule],\n    exports: [\n        ResultsViewComponent\n    ],\n    declarations: [\n        ResultsViewComponent,\n        ProgressComponent,\n        StatsComponent,\n        ProfileResultsComponent,\n        PreviewResultsComponent\n    ],\n    providers: [],\n})\nexport class ResultsViewModule { }\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Execution Results\" \n        iconClass=\"fa fa-lg fa-fw fa-exchange\" \n    >\n\t\t<dexih-table \n\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t[columns]=\"columns\"\n\t\t\t[dataObservable]=\"tableData\"\n\t\t\t[enableSaveCsv]=\"true\" \n\t\t\t(rowClick)=\"showResult($event)\"\n\t\t\t>\n\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t<div class=\"d-flex flex-wrap\">\n\t\t\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t\t\t<dexih-button-refresh class=\"input-group-prepend\" (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n\t\t\t\t\t\t\t<input type=\"number\" class=\"form-control\" placeholder=\"Maximum rows...\"\n\t\t\t\t\t\t\t\ttitle=\"Specify the maximum rows to return\" [(ngModel)]=\"rows\" style=\"width: 100%; max-width: 100px\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t\t\t<div class=\"flex-fill ml-1\">\n\t\t\t\t\t\t\t<form-select labelLeft=\"Type\" [(ngModel)]=\"auditType\" [border]=\"false\" class=\"form-control p-0\"\n\t\t\t\t\t\t\t\t[items]=\"auditTypes\" [enableTextEntry]=\"false\" [allowNullSelect]=\"true\" selectNullMessage=\"All types\">\n\t\t\t\t\t\t\t</form-select>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #tableHeader>\n\t\t\t\t\t<div class=\"d-flex flex-wrap pt-1\" *ngIf=\"auditType === 'Datalink'\">\n\t\t\t\t\t\t<form-tags-dropdown labelLeft=\"Datalinks\" [(ngModel)]=\"datalinks\" [items]=\"hubCache.hub.dexihDatalinks\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" [enableAddAll]=\"true\">\n\t\t\t\t\t\t</form-tags-dropdown>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"d-flex flex-wrap pt-1\" *ngIf=\"auditType === 'Datajob'\">\n\t\t\t\t\t\t<form-tags-dropdown labelLeft=\"Datajobs\" [(ngModel)]=\"datajobs\" [items]=\"hubCache.hub.dexihDatajobs\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" [enableAddAll]=\"true\">\n\t\t\t\t\t\t</form-tags-dropdown>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"d-flex flex-wrap pt-1\" *ngIf=\"auditType === 'DatalinkTest'\">\n\t\t\t\t\t\t<form-tags-dropdown labelLeft=\"DatalinkTests\" [(ngModel)]=\"datalinkTests\"\n\t\t\t\t\t\t\t[items]=\"hubCache.hub.dexihDatalinkTests\" itemKey=\"key\" itemName=\"name\" [enableAddAll]=\"true\">\n\t\t\t\t\t\t</form-tags-dropdown>\n\t\t\t\t\t</div>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-result=\"item\">\n\t\t\t\t\t<dexih-button-edit class=\"mr-1\" [routerLink]=\"[hubPath, 'datalink-edit', 'edit', result.referenceKey]\" text='Edit Datalink'></dexih-button-edit>\n\t\t\t\t\t<dexih-button-view [routerLink]=\"['result-view', result.auditConnectionKey, result.auditKey]\" queryParamsHandling=\"merge\"></dexih-button-view>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template #rowStatus select=\"rowStatus\" let-result=\"item\">\n\t\t\t\t\t<datalink-status [writerResult]=\"result\"></datalink-status>\n\t\t\t\t</ng-template>\n\n\t\t</dexih-table>\n    </dexih-widget>\n</div>\n\n\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { TransformWriterResult, eConnectionPurpose } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'results-index',\n    templateUrl: './results-index.component.html',\n    styles: []\n})\nexport class ResultsIndexComponent implements OnInit, OnDestroy {\n    hubCache: HubCache;\n\n    private _subscription: Subscription;\n    private _transformWriterResultChangeSubscription: Subscription;\n\n    public hubPath;\n    public rows = 20;\n    private datalinkStatus: Map<number, TransformWriterResult>;\n\n    private cancelToken = new CancelToken();\n\n    showPage = false;\n    showPageMessage = 'Loading...';\n\n    columns = [\n        { name: 'auditKey', title: '#', format: '' },\n        { name: 'auditType', title: 'Type', format: '' },\n        { name: 'referenceName', title: 'Name', format: '' },\n        { name: 'rowsTotal', title: 'Rows Total', format: '' },\n        { name: 'startTime', title: 'Start Date', format: 'Calendar' },\n        { name: 'startTime', title: 'Time', format: 'Time' },\n        { name: 'endTime', title: 'Finished At', format: 'Time' },\n        { name: 'message', title: 'Message', format: '' },\n    ];\n\n    auditTypes = [ 'Datalink', 'Datajob', 'DatalinkTest' ];\n\n    private _tableData = new BehaviorSubject<Array<TransformWriterResult>>(null);\n    tableData: Observable<Array<TransformWriterResult>> = this._tableData.asObservable();\n\n    datalinks: Array<number> = [];\n    datajobs: Array<number> = [];\n    datalinkTests: Array<number> = [];\n\n    auditType: string = null;\n\n    constructor(private hubService: HubService, private router: Router, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                let queryParams = result[2];\n                this.hubCache = result[3];\n                let remoteAgent = result[4];\n\n                this.showPage = false;\n                this.showPageMessage = 'Waiting for an active remote agent...';\n\n                if (this.hubCache.isLoaded() && remoteAgent) {\n                    this.hubPath = this.hubCache.getHubUrl();\n\n                    let datalinkKeysString = queryParams['datalinkKeys'];\n                    let datajobKeysString = queryParams['datajobKeys'];\n                    let datalinkTestsKeysString = queryParams['datalinkTestKeys'];\n\n                    if (datalinkKeysString) {\n                        this.datalinks = (datalinkKeysString + '').split(',').map(c => +c);\n                        this.auditType = 'Datalink';\n                    }\n                    if (datajobKeysString) {\n                        this.datajobs = (datajobKeysString + '').split(',').map(c => +c);\n                        this.auditType = 'Datajob';\n                    }\n                    if (datalinkTestsKeysString) {\n                        this.datalinkTests = (datalinkTestsKeysString + '').split(',').map(c => +c);\n                        this.auditType = 'DatalinkTest';\n                    }\n\n                    this.refresh();\n\n                    this.showPage = true;\n                    this.showPageMessage = '';\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Results Index');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformWriterResultChangeSubscription) { this._transformWriterResultChangeSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    showResult(result: TransformWriterResult) {\n        this.router.navigate(['result-view', result.auditConnectionKey, result.auditKey], { relativeTo: this.route })\n    }\n\n    refresh() {\n        let data = [];\n\n        let keys: number[];\n        let connectionKeys: number[] = [];\n\n        switch (this.auditType) {\n            case 'Datalink':\n                keys = this.datalinks;\n                connectionKeys = this.datalinks.map(c => this.hubCache.hub.dexihDatalinks.find(d => d.key === c).auditConnectionKey);\n                break;\n            case 'Datajob':\n                keys = this.datajobs;\n                connectionKeys = this.datajobs.map(c => this.hubCache.hub.dexihDatajobs.find(d => d.key === c).auditConnectionKey);\n                break;\n            case 'DatalinkTest':\n                keys = this.datalinkTests;\n                connectionKeys = this.datalinkTests.map(c => this.hubCache.hub.dexihDatalinkTests\n                    .find(d => d.key === c).auditConnectionKey);\n                break;\n            default:\n                keys = null;\n                break;\n        }\n\n        let uniqueKeys = connectionKeys.filter(function(item, i, ar) { return ar.indexOf(item) === i; });\n\n        if (uniqueKeys.length === 0) {\n            uniqueKeys = this.hubCache.hub.dexihConnections.filter(c => c.purpose === eConnectionPurpose.Managed).map(c => c.key);\n        }\n\n        this.hubService.getAuditResults(this.auditType, uniqueKeys, keys, true, this.rows, this.cancelToken)\n        .then(results => {\n            this._tableData.next(results);\n            this.watchChanges();\n            return;\n        });\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        if (this._transformWriterResultChangeSubscription) { this._transformWriterResultChangeSubscription.unsubscribe(); }\n        this._transformWriterResultChangeSubscription =\n            this.hubService.getTransformWriterResultChangeObservable().subscribe(writerResult => {\n                let results: TransformWriterResult[] = this._tableData.value;\n\n                if (this.datalinks && this.datalinks.findIndex(c => c === writerResult.referenceKey) >= 0) {\n                    let existingResult = results.find(c => c.auditKey === writerResult.auditKey);\n                    if (existingResult) {\n                        Object.assign(existingResult, writerResult);\n                        this._tableData.next(results);\n                    } else {\n                        this._tableData.next([writerResult].concat(results));\n                    }\n                }\n                if (this.datajobs && this.datajobs.findIndex(c => c === writerResult.referenceKey) >= 0) {\n                    let existingResult = results.find(c => c.auditKey === writerResult.auditKey);\n                    if (existingResult) {\n                        Object.assign(existingResult, writerResult);\n                        this._tableData.next(results);\n                    } else {\n                        this._tableData.next([writerResult].concat(results));\n                    }\n                }\n\n                if (this.datalinkTests && this.datalinkTests.findIndex(c => c === writerResult.referenceKey) >= 0) {\n                    let existingResult = results.find(c => c.auditKey === writerResult.auditKey);\n                    if (existingResult) {\n                        Object.assign(existingResult, writerResult);\n                        this._tableData.next(results);\n                    } else {\n                        this._tableData.next([writerResult].concat(results));\n                    }\n                }\n        });\n    }\n}\n\n\n","import { Component, OnInit, Input } from '@angular/core';\nimport { TransformWriterResult } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'result-progress',\n    templateUrl: './progress.component.html'\n})\n\nexport class ProgressComponent implements OnInit {\n    @Input() public value: number;\n    @Input() public total: number;\n    @Input() public caption: string;\n    @Input() public color: string;\n\n    percent = '0%';\n\n    constructor() {\n\n    }\n\n    ngOnInit() {\n        if (this.value === 0) {\n            this.percent = '0%';\n        } else if (this.total === 0) {\n            this.percent = '100%';\n        } else {\n            let percent = 100 * this.value / this.total;\n            if (percent < 0) { percent = 0; }\n            if (percent > 100) { percent = 100; }\n            this.percent = percent.toString() + '%';\n        }\n    }\n}\n","<div class=\"\">\n    <span class=\"text\">  {{caption}}\n        <span class=\"float-right\">{{value}}/{{total}}</span> \n    </span>\n    <div class=\"progress\" style=\"width:100%\">\n        <div [ngClass]=\"['progress-bar', color]\" [ngStyle]=\"{width: percent}\">&nbsp;</div>\n    </div>\n</div>\n","<ul class=\"list-group\">\n    <li class=\"list-group-item list-group-item-danger\" *ngIf=\"fail\">\n        <h5>Error encountered!</h5>\n    </li>\n    <li class=\"list-group-item list-group-item-success\" *ngIf=\"success\">\n        <h5>Finished Successfully</h5>\n    </li>\n    <li class=\"list-group-item\" *ngIf=\"auditResult?.message\">\n        <div class=\"d-flex mb-2\">\n            {{auditResult.message}}\n            <div class=\"ml-auto\">\n                <dexih-button *ngIf=\"auditResult.exceptionDetails\" (click)='exceptionHidden = !exceptionHidden'>Details</dexih-button>\n            </div>\n        </div>\n        <div>\n            <pre *ngIf=\"!exceptionHidden && auditResult.exceptionDetails\">{{auditResult.exceptionDetails}}</pre>\n        </div>\n    </li>\n    <li class=\"list-group-item list-group-item-info rounded-0\">\n        <h5>Running Time</h5>\n    </li>\n    <li class=\"list-group-item \">\n            <div class=\"container\">\n                <div class=\"row rounded text-white bg-secondary\">\n                    <ng-template [ngIf]=\"auditResult.targetTableName\">\n                            <div class=\"col border border-white\">Target Table</div>\n                            <div class=\"col border border-white\">{{auditResult.targetTableName}}</div>\n                            <div class=\"w-100\"></div>\n                    </ng-template>                    \n                    <div class=\"col border border-white\">Run Status</div>\n                    <div class=\"col border border-white\">{{eRunStatus[auditResult.runStatus]}}</div>\n                    <div class=\"w-100\"></div>                    \n                    <div class=\"col border border-white\">Start Date</div>\n                    <div class=\"col border border-white\">{{auditResult.initializeTime | calendar}}</div>\n                    <div class=\"w-100\"></div>\n                    <ng-template [ngIf]=\"auditResult.scheduledTime\">\n                        <div class=\"col border border-white\">Scheduled Time</div>\n                        <div class=\"col border border-white\">{{auditResult.scheduledTime | calendar}}</div>\n                        <div class=\"w-100\"></div>\n                    </ng-template>\n\n                    <div class=\"col border border-white\">Initialized</div>\n                    <div class=\"col border border-white\">{{auditResult.initializeTime | calendar}}</div>\n                    <div class=\"w-100\"></div>\n                    <div class=\"col border border-white\">Started</div>\n                    <div class=\"col border border-white\">{{auditResult.startTime | calendar}}</div>\n                    <div class=\"w-100\"></div>\n                    <div class=\"col border border-white\">Finished</div>\n                    <div class=\"col border border-white\">{{auditResult.endTime | calendar}}</div>\n                    <div class=\"w-100\"></div>\n                    <div class=\"col border border-white\">Run Time</div>\n                    <div class=\"col border border-white\">{{runTime | number: '1.2-2'}} seconds</div>\n                    <div class=\"w-100\"></div>\n                    <div class=\"col border border-white\">Triggered By</div>\n                    <div class=\"col border border-white\">{{eTriggerMethod[auditResult.triggerMethod]}}</div>\n                </div>\n            </div>\n    </li>\n    <li *ngIf=\"auditResult.childResults?.length > 0\" class=\"list-group-item list-group-item-info\">\n        <h5>Child Results</h5>\n    </li>\n    <li *ngIf=\"auditResult.childResults?.length > 0\" class=\"list-group-item \">\n        <div *ngFor=\"let result of auditResult.childResults\">\n            <div class=\"\">\n                <span class=\"text\">  {{result.auditType ==='Table' ? result.targetTableName : result.referenceName}}\n                </span>\n                <datalink-status [writerResult]=\"result\"></datalink-status>\n            </div>\n        </div>\n    </li>\n    <li class=\"list-group-item list-group-item-info\">\n        <h5>Row Distribution</h5>\n    </li>\n    <li class=\"list-group-item \">\n            <result-progress *ngIf=\"auditResult.rowsReadPrimary > 0\" [value]=\"auditResult.rowsReadPrimary\" [total]=\"auditResult.rowsReadPrimary + auditResult.rowsReadReference\"\n                caption=\"Source Rows\" color=\"bg-color-blueDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsReadReference > 0\" [value]=\"auditResult.rowsReadReference\" [total]=\"auditResult.rowsReadPrimary + auditResult.rowsReadReference\"\n                caption=\"Joined Rows\" color=\"bg-color-blueLight\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsCreated > 0\" [value]=\"auditResult.rowsCreated\" [total]=\"auditResult.rowsTotal\" caption=\"Created\"\n                color=\"bg-color-greenDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsUpdated > 0\" [value]=\"auditResult.rowsUpdated\" [total]=\"auditResult.rowsTotal\" caption=\"Updated\"\n                color=\"bg-color-blueDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsDeleted > 0\" [value]=\"auditResult.rowsDeleted\" [total]=\"auditResult.rowsTotal\" caption=\"Deleted\"\n                color=\"bg-color-magenta\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsRejected > 0\" [value]=\"auditResult.rowsRejected\" [total]=\"auditResult.rowsTotal\"\n                caption=\"Rejected\" color=\"bg-color-red\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsPreserved > 0\" [value]=\"auditResult.rowsPreserved\" [total]=\"auditResult.rowsTotal\"\n                caption=\"Preserved\" color=\"bg-color-pinkDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.rowsIgnored > 0\" [value]=\"auditResult.rowsIgnored\" [total]=\"auditResult.rowsTotal\" caption=\"Ignored\"\n                color=\"bg-color-grayDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.passed > 0\" [value]=\"auditResult.passed\" [total]=\"auditResult.rowsTotal\" caption=\"Passed\"\n                color=\"bg-color-greenDark\"></result-progress>\n            <result-progress *ngIf=\"auditResult.failed > 0\" [value]=\"auditResult.failed\" [total]=\"auditResult.rowsTotal\" caption=\"Failed\"\n                color=\"bg-color-magenta\"></result-progress>\n        </li>\n    <li class=\"list-group-item list-group-item-info\">\n        <h5>Performance Estimates (rows/second)</h5>\n    </li>\n    <li class=\"list-group-item \">\n            <div class=\"row rounded text-white bg-secondary\">\n                <ng-template ngFor let-item [ngForOf]=\"auditResult.performanceSummary\">\n                        <div class=\"col border border-white\">{{item.transformName}}</div>\n                        <div class=\"col border border-white\">{{item.seconds == 0 ? 'N/A' : ((item.rows / item.seconds) | number: '1.2-2')}} rows/second</div>\n                        <div class=\"w-100\"></div>\n                </ng-template>                    \n            </div>\n        <div style=\"display: grid\">\n            <ngx-charts-bar-vertical\n                scheme=\"natural\"\n                [results]=\"barChartData\" \n                [gradient]=\"true\" \n                [xAxis]=\"true\" \n                [yAxis]=\"true\"\n                [legend]=\"false\" \n                [showGridLines]=\"true\" \n                [showXAxisLabel]=\"true\"\n                [showYAxisLabel]=\"true\" \n                yAxisLabel=\"rows/second\" \n                xAxisLabel=\"operation\">\n            </ngx-charts-bar-vertical>\n        </div>\n    </li>\n</ul>","import { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TransformWriterResult, eRunStatus, eTriggerMethod } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'stats',\n    templateUrl: './stats.component.html'\n})\n\nexport class StatsComponent implements OnInit {\n    @Input() auditResult: TransformWriterResult;\n\n    exceptionHidden = true;\n\n    columns: Array<any>;\n\n    public barChartData: any[];\n\n    public runTime: number;\n\n    public fail = false;\n    public success = false;\n    eRunStatus = eRunStatus;\n    eTriggerMethod = eTriggerMethod;\n\n\n    constructor(public route: ActivatedRoute, public router: Router\n    ) {\n\n    }\n\n    ngOnInit() {\n\n        if (this.auditResult.endTime) {\n            this.runTime = ( (new Date(this.auditResult.endTime)).valueOf() - (new Date(this.auditResult.startTime)).valueOf()) / 1000;\n        } else {\n            if (this.auditResult.runStatus === eRunStatus.Running ||\n                this.auditResult.runStatus === eRunStatus.RunningErrors ||\n                this.auditResult.runStatus === eRunStatus.Started) {\n                    this.runTime = ( (new Date()).valueOf() -\n                        (new Date(this.auditResult.startTime)).valueOf()) / 1000;\n                } else {\n                this.runTime = null;\n            }\n        }\n\n        switch (this.auditResult.runStatus) {\n            case eRunStatus.Abended:\n            case eRunStatus.Cancelled:\n            case eRunStatus.Failed:\n            case eRunStatus.FinishedErrors:\n                this.fail = true;\n                break;\n            case eRunStatus.Finished:\n            case eRunStatus.Passed:\n                this.success = true;\n\n        }\n\n        this.barChartData = [\n            {\n                name: 'Reading',\n                value: this.rowsPerSecond(this.auditResult.rowsReadPrimary + this.auditResult.rowsReadReference, this.auditResult.readTicks)\n            },\n            {\n                name: 'Processing',\n                value: this.rowsPerSecond(this.auditResult.rowsTotal, this.auditResult.processingTicks)\n            },\n            {\n                name: 'Writing',\n                value: this.rowsPerSecond(this.auditResult.rowsTotal, this.auditResult.writeTicks)\n            }\n        ];\n\n    }\n\n    numberWithCommas(x) {\n        const parts = x.toString().split('.');\n        parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n        return parts.join('.');\n    }\n\n    rowsPerSecond(rows, ticks) {\n        if (ticks === 0) {\n            return 0;\n        }\n        return rows / (ticks / 10000000);\n    }\n\n    openResult(auditKey) {\n        this.router.navigate(['..', auditKey], { relativeTo: this.route });\n    }\n\n}\n","<dexih-table [enableMultiSelect]=\"false\" [columns]=\"columns\" [data]=\"data\">\n\n    <ng-template #actions let-items=\"items\">\n        <dexih-button-refresh (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n        <dexih-button-download class=\"ml-1\" (click)=\"download()\"></dexih-button-download>\n\n        <div class=\"d-flex flex-wrap\">\n            <div class=\"flex-fill pl-1\" >\n                <form-checkbox label=\"Show Detailed Results\" [(ngModel)]=\"showDetailed\" [border]=\"true\" (change)=\"refresh()\"></form-checkbox>\n            </div>\n        </div>\n    </ng-template>\n</dexih-table>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { TransformWriterResult } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'profile-results',\n    templateUrl: './profile-results.component.html'\n})\n\nexport class ProfileResultsComponent implements OnInit, OnDestroy {\n    @Input() auditResult: TransformWriterResult;\n\n    columns: Array<any>;\n    data: Array<any>;\n\n    showDetailed = false;\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService\n    ) {\n\n    }\n\n    ngOnInit() {\n        this.refresh();\n    }\n\n    ngOnDestroy(): void {\n        this.cancelToken.cancel();\n    }\n\n    refresh() {\n        this.hubService.previewProfileData(this.auditResult, !this.showDetailed, this.cancelToken).then(result => {\n            this.columns = result.columns;\n            this.data = result.data;\n        }).catch(reason => {\n          // this.hubService.addHubMessage(reason);\n        });\n    }\n\n    download() {\n        this.hubService.downloadProfileData(this.auditResult, this.cancelToken);\n    }\n}\n","<dexih-table [enableMultiSelect]=\"false\" [columns]=\"columns\" [data]=\"data\">\n\n    <ng-template #actions let-items=\"items\">\n        <dexih-button-refresh (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n        <dexih-button-download class=\"ml-1\" (click)=\"download()\"></dexih-button-download>\n    </ng-template>\n    <ng-template #tableHeader>\n        <query-builder [selectQuery]=\"selectQuery\" [columns]=\"targetTable.dexihTableColumns\" [inputColumns]=\"inputColumns\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\"></query-builder>\n    </ng-template>\n</dexih-table>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { PreviewResults, HubCache } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { Subscription, Subject} from 'rxjs';\nimport { PromiseWithCancel, CancelToken } from '../../../+auth/auth.models';\nimport { TransformWriterResult, DexihDatalink, DexihTable, SelectQuery, eDeltaType, Filter, eCompare,\n    eAndOr, eTypeCode, DownloadObject, eSourceType, eDownloadFormat, DexihDatalinkColumn,\n    TableColumn, eDataObjectType, DexihTableColumn } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'preview-results',\n    templateUrl: './preview-results.component.html'\n})\n\nexport class PreviewResultsComponent implements OnInit, OnDestroy {\n    @Input() auditResult: TransformWriterResult;\n\n    _hubCacheSubscription: Subscription;\n\n    private cache: HubCache;\n\n    public targetTable: DexihTable;\n    public columns: Array<any>;\n    public data: Array<any>;\n    public selectQuery = new SelectQuery();\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    private runningQuery: PromiseWithCancel<PreviewResults>;\n    private cancelToken = new CancelToken();\n\n    constructor(\n        private hubService: HubService\n    ) {\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            this.cache = cache;\n\n            switch (this.auditResult.auditType) {\n                case 'Table':\n                    this.targetTable = this.cache.getTable(this.auditResult.referenceKey);\n                    this.refresh();\n                    break;\n                case 'Datalink':\n                case 'DatalinkStep':\n                    let datalink = this.cache.hub.dexihDatalinks.find(c => c.key === this.auditResult.referenceKey);\n\n                    if (!datalink) {\n                        this.hubService.addHubErrorMessage(`The datalink with the key ${this.auditResult.referenceKey} cannot be found.`)\n                        return;\n                    }\n\n                    if (datalink.dexihDatalinkTargets.length >= 1) {\n                        this.targetTable = this.cache.getTable(datalink.dexihDatalinkTargets[0].tableKey);\n                    } else {\n                        this.hubService.addHubErrorMessage(`There is no target table for this datalink.`)\n                        return;\n                    }\n                    this.refresh();\n                    break;\n                case 'DatalinkTestStep':\n                    let testStep = this.cache.getDatalinkTestStep(this.auditResult.referenceKey);\n\n                    if (!testStep) {\n                        this.hubService.addHubErrorMessage(`The test step with the key ${this.auditResult.referenceKey} cannot be found.`)\n                        return;\n                    }\n\n                    let testDatalink = this.cache.hub.dexihDatalinks.find(c => c.key === testStep.datalinkKey);\n\n                    if (testDatalink.dexihDatalinkTargets.length >= 1) {\n                        let table = this.cache.getTable(testDatalink.dexihDatalinkTargets[0].tableKey);\n                        let testTable = JSON.parse(JSON.stringify(table));\n                        testTable.name = testStep.errorTableName;\n                        testTable.schema = testStep.errorSchema;\n                        testTable.connectionKey = testStep.errorConnectionKey;\n\n                        for (let column of testTable.dexihTableColumns) {\n                            column.deltaType = eDeltaType.NonTrackingField;\n                        }\n                        let auditCol = new DexihTableColumn();\n                        auditCol.name = 'error_audit_key';\n                        auditCol.dataType = eTypeCode.Int64;\n                        auditCol.deltaType = eDeltaType.CreateAuditKey;\n\n                        let opCol = new DexihTableColumn();\n                        opCol.name = 'error_operation';\n                        opCol.dataType = eTypeCode.CharArray;\n                        opCol.maxLength = 1;\n                        opCol.deltaType = eDeltaType.DatabaseOperation;\n\n\n                        let reasonCol = new DexihTableColumn();\n                        reasonCol.name = 'mismatch_reason';\n                        reasonCol.dataType = eTypeCode.String;\n                        reasonCol.deltaType = eDeltaType.UpdateReason;\n\n                        testTable.dexihTableColumns.push(auditCol);\n                        testTable.dexihTableColumns.push(opCol);\n                        testTable.dexihTableColumns.push(reasonCol);\n\n                        this.targetTable = testTable;\n                    } else {\n                        this.hubService.addHubErrorMessage(`There is no target table for this datalink.`)\n                        return;\n                    }\n                    this.refresh();\n                    break;\n                case 'datajob':\n                break;\n            }\n\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription ) { this._hubCacheSubscription.unsubscribe(); }\n        if (this.runningQuery) { this.runningQuery.cancel(); }\n        this.cancelToken.cancel();\n    }\n\n    createSelectQuery(): SelectQuery {\n        const createAuditColumn = this.targetTable.dexihTableColumns.find(c => c.deltaType === eDeltaType.CreateAuditKey);\n        const updateAuditColumn = this.targetTable.dexihTableColumns.find(c => c.deltaType === eDeltaType.UpdateAuditKey);\n\n        if (!createAuditColumn && !updateAuditColumn) {\n            this.hubService.addHubErrorMessage(\n            // tslint:disable-next-line:max-line-length\n            `The table ${this.targetTable.name} does not contain a create or update audit column which is required to connect to an audit.`);\n            return;\n        }\n\n        // clone the query, and add the audit filter columns\n        let selectQuery = JSON.parse(JSON.stringify(this.selectQuery));\n\n        if (createAuditColumn) {\n            let filter = new Filter();\n            filter.column1 = new TableColumn();\n            Object.assign(filter.column1, createAuditColumn);\n            filter.operator = eCompare.IsEqual;\n            filter.value2 = this.auditResult.auditKey;\n            filter.andOr = eAndOr.Or\n            filter.compareDataType = eTypeCode.Int64;\n            selectQuery.filters.push(filter);\n        }\n\n        if (updateAuditColumn) {\n            let filter = new Filter();\n            filter.column1 = new TableColumn();\n            Object.assign(filter.column1, updateAuditColumn);\n            filter.operator = eCompare.IsEqual;\n            filter.value2 = this.auditResult.auditKey;\n            filter.andOr = eAndOr.Or\n            filter.compareDataType = eTypeCode.Int64;\n            selectQuery.filters.push(filter);\n        }\n\n        selectQuery.rows = 100;\n\n        return selectQuery;\n    }\n\n    refresh() {\n        let selectQuery = this.createSelectQuery();\n\n        let query = this.hubService.previewTableDataQuery(this.targetTable, false, selectQuery, null, null, this.cancelToken);\n\n        query.then(result => {\n            this.refreshDataSubject.next();\n            this.columns = result.columns;\n            this.data = result.data;\n        }).catch(() => {\n            // this.hubService.addHubErrorMessage(reason);\n        });\n\n        this.runningQuery = query;\n    }\n\n    download() {\n        let selectQuery = this.createSelectQuery();\n        let downloadObject = new DownloadObject();\n        downloadObject.objectKey = this.targetTable.key;\n        downloadObject.objectType = eDataObjectType.Table;\n        downloadObject.query = selectQuery;\n        this.hubService.downloadData([downloadObject], false, eDownloadFormat.Csv, this.cancelToken)\n    }\n}\n","<div class=\"container-fluid\">\n\t<dexih-widget *ngIf=\"auditResult\" [title]=\"auditResult?.referenceName\" iconClass=\"fa fa-lg fa-fw fa-trophy\"\n\t[showCloseButton]=\"true\" (close)=\"close()\">\n\n\t\t<ng-template #header>\n\t\t\t\t<ul class=\"nav nav-tabs card-header-tabs\">\n\t\t\t\t<li class=\"nav-item\" >\n\t\t\t\t\t<a class=\"nav-link\" [class.active]=\"view=='Stats'\" routerLink=\".\" [queryParams]=\"{view: 'Stats'}\"><i class=\"fa fa-clock-o\"></i> <span class=\"ml-1 d-none d-md-inline\">Execution Stats</span></a>\n\t\t\t\t</li>\n\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"auditResult.profileTableName && ( auditResult?.auditType == 'DatalinkStep' || auditResult?.auditType == 'Datalink')\" >\n\t\t\t\t\t<a class=\"nav-link\" [class.active]=\"view=='Profile'\" routerLink=\".\" [queryParams]=\"{view: 'Profile'}\"><i class=\"fa fa-tachometer\" ></i> <span class=\"ml-1 d-none d-md-inline\">Profile Data</span></a>\n\t\t\t\t</li>\n\n\t\t\t\t<li class=\"nav-item\" *ngIf=\"auditResult?.auditType == 'DatalinkStep' || auditResult?.auditType == 'Datalink' || auditResult?.auditType == 'Table' || auditResult?.auditType == 'DatalinkTestStep'\" >\n\t\t\t\t\t<a class=\"nav-link\" [class.active]=\"view=='Preview'\" routerLink=\".\" [queryParams]=\"{view: 'Preview'}\"><i class=\"fa fa-table\" ></i> <span class=\"ml-1 d-none d-md-inline\">Preview</span></a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</ng-template>\n\t\t<div [ngSwitch]=\"view\">\n\t\t\t<div *ngSwitchCase=\"'Stats'\">\n\t\t\t\t<stats [auditResult]=\"auditResult\"></stats>\n\t\t\t</div>\n\t\t\t<div *ngSwitchCase=\"'Profile'\">\n\t\t\t\t<profile-results [auditResult]=\"auditResult\"></profile-results>\n\t\t\t</div>\n\t\t\t<div *ngSwitchCase=\"'Preview'\">\n\t\t\t\t<preview-results [auditResult]=\"auditResult\"></preview-results>\n\t\t\t</div>\n\t\t</div>\n\t</dexih-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { HubCache } from '../../hub.models';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable, Subscription, combineLatest} from 'rxjs';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { TransformWriterResult, eSharedObjectType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'results-view',\n    templateUrl: './results-view.component.html',\n    styles: []\n})\nexport class ResultsViewComponent implements OnInit, OnDestroy {\n    hubCache: HubCache;\n    referenceKeys: Array<number>;\n\n    private _subscription: Subscription;\n    private _transformWriterResultChangeSubscription: Subscription;\n\n    public auditResult: TransformWriterResult;\n\n    showPage = false;\n    showPageMessage = 'Loading...';\n    view: string;\n\n    resultChartData: Array<any>;\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(true),\n                this.hubService.getRemoteAgentObservable(true)\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                let queryParams = result[2];\n                this.hubCache = result[3];\n                let remoteAgent = result[4]\n\n                let auditConnectionKey = +params['auditConnectionKey'];\n                let auditKey = +params['auditKey'];\n\n                this.showPage = false;\n                this.showPageMessage = 'Waiting for an active remote agent...';\n\n                this.view = queryParams['view'];\n                if (!this.view) { this.view = 'Stats'; }\n\n                if (remoteAgent) {\n                    this.showPage = true;\n                    this.showPageMessage = '';\n                    this.hubService.getResultDetail(auditConnectionKey, auditKey, this.cancelToken).then(r => {\n                        this.auditResult = r[0];\n                    });\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Results View');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformWriterResultChangeSubscription) { this._transformWriterResultChangeSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        if (this._transformWriterResultChangeSubscription) { this._transformWriterResultChangeSubscription.unsubscribe(); }\n        this._transformWriterResultChangeSubscription = this.hubService.getTransformWriterResultChangeObservable()\n        .subscribe(writerResult => {\n            if (this.auditResult && writerResult.auditConnectionKey === this.auditResult.auditConnectionKey &&\n                    writerResult.auditKey === this.auditResult.auditKey) {\n                this.auditResult = writerResult;\n            }\n        });\n    }\n\n}\n\n\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { HubCache } from '../../hub.models';\nimport { DexihView, DexihHub, eSharedObjectType, eViewTypeItems, eDataObjectType, eViewType } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'views',\n    templateUrl: './view-index.component.html',\n    styles: []\n})\nexport class ViewIndexComponent implements OnInit, OnDestroy {\n    @Input() public hubKey: number;\n\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    views: Array<DexihView>;\n    public eSharedObjectType = eSharedObjectType;\n\n    columns = [\n        { name: 'name', title: 'Name', footer: 'description', format: 'Md', tags: 'tags' },\n        { iconClass: 'sharedIcon', tooltip: 'sharedToolTip', width: '1%', align: 'center' },\n        { name: 'viewType', title: 'Chart/Table' },\n        { name: 'sourceName', title: 'Source'},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        // watch for any changes in the validations.\n        this.watchChanges();\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.updateViews();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'View Index');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    deleteViews(views: Array<DexihView>) {\n        this.hubService.deleteViews(views);\n    }\n\n    updateViews() {\n        if (this.hubCache && this.hubCache.isLoaded()) {\n            let views: Array<DexihView>;\n            views = this.hubCache.hub.dexihViews.filter(c => c.isValid);\n            let tableData = views.map(view => {\n                let sourceName = '';\n\n                switch (view.sourceType) {\n                    case eDataObjectType.Table:\n                        let sourceTable = this.hubCache.getTable(view.sourceTableKey);\n                        sourceName = sourceTable ? sourceTable.logicalName : 'Error, not found';\n                        break;\n                    case eDataObjectType.Datalink:\n                        let sourceDatalink = this.hubCache.hub.dexihDatalinks\n                            .find(c => c.key === view.sourceDatalinkKey);\n                        sourceName = sourceDatalink ? 'Datalink: ' + sourceDatalink.name : 'Error, not found';\n                        break;\n                }\n\n                return {\n                    key: view.key,\n                    name: view.name,\n                    tags: this.hubCache.getObjectTags(eSharedObjectType.View, view.key),\n                    viewType: eViewType[view.viewType],\n                    sourceName: sourceName,\n                    updateDate: view.updateDate,\n                    sharedIcon: view.isShared ? 'fa fa-group' : 'fa fa-user-secret',\n                    sharedToolTip: view.isShared ? 'Table is shared' : 'Table is private'\n                };\n            });\n            this._tableData.next(tableData);\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    editView(view: DexihView) {\n        this.router.navigate(['view-edit', view.key], { relativeTo: this.route });\n    }\n\n    export(items: Array<DexihView>) {\n        const cache = this.hubCache;\n        const hub = this.hubService.createHub(cache.hub.hubKey, '');\n        items.forEach(item => { cache.cacheAddView(item.key, hub); });\n\n        let filename = items.length === 1 ? 'View - ' + items[0].name + '.json' : 'views.json';\n\n        this.hubService.exportHub(hub, filename);\n    }\n\n    watchChanges() {\n        // watch the current validation in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.View || hubCacheChange.changeClass === eSharedObjectType.TagObjects) {\n                this.updateViews();\n            }\n        });\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-widget title=\"Views\" \n\t\ticonClass=\"fa fa-lg fa-fw fa-bar-chart\" \n\t\t[showCloseButton]=\"true\"\n\t\t(close)=\"close()\"\n\t>\n\t\t\t<dexih-table \n\t\t\t\t[enableMultiSelect]=\"true\"\n\t\t\t\t[enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n\t\t\t\t[columns]=\"columns\"\n\t\t\t\t[dataObservable]=\"tableData\"\n\t\t\t\t(rowClick)=\"editView($event)\"\n\t\t\t\t[tags]=\"this.hubCache.hub.dexihTags\"\n\t\t\t\t>\n\t\t\t\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t\t\t\t<tags-update-button class=\"ml-1\" [objectType]=\"eSharedObjectType.View\" [objects]=\"items\" ></tags-update-button>\n\t\t\t\t\t</ng-template>\n\n\t\t\t\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t\t\t\t<dependent-items-button class=\"ml-1\" [key]=\"item.key\" [objectType]='eSharedObjectType.View'></dependent-items-button>\n\t\t\t\t\t</ng-template>\n\t\n\t\t\t\t\t<ng-template #actions let-items=\"items\">\n\t\t\t\t\t\t<actions-view-button [views]=\"items\"></actions-view-button>\n\t\t\t\t\t</ng-template>\n\n\t\t\t</dexih-table>\n\n\t</dexih-widget>\n\t\n\t<dexih-help class=\"m-3\" title=\"Views\" path=\"/assets/help/reference/view.md\"></dexih-help>\n\n</div>\n\n\n"]}