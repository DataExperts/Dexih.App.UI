{"version":3,"sources":["webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.service.ts","webpack:///src/app/+hub/datalink/datalink-edit/properties/datalink-edit-properties.component.html","webpack:///src/app/+hub/datalink/datalink-edit/properties/datalink-edit-properties.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/save-button/datalink-edit-save-button.component.html","webpack:///src/app/+hub/datalink/datalink-edit/save-button/datalink-edit-save-button.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-table/datalink-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-table/datalink-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/source-table/datalink-edit-source-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/source-table/datalink-edit-source-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping-item.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping-item.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transform/datalink-edit-transform.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transform/datalink-edit-transform.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/profile-rules/profile-rules.component.html","webpack:///src/app/+hub/datalink/datalink-edit/profile-rules/profile-rules.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/validation/datalink-edit-validation.component.html","webpack:///src/app/+hub/datalink/datalink-edit/validation/datalink-edit-validation.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/run-plan/datalink-run-plan.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/run-plan/datalink-run-plan.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/input-parameter.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/input-parameter.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/parameters/output-parameter.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/output-parameter.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/standard-function-edit/standard-function-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/standard-function-edit/standard-function-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/custom-function-edit/custom-function-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/custom-function-edit/custom-function-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping-edit/mapping-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping-edit/mapping-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit-guard.ts","webpack:///src/app/+hub/datalink/datalink-edit/preview-data/preview-data.component.html","webpack:///src/app/+hub/datalink/datalink-edit/preview-data/preview-data.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/preview-table/preview-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/preview-table/preview-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transform-table-edit/transform-table-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transform-table-edit/transform-table-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transforms/datalink-edit-transforms.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transforms/datalink-edit-transforms.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/new-transform/datalink-edit-new-transform.component.html","webpack:///src/app/+hub/datalink/datalink-edit/new-transform/datalink-edit-new-transform.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-column-edit/datalink-column-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-column-edit/datalink-column-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/unGroup-edit/unGroup-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/unGroup-edit/unGroup-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.module.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.routing.ts"],"names":["DatalinkEditService","hubService","authService","hubFormsService","showAllErrors","logger","savingDatalink","BehaviorSubject","hubCache","this","_hubCache","ngOnDestroy","asObservable","LogC","Trace","currentForm","controls","find","c","value","transformType","Validation","datalinkTransformKey","key","datalinkTransformForm","datalinkTransformItemKey","datalinkTransformItem","datalinkForm","io","dexihDatalinkTransforms","forEach","inputColumns","runTime","joinColumns","joinDatalinkTable","dexihDatalinkColumns","nodeColumns","getNodeColumns","fixMapping","nodeDatalinkColumn","joinSortDatalinkColumn","getAvailableColumns","dexihDatalinkTransformItems","item","sourceDatalinkColumn","joinDatalinkColumn","filterDatalinkColumn","dexihFunctionParameters","parameter","direction","Input","datalinkColumn","Join","arrayParameters","arrayParameter","columns","nodes","filter","dataType","Node","isValid","col","push","childColumns","length","concat","columnForm","column","findIndex","inputColumn","name","columnGroup","setValue","datalinkTransform","functionType","Filter","Condition","Mapping","Map","JoinCondition","Group","Aggregate","Series","Sort","Validate","Rows","Lookup","parameters","map","hub","dexihHubVariables","previousGroup","columnGroups","cols","sort","a","b","position","group","datalinkTransformItemForm","datalinkTransformItemsArray","currentIndex","removeAt","form","datalinkDatalinkTransformItemFormGroup","getNextSequence","Math","max","apply","o","fixMappings","datalinkTransformItems","index","indexOf","datalinkTargetKey","datalinkTargets","transform","datalinkTransforms","newDatalinkTransform","minKey","dt","transformAssemblyName","transformClassName","Array","passThroughColumns","Concatenate","seriesItem","transformItemType","datalinkTransformFormGroup","resetDatalinkTransformPositions","Promise","resolve","confirmDialog","then","confirm","userConfigTransforms","GetUserConfigTransformReference","e","cancelToken","datalink","getDatalinkValue","hubPostRemote","hubKey","remoteAgentId","getCurrentRemoteAgentId","datalinkTable","confirm2","doRebuildDatalinkTable","sourceType","Table","sourceTable","getTable","sourceTableKey","mergeDatalinkColumns","dexihTableColumns","Datalink","dexihDatalinks","sourceDatalinkKey","datalinkColumns","buildInputOutput","sourceDatalinkTable","transforms","outputColumns","rowDatalinkColumn","datalinkTableKey","logicalName","Int32","isMandatory","description","groupName","newColumns","existingColumns","Object","keys","DatalinkEditPropertiesComponent","editDatalinkService","route","eConnectionPurpose","eDatalinkTypeItems","eAlertLevelItems","eAlertLevel","_subscription","combineLatest","data","params","getHubCacheObservable","getCurrentFormObservable","subscribe","result","pageTitle","addHubClientErrorMessage","unsubscribe","DatalinkEditSaveButtonComponent","router","eUpdateStrategy","cancel","saveAs","next","dexihDatalinkTargets","dirty","targets","tableNames","table","join","doSave","t","savedTable","target","saveTables","setControl","tableForm","tableKey","save","navigate","relativeTo","saveDatalink","doDownload","downloadItems","downloadObject","objectKey","objectType","downloadData","Csv","truncateTarget","resetIncremental","hasChanged","toPromise","runDatalinks","DatalinkEditComponent","logCount","eTransformWriterMethod","isLoaded","showPage","showPageMessage","routerState","root","snapshot","firstChild","help","events","event","getHelp","action","status","Loaded","init","load","reason","ngOnInit","_datalinkFormSubscription","datalinkKey","originalDatalink","d","Warning","addHubErrorMessage","datalinkType","Query","reBuildDatalinkTable","markAsDirty","copyDatalink","CopyDatalink","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","$event","returnValue","DatalinkTableComponent","datalinkEditService","eSourceType","sourceTypes","connectionTables","datalinks","isVersioned","errors","getFormErrorMessages","datalinkTableForm","subscribeDatalinkChanges","getConnectionTables","updateIsVersioned","_datalinkTableSubscription","merge","valueChanges","refreshColumns","rowsEndAt","rowsStartAt","rowsIncrement","tableColumnsForm","datalinkTableColumn","DatalinkEditSourceTableComponent","eMappingStatus","title","format","enum","_tableData","tableData","updateData","_sourceSubscription","informationDialog","lineage","SourceTable","Source","PassThroughMap","createDatalinkImpact","mappingStatus","statusClass","columnData","newColumn","columnStatus","dataTypeToString","deltaType","allowDbNull","isIncrementalUpdate","securityFlag","isInput","columnsArray","parent","items","existingItems","columnSortChange","editColumn","DatalinkEditTargetComponent","fb","eDeltaType","updateStrategies","loadStrategies","showTableProperties","targetTableColumns","tableFormService","getRemoteLibrariesObservable","managedConnections","getManagedConnections","updateTargets","_loadStrategySubscription","deleteDatalinkTarget","InputColumnComponent","eTypeCode","columnUsage","Transform","Target","NotMapped","mappingStatusImpact","mappingStatusInfoImpact","mappingStatusLineage","createDatalinkLineage","mappingStatusInfoLineage","findColumn","InputColumnsComponent","_inputColumnsSubscribe","getColumnGroups","OutputColumnComponent","inputTables","inputOutputDrop","refreshStatus","AutoGenerate","Mapped","MappedToNothing","OutputColumnsComponent","allowMappingOutputs","_outputColumnsSubscribe","transformColumns","outputColumn","emit","TargetColumnComponent","TargetTable","TargetColumnsComponent","JoinColumnComponent","inputJoinDrop","_hubCacheSubscription","lineageMappingStatus","impactMappingStatus","JoinColumnsComponent","eTransformType","updateTableData","_changesSubscription","joinTable","joinColumn","MappingItemComponent","updateMapping","transformItem","itemType","BuiltInFunction","CustomFunction","AggregatePair","UnGroup","functionClassName","func","GetFunctionReference","label","addBuiltInFunctionParameters","error","functionMethodName","customFunctionKey","dexihCustomFunctions","addCustomFunctionParameters","aggregate","sortDirection","addUnGroupParameters","useSource","source","columnOrValue","sourceValue","useTarget","describeDatalinkColumn","targetDatalinkColumn","useJoin","useFilter","filterValue","filterCompare","IsEqual","compare","expectedDataType","text","describeStaticValue","valid","args","array","arg","functionInputs","inputParameters","resultInputParameters","functionOutputs","outputParameters","returnParameters","resultOutputParameters","resultReturnParameters","inputParams","ResultInput","linkedName","param","p","parameterName","rank","describeParameterName","values","ap","outputParams","parameterIsOutput","allowCondition","ReturnValue","ResultReturnValue","linkedNames","from","Set","mapParameters","parameters2","sourceColumn","nodeDatalinkColumnKey","findValidColumn","MappingComponent","allowStandard","allowMapping","allowAggregate","allowRow","allowValidation","allowOutput","allowGroup","allowJoin","allowSort","allowSeries","allowJoinNode","addMapping","removeMapping","onColumnDrop","eTransformItemType","getFunctionType","inputDateColumns","DateTime","Date","filteredItems","JoinNode","Column","ColumnPair","FilterPair","JoinPair","getItemFormGroup","GroupNode","deleteSelected","itemForm","deleteDatalinkTransformItem","getHubCache","childColumn","copyDatalinkColumn","insertDatalinkTransformItem","createMapping","validFrom","ValidFromDate","validTo","ValidToDate","GreaterThanEqual","LessThan","editMapping","datalinkItemSortChange","newOutputDrop","DatalinkEditTransformComponent","showName","showDescription","eDuplicateStrategyItems","eJoinNotFoundStrategyItems","eSeriesGrain","seriesGrains","allowNode","nodeName","formErrors","transformsArray","_transformsArraySubscription","navigateUp","seriesForm","nodeType","node","addNodeColumns","path","deleteDatalinkTransform","nodeItem","Ascending","Sum","DatalinkEditProfileRulesComponent","selectedProfileRules","profileRules","dexihDatalinkProfiles","GetFunctionsByType","Profile","profile","profileRuleForm","functionAssemblyName","detailedResults","profiles","profileRule","datalinkProfileFormGroup","i","updateProfileRules","DatalinkRunPlanComponent","DatalinkEditValidationComponent","remoteLibraries","getValidationTransform","insertDatalinkTransform","allowSave","InputParameterComponent","InputValues","allowDataTypeSelect","allowNameSelect","allowAdd","allowRemove","inputParameterForms","updateParameterName","outputParameterForms","variables","addParameter","removeParameter","eBasicType","typeCodes","inputColumnGroups","inputs","ignoreChanges","inputParameter","staticValue","textItems","Boolean","toString","functionParameter","listOfValues","updateItems","inputParameterSubscription","datalinkColumnSubscription","String","input","outputTables","type","current","OutputParameterComponent","outputParameterForm","_datalinkColumnSubscription","_parameterSubscription","_dataTypeSubscription","updateNewColumn","add","remove","StandardFunctionEditComponent","ArrayParameter","parameterItems","inputArray","ArrayParameterItem","inputParameterForm","inputItems","outputItems","eFunctionType","eParameterDirection","invalidActions","functionCache","eGenericType","allowReturn","eInvalidActionItems","eErrorActionItems","isJoin","functions","transformFunctionType","getDatalinkTransform","getVariables","useCustomFunction","getDatalinkTransformItem","newDatalinkTransformItemForm","selectCustomFunction","selectedFunction","selectFunction","newItem","functionCategories","category","filteredFunctions","customFunctions","selectedCustomFunction","_functionSubscription","_saveSubscription","_returnParameterSubscription","pristine","parametersArray","inputParameterControls","outputParameterControls","addArrayParameter","resetItems","genericTypeCode","genericTypeDefault","genericType","Numeric","Decimal","All","isNumeric","isString","None","existingParameters","newParameter","Output","ResultOutput","refreshParameters","existingValue","isGeneric","defaultValue","datalinkFunctionParametersFormGroup","dexihCustomFunctionParameters","newParameterForm","returnParameter","returnType","newParameterForm2","parentParameter","parentParameterForm","createArrayParameter","datalinkFunctionArrayParametersFormGroup","arrayForm","insert","parameterForm","splice","clearArray","isLabel","addAllColumns","inputArrayForm","j","importFunctionMappings","paramValue","markAsPristine","CustomFunctionEditComponent","inputParameterValues","outputParameterValues","funcParam","setParameters","_parametersSubscription","returnParameterForm","oldParameter","downloadCustomFunction","testCustomFunction","addHubSuccessMessage","returnParameterValue","addHubMessage","DatalinkEditGuard","MappingEditComponent","showInput","showOutput","eAggregate","eAggregateItems","eCompare","sortDirections","getErrors","_formChangesObserve","statusChanges","targetErrors","getErrorMessage","sourceErrors","joinErrors","component","canDeactivate","PreviewDataComponent","eDataObjectType","getRemoteAgentObservable","PreviewTableComponent","TransformTableEditComponent","canEdit","deltaTypes","securityFlags","s","control","tooltip","_columnData","transformTableForm","transformTable","updateColumnData","updateDate","columnIndex","close","DatalinkEditTransformsComponent","refreshTransforms","_transformsChange","icon","getTransformName","invalid","DatalinkEditNewTransformComponent","transformReference","newDatalinkTransformForm","columnFormService","DatalinkColumnEditComponent","datalinkColumnKey","sourceDatalinkTableForm","initializeForm","applyExit","originalColumnForm","maxPos","startForm","UnGroupEditComponent","_nodeSubscription","DatalinkEditTargetTableComponent","DatalinkEditModule","showColumn","ignoreUpdateTable","newTable","showBulkEdit","canExit","class","_missingColumnsData","missingColumnsData","ioColumns","getDatalinkOutputColumns","targetKey","originalTargetTableForm","targetTableForm","datalinkTargetFormGroup","resetSubscription","_tableFormSubscription","validation","columnValidation","getColumnValidation","columnValidationKey","columnValidationClass","columnValidationTooltip","validColumns","missingColumnData","datalinkColumnStatus","tableColumns","missingColumn","assign","resetColumnKeys","positions","tableColumn","addMissing","columnKey","getConnection","connectionKey","importTables","tables","returnTable","useLogical","defaultTableLogicalName","schema","createTables","IgnoreFormChange","savedTables","datalinkEditRoutes","redirectTo","children","pathMatch","loadChildren","m","TableEditModule","breadCrumb","Routing","forChild","navigateSkip","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["import { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { eLogLevel, LogFactory } from '../../../../logging';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { InputOutputColumns } from '../../hub.lineage.models';\nimport { HubService } from '../../hub.service';\nimport { TransformReference } from '../../hub.remote.models';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { HubCache } from '../../hub.models';\nimport { eTransformType, DexihDatalinkColumn, eParameterDirection, eTypeCode, DexihDatalinkTransformItem,\n    DexihDatalinkTransform, DexihDatalinkTable, eTransformItemType, eSourceType, eFunctionType } from '../../../shared/shared.models';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n// contains shared objects used to edit the datalink.\n\n@Injectable()\nexport class DatalinkEditService implements OnInit, OnDestroy {\n\n    private _hubCache: HubCache;\n\n    public showAllErrors = false;\n\n    public datalinkKey: number;\n\n    public logger = new LogFactory('datalink-edit.service');\n\n    // used to stop save occurring when changing functions and target ables.\n    savingDatalink = new BehaviorSubject(false);\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        public hubFormsService: HubFormsService) {\n    }\n\n    ngOnInit() {\n    }\n\n    public init(hubCache: HubCache) {\n        this._hubCache = hubCache;\n    }\n\n    ngOnDestroy() {\n        this.hubFormsService.ngOnDestroy();\n    }\n\n    savingDataLinkObservable(): Observable<boolean> {\n        return this.savingDatalink.asObservable();\n    }\n\n    getValidationTransform(): FormGroup {\n        this.logger.LogC(() => `getValidationTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n        let datalinkTransform = <FormGroup>datalinkTransforms.controls\n            .find(c => c.value.transformType === eTransformType.Validation);\n\n        return datalinkTransform;\n    }\n\n    getDatalinkTransform(datalinkTransformKey: number): FormGroup {\n        this.logger.LogC(() => `getDatalinkTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n\n        let datalinkTransform = <FormGroup>datalinkTransforms.controls\n            .find(c => c.value.key === datalinkTransformKey);\n\n        return datalinkTransform;\n    }\n\n    getDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemKey: number): FormGroup {\n        this.logger.LogC(() => `getDatalinkTransformItem, key:${datalinkTransformItemKey}.`, eLogLevel.Trace);\n\n        let datalinkTransformItems = <FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let datalinkTransformItem = <FormGroup>datalinkTransformItems.controls\n            .find(c => c.value.key === datalinkTransformItemKey);\n\n        this.logger.LogC(() => `getDatalinkTransformItem finished.`, eLogLevel.Trace);\n\n        return datalinkTransformItem;\n    }\n\n     // fixes the key mappings when a transform is removed or columns are refreshed\n     fixMappings(datalinkForm: FormGroup) {\n        let io = new InputOutputColumns();\n        let datalinkTransforms = <FormArray> datalinkForm.controls.dexihDatalinkTransforms;\n        datalinkTransforms.controls.forEach((datalinkTransformForm: FormGroup) => {\n            let inputColumns = <DexihDatalinkColumn[]> datalinkTransformForm.controls.runTime.value.inputColumns;\n            let joinColumns = null;\n            if (datalinkTransformForm.value.joinDatalinkTable) {\n                joinColumns = datalinkTransformForm.value.joinDatalinkTable.dexihDatalinkColumns;\n            }\n\n            let nodeColumns = this.getNodeColumns(inputColumns);\n\n            this.fixMapping(nodeColumns, <FormGroup> datalinkTransformForm.controls.nodeDatalinkColumn);\n            this.fixMapping(joinColumns, <FormGroup> datalinkTransformForm.controls.joinSortDatalinkColumn);\n\n            // set the inputcolumns to the current node level.\n            if (datalinkTransformForm.controls.nodeDatalinkColumn.value) {\n                inputColumns = io.getAvailableColumns(inputColumns, datalinkTransformForm.controls.nodeDatalinkColumn.value.key , 0)\n            }\n\n            let items = <FormArray> datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            items.controls.forEach((item: FormGroup) => {\n                this.fixMapping(inputColumns, <FormGroup> item.controls.sourceDatalinkColumn);\n                this.fixMapping(joinColumns, <FormGroup> item.controls.joinDatalinkColumn);\n                this.fixMapping(inputColumns, <FormGroup> item.controls.filterDatalinkColumn);\n\n                let parameters = <FormArray> item.controls.dexihFunctionParameters;\n                parameters.controls.forEach((parameter: FormGroup) => {\n                    switch (parameter.controls.direction.value) {\n                        case eParameterDirection.Input:\n                            this.fixMapping(inputColumns, <FormGroup> parameter.controls.datalinkColumn);\n                            break;\n                        case eParameterDirection.Join:\n                            this.fixMapping(joinColumns, <FormGroup> parameter.controls.datalinkColumn);\n                            break;\n                    }\n\n                    let arrayParameters = <FormArray> parameter.controls.arrayParameters;\n                    arrayParameters.controls.forEach((arrayParameter: FormGroup) => {\n                        switch (arrayParameter.controls.direction.value) {\n                            case eParameterDirection.Input:\n                                this.fixMapping(inputColumns, <FormGroup> arrayParameter.controls.datalinkColumn);\n                                break;\n                            case eParameterDirection.Join:\n                                this.fixMapping(joinColumns, <FormGroup> arrayParameter.controls.datalinkColumn);\n                                break;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    private getNodeColumns(columns: DexihDatalinkColumn[]): DexihDatalinkColumn[] {\n        let nodes: DexihDatalinkColumn[] = [];\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                nodes.push(col);\n                if (col.childColumns && col.childColumns.length > 0) {\n                    nodes = nodes.concat(this.getNodeColumns(col.childColumns));\n                }\n            });\n        }\n\n        return nodes;\n    }\n\n    private fixMapping(inputColumns: DexihDatalinkColumn[], columnForm: FormGroup) {\n        let column  = <DexihDatalinkColumn> columnForm.value;\n        if (!inputColumns || !column) { return; }\n\n        if (inputColumns.findIndex(c => c.key === column.key) < 0) {\n            let inputColumn = inputColumns\n                .find(c => c.name === column.name && c.columnGroup === column.columnGroup);\n            if (!inputColumn) {\n                inputColumn = inputColumns.find(c => c.name === column.name);\n            }\n\n            if (inputColumn) {\n                columnForm.setValue(inputColumn);\n            }\n        }\n    }\n\n    public getFunctionType(datalinkTransform: DexihDatalinkTransform): eFunctionType {\n        let functionType: eFunctionType;\n        switch (datalinkTransform.transformType) {\n            case eTransformType.Filter:\n                functionType = eFunctionType.Condition;\n                break;\n            case eTransformType.Mapping:\n                functionType = eFunctionType.Map;\n                break;\n            case eTransformType.Join:\n                functionType = eFunctionType.JoinCondition;\n                break;\n            case eTransformType.Group:\n            case eTransformType.Aggregate:\n                functionType = eFunctionType.Aggregate;\n                break;\n            case eTransformType.Series:\n                functionType = eFunctionType.Series;\n                break;\n            case eTransformType.Sort:\n                functionType = eFunctionType.Sort;\n                break;\n            case eTransformType.Validation:\n                functionType = eFunctionType.Validate;\n                break;\n            case eTransformType.Rows:\n                functionType = eFunctionType.Rows;\n                break;\n            case eTransformType.Lookup:\n                functionType = eFunctionType.JoinCondition;\n                break;\n            case eTransformType.Delta:\n                break;\n        }\n\n        return functionType;\n    }\n\n    public getVariables(): string[] {\n        let variables = this.hubFormsService.currentForm.controls.parameters.value.map(c => '{' + c.name + '}')\n        .concat(this._hubCache.hub.dexihHubVariables.map(c => '{' + c.name + '}'));\n\n        return variables;\n    }\n\n    public getColumnGroups(columns: DexihDatalinkColumn[]): Array<{ group: string, columns: Array<DexihDatalinkColumn> }> {\n        let previousGroup: string = null;\n\n        let columnGroups: Array<{ group: string, columns: Array<DexihDatalinkColumn> }> = [];\n        let cols: Array<DexihDatalinkColumn> = null;\n\n        columns\n            .filter(c => c.isValid)\n            .sort((a, b) => a.position - b.position)\n            .forEach(column => {\n                let group = column.columnGroup ? column.columnGroup : '(un-grouped)';\n                if (group !== previousGroup) {\n                    if (cols) {\n                        columnGroups.push({ group: previousGroup, columns: cols });\n                    }\n                    previousGroup = group;\n                    cols = [];\n                }\n                cols.push(column);\n            });\n\n        if (cols && cols.length > 0) {\n            columnGroups.push({ group: previousGroup, columns: cols });\n        }\n\n        return columnGroups;\n    }\n\n    insertDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemForm: FormGroup): DexihDatalinkTransformItem {\n        this.logger.LogC(() => `insertDatalinkTransformItem`, eLogLevel.Trace);\n\n        let datalinkTransformItem = <DexihDatalinkTransformItem> datalinkTransformItemForm.value;\n\n        let datalinkTransformItemsArray = (<FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems']);\n        // use temporary negative keys for items which have not been saved.\n        if (!datalinkTransformItem.key) {\n            datalinkTransformItem.key = this._hubCache.getNextSequence();\n            if (datalinkTransformItemsArray.controls.length === 0) {\n                datalinkTransformItem.position = 1;\n            } else {\n                datalinkTransformItem.position = Math.max.apply(Math, datalinkTransformItemsArray.controls.map(o => o.value.position)) + 1;\n            }\n            let form = this.hubFormsService.datalinkDatalinkTransformItemFormGroup(datalinkTransformForm, datalinkTransformItem);\n            datalinkTransformItemsArray.push(form);\n        } else {\n            // existing item? lookup previous item and copy the updated values across.\n            let currentIndex = datalinkTransformItemsArray.controls\n                .findIndex(c => c.value['key'] === datalinkTransformItem.key);\n            datalinkTransformItemsArray.removeAt(currentIndex);\n\n            let form = this.hubFormsService.datalinkDatalinkTransformItemFormGroup(datalinkTransformForm, datalinkTransformItem);\n            datalinkTransformItemsArray.push(form);\n        }\n\n        this.fixMappings(this.hubFormsService.currentForm);\n\n        this.logger.LogC(() => `insertDatalinkTransformItem finished`, eLogLevel.Trace);\n\n        return datalinkTransformItem;\n    }\n\n    deleteDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemForm: FormGroup) {\n        this.logger.LogC(() => `deleteDatalinkTransformItem`, eLogLevel.Trace);\n\n        let datalinkTransformItems = <FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let index = datalinkTransformItems.controls.indexOf(datalinkTransformItemForm);\n        datalinkTransformItems.removeAt(index);\n\n        this.fixMappings(this.hubFormsService.currentForm);\n    }\n\n    deleteDatalinkTarget(datalinkForm: FormGroup, datalinkTargetKey: Number) {\n        this.logger.LogC(() => `deleteDatalinkTarget`, eLogLevel.Trace);\n\n        let datalinkTargets = <FormArray>datalinkForm.controls['dexihDatalinkTargets'];\n        let index = datalinkTargets.controls.findIndex(c => c.value.key === datalinkTargetKey);\n        if (index >= 0) {\n            datalinkTargets.removeAt(index);\n        }\n    }\n\n    insertDatalinkTransform(position: number, transform: TransformReference): FormGroup {\n        this.logger.LogC(() => `insertDatalinkTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n\n        let newDatalinkTransform = new DexihDatalinkTransform();\n\n        // use temporary negative keys for datalink transforms which have not been saved.\n        let minKey = -1;\n        datalinkTransforms.controls.forEach(dt => {\n            if (dt.value['key'] <= minKey) {\n                minKey = dt.value['key'] - 1;\n            }\n        });\n\n        this.logger.LogC(() => `insertDatalinkTransform key:${minKey}`, eLogLevel.Trace);\n\n        newDatalinkTransform.key = minKey;\n        newDatalinkTransform.transformType = transform.transformType;\n        newDatalinkTransform.transformAssemblyName = transform.transformAssemblyName;\n        newDatalinkTransform.transformClassName = transform.transformClassName;\n        // newDatalinkTransform.name = transform.name;\n        // newDatalinkTransform.description = transform.description;\n        newDatalinkTransform.dexihDatalinkTransformItems = new Array<DexihDatalinkTransformItem>();\n        newDatalinkTransform.isValid = true;\n\n        // default pass-through columns off for map, group, and row transforms.\n        switch (transform.transformType) {\n            case eTransformType.Group:\n            case eTransformType.Rows:\n            case eTransformType.Mapping:\n                newDatalinkTransform.passThroughColumns = false;\n                break;\n            default:\n                newDatalinkTransform.passThroughColumns = true;\n        }\n\n        if (transform.transformType === eTransformType.Join\n            || transform.transformType === eTransformType.Lookup || transform.transformType === eTransformType.Concatenate) {\n            newDatalinkTransform.joinDatalinkTable = new DexihDatalinkTable();\n            newDatalinkTransform.joinDatalinkTable.key = this._hubCache.getNextSequence();\n        }\n\n        if (transform.transformType === eTransformType.Series) {\n            let seriesItem = new DexihDatalinkTransformItem();\n            seriesItem.transformItemType = eTransformItemType.Series;\n            seriesItem.position = 0;\n            seriesItem.isValid = true;\n            newDatalinkTransform.dexihDatalinkTransformItems.push(seriesItem);\n        }\n\n        newDatalinkTransform.position = position;\n\n        let datalinkTransformForm = this.hubFormsService.datalinkTransformFormGroup(newDatalinkTransform);\n        datalinkTransforms.push(datalinkTransformForm);\n\n        this.resetDatalinkTransformPositions();\n\n        this.logger.LogC(() => `insertDatalinkTransform finished.`, eLogLevel.Trace);\n\n        return datalinkTransformForm;\n    }\n\n    deleteDatalinkTransform(datalinkTransform: DexihDatalinkTransform): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            this.authService.confirmDialog('Delete Transform',\n                `Are you sure you would like to remove the transform ${datalinkTransform.name}?`)\n                .then(confirm => {\n                    if (confirm) {\n                        let datalinkForm = this.hubFormsService.currentForm;\n                        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n                        let index = datalinkTransforms.controls\n                            .findIndex(c => c.value.key === datalinkTransform.key);\n                        datalinkTransforms.removeAt(index);\n                        this.resetDatalinkTransformPositions();\n                    }\n                    resolve(confirm);\n                }).catch(() => {\n                    resolve(false);\n                });\n        });\n    }\n\n    async resetDatalinkTransformPositions() {\n        const datalinkForm = this.hubFormsService.currentForm;\n        const datalinkTransforms = <FormArray>datalinkForm.controls.dexihDatalinkTransforms;\n\n        let userConfigTransforms = await this.hubService.GetUserConfigTransformReference();\n\n        let position = 10;\n        datalinkTransforms.controls.sort((a, b) => a.value.position - b.value.position).forEach(datalinkTransform => {\n            const dt = <FormGroup>datalinkTransform;\n\n            let transformReference = userConfigTransforms.find(e => e.transformClassName === datalinkTransform.value.transformClassName);\n\n            // if the transform is a validation/delta, then position at the end.\n            if (transformReference) {\n                dt.controls.position.setValue(position);\n                position += 10;\n            } else {\n                dt.controls.position.setValue(1000000);\n            }\n        });\n    }\n\n    importFunctionMappings(datalinkTransformKey: number, item: DexihDatalinkTransformItem, cancelToken: CancelToken):\n        Promise<string[]> {\n\n        let datalink = this.hubFormsService.getDatalinkValue();\n        const cache = this._hubCache;\n\n        return this.hubService.hubPostRemote<string[]>('/api/Hub/ImportFunctionMappings', {\n            hubKey: cache.hub.hubKey,\n            remoteAgentId: this.hubService.getCurrentRemoteAgentId(),\n            datalink: datalink,\n            datalinkTransformKey: datalinkTransformKey,\n            datalinkTransformItem: item\n        }, 'Importing function mappings...', cancelToken);\n    }\n\n    reBuildDatalinkTable(datalinkTable: DexihDatalinkTable, confirm = false) {\n        if (confirm) {\n            // tslint:disable-next-line:max-line-length\n            this.authService.confirmDialog('Rebuild Columns?', `This action will load the selected table columns, and replace or delete any existing columns.  This may require fixing some mappings.  Do you want to proceed?`)\n                .then((confirm2) => {\n                    if (confirm2) {\n                    this.doRebuildDatalinkTable(datalinkTable)\n                    }\n                }).catch();\n        } else {\n            this.doRebuildDatalinkTable(datalinkTable);\n        }\n    }\n\n    private doRebuildDatalinkTable(datalinkTable: DexihDatalinkTable) {\n\n        datalinkTable.dexihDatalinkColumns.forEach(datalinkColumn => datalinkColumn.isValid = false);\n\n        switch (datalinkTable.sourceType) {\n            case eSourceType.Table:\n                let sourceTable = this._hubCache.getTable(datalinkTable.sourceTableKey);\n                if (sourceTable) {\n                    datalinkTable.name = sourceTable.name;\n\n                    datalinkTable.dexihDatalinkColumns = this.mergeDatalinkColumns(\n                        datalinkTable.name, datalinkTable.key,\n                        sourceTable.dexihTableColumns, datalinkTable.dexihDatalinkColumns);\n\n                }\n                break;\n            case eSourceType.Datalink:\n                let datalink = this._hubCache.hub.dexihDatalinks.find(c => c.key === datalinkTable.sourceDatalinkKey);\n                if (datalink) {\n                    datalinkTable.name = datalink.name;\n\n                    let io = new InputOutputColumns();\n                    // const datalinkColumns = io.getInputColumns(this._hubCache, datalink, null, []);\n                    io.buildInputOutput(this._hubCache, datalink);\n\n                    let datalinkColumns: DexihDatalinkColumn[];\n\n                    if (datalink.dexihDatalinkTransforms.length === 0) {\n                        datalinkColumns = datalink.sourceDatalinkTable.dexihDatalinkColumns;\n                    } else {\n                        let transforms = datalink.dexihDatalinkTransforms.sort((a, b) => a.position - b.position);\n                        let transform = transforms[transforms.length - 1];\n                        datalinkColumns = transform['runTime'].outputColumns;\n                    }\n\n                    datalinkTable.dexihDatalinkColumns = this.mergeDatalinkColumns(\n                        datalinkTable.name, datalinkTable.key,\n                        datalinkColumns, datalinkTable.dexihDatalinkColumns);\n                }\n                break;\n            case eSourceType.Rows:\n                datalinkTable.name = 'Static Row Set';\n\n                let rowDatalinkColumn = datalinkTable.dexihDatalinkColumns.find(c => c.name === 'RowNumber');\n                if (!rowDatalinkColumn) {\n                    rowDatalinkColumn = new DexihDatalinkColumn();\n                    rowDatalinkColumn.key = this._hubCache.getNextSequence();\n                    rowDatalinkColumn.datalinkTableKey = datalinkTable.key;\n                    datalinkTable.dexihDatalinkColumns.push(rowDatalinkColumn);\n                }\n\n                rowDatalinkColumn.name = 'RowNumber';\n                rowDatalinkColumn.logicalName = rowDatalinkColumn.name;\n                rowDatalinkColumn.dataType = eTypeCode.Int32;\n                rowDatalinkColumn.isMandatory = true;\n                rowDatalinkColumn.isValid = true;\n                rowDatalinkColumn.description = 'The generated row number of the static row set';\n\n                break;\n        }\n    }\n\n    private mergeDatalinkColumns(groupName: string, datalinkTableKey: number,\n            newColumns: any, existingColumns: DexihDatalinkColumn[]): DexihDatalinkColumn[] {\n        newColumns.forEach(column => {\n            let datalinkColumn = existingColumns.find(c => c.name === column.name && c.columnGroup === groupName);\n            if (!datalinkColumn) {\n                datalinkColumn = existingColumns.find(c => c.name === column.name);\n            }\n            if (!datalinkColumn) {\n                datalinkColumn = new DexihDatalinkColumn();\n                datalinkColumn.key = this._hubCache.getNextSequence();\n                datalinkColumn.datalinkTableKey = datalinkTableKey;\n                existingColumns.push(datalinkColumn);\n            }\n\n            Object.keys(datalinkColumn).forEach(key => {\n                if (key === 'childColumns') {\n                    if (column[key] && column[key].length > 0) {\n                        datalinkColumn[key] = this.mergeDatalinkColumns(groupName, datalinkTableKey, column[key], datalinkColumn[key]);\n                    } else {\n                        datalinkColumn[key] = [];\n                    }\n                } else if (key !== 'key' && column[key]) {\n                    datalinkColumn[key] = column[key];\n                } else if (key === 'columnGroup') {\n                    if (groupName) {\n                        if (datalinkColumn[key] && datalinkColumn[key] !== groupName) {\n                            datalinkColumn[key] = groupName + '.' + datalinkColumn[key];\n                        } else {\n                            datalinkColumn[key] = groupName;\n                        }\n                    }\n                }\n            });\n        });\n\n        return existingColumns;\n    }\n\n}\n","<dexih-widget-section title='Properties' [showExpandButton]=\"true\">\n    <form *ngIf=\"datalinkForm\" [formGroup]=\"datalinkForm\">\n        <fieldset>\n            <section>\n                <form-select label=\"Datalink Type\" formControlName=\"datalinkType\" [items]=\"eDatalinkTypeItems\" itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-database\"\n                    note='Categorize the type of function this datalink is performing.' [enableFilter]=\"false\">\n                </form-select>\n            </section>\n\n            <section>\n                <form-input label=\"Datalink Name\" formControlName=\"name\" placeholder=\"Enter the datalink name.\" iconClass=\"fa fa-list\" [autocapitalize]=\"true\" [errors]=\"editDatalinkService.hubFormsService.formErrors.name\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\"\n                    [errors]=\"editDatalinkService.hubFormsService.formErrors.description\">\n                </form-textarea>\n            </section>\n\n            <section>\n                <form-select label=\"Alerting Level\" formControlName=\"alertLevel\" [items]=\"eAlertLevelItems\"\n                    itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-bell\"\n                    [errors]=\"editDatalinkService.hubFormsService.formErrors.alertLevel\" note=\"When alerts should be sent.\"\n                    [enableFilter]=\"false\">\n                </form-select>\n            </section>\n            \n            <section>\n                <form-checkbox label=\"Datalink is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                </form-checkbox>\n            </section>\n\n        </fieldset>\n    </form>\n\n</dexih-widget-section> \n\n<dexih-widget-section title='Input Parameters' [showExpandButton]=\"true\">\n    <input-parameters [showEdit]=\"true\" [parameters]=\"datalinkForm.controls.parameters\" [formsService]=\"editDatalinkService.hubFormsService\"></input-parameters>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { eConnectionPurpose, eDatalinkTypeItems, eAlertLevelItems, eAlertLevel } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-properties-form',\n    templateUrl: './datalink-edit-properties.component.html'\n})\nexport class DatalinkEditPropertiesComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n\n    public eConnectionPurpose = eConnectionPurpose;\n    eDatalinkTypeItems = eDatalinkTypeItems.filter(c => c.key > 0);\n\n    public eAlertLevelItems = eAlertLevelItems;\n    public eAlertLevel = eAlertLevel;\n\n    constructor(\n        private hubService: HubService,\n        public editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkForm = result[3];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n}\n","<!--<button class=\"btn btn-primary\" [ngClass]=\"{disabled : savingDatalink || datalinkForm?.pristine }\" (click)=\"!savingDatalink && saveDatalink()\"><i *ngIf=\"savingDatalink\" class=\"fa fa-spin fa-cog\"></i> Save Changes</button>\n<button class=\"btn btn-warning\" [ngClass]=\"{disabled : savingDatalink}\" (click)=\"!savingDatalink && cancel()\">Cancel</button>-->\n<dexih-invalid-form-details class=\"mr-1\" [control]=\"datalinkForm\"></dexih-invalid-form-details>\n<dexih-button-splitdropdown *ngIf=\"hubCache.canWrite\" [disabled]=\"!editDatalinkService.hubFormsService.hasChanged\" buttonClass=\"btn-primary\" iconClass=\"fa fa-save\" text=\"Save\" (buttonClick)=\"saveDatalink(false)\" class=\"mr-1\">\n    <li><a class=\"dropdown-item\" (click)=\"saveDatalink(false)\" title=\"Save in the hub\"><i class=\"fa fa-cloud\"></i> Save</a></li>\n    <li><a class=\"dropdown-item\" (click)=\"editDatalinkService.hubFormsService.saveLocal()\" title=\"Export as a local file\"><i class=\"fa fa-floppy-o\"></i> Save as file</a></li>\n    <li><a class=\"dropdown-item\" (click)=\"saveDatalink(true)\" title=\"Save another version\"><i class=\"fa fa-plus-circle\"></i> Save As...</a></li>\n</dexih-button-splitdropdown>\n<dexih-button-dropdown class=\"mr-1\" *ngIf=\"hubCache.canWrite && datalinkForm?.controls.dexihDatalinkTargets.value.length > 0\" text=\"Actions\" iconClass=\"fa fa-bolt\" buttonClass=\"btn-primary\" [pullRight]=\"true\">\n    <a class=\"dropdown-item\" (click)=\"fixMappings()\" title=\"Attempt to fix mappings broken when removing/inserting transforms.\">Fix Mappings</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(false, false)\" title=\"Run datalink, truncating the target table for each.\">Run</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(true, true)\" title=\"Run datalink, truncating the target table for each.\">Run (with truncate)</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(false, true)\" title=\"Run datalink, resetting the incremental (i.e. reload all source data rows) \">Run (reset incremental)</a>\n    <a class=\"dropdown-item\" (click)=\"preview()\" title=\"Preview the output of this datalink\">Preview Datalink</a>\n    <a class=\"dropdown-item\" (click)=\"download()\" title=\"Download the output from this datalink\">Download Datalink Data</a>\n</dexih-button-dropdown>\n<cancel-button [formsService]=\"editDatalinkService.hubFormsService\"></cancel-button>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { eUpdateStrategy, DownloadObject, eSourceType, eDownloadFormat, eDataObjectType } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'datalink-save-button',\n    templateUrl: './datalink-edit-save-button.component.html'\n})\n\nexport class DatalinkEditSaveButtonComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    datalinkForm: FormGroup;\n    \n\n    hubCache: HubCache;\n    eUpdateStrategy = eUpdateStrategy;\n\n    constructor(\n        public hubService: HubService,\n        public editDatalinkService: DatalinkEditService,\n        public authService: AuthService,\n        public router: Router,\n        public route: ActivatedRoute\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.datalinkForm = result[0];\n                this.hubCache = result[1];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'datalink save button');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    async saveDatalink(saveAs = false) {\n        this.editDatalinkService.savingDatalink.next(true);\n\n        if (this.datalinkForm.controls.dexihDatalinkTargets.dirty) {\n            let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n            let tables = targets.controls.map(c => {\n                let target = <FormGroup>c;\n                let table = target.controls.table;\n                if (table) {\n                    return table;\n                }\n            });\n\n            let tableNames = tables.filter(c => c.value.key > 0 && c.dirty).map(c => c.value.name).join(', ');\n\n            let doSave = async () => {\n                for (let t of targets.controls) {\n                    if (t.dirty) {\n                        let target = <FormGroup>t;\n                        let savedTable = await this.hubService.saveTables([target.controls.table.value]);\n                        target.setControl('table', this.editDatalinkService.hubFormsService.tableForm(savedTable[0]));\n                        target.controls.tableKey.setValue(savedTable[0].key);\n                    }\n                }\n\n                this.editDatalinkService.hubFormsService.save(false, saveAs);\n                this.editDatalinkService.savingDatalink.next(false);\n            }\n\n            // if no tables with key > 0 they are all new, so no need to prompt.\n            if (tableNames.length === 0) {\n                await doSave();\n            } else {\n            this.authService\n                .confirmDialog(`Save Target Tables?`, `The existing target table(s)\n                ${tableNames} have changed.\n                This is a shared object, and may impact other dependencies if changed.\n                Note, this will only save the metadata, use the 'Create Table' function to overwrite the physical table.`)\n                .then(async (confirm) => {\n                    if (confirm) {\n                        await doSave();\n                    }\n                }).catch(() => this.editDatalinkService.savingDatalink.next(false))\n            }\n        } else {\n            this.editDatalinkService.hubFormsService.save(false, saveAs);\n            this.editDatalinkService.savingDatalink.next(false);\n        }\n    }\n\n    preview() {\n        const transformsArray = <FormArray>this.datalinkForm.controls.dexihDatalinkTransforms;\n        let transforms = transformsArray.controls\n//            .filter(c => c.value.transform.allowUserConfig)\n            .sort((a, b) => b.value.position - a.value.position);\n\n        if (transforms.length > 0) {\n            this.router.navigate(['transforms/transform', transforms[0].value.key,\n            'preview-transform-data'], { relativeTo: this.route });\n        }\n    }\n\n    download() {\n        if (this.datalinkForm.dirty) {\n            this.authService.confirmDialog\n                ('Save Datalink',\n                    'The datalink must be saved before a data download task can be started.  Do you want to save the datalink?')\n                .then(saveDatalink => {\n                    if (saveDatalink) {\n                        this.saveDatalink();\n                        this.doDownload();\n                    }\n                })\n        } else {\n            this.doDownload();\n        }\n    }\n\n    doDownload() {\n        let downloadItems = new Array<DownloadObject>();\n        let downloadObject = new DownloadObject();\n        downloadObject.objectKey = this.datalinkForm.controls.key.value;\n        downloadObject.objectType = eDataObjectType.Datalink;\n        downloadItems.push(downloadObject);\n        this.hubService.downloadData(downloadItems, true, eDownloadFormat.Csv, this.cancelToken)\n    }\n\n    cancel() {\n        this.editDatalinkService.hubFormsService.cancel();\n    }\n\n    runDatalink(truncateTarget: boolean, resetIncremental: boolean) {\n        if (this.editDatalinkService.hubFormsService.hasChanged) {\n            this.authService.confirmDialog('Save Datalink', 'The datalink must be saved before running.  Would you like to save now?')\n                .then(confirm => {\n                    if (confirm) {\n                        this.saveDatalink();\n                        this.editDatalinkService.savingDatalink.toPromise().then(value => {\n                            if (value) {\n                                this.hubService\n                                    .runDatalinks([this.datalinkForm.controls.key.value], truncateTarget, resetIncremental\n                                        , null, null, null, this.cancelToken);\n                            }\n                        });\n                    }\n                });\n        } else {\n            this.hubService.runDatalinks([this.datalinkForm.controls.key.value], truncateTarget, resetIncremental,\n                null, null, null, this.cancelToken);\n        }\n    }\n\n    fixMappings() {\n        this.editDatalinkService.fixMappings(this.datalinkForm);\n    }\n}\n\n","<div class=\"container-fluid\" *ngIf=\"datalinkForm && !datalinkForm.pending\">\n\t<dexih-widget title=\"Edit Datalink\" iconClass=\"fa fa-lg fa-fw fa-exchange\" [showCloseButton]=\"true\"\n\t\t[padding]=\"false\" (close)=\"cancel()\">\n\t\t<ng-template #header>\n\n\t\t\t<div class=\"d-none d-xl-inline\">\n\t\t\t\t<ul class=\"nav nav-tabs card-header-tabs\">\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"properties\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\tclass=\"fa fa-cog\"></i>Properties</a></li>\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"source-table\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-o-right\"></i> Source</a></li>\n\t\t\t\t\t<ng-template [ngIf]=\"datalinkForm?.controls.sourceDatalinkTable.value\">\n\t\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t\t<a class=\"nav-link\" routerLink=\"transforms\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-share-alt\"></i>\n\t\t\t\t\t\t\t\tTransforms\n\t\t\t\t\t\t\t\t<dexih-invalid-form-icon [control]=\"datalinkForm.controls.dexihDatalinkTransforms\">\n\t\t\t\t\t\t\t\t</dexih-invalid-form-icon>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li *ngIf=\"!datalinkForm.controls.isQuery.value\" class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t\t\trouterLink=\"validation\" routerLinkActive=\"active\"><i class=\"fa fa-check-square-o\"></i>\n\t\t\t\t\t\t\t\tValidation</a></li>\n\t\t\t\t\t\t<li *ngIf=\"!datalinkForm.controls.isQuery.value\" class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t\t\trouterLink=\"profile-rules\" routerLinkActive=\"active\"><i class=\"fa fa-bug\"></i>\n\t\t\t\t\t\t\t\tProfiling</a></li>\n\t\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"target\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-right\"></i> Target</a></li>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</ng-template>\n\n\t\t<ul class=\"list-group\">\n\t\t\t<li class=\"list-group-item rounded-0\">\n\t\t\t\t<div class=\"d-flex\">\n\t\t\t\t\t<div class=\"d-xl-none\">\n\t\t\t\t\t\t<dexih-button-dropdown buttonClass=\"btn btn-success\" text=\"Navigate\">\n\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"properties\"><i\n\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-cog\"></i>Properties</a>\n\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"source-table\"><i\n\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-o-right\"></i>Source</a>\n\t\t\t\t\t\t\t<ng-template [ngIf]=\"datalinkForm.controls.sourceDatalinkTable.value\">\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"transforms\"><i\n\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-share-alt\"></i>Transforms</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" *ngIf=\"!datalinkForm.controls.isQuery.value\" routerLink=\"validation\"\n\t\t\t\t\t\t\t\t\t\trouterLinkActive=\"active\"><i class=\"fa fa-check-square-o\"></i>Validation</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" *ngIf=\"!datalinkForm.controls.isQuery.value\" routerLink=\"profile-rules\"\n\t\t\t\t\t\t\t\t\t\trouterLinkActive=\"active\"><i class=\"fa fa-bug\"></i>Profiling</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLink=\"target\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-right\"></i>Target</a>\n\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t\t</div>\n\t\t\t\t\t<datalink-status class=\"d-none d-xl-inline\" [datalinkKey]='datalinkForm?.controls.key.value'>\n\t\t\t\t\t</datalink-status>\n\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t<datalink-save-button></datalink-save-button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t\t<router-outlet></router-outlet>\n\t\t</ul>\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" *ngIf=\"help\" title=\"Datalinks\" path=\"/assets/help/reference/{{help}}\"></dexih-help>\n\n</div>","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { DatalinkEditService } from './datalink-edit.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { FormGroup, FormArray, FormControl } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../logging';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { DexihDatalinkTransform, eTransformWriterMethod, DexihDatalink, eDatalinkType,\n    eSourceType, eTransformType, DexihDatalinkTable } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-form',\n    templateUrl: './datalink-edit.component.html'\n})\nexport class DatalinkEditComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _datalinkFormSubscription: Subscription;\n    // private _datalinkTransformsSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public savingDatalink = false;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public params: Params;\n\n    public logger = new LogFactory('datalink-edit.component');\n    public logCount = 0;\n\n    public help: string;\n\n    // private _datalinkTransforms = new BehaviorSubject<Array<DexihDatalinkTransform>>(null);\n    // datalinkTransforms: Observable<Array<DexihDatalinkTransform>> = this._datalinkTransforms.asObservable();\n    // updatingTransforms = false;\n\n    eTransformWriterMethod = eTransformWriterMethod;\n\n    private isLoaded = false;\n\n    showPage = false;\n    showPageMessage = 'Loading datalink...';\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        public editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    getHelp() {\n        let route = this.router.routerState.root.snapshot;\n        while (route.firstChild) { route = route.firstChild; }\n        this.help = route.data['help'];\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this.router.events.subscribe(event => {\n                if (event instanceof NavigationEnd) {\n                    this.getHelp();\n                }\n            });\n\n            this.getHelp();\n\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                this.params = result[1];\n                this.hubCache = result[2];\n\n                if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n                this.editDatalinkService.init(this.hubCache);\n\n                if (this.isLoaded && this.action === 'new') { return; }\n\n                if (this.isLoaded && this.editDatalinkService.hubFormsService.hasChanged) {\n                    this.authService.confirmDialog('Datalink synchronization warning',\n                    'The hub was disconnected, meaning the datalink could have been changed by another session.  Would you like to discard the current changes, and reload the latest version of the datalink?')\n                    .then(confirm => {\n                        if (confirm) {\n                            this.load();\n                        }\n                    }).catch(reason => {\n                        return;\n                    });\n                } else {\n                    this.load();\n                }\n            });\n\n            this.editDatalinkService.ngOnInit();\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n//        if (this._datalinkTransformsSubscription) { this._datalinkTransformsSubscription.unsubscribe(); }\n\n        // shut down service\n        this.editDatalinkService.ngOnDestroy();\n    }\n\n    private load() {\n        this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n        if (this.action === 'edit') {\n\n            // get the hub key from the route data, and update the service.\n            let datalinkKey: number = +this.params['datalinkKey'];\n            if (!datalinkKey) {\n                this.logger.LogC(() => `no datalink found.`, eLogLevel.Warning);\n\n                this.hubService.addHubErrorMessage('There was no datalink specified to edit.');\n                this.showPageMessage = 'Edit failed...';\n                this.editDatalinkService.hubFormsService.datalink(null);\n            } else {\n                let originalDatalink = this.hubCache.hub.dexihDatalinks.find(d => d.key === datalinkKey);\n\n                if (originalDatalink) {\n                    this.editDatalinkService.hubFormsService.datalink(originalDatalink);\n                    this.route.snapshot.data['pageTitle'] = 'Datalink (' + originalDatalink.name + ')';\n\n                } else {\n                    this.logger.LogC(() => `no datalink found. key: ${datalinkKey}`, eLogLevel.Warning);\n                    this.hubService.addHubErrorMessage('A datalink with the key ' +\n                        datalinkKey + ' could not be found in the repository.');\n                    this.showPageMessage = 'Edit failed...';\n                }\n            }\n\n        } else if (!this.isLoaded && this.action === 'new') {\n            let datalink = new DexihDatalink();\n            datalink.sourceDatalinkTable = new DexihDatalinkTable();\n            this.editDatalinkService.hubFormsService.datalink(datalink);\n            this.logger.LogC(() => `new datalink set.`, eLogLevel.Warning);\n        } else if (!this.isLoaded && this.action === 'copy') {\n            // get the hub key from the route data, and update the service.\n            let datalinkKey: number = +this.params['datalinkKey'];\n            if (!datalinkKey) {\n                this.logger.LogC(() => `no datalink found.`, eLogLevel.Warning);\n\n                this.hubService.addHubErrorMessage('There was no datalink specified to copy.');\n                this.showPageMessage = 'Copy failed...';\n                this.editDatalinkService.hubFormsService.datalink(null);\n            } else {\n                let originalDatalink = this.hubCache.hub.dexihDatalinks.find(d => d.key === datalinkKey);\n\n                if (originalDatalink) {\n                    let copyDatalink = this.hubCache.CopyDatalink(originalDatalink);\n                    this.editDatalinkService.hubFormsService.datalink(copyDatalink);\n                    this.editDatalinkService.hubFormsService.hasChanged = true;\n                    this.route.snapshot.data['pageTitle'] = 'Datalink (' + copyDatalink.name + ')';\n\n                } else {\n                    this.logger.LogC(() => `no datalink found. key: ${datalinkKey}`, eLogLevel.Warning);\n                    this.hubService.addHubErrorMessage('A datalink with the key ' +\n                        datalinkKey + ' could not be found in the repository.');\n                    this.showPageMessage = 'Copy failed...';\n                }\n            }\n        } else if (this.action === 'sourceTable') {\n            let datalink = new DexihDatalink();\n            datalink.datalinkType = eDatalinkType.Query;\n            datalink.sourceDatalinkTable = new DexihDatalinkTable();\n            datalink.sourceDatalinkTable.sourceType = eSourceType.Table;\n            datalink.sourceDatalinkTable.sourceTableKey = +this.params['sourceTableKey'];\n            this.editDatalinkService.reBuildDatalinkTable(datalink.sourceDatalinkTable);\n            datalink.name = 'Datalink query for ' + datalink.sourceDatalinkTable.name;\n\n            this.editDatalinkService.hubFormsService.datalink(datalink);\n            this.editDatalinkService.hubFormsService.currentForm.markAsDirty();\n            this.editDatalinkService.hubFormsService.hasChanged = true;\n\n            this.logger.LogC(() => `new source table datalink set.`, eLogLevel.Warning);\n        }\n\n        this.isLoaded = true;\n\n        // monitor for any changes to the datalink\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n        this._datalinkFormSubscription =\n            this.editDatalinkService.hubFormsService.getCurrentFormObservable().subscribe(datalinkForm => {\n                if (!datalinkForm) { return; }\n                this.datalinkForm = datalinkForm;\n\n                // let datalinkTransforms = <FormArray>this.datalinkForm.controls.dexihDatalinkTransforms;\n                // this.updateTransforms(datalinkTransforms.value);\n\n                // // monitor any add/remove transforms to update the tabs.\n                // if (this._datalinkTransformsSubscription) { this._datalinkTransformsSubscription.unsubscribe(); }\n                // this._datalinkTransformsSubscription = datalinkTransforms.valueChanges.subscribe(dt => {\n                //     if (!this.updatingTransforms) {\n                //         this.updateTransforms(dt);\n                //     }\n                // });\n\n                let key = datalinkForm.controls.key.value;\n                if (key) {\n                    if (history.pushState) {\n                        let newUrl = window.location.pathname.replace('/new', `/edit/${key}`)\n                        this.router.navigateByUrl(newUrl);\n                    }\n                }\n            });\n\n        this.showPage = true;\n        this.showPageMessage = '';\n    }\n\n    // updateTransforms(datalinkTransforms: Array<any>) {\n    //     this.updatingTransforms = true;\n    //     this.logger.LogC(() => `updateTransforms`, eLogLevel.Trace);\n\n    //     // update the transform names\n    //     if (datalinkTransforms) {\n    //         let transforms = datalinkTransforms\n    //             .filter(c => c.transformType !== eTransformType.Delta && c.transformType !== eTransformType.Validation);\n    //         this._datalinkTransforms.next(transforms.sort((a, b) => a.position - b.position));\n    //     } else {\n    //         this._datalinkTransforms.next(null);\n    //     }\n    //     this.updatingTransforms = true;\n    // }\n\n    public canDeactivate(): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            if (this.editDatalinkService.hubFormsService.hasChanged) {\n                this.authService.confirmDialog('Datalink changes have not been saved',\n                    'The datalink changes have not been saved.  Do you want to discard the changes and exit?')\n                    .then(confirm => {\n                        resolve(confirm);\n                    }).catch(reason => {\n                        resolve(false);\n                    });\n            } else {\n                resolve(true);\n            }\n        });\n    }\n\n    // @HostListener allows us to also guard against browser refresh, close, etc.\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\n        if (this.editDatalinkService.hubFormsService.hasChanged) {\n            $event.returnValue = 'The datalink changes have not been saved.  Do you want to discard the changes and exit?';\n        }\n    }\n\n    saveDatalink() {\n        this.editDatalinkService.hubFormsService.save();\n    }\n\n    cancel() {\n        this.editDatalinkService.hubFormsService.cancel();\n    }\n\n}\n","<form *ngIf=\"datalinkTableForm\"  [formGroup]=\"datalinkTableForm\">\n    <fieldset>\n        <section >\n            <form-select label=\"Data Source Type\" formControlName=\"sourceType\" [items]=\"sourceTypes\" itemKey=\"key\" itemName=\"name\"\n                iconClass=\"fa fa-database\"  note='Specify the source type for this table' [enableFilter]=\"false\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Table\" >\n            <form-select label=\"Source Table\" formControlName=\"sourceTableKey\" [errors]=\"errors?.sourceTableKey\" [items]=\"connectionTables\" parentName=\"name\" childItems=\"dexihTables\" itemKey=\"key\" itemName=\"logicalName\"\n                note=\"Select the source table\" >\n                <table-edit-button [key]=\"datalinkTableForm.controls.sourceTableKey.value\"></table-edit-button>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Datalink\">\n            <form-select label=\"Source Datalink\" formControlName=\"sourceDatalinkKey\" [errors]=\"errors?.sourceDatalinkKey\" [items]=\"datalinks\" itemKey=\"key\" itemName=\"name\"\n                note='Select the source datalink'>\n                <datalink-edit-button [key]=\"datalinkTableForm.controls.sourceDatalinkKey.value\"></datalink-edit-button>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Rows\">\n            <form-input label=\"Start At\" type=\"number\" formControlName=\"rowsStartAt\" placeholder=\"Enter start row number\" iconClass=\"fa fa-list\">\n            </form-input>\n\n            <form-input label=\"End At\" type=\"number\" formControlName=\"rowsEndAt\" placeholder=\"Enter end row number\" iconClass=\"fa fa-list\">\n            </form-input>\n\n            <form-input label=\"Increment By\" type=\"number\" formControlName=\"rowsIncrement\" placeholder=\"Enter increment value\" iconClass=\"fa fa-list\">\n            </form-input>\n        \n        </section>\n\n        <section >\n            <form-checkbox label=\"Disable query logic being pushed down to the database\" formControlName=\"disablePushDown\"></form-checkbox>\n            <form-checkbox *ngIf=\"isVersioned\" label=\"Disable source table versions\" formControlName=\"disableVersioning\"></form-checkbox>\n\n            <form-input label=\"Table Alias\" formControlName=\"name\" \n                note='An alias that can be used to describe the table instance (this is generally used to differentiate self-joined tables).'>\n            </form-input>\n        </section>\n\n        <dexih-button-refresh (click)=\"refreshColumns()\" tooltip=\"Refresh the columns from the source table.\" ></dexih-button-refresh>\n    </fieldset>\n</form>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubCache, sourceTypes, ConnectionTables } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest, merge} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { eSourceType, DexihDatalink, DexihDatalinkTable } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datalink-table',\n    templateUrl: './datalink-table.component.html'\n})\n\nexport class DatalinkTableComponent implements OnInit, OnDestroy {\n    @Input() datalinkTableForm: FormGroup;\n\n    public errors: {};\n\n    private _subscription: Subscription;\n    private _datalinkTableSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public eSourceType = eSourceType;\n    public sourceTypes = sourceTypes;\n\n    public connectionTables: ConnectionTables[] = [];\n    public datalinks: DexihDatalink[] = [];\n\n    public isVersioned = false;\n\n    constructor(\n        private hubService: HubService,\n        public datalinkEditService: DatalinkEditService) {\n        }\n\n    ngOnInit() {\n        this.errors = this.datalinkEditService.hubFormsService.getFormErrorMessages(this.datalinkTableForm, true);\n\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.hubCache = result[0];\n\n                this.subscribeDatalinkChanges();\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.datalinkTableForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.datalinks = this.hubCache.hub.dexihDatalinks;\n                    this.updateIsVersioned();\n                }\n            });\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Selected datalink table');\n        }\n    }\n\n    updateIsVersioned() {\n        if (this.datalinkTableForm.controls.sourceType.value === eSourceType.Table) {\n            var table = this.hubCache.getTable(this.datalinkTableForm.controls.sourceTableKey.value);\n            if (table) {\n                this.isVersioned = table.isVersioned\n            }\n        }\n    }\n\n    subscribeDatalinkChanges() {\n        if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n        this._datalinkTableSubscription = merge(\n            this.datalinkTableForm.controls.sourceType.valueChanges,\n            this.datalinkTableForm.controls.sourceTableKey.valueChanges,\n            this.datalinkTableForm.controls.sourceDatalinkKey.valueChanges,\n        ).subscribe(() => {\n            this.errors = this.datalinkEditService.hubFormsService.getFormErrorMessages(this.datalinkTableForm, true);\n            this.refreshColumns();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n    }\n\n    refreshColumns() {\n        try {\n            // temporarily unsubscribe to avoid a recursive loop.\n            if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n\n            let datalinkTable = <DexihDatalinkTable>this.datalinkTableForm.value;\n            datalinkTable.sourceType = this.datalinkTableForm.controls.sourceType.value;\n            datalinkTable.sourceTableKey = this.datalinkTableForm.controls.sourceTableKey.value;\n            datalinkTable.sourceDatalinkKey = this.datalinkTableForm.controls.sourceDatalinkKey.value;\n\n            this.datalinkEditService.reBuildDatalinkTable(datalinkTable);\n\n            this.datalinkEditService.fixMappings(this.datalinkEditService.hubFormsService.currentForm);\n\n            this.datalinkTableForm.controls.name.setValue(datalinkTable.name);\n            this.datalinkTableForm.controls.rowsEndAt.setValue(datalinkTable.rowsEndAt);\n            this.datalinkTableForm.controls.rowsStartAt.setValue(datalinkTable.rowsStartAt);\n            this.datalinkTableForm.controls.rowsIncrement.setValue(datalinkTable.rowsIncrement);\n            this.datalinkTableForm.controls.sourceType.setValue(datalinkTable.sourceType);\n\n            this.updateIsVersioned();\n\n            let tableColumnsForm = <FormArray>this.datalinkTableForm.controls.dexihDatalinkColumns;\n            while (tableColumnsForm.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n\n            datalinkTable.dexihDatalinkColumns.sort((a, b) => a.position - b.position).filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.datalinkEditService.hubFormsService.datalinkTableColumn(tableColumnsForm.value, column));\n            });\n\n            this.subscribeDatalinkChanges();\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Refresh datalink columns');\n        }\n    }\n\n\n}\n","<dexih-widget-section title='Source Type' [showExpandButton]=\"true\">\n    <ng-template #header>\n        <dexih-button-edit class=\"mr-1\"\n            *ngIf=\"datalinkForm.controls.sourceDatalinkTable.value.sourceType == eSourceType.Table && datalinkForm.controls.sourceDatalinkTable.value.sourceTableKey\"\n            [routerLink]=\"['table-edit', datalinkForm.controls.sourceDatalinkTable.value.sourceTableKey]\"> Table\n        </dexih-button-edit>\n        <dexih-button-edit class=\"mr-1\"\n            *ngIf=\"datalinkForm.controls.sourceDatalinkTable.value.sourceType == eSourceType.Datalink && datalinkForm.controls.sourceDatalinkTable.value.sourceDatalinkKey\"\n            [routerLink]=\"['../../edit', datalinkForm.controls.sourceDatalinkTable.value.sourceDatalinkKey]\"> Datalink\n        </dexih-button-edit>\n        <dexih-button-preview (click)=\"previewData()\"></dexih-button-preview>\n    </ng-template>\n\n    <datalink-table *ngIf=\"datalinkForm\" [datalinkTableForm]=\"datalinkForm.controls.sourceDatalinkTable\">\n    </datalink-table>\n</dexih-widget-section>\n\n<dexih-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        [columns]=\"columns\" [dataObservable]=\"tableData\" (rowClick)=\"editColumn($event)\">\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <dexih-button-new (click)=\"newColumn()\" title=\"Create a new column\"></dexih-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n            <dexih-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\"></dexih-button-edit>\n        </ng-template>\n\n    </dexih-table>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache, sourceTypes, eMappingStatus, impactMappingStatuses } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { Observable, Subscription, BehaviorSubject , combineLatest} from 'rxjs';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DexihDatalinkTable, eSourceType, DexihDatalinkColumn, eSecurityFlag, eDeltaType } from '../../../../shared/shared.models';\nimport { AuthService } from '../../../../+auth/auth.service';\n\n@Component({\n    selector: 'dexih-datalink-edit-source-table-form',\n    templateUrl: './datalink-edit-source-table.component.html'\n})\nexport class DatalinkEditSourceTableComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _sourceSubscription: Subscription;\n\n    public sourceTables: DexihDatalinkTable[];\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eMappingStatus = eMappingStatus;\n\n    public eSourceType = eSourceType;\n    public sourceTypes = sourceTypes;\n\n    columns = [\n        { name: 'position', title: '#', format: '' },\n        { name: 'columnStatus', title: 'Impact', format: 'Html' },\n        { name: 'columnGroup', title: 'Group', format: '' },\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'logicalName', title: 'Logical', format: '' },\n        { name: 'dataType', title: 'Data Type', format: '' },\n        { name: 'deltaType', title: 'Delta Type', format: 'Enum', enum: eDeltaType },\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean' },\n        { name: 'isIncrementalUpdate', title: 'Incremental?', format: 'Boolean' },\n        { name: 'securityFlag', title: 'Security Flag', format: 'Enum', enum: eSecurityFlag },\n        { name: 'isInput', title: 'Input?', format: 'Boolean' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                if (this.datalinkForm) {\n                    this.updateData();\n\n                    if (this._sourceSubscription) { this._sourceSubscription.unsubscribe(); }\n                    this._sourceSubscription = this.datalinkForm.controls.sourceDatalinkTable.valueChanges.subscribe(() => {\n                        this.updateData();\n                    });\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Source Table');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._sourceSubscription) { this._sourceSubscription.unsubscribe(); }\n    }\n\n    previewData() {\n        let sourceDatalinkTable = <DexihDatalinkTable> this.datalinkForm.controls.sourceDatalinkTable.value;\n\n        switch (sourceDatalinkTable.sourceType) {\n            case eSourceType.Table:\n                let sourceTableKey = sourceDatalinkTable.sourceTableKey;\n                this.router.navigate(['preview-table-data', 'table', sourceTableKey], { relativeTo: this.route });\n                break;\n            case eSourceType.Datalink:\n                let datalinkKey = sourceDatalinkTable.sourceDatalinkKey;\n                this.router.navigate(['preview-table-data', 'datalink', datalinkKey], { relativeTo: this.route });\n                break;\n            default:\n                this.authService.informationDialog('Cannot Preview', 'Previews are only available for tables and datalinks.');\n                break;\n        }\n    }\n\n    columnStatus(column: DexihDatalinkColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.SourceTable,\n            eObjectUse.Source,\n            this.datalinkForm.value,\n            column,\n            null,\n            null,\n            null,\n            eMappingStatus.PassThroughMap,\n            this.hubCache\n        );\n        const lineage = columnUsage.createDatalinkImpact(true);\n        const mappingStatus = impactMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `${mappingStatus.name}<i class=\"float-right ${mappingStatus.statusClass}\"></i>`\n        }\n    }\n\n    updateData() {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let columnData = [];\n\n        let columnsArray = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        columnsArray.controls.filter(c => c.value.isValid)\n            .sort((a, b) => a.value.position - b.value.position)\n            .forEach(columnForm => {\n                let column = <DexihDatalinkColumn> columnForm.value;\n                let newColumn = {\n                    key: column.key,\n                    position: column.position,\n                    columnStatus: this.columnStatus(column),\n                    columnGroup: column.columnGroup,\n                    name: column.name,\n                    dataType: this.hubCache.dataTypeToString(column),\n                    deltaType: column.deltaType,\n                    allowDbNull: column.allowDbNull,\n                    logicalName: column.logicalName,\n                    isIncrementalUpdate: column.isIncrementalUpdate,\n                    securityFlag: column.securityFlag,\n                    isInput: column.isInput\n                };\n\n            columnData.push(newColumn);\n        });\n\n        this._tableData.next(columnData);\n    }\n\n    deleteSelected(columns: Array<DexihDatalinkColumn>) {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let columnsArray = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        columns.forEach(column => {\n            let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n            columnsArray.removeAt(index);\n        });\n\n        this.updateData();\n    }\n\n    newColumn() {\n        this.router.navigate(['newcolumn'], { relativeTo: this.route.parent });\n    }\n\n    editColumn(column: DexihDatalinkColumn) {\n        this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n    }\n\n    columnSortChange(items: Array<DexihDatalinkColumn>) {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let existingItems = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        let position = 1;\n        items.forEach(item => {\n            let column = <FormGroup>existingItems.controls.find(c => c.value.key === item.key);\n            if (column) {\n                column.controls.position.setValue(position++);\n            }\n        });\n\n        this.updateData();\n    }\n}\n","\n<dexih-widget-section title=\"Target Load Rules\" [showExpandButton]=\"true\">\n    <form *ngIf=\"datalinkForm\" [formGroup]=\"datalinkForm\">\n        <fieldset>\n            <form-checkbox label=\"Datalink is a query and does not populate target tables.\"\n                formControlName=\"isQuery\" [errors]=\"editDatalinkService.hubFormsService.formErrors.isQuery\">\n            </form-checkbox>\n\n            <span *ngIf=\"!datalinkForm?.controls.isQuery.value\">\n                <section>\n                    <form-select label=\"Load Strategy\" formControlName=\"loadStrategy\" [items]=\"loadStrategies\" itemKey=\"key\"\n                        itemName=\"description\" iconClass=\"fa fa-database\" note='Specify processing method for target table(s).'\n                        [errors]=\"editDatalinkService.hubFormsService.formErrors.loadStrategy\">\n                    </form-select>\n                </section>\n                    <section>\n                    <form-select label=\"Update Strategy\" formControlName=\"updateStrategy\" [items]=\"updateStrategies\"\n                        itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-database\" note='Specify how records should be inserted/updated in the target table.'\n                        [errors]=\"editDatalinkService.hubFormsService.formErrors.updateStrategy\">\n                    </form-select>\n                </section>\n\n                <section>\n                    <form-select label=\"Audit Connection\" formControlName=\"auditConnectionKey\" [items]=\"this.managedConnections\"\n                        itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [errors]=\"editDatalinkService.hubFormsService.formErrors.auditConnectionKey\"\n                        note='Specify the connection where audit data (such as job results) should be written to.'>\n                        <connection-edit-button [key]=\"datalinkForm.controls.auditConnectionKey.value\"></connection-edit-button>\n                    </form-select>\n                </section>\n\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Maximum Rows Per Commit\" type=\"number\" formControlName=\"rowsPerCommit\"\n                            placeholder=\"Enter maximum rows per commit\" iconClass=\"fa fa-list\" [errors]=\"editDatalinkService.hubFormsService.formErrors.rowsPerCommit\">\n                        </form-input>\n                    </section>\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Maximum Rows Per Progress Update\" type=\"number\" formControlName=\"rowsPerProgress\"\n                            placeholder=\"Enter maximum rows per progress update\" iconClass=\"fa fa-list\" [errors]=\"editDatalinkService.hubFormsService.formErrors.rowsPerProgress\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <div class=\"form-row mb-2\">\n                    <form-checkbox label=\"Add a default row to the target table.  Edit the 'Default Value' of the target columns determine the value to populate.\"\n                        formControlName=\"addDefaultRow\" [errors]=\"editDatalinkService.hubFormsService.formErrors.addDefaultRow\">\n                    </form-checkbox>\n                </div>\n            </span>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n\n<dexih-widget-section title=\"Tables\" [showExpandButton]=\"true\" [padding]=\"false\" *ngIf=\"!datalinkForm?.controls.isQuery.value\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" [enableSort]=\"false\"\n        [enableFilter]=\"false\" (onSortChanged)=\"targetSortChange($event)\" [columns]=\"targetTableColumns\" [data]=\"targets\"\n        (rowClick)=\"editTable($event)\">\n\n        <ng-template #actions let-items=\"items\">\n            <dexih-button-new class=\"mr-1\" (click)=\"addTable()\"></dexih-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n            <dexih-button-edit class=\"mr-1\" (click)=\"editTable(item)\"></dexih-button-edit>\n        </ng-template>\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete class=\"mr-1\" (click)=\"deleteTables(items)\"></dexih-button-delete>\n        </ng-template>\n\n    </dexih-table>\n</dexih-widget-section>\n\n<router-outlet></router-outlet>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { HubCache, eMappingStatus, updateStrategies, loadStrategies, ConnectionTables } from '../../../hub.models';\nimport { eDeltaType, eUpdateStrategy, eTransformWriterMethod,\n    DexihConnection, DexihDatalinkTarget } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-target-form',\n    templateUrl: './datalink-edit-target.component.html'\n})\nexport class DatalinkEditTargetComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n    private _loadStrategySubscription: Subscription;\n\n    public eMappingStatus = eMappingStatus;\n    public eDeltaType = eDeltaType;\n\n    public tableFormService: HubFormsService;\n\n    public eUpdateStrategy = eUpdateStrategy;\n    public updateStrategies = updateStrategies;\n\n    public eTransformWriterMethod = eTransformWriterMethod;\n    public loadStrategies = loadStrategies;\n\n    public managedConnections: DexihConnection[];\n    public connectionTables: ConnectionTables[];\n\n    public showTableProperties = false;\n\n    public targets: DexihDatalinkTarget[] = [];\n\n    public logger = new LogFactory('datalink-edit-target-table');\n\n    public targetTableColumns = [\n        { name: 'table.name', title: 'Name', format: '' },\n        { name: 'table.logicalName', title: 'Logical', format: '' },\n        { name: 'nodeDatalinkColumn.logicalName', title: 'Node', format: ''}\n    ];\n\n    constructor(\n        private hubService: HubService,\n        authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        fb: FormBuilder) {\n\n        this.tableFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `ngOnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.managedConnections = this.hubCache.getManagedConnections();\n                    this.logger.LogC(() => `ngOnInit - completed`, eLogLevel.Trace);\n                }\n\n                this.updateTargets();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Target Table');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._loadStrategySubscription) { this._loadStrategySubscription.unsubscribe(); }\n    }\n\n    private updateTargets() {\n        this.targets = this.datalinkForm.controls.dexihDatalinkTargets.value.sort((a, b) => a.position - b.position);\n    }\n\n    editTable(target: DexihDatalinkTarget) {\n        this.router.navigate(['table-edit', target.key], { relativeTo: this.route });\n    }\n\n    addTable() {\n        this.router.navigate(['table-new'], { relativeTo: this.route });\n    }\n\n    deleteTables(targets: DexihDatalinkTarget[]) {\n        targets.forEach(target => {\n            this.editDatalinkService.deleteDatalinkTarget(this.datalinkForm, target.key);\n            this.updateTargets();\n        });\n    }\n\n    targetSortChange(targets: DexihDatalinkTarget[]) {\n        let position = 1;\n        targets.forEach(target => {\n            target.position = position++;\n        });\n        this.updateTargets();\n    }\n\n}\n","<div class=\"list-group-item p-0 rounded-0\" dragZone zone=\"input-column\" [data]=\"column\" zone=\"input-column\" >\n    <div class=\"d-flex flex-row\">\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n\n        <a class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\" style=\"overflow:hidden; text-overflow :ellipsis;\" \n         [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\" >\n            {{column.logicalName}}\n        </a>\n        <i class=\"input-group-text rounded-0  border-0 border-l1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <input-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></input-column>\n</div>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus,\n    MappingStatusInfo, impactMappingStatuses, lineageMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, InputOutputColumns, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, eTypeCode } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'input-column',\n    templateUrl: './input-column.component.html'\n})\nexport class InputColumnComponent implements OnInit, OnDestroy {\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n    eTypeCode = eTypeCode;\n\n    mappingStatusInfoImpact: MappingStatusInfo;\n    mappingStatusInfoLineage: MappingStatusInfo;\n\n    childColumns: DexihDatalinkColumn[];\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.datalinkForm = result[1];\n\n                let datalinkTransform = this.datalinkTransformForm.value;\n\n                let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n                    eDatalinkObjectType.Transform,\n                    eObjectUse.Target,\n                    this.datalinkForm.value,\n                    this.column,\n                    null,\n                    datalinkTransform,\n                    null,\n                    eMappingStatus.NotMapped,\n                    this.hubCache\n                );\n\n                let mappingStatusImpact = columnUsage.createDatalinkImpact(false);\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === mappingStatusImpact);\n\n                let mappingStatusLineage = columnUsage.createDatalinkLineage(true);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === mappingStatusLineage);\n\n                let io = new InputOutputColumns();\n                if (io.findColumn(this.column,\n                    datalinkTransform.nodeDatalinkColumn ? datalinkTransform.nodeDatalinkColumn.key : null)) {\n                    this.childColumns = this.column.childColumns;\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Input Column');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n}\n","<div *ngIf=\"datalinkTransformForm\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <span *ngFor=\"let table of inputTables; let tableIndex = index\">\n        <dexih-widget-section *ngIf=\"table.dexihDatalinkColumns.length > 0\" [title]=\"table.name\" [padding]=\"false\" [showExpandButton]=\"true\">\n            <div class=\"list-group\">\n                <input-column\n                    *ngFor=\"let column of table.dexihDatalinkColumns | fieldSort : 'position' | isValidFilter \"\n                    [datalinkTransformForm]='datalinkTransformForm' [column]='column'>\n                </input-column>\n            </div>\n        </dexih-widget-section>\n    </span>\n    <dexih-widget-section *ngFor=\"let columnGroup of columnGroups\" [title]=\"columnGroup.group\" [padding]=\"false\"  [showExpandButton]=\"true\" >\n        <div *ngFor=\"let column of columnGroup.columns | fieldSort : 'position' | isValidFilter; let i = index\">\n            <input-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'>\n            </input-column>\n        </div>\n    </dexih-widget-section>\n</div>\n","import { Component, Input, OnInit, OnDestroy, OnChanges } from '@angular/core';\nimport { Subscription} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\n@Component({\n\n    selector: 'input-columns',\n    templateUrl: './input-columns.component.html'\n})\nexport class InputColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n\n    private _inputColumnsSubscribe: Subscription;\n    columns: Array<DexihDatalinkColumn> = [];\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    constructor(private editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        if (this._inputColumnsSubscribe) { this._inputColumnsSubscribe.unsubscribe(); }\n\n        this.columnGroups = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n\n        this._inputColumnsSubscribe =  this.datalinkTransformForm.controls.runTime.valueChanges.subscribe(() => {\n            this.columnGroups = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._inputColumnsSubscribe) { this._inputColumnsSubscribe.unsubscribe(); }\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + column.dataType\" (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\"\n    (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<!-- <div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <output-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></output-column>\n</div> -->","import { Component, Input, Output, OnInit, OnChanges, EventEmitter, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses, impactMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DexihDatalinkColumn, DexihTable, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n\n    selector: 'output-column',\n    templateUrl: './output-column.component.html'\n})\nexport class OutputColumnComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputOutputDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>();\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n\n    public mappingStatusInfoLineage: MappingStatusInfo;\n    public mappingStatusInfoImpact: MappingStatusInfo;\n\n    public mappingStatusLineage: eMappingStatus;\n\n    childColumns: DexihDatalinkColumn[];\n\n    public logger = new LogFactory('output-column.component');\n    public logCount = 0;\n\n    public eTypeCode = eTypeCode;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n              this.hubCache = result[0];\n              this.datalinkForm = result[1];\n\n              this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n\n            this.childColumns = this.column.childColumns;\n\n              this.refreshStatus();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Output Column');\n        }\n    }\n\n    ngOnChanges() {\n        this.refreshStatus();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    refreshStatus() {\n        if (this.datalinkForm) {\n            let columnUsage = new ColumnUsageNode(\n                eDatalinkObjectType.Transform,\n                eObjectUse.Target,\n                this.datalinkForm.value,\n                this.column,\n                null,\n                this.datalinkTransformForm.value,\n                null,\n                eMappingStatus.NotMapped,\n                this.hubCache\n                );\n\n                this.mappingStatusLineage = columnUsage.createDatalinkLineage(false);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === this.mappingStatusLineage);\n\n                let mappingStatusImpact = columnUsage.createDatalinkImpact(true);\n\n                if (this.mappingStatusLineage === eMappingStatus.NotMapped && mappingStatusImpact !== eMappingStatus.AutoGenerate) {\n                    mappingStatusImpact = eMappingStatus.NotMapped;\n                }\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === mappingStatusImpact);\n        }\n    }\n\n\n  editColumn() {\n      if (this.column.key && (this.mappingStatusLineage === eMappingStatus.Mapped\n        || this.mappingStatusLineage === eMappingStatus.MappedToNothing)) {\n        this.router.navigate(['column', this.column.key], { relativeTo: this.route.parent });\n      } else {\n          this.authService.informationDialog('Can not edit column',\n          // tslint:disable-next-line:max-line-length\n          'This column is not created by the current transform (i.e. a pass-through or target column).  To edit a column first create a mapping.')\n      }\n    }\n}\n","<div *ngIf=\"datalinkTransformForm\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <li *ngIf=\"allowMappingOutputs\" class=\"list-group-item p-1 dexih-overflow b-0\" style=\"height: 40px;\" title=\"drop to create new mapping...\" dropZone (dropData)=\"newOutputDrop($event)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\">\n        &nbsp;(Drop&nbsp;Column)\n    </li>\n    <dexih-widget-section *ngFor=\"let columnGroup of columnGroups\" [title]=\"columnGroup.group\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <div *ngFor=\"let column of columnGroup.columns | fieldSort : 'position' | isValidFilter; let i = index\" dropZone (dropData)=\"newInputOutputDrop($event, column)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\" >\n            <output-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'></output-column>\n        </div>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'output-columns',\n    templateUrl: './output-columns.component.html'\n})\nexport class OutputColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public allowMappingOutputs = true;\n\n    @Output() public inputOutputDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>();\n\n    private _outputColumnsSubscribe: Subscription;\n    columns: Array<DexihDatalinkColumn> = [];\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    constructor(\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        if (this._outputColumnsSubscribe) { this._outputColumnsSubscribe.unsubscribe(); }\n        this.refreshColumns(this.datalinkTransformForm.controls.runTime.value.transformColumns);\n        this._outputColumnsSubscribe = this.datalinkTransformForm.controls.runTime.valueChanges.subscribe(() => {\n            this.refreshColumns(this.datalinkTransformForm.controls.runTime.value.transformColumns);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._outputColumnsSubscribe) { this._outputColumnsSubscribe.unsubscribe(); }\n    }\n\n    refreshColumns(columns: DexihDatalinkColumn[]) {\n        let previousGroup: string = null;\n\n        let columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n        let cols: Array<DexihDatalinkColumn> = null;\n\n        columns\n            .filter(c => c.isValid)\n            .sort((a, b) => a.position - b.position)\n            .forEach(column => {\n            let group = column.columnGroup ? column.columnGroup : '(un-grouped)';\n            if (group !== previousGroup) {\n                if (cols) {\n                    columnGroups.push({group: previousGroup, columns: cols});\n                }\n                previousGroup = group;\n                cols = [];\n            }\n            cols.push(column);\n        });\n\n        if (cols && cols.length > 0) {\n            columnGroups.push({group: previousGroup, columns: cols});\n        }\n\n        this.columnGroups = columnGroups;\n    }\n\n    // triggered when a source column is dropped onto the output column\n    newOutputDrop(inputColumn: DexihDatalinkColumn) {\n        let outputColumn = this.columns.find(c => c.name === inputColumn.name);\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n\n    newInputOutputDrop(inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn) {\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\" (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n    </div>\n</div>\n<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\"\n    (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n    </div>\n</div>\n<!-- <div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <output-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></output-column>\n</div> -->","import { Component, Input, Output, OnInit, OnChanges, EventEmitter, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DexihTableColumn, DexihTable, DexihDatalinkColumn, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n\n    selector: 'target-column',\n    templateUrl: './target-column.component.html'\n})\nexport class TargetColumnComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public column: DexihTableColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputOutputDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>();\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n\n    eTypeCode = eTypeCode;\n\n    public mappingStatusInfoLineage: MappingStatusInfo;\n    public mappingStatusInfoImpact: MappingStatusInfo;\n\n    public mappingStatusLineage: eMappingStatus;\n\n    childColumns: DexihTableColumn[];\n\n    public logger = new LogFactory('output-column.component');\n    public logCount = 0;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n              this.hubCache = result[0];\n              this.datalinkForm = result[1];\n\n              this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n\n            this.childColumns = this.column.childColumns;\n\n              this.refreshStatus();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Output Column');\n        }\n    }\n\n    ngOnChanges() {\n        this.refreshStatus();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    refreshStatus() {\n        if (this.datalinkForm) {\n            let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, null, this.column, null, null, eMappingStatus.NotMapped, this.hubCache);\n            this.mappingStatusLineage = columnUsage.createDatalinkLineage(true);\n            this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === this.mappingStatusLineage);\n        }\n    }\n\n\n  editColumn() {\n      if (this.column.key && (this.mappingStatusLineage === eMappingStatus.Mapped\n        || this.mappingStatusLineage === eMappingStatus.MappedToNothing)) {\n        this.router.navigate(['column', this.column.key], { relativeTo: this.route.parent });\n      } else {\n          this.authService.informationDialog('Can not edit column',\n          // tslint:disable-next-line:max-line-length\n          'This column is not created by the current transform (i.e. a pass-through or target column).  To edit a column first create a mapping.')\n      }\n    }\n}\n","<div *ngIf=\"targets\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <dexih-widget-section *ngFor=\"let target of targets\" [title]=\"'Target (' + target.table.name + ')'\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <div *ngFor=\"let column of target.table.dexihTableColumns | fieldSort : 'position' | isValidFilter; let i = index\" dropZone (dropData)=\"newInputOutputDrop($event, column)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\" >\n            <target-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'></target-column>\n        </div>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { DexihTable, DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'target-columns',\n    templateUrl: './target-columns.component.html'\n})\nexport class TargetColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public targets: DexihTable[];\n    @Input() public allowMappingOutputs = true;\n\n    @Output() public inputOutputDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>();\n\n    private _outputColumnsSubscribe: Subscription;\n\n    constructor(\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    ngOnDestroy() {\n    }\n\n    newInputOutputDrop(inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn) {\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\">\n    <div class=\"d-flex flex-row\">\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n\n        <a *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Joined\" class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\"\n            style=\"overflow:hidden; text-overflow :ellipsis;\" \n            [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\">\n            {{column.logicalName}}\n        </a>\n        <a *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Joined\" class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\"\n            style=\"overflow:hidden; text-overflow :ellipsis;\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\">\n            {{column.logicalName}}\n        </a>\n        <i class=\"input-group-text rounded-0  border-0 border-l1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>","import { Component, Input, Output, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses, impactMappingStatuses } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, DexihTable, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n    selector: 'join-column',\n    templateUrl: './join-column.component.html'\n})\nexport class JoinColumnComponent implements OnInit, OnDestroy {\n\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public datalinkForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputJoinDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn}>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    eMappingStatus = eMappingStatus;\n    eTypeCode = eTypeCode;\n\n    columnLineageStatusIcon: string;\n    columnLineageStatusColor: string;\n\n    public mappingStatusInfoImpact: MappingStatusInfo;\n    public mappingStatusInfoLineage: MappingStatusInfo;\n\n    constructor(private hubService: HubService) {\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.isLoaded()) {\n                this.hubCache = hubCache;\n\n                let columnUsage = new ColumnUsageNode(\n                    eDatalinkObjectType.Transform,\n                    eObjectUse.Target,\n                    this.datalinkForm.value,\n                    this.column,\n                    null,\n                    this.datalinkTransformForm.value,\n                    null,\n                    eMappingStatus.NotMapped,\n                    this.hubCache\n                    );\n                let lineageMappingStatus = columnUsage.createDatalinkLineage(false);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === lineageMappingStatus);\n\n                let impactMappingStatus = columnUsage.createDatalinkImpact(false);\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === impactMappingStatus);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n}\n","<div *ngIf=\"joinColumns\">\n    <dexih-widget-section [title]=\"joinTable?.name + '(' + eTransformType[this.datalinkTransformForm.value.transformType] + ')'\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <join-column *ngFor=\"let column of joinColumns | fieldSort : 'position' | isValidFilter\"\n            [datalinkForm]='datalinkForm' [datalinkTransformForm]='datalinkTransformForm' [column]='column' dropZone\n            (dropData)=\"newInputJoinDrop($event, column)\" zone=\"input-column\" dropAllowedClass=\"drop-zone-green\">\n        </join-column>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, eTransformType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'join-columns',\n    templateUrl: './join-columns.component.html'\n})\nexport class JoinColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n\n    @Output() public inputJoinDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn }>();\n\n    private _subscription: Subscription;\n    private _changesSubscription: Subscription;\n\n    public joinTable;\n\n    public eTransformType = eTransformType;\n\n    public datalinkForm: FormGroup;\n\n    public joinColumns: Array<DexihDatalinkColumn>;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n    ) {\n    }\n\n    ngOnInit() {\n        try {\n\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.datalinkForm = result[1];\n\n                if (this.datalinkForm) {\n                    this.updateTableData();\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n        }\n    }\n\n    ngOnChanges() {\n        this.updateTableData();\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n        this._changesSubscription = this.datalinkTransformForm.controls.joinDatalinkTable.valueChanges.subscribe(() => {\n            this.updateTableData();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    }\n\n    updateTableData() {\n        if (this.datalinkTransformForm && this.datalinkTransformForm.controls.joinDatalinkTable.value) {\n            this.joinTable = this.datalinkTransformForm.controls.joinDatalinkTable.value;\n            if (this.joinTable) {\n                this.joinColumns = new Array<DexihDatalinkColumn>();\n                this.joinTable.dexihDatalinkColumns.forEach(column => {\n                    this.joinColumns.push(column)\n                });\n            } else {\n                this.joinColumns = null;\n            }\n        } else {\n            this.joinColumns = null;\n        }\n    }\n\n    newInputJoinDrop(inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn) {\n        this.inputJoinDrop.emit({inputColumn, joinColumn});\n    }\n}\n","<div class=\"container\">\n    <div *ngIf=\"!outputParameters\" class=\"row justify-content-start\">\n        <div class=\"col-auto\">\n            <h5>{{label}}</h5>\n            <div *ngIf=\"error\" class=\"text-danger\">\n                <i class=\"fa fa-exclamation-circle text-danger\" ></i>\n                {{error}}\n            </div>\n        </div>\n        <div *ngIf=\"source\" class=\"col-auto\"><i *ngIf=\"!source.valid\"\n                class=\"fa fa-exclamation-circle text-danger\" [title]=\"source.error\"></i>{{source.text}}</div>\n        <div *ngIf=\"target\" class=\"col-auto\">\n            <i *ngIf=\"source && !compare\" class=\"fa fa-arrow-right mr-2\"></i>\n            <i *ngIf=\"!target.valid\" class=\"fa fa-exclamation-circle text-danger\" [title]=\"target.error\"></i>\n            <span class=\"mr-2\" *ngIf=\"compare\">{{compare}}</span>\n            {{target.text}}\n        </div>\n    </div>\n\n    <ng-template [ngIf]=\"outputParameters\">\n        <div class=\"row\">\n            <div class=\"col\">\n                <h5>{{label}}</h5>\n            </div>\n        </div>\n\n        <div *ngIf=\"source\"><i *ngIf=\"!source.valid\"\n            class=\"fa fa-exclamation-circle text-danger\" [title]=\"source.error\"></i>Source = {{source.text}}\n        </div>\n\n        <ng-template [ngIf]=\"inputParameters?.length > 0\">\n            <div class=\"row pt-2\">\n                <div class=\"col\">\n                    <h5>Inputs</h5>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Parameter</div>\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Column / Value</div>\n            </div>\n            <ng-template ngFor let-parameter [ngForOf]=\"inputParameters\">\n                <div *ngFor=\"let value of parameter.values; let i = index;\" class=\"row\">\n                    <div class=\"col border bg-secondary text-white text-truncate\">\n                        <div *ngIf=\"i == 0\">{{ parameter.name}}</div>\n                    </div>\n                    <div class=\"col border border text-white bg-secondary text-truncate\" [title]=\"value.error\">\n                        <i *ngIf=\"!value.valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{(parameter.values.length > 1 ? '[' + i + '] ' : '') + value.text}}\n                    </div>\n                </div>\n            </ng-template>\n        </ng-template>\n\n        <ng-template [ngIf]=\"mapParameters\">\n            <div *ngFor=\"let mapParameter of mapParameters\">\n                <div class=\"row pt-2\">\n                    <div class=\"col text-truncate\">\n                        <h5>{{mapParameter.name}}</h5>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div *ngFor=\"let parameter of mapParameter.parameters\"\n                        class=\"col border bg-primary text-white font-weight-bold text-truncate\">{{parameter.name}}</div>\n                </div>\n\n                <div *ngFor=\"let pValues of mapParameter.parameters[0].values; let i = index;\" class=\"row\">\n                    <div *ngFor=\"let parameter of mapParameter.parameters\"\n                        class=\"col border bg-secondary text-white text-truncate\" [title]=\"parameter.values[i].error\">\n                        <i *ngIf=\"!parameter.values[i].valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{parameter.values[i].text}}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template [ngIf]=\"outputParameters?.length > 0\">\n            <div class=\"row  pt-2\">\n                <div class=\"col\">\n                    <h5>Outputs</h5>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Parameter</div>\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Column / Value</div>\n            </div>\n\n            <ng-template ngFor let-parameter [ngForOf]=\"outputParameters\">\n                <div *ngFor=\"let value of parameter.values; let i = index;\" class=\"row\">\n                    <div class=\"col border bg-secondary text-white text-truncate\">\n                        <div *ngIf=\"i == 0\">{{parameter.name}}</div>\n                    </div>\n                    <div class=\"col border border bg-secondary text-white text-truncate\" [title]=\"value.error\">\n                        <i *ngIf=\"!value.valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{(parameter.values.length > 1 ? '[' + i + '] ' : '') + value.text}}\n                    </div>\n                </div>\n            </ng-template>\n        </ng-template>\n    </ng-template>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport {HubCache, transformItemTypes } from '../../../hub.models';\nimport { HubService } from '../../..';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { compare } from '../../../hub.query.models';\nimport { DexihDatalinkTransform, DexihDatalinkTransformItem, eTransformItemType, eCompare,\n    DexihDatalinkColumn, FunctionReference, eParameterDirection, eAggregate, eSortDirection, eTypeCode } from '../../../../shared/shared.models';\n\nexport class ValidValue {\n    public valid: boolean;\n    public text: string;\n    public error: string;\n}\n\nexport class ValidParameter {\n    public values: ValidValue[];\n    public name: string;\n}\n\nexport class ValidMapping {\n    public name: string;\n    public parameters: ValidParameter[];\n}\n\n@Component({\n    selector: 'mapping-item',\n    templateUrl: 'mapping-item.component.html'\n})\n\nexport class MappingItemComponent implements OnInit {\n    @Input() transform: DexihDatalinkTransform;\n    @Input() transformItem: DexihDatalinkTransformItem;\n    @Input() allowCondition: boolean;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public label: string;\n    public error: string;\n\n    public source: ValidValue;\n    public target: ValidValue;\n    public compare: string;\n    public inputParameters: ValidParameter[];\n    public outputParameters: ValidParameter[];\n\n    public mapParameters: ValidMapping[];\n\n    constructor(\n        private hubService: HubService) { }\n\n    ngOnInit() {\n        try {\n\n            if (this._subscription) { this._subscription.unsubscribe(); }\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.updateMapping();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings');\n        }\n    }\n\n    async updateMapping() {\n        let item = this.transformItem;\n        let itemType = transformItemTypes.find(c => c.key === item.transformItemType);\n\n        switch (item.transformItemType) {\n            case eTransformItemType.BuiltInFunction:\n                if (item.functionClassName) {\n                    let func = await this.hubService.GetFunctionReference(item);\n                    if (func) {\n                        this.label = func.name;\n                        this.addBuiltInFunctionParameters(func);\n                    } else {\n                        this.error = `Error, function ${item.functionClassName}.${item.functionMethodName} not found.`;\n                    }\n                } else if (item.customFunctionKey) {\n                    let func = this.hubCache.hub.dexihCustomFunctions.find(c => c.key === item.customFunctionKey);\n                    if (func) {\n                        this.label = func.name;\n                        this.addCustomFunctionParameters();\n                    } else {\n                        this.error = 'Error, function not found.';\n                    }\n                } else {\n                    this.error = 'Error, function not found';\n                }\n                break;\n            case eTransformItemType.CustomFunction:\n                this.addCustomFunctionParameters();\n                break;\n            case eTransformItemType.AggregatePair:\n                this.label = eAggregate[item.aggregate];\n                break;\n            case eTransformItemType.Sort:\n                this.label = eSortDirection[item.sortDirection];\n                break;\n            case eTransformItemType.UnGroup:\n                this.label = 'UnGroup'\n                this.addUnGroupParameters();\n                break;\n            default:\n                this.label = itemType.name;\n                break;\n        }\n\n        if (itemType.useSource) { this.source = this.columnOrValue(null, item.sourceDatalinkColumn, item.sourceValue); }\n        if (itemType.useTarget) { this.target = this.describeDatalinkColumn(null, item.targetDatalinkColumn); }\n        if (itemType.useJoin) { this.target = this.describeDatalinkColumn(null, item.joinDatalinkColumn); }\n        if (itemType.useFilter) { this.target = this.columnOrValue(null, item.filterDatalinkColumn, item.filterValue)};\n\n        if (itemType.useFilter || itemType.useJoin) {\n            let filterCompare = item.filterCompare;\n            if (filterCompare === null) { filterCompare = eCompare.IsEqual };\n            this.compare = compare.find(c => c.key === filterCompare).name;\n        } else {\n            this.compare = null;\n        }\n    }\n\n    private columnOrValue(expectedDataType: eTypeCode, column: DexihDatalinkColumn, value: string): ValidValue {\n        if (column) {\n            return this.describeDatalinkColumn(expectedDataType, column);\n        } else {\n            return {text: this.describeStaticValue(value), valid: true, error: ''};\n        }\n    }\n\n    // concatenates the arrays together.\n    // node: .concat will append null arrays, where this ignores null arrays.\n    private concat<T>(...args: T[][]): T[] {\n        let array: T[] = [];\n        args.forEach(arg => {\n            if ( arg ) {\n                array = array.concat(arg);\n            }\n        });\n        return array;\n    }\n\n    private addBuiltInFunctionParameters(func: FunctionReference) {\n        let functionInputs = this.concat(func.inputParameters, func.resultInputParameters);\n        let functionOutputs = this.concat(func.outputParameters, func.returnParameters, func.resultOutputParameters,\n            func.resultReturnParameters);\n\n        let inputParams = this.transformItem.dexihFunctionParameters\n            .filter(c =>\n                c.direction === eParameterDirection.Input ||\n                c.direction === eParameterDirection.ResultInput ||\n                c.direction === eParameterDirection.Join);\n\n        this.inputParameters = functionInputs.filter(c => c && !c.linkedName).map<ValidParameter>(param => {\n            let p = inputParams.find(c => c.name === param.parameterName);\n            if (p) {\n                if (p.rank === 0) {\n                    let value = this.columnOrValue(p.dataType, p.datalinkColumn, p.value);\n                    return {name: this.describeParameterName(p), values: [value] };\n                } else {\n                    let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                        return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                    });\n                    return {name: this.describeParameterName(p), values: values};\n                }\n            } else {\n                return {name: this.describeParameterName(p), values: [{valid: false, error: 'Not Mapped', text: ''}]  };\n            }\n        });\n\n        let outputParams = this.transformItem.dexihFunctionParameters\n            .filter(\n                c => HubCache.parameterIsOutput(c));\n\n        this.outputParameters = functionOutputs.filter(c => c &&  !c.linkedName).map<ValidParameter>(param => {\n            let p = outputParams.find(c => c.name === param.parameterName);\n            if (p) {\n                if (this.allowCondition &&\n                    (p.direction === eParameterDirection.ReturnValue || p.direction === eParameterDirection.ResultReturnValue)) {\n                    return null;\n                }\n                if (p.rank === 0 || p.datalinkColumn !== null) {\n                    let value = this.describeDatalinkColumn(p.dataType, p.datalinkColumn);\n                    return {name: this.describeParameterName(p), values: [value]};\n                } else {\n                    let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                        return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                    });\n                    return {name: this.describeParameterName(p), values: values};\n                }\n            } else {\n                // return {name: param.name, values: [{valid: false, text: 'Not mapped'}]  };\n                return null;\n            }\n        }).filter(c => c !== null);\n\n        let linkedNames = Array.from(new Set(this.concat(functionInputs, functionOutputs).map(c => c &&  c.linkedName).filter(c => c)));\n        this.mapParameters = linkedNames.map(name => {\n            let parameters: ValidParameter[] = functionInputs.filter(c => c.linkedName === name).map(param => {\n                let p = inputParams.find(c => c.name === param.parameterName);\n                let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                    return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                });\n                return {name: this.describeParameterName(param), values: values};\n            });\n\n            let parameters2: ValidParameter[] = functionOutputs.filter(c => c.linkedName === name).map(param => {\n                let p = outputParams.find(c => c.name === param.parameterName);\n                let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                    return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                });\n                return {name: this.describeParameterName(param), values: values};\n            });\n\n            return {name: name, parameters: this.concat(parameters, parameters2)};\n        });\n    }\n\n    private addCustomFunctionParameters() {\n\n        let inputParams = this.transformItem.dexihFunctionParameters\n            .filter(c =>\n                c.direction === eParameterDirection.Input ||\n                c.direction === eParameterDirection.ResultInput ||\n                c.direction === eParameterDirection.Join);\n\n        this.inputParameters = inputParams.map<ValidParameter>(p => {\n            if (p.rank === 0) {\n                let value = this.columnOrValue(p.dataType, p.datalinkColumn, p.value);\n                return { name: this.describeParameterName(p), values: [value] };\n            } else {\n                let values = p.arrayParameters.sort((a, b) => a.position - b.position).map(ap => {\n                    return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                });\n                return { name: this.describeParameterName(p), values: values };\n            }\n        });\n\n        let outputParams = this.transformItem.dexihFunctionParameters\n            .filter(c => HubCache.parameterIsOutput(c));\n\n        this.outputParameters = outputParams.map<ValidParameter>(p => {\n            if (p.rank === 0) {\n                let value = this.describeDatalinkColumn(p.dataType, p.datalinkColumn);\n                return { name: this.describeParameterName(p), values: [value] };\n            } else {\n                let values = p.arrayParameters.sort((a, b) => a.position - b.position).map(ap => {\n                    return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                });\n                return { name: this.describeParameterName(p), values: values };\n            }\n        });\n    }\n\n    private addUnGroupParameters() {\n\n        let parameters = this.transformItem.dexihFunctionParameters;\n\n        let runTime = this.transform['runTime'];\n        let inputColumns = runTime.inputColumns;\n\n        let sourceColumn = <DexihDatalinkColumn> inputColumns.find(c => c.key === this.transformItem.sourceDatalinkColumn.key);\n\n        if (sourceColumn) {\n            this.outputParameters = parameters.map<ValidParameter>(p => {\n                if (p.datalinkColumn) {\n                    let find = sourceColumn.childColumns.find(c => c.key === p.datalinkColumn.key);\n                    if (find) {\n                        return {name: this.describeParameterName(p), values: [{valid: true, error: '', text: p.datalinkColumn.name}]};\n                    }\n                    return {name: this.describeParameterName(p),\n                        values: [{valid: false, error: '(Invalid column) ', text: p.datalinkColumn.name}]};\n                } else {\n                    return {name: this.describeParameterName(p), values: [{valid: false, error: '(No column)', text: ''}]};\n                }\n            });\n        }\n    }\n\n    private describeParameterName(param): string {\n        return param.name + ' (' + eTypeCode[param.dataType] + ')';\n    }\n\n    private describeDatalinkColumn(expectedDataType: eTypeCode, value: DexihDatalinkColumn): ValidValue {\n        if (!value) {\n            return { error: '(not mapped)', text: '', valid: false };\n        }\n\n        let runTime = this.transform['runTime'];\n        let inputColumns = runTime.inputColumns;\n        let nodeDatalinkColumn = this.transform.nodeDatalinkColumn ? this.transform.nodeDatalinkColumn : null;\n        let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n\n        let returnValue: string = null;\n\n        let io = new InputOutputColumns();\n        let col = io.findValidColumn(value, nodeDatalinkColumnKey, inputColumns);\n        if (col) {\n            returnValue = (value.columnGroup ? ('(' + value.columnGroup + ')') : '') + value.logicalName;\n        }\n\n        if (!returnValue) {\n            runTime.transformColumns.forEach(column => {\n                if (!returnValue && column.key === value.key) {\n                    returnValue = value.logicalName;\n                }\n            });\n        }\n\n        if (!returnValue && this.transform.joinDatalinkTable) {\n            let joinTable = this.transform.joinDatalinkTable;\n            joinTable.dexihDatalinkColumns.forEach(column => {\n                if (!returnValue && column.key === value.key) {\n                    returnValue = '(' + joinTable.name + ') ' + value.logicalName;\n                }\n            });\n        }\n\n        if (returnValue) {\n            if (expectedDataType == null || value.dataType === expectedDataType) {\n                return { text: returnValue, valid: true, error: '' }\n            } else {\n                return { text: returnValue, error: '(inconsistent datatype ' + eTypeCode[value.dataType] + ')', valid: false }\n            }\n        } else {\n            return { text: value.logicalName, error: '(Invalid column) ', valid: false }\n        }\n    }\n\n    private describeStaticValue(value: string): string {\n        if (value === ' ') {\n            return '<space>';\n        }\n        if (!value) {\n            return '<null>';\n        }\n        return '\"' + value + '\"';\n    }\n}\n","<dexih-widget [title]=\"title\" [scrollable]=\"true\" [showExpandButton]=\"true\">\n\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" [columns]=\"columns\" [dataObservable]=\"tableData\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n        (rowClick)=\"editMapping($event)\" (onSortChanged)=\"datalinkItemSortChange($event)\"\n        tableClass=\"table table-striped table-hover m-0\" #mappingTable dropZone (dropData)=\"newOutputDrop($event)\"\n        zone=\"input-column\" dropAllowedClass=\"drop-zone-green\" actionHeading=\"Mappings\">\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-datalinkTransformItem=\"item\">\n            <dexih-button-edit class=\"mr-1 \" (click)=\"editMapping(datalinkTransformItem)\" title=\"Edit this mapping\">\n            </dexih-button-edit>\n        </ng-template>\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete class=\"mr-1 \" (click)=\"deleteSelected(items)\"\n                title=\"Delete selected mapping functions\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #rowAction let-item=\"item\">\n            <mapping-item (click)=\"editMapping(item)\" [transform]=\"datalinkTransformForm.value\"\n                [transformItem]=\"item.datalinkTransformItem\" [allowCondition]=\"allowCondition\"></mapping-item>\n        </ng-template>\n\n        <ng-template #actions let-items=\"items\">\n            <ng-template [ngIf]=\"allowMapping\">\n                <dexih-button-splitdropdown class=\"mr-1\" (buttonClick)=\"newMapping(eTransformItemType.ColumnPair)\"\n                    buttonClass=\"btn-primary\" iconClass=\"fa fa-map\"\n                    title=\"Create a new mapping, or drop a column to create new mapping.\" text='Mapping'>\n                    <li><a class=\"dropdown-item\"  title=\"Add all\" (click)=\"addAll()\">Add all input columns</a></li>\n                    <li *ngFor=\"let columnGroup of columnGroups\"><a class=\"dropdown-item\"  [title]=\"'Add all ' + columnGroup.group\" (click)=\"addGroup(columnGroup)\">Add all {{columnGroup.group}}</a></li>\n                </dexih-button-splitdropdown>\n            </ng-template>\n            <ng-template [ngIf]=\"allowCondition && !allowValidation\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.FilterPair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-filter\" title=\"Create a simple filter\">Filter\n                </dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowAggregate\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.AggregatePair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-cubes\" title=\"Create a simple aggregate\">\n                    Aggregate</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowStandard || allowAggregate || allowCondition || allowRow || allowValidation\">\n                <dexih-button [routerLink]=\"['standard-function-edit', functionType]\"\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-dollar\" title=\"Create a new standard function\">\n                    Standard</dexih-button>\n                <dexih-button [routerLink]=\"['custom-function-edit', functionType]\" buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-code\" title=\"Create a new custom function\">Custom</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowRow\">\n                <dexih-button routerLink='unGroup-edit' buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-map\"\n                    title=\"Un-Group a Node\">Un-Group</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowJoin\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.JoinPair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-link\" title=\"Create a new join\">Join\n                </dexih-button>\n                <dexih-button [routerLink]=\"['standard-function-edit', functionType]\"\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-dollar\" title=\"Create a new standard filter\">\n                    Filter</dexih-button>\n                <dexih-button [routerLink]=\"['custom-function-edit', functionType]\" buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-code\" title=\"Create a new custom filter\">Custom Filter</dexih-button>\n\n                    <dexih-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-calendar\"\n                    title=\"Add a joins between the column and the valid from/to\" text='Valid From/To'>\n                    <li *ngFor=\"let column of inputDateColumns\"><a class=\"dropdown-item\"  [title]=\"column.name\" (click)=\"addValidFromTo(column)\">{{column.name}}</a></li>\n                </dexih-button-dropdown>\n            </ng-template>\n            <ng-template [ngIf]=\"allowSort\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.Sort}}' buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-sort-alpha-asc\" title=\"New Sort\">Sort</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowGroup\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.Column}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-list\" title=\"New Group\">Group</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowJoinNode\">\n                <dexih-button (click)=\"createJoinNode()\" buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-list\"\n                    title=\"Join Node\">Node</dexih-button>\n            </ng-template>\n        </ng-template>\n    </dexih-table>\n</dexih-widget>","import { Component, Input, Output, ViewChild, OnInit, OnChanges, OnDestroy, EventEmitter, ElementRef } from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eTransformType, eTransformItemType, DexihDatalinkTransformItem,\n    DexihDatalinkTransform, DexihDatalinkColumn, eTypeCode, DexihDatalinkTable, eDeltaType, eCleanActionItems, eCompare } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'mapping',\n    templateUrl: './mapping.component.html'\n})\nexport class MappingComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public allowStandard = false;\n    @Input() public allowMapping = false;\n    @Input() public allowAggregate = false;\n    @Input() public allowRow = false;\n    @Input() public allowCondition = false;\n    @Input() public allowValidation = false;\n    @Input() public allowOutput = false;\n    @Input() public allowGroup = false;\n    @Input() public allowJoin = false;\n    @Input() public allowSort = false;\n    @Input() public allowSeries = false;\n    @Input() public allowJoinNode = false;\n    @Input() public title: string;\n\n    @Output() public addMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public removeMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public updateMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public hasChanged: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public onColumnDrop: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('mappingTable', { static: true }) public mappingTable: ElementRef;\n\n    private _subscription: Subscription;\n    private _changesSubscription: Subscription;\n\n    columns: Array<any>;\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    public functionType: eFunctionType;\n    public transformType: eTransformType;\n    public eTransformType = eTransformType;\n    public eTransformItemType = eTransformItemType;\n\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n    inputDateColumns: DexihDatalinkColumn[];\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    }\n\n    ngOnChanges() {\n        try {\n            // this.columns = [{ name: 'function', title: 'Mapping', format: 'Md', class: 'functionClass' }];\n            this.columns = [];\n\n            // if (!this.allowSort) {\n            //     this.columns.push({ name: 'function', title: 'Function Name', format: '', class: 'functionClass' });\n            // }\n\n            // this.columns.push({ name: 'input', title: 'Input(s)', format: 'Md', class: 'inputClass' });\n\n            // if (this.allowOutput || this.allowJoinNode) {\n            //     this.columns.push({ name: 'output', title: 'Output(s)', format: 'Md', class: 'outputClass' });\n            // }\n\n            // if (this.allowSort) {\n            //     this.columns.push({ name: 'sortDirection', title: 'Direction', format: '' });\n            // }\n\n            if (this._subscription) { this._subscription.unsubscribe(); }\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(() => {\n\n                this.functionType = this.editDatalinkService.getFunctionType(this.datalinkTransformForm.value);\n                this.transformType = this.datalinkTransformForm.value.transformType;\n\n                this.updateTableData();\n\n                if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n                this._changesSubscription = this.datalinkTransformForm.valueChanges.subscribe(() => this.updateTableData());\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings');\n        }\n    }\n\n    updateTableData() {\n        try {\n            if (this.datalinkTransformForm) {\n                let runTime = this.datalinkTransformForm.controls['runTime'].value;\n                let inputColumns = <DexihDatalinkColumn[]> runTime.inputColumns;\n                this.inputDateColumns = inputColumns.filter(c => c.dataType === eTypeCode.DateTime || c.dataType === eTypeCode.Date);\n                this.columnGroups = this.editDatalinkService.getColumnGroups(inputColumns);\n\n                let data = [];\n                let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n                let filteredItems: Array<any> = [];\n\n                if (this.allowJoinNode) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.JoinNode));\n                }\n\n                if (this.allowGroup) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.Column));\n                }\n\n                if (this.allowStandard || this.allowJoin) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.BuiltInFunction\n                            || d.value.transformItemType === eTransformItemType.CustomFunction));\n                }\n\n                if (this.allowAggregate) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.AggregatePair));\n                }\n\n                if (this.allowMapping) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.ColumnPair));\n                }\n\n                if (this.allowCondition) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.FilterPair));\n                }\n\n                if (this.allowJoin) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.JoinPair));\n                }\n\n                if (this.allowRow) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.UnGroup));\n                }\n\n                if (this.allowSort) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.Sort));\n                }\n\n                filteredItems.sort((a, b) => a.value.position - b.value.position).forEach(item => {\n                    const transformItem: DexihDatalinkTransformItem = item.value;\n                    let functionItem = {\n                        datalinkTransformItem: transformItem,\n                        key: transformItem.key,\n                    }\n\n                    data.push(functionItem);\n                });\n\n                this._tableData.next(data);\n            }\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings, update data');\n        }\n\n    }\n\n    private getItemFormGroup(datalinkTransformItemKey: number): FormGroup {\n        let items = <FormArray>this.datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let item = <FormGroup>items.controls.find(c => c.value.key === datalinkTransformItemKey);\n        return item;\n    }\n\n    editMapping(item: DexihDatalinkTransformItem) {\n        let key = item.key;\n        let itemForm = this.getItemFormGroup(key);\n        let transformItemType = itemForm.value.transformItemType;\n\n        switch (transformItemType) {\n            case eTransformItemType.BuiltInFunction:\n                this.router.navigate(\n                    ['standard-function-edit', this.functionType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.CustomFunction:\n                this.router.navigate(\n                    ['custom-function-edit', this.functionType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.Column:\n            case eTransformItemType.JoinNode:\n            case eTransformItemType.GroupNode:\n            case eTransformItemType.ColumnPair:\n            case eTransformItemType.Sort:\n            case eTransformItemType.JoinPair:\n            case eTransformItemType.FilterPair:\n            case eTransformItemType.AggregatePair:\n            case eTransformItemType.Series:\n                this.router.navigate(['mapping-edit', transformItemType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.UnGroup:\n                this.router.navigate(['unGroup-edit', key], { relativeTo: this.route.parent });\n                break;\n}\n    }\n\n    deleteMapping(item: DexihDatalinkTransformItem) {\n        this.deleteSelected([item]);\n    }\n\n    deleteSelected(items: Array<DexihDatalinkTransformItem>) {\n        items.forEach(item => {\n            let key = item.key;\n            let itemForm = this.getItemFormGroup(key);\n            this.editDatalinkService.deleteDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        });\n    }\n\n    // if a sort event has triggered from the table, then reset the positions of the datalink transform items.\n    datalinkItemSortChange(items: Array<DexihDatalinkTransformItem>) {\n        items.forEach((item, index) => {\n            let existingItems = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            let datalinkTransformItem = <FormGroup>existingItems.controls\n                .find(c => c.value.key === item.key);\n            if (datalinkTransformItem) {\n                datalinkTransformItem.controls.position.setValue(index);\n            }\n        });\n    }\n\n    // triggered when a source column is dropped onto the output column\n    newOutputDrop(inputColumn: DexihDatalinkColumn) {\n        this.onColumnDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: null\n        });\n    }\n\n    createJoinNode() {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        if (items.controls.find(d => d.value.transformItemType === eTransformItemType.JoinNode)) {\n            this.authService.informationDialog('Can not add node',  'Only one join node can be added.');\n            return;\n        }\n\n        let joinTable = this.datalinkTransformForm.value.joinDatalinkTable;\n\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n        outputColumn.position = 0;\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        outputColumn.name = joinTable.name;\n        outputColumn.logicalName = joinTable.name;\n        let io = new InputOutputColumns();\n        let columns = joinTable.dexihDatalinkColumns.map((col, index) => {\n            let childColumn = io.copyDatalinkColumn(col, index, 'Join Node');\n            childColumn.key = this.hubService.getHubCache().getNextSequence();\n            childColumn.datalinkTableKey = null;\n            return childColumn;\n        });\n        outputColumn.childColumns = columns;\n        outputColumn.dataType = eTypeCode.Node;\n\n        item.position = -1;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.targetDatalinkColumn = outputColumn;\n        item.isValid = true;\n        item.transformItemType = eTransformItemType.JoinNode;\n\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    createGroupNode() {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        if (items.controls.find(d => d.value.transformItemType === eTransformItemType.GroupNode)) {\n            this.authService.informationDialog('Can not add node',  'Only one group node can be added.');\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n        outputColumn.position = 0;\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        outputColumn.name = 'Group';\n        outputColumn.logicalName = 'Group';\n        outputColumn.dataType = eTypeCode.Node;\n\n        item.position = -1;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.targetDatalinkColumn = outputColumn;\n        item.isValid = true;\n        item.transformItemType = eTransformItemType.GroupNode;\n\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    newMapping(itemType: eTransformItemType) {\n        this.router.navigate(['mapping-edit', itemType], { relativeTo: this.route });\n    }\n\n    addAll() {\n        let runTime = this.datalinkTransformForm.controls['runTime'].value;\n        let inputColumns = <DexihDatalinkColumn[]> runTime.inputColumns;\n\n        inputColumns.forEach(inputColumn => {\n            this.createMapping(inputColumn);\n        });\n    }\n\n    addGroup(group: {group: string, columns: Array<DexihDatalinkColumn>}) {\n        group.columns.forEach(inputColumn => {\n            this.createMapping(inputColumn);\n        });\n    }\n\n    private createMapping(inputColumn: DexihDatalinkColumn) {\n        let runTime = this.datalinkTransformForm.controls['runTime'].value;\n        let outputColumns = <DexihDatalinkColumn[]> runTime.outputColumns;\n\n        if ( outputColumns.findIndex(c => c.name === inputColumn.name) >= 0) {\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        let io = new InputOutputColumns();\n        let outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        if (outputColumn.childColumns) {\n            outputColumn.childColumns.forEach(col => {\n                col.key = this.hubService.getHubCache().getNextSequence();\n            });\n        }\n        outputColumn.datalinkTableKey = null;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.sourceDatalinkColumn = inputColumn;\n        item.targetDatalinkColumn = outputColumn;\n        item.transformItemType = eTransformItemType.ColumnPair;\n        item.isValid = true;\n        let itemForm = this.editDatalinkService.hubFormsService\n            .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    // joins the column to the valid from/to columns\n    addValidFromTo(column: DexihDatalinkColumn) {\n        let joinTable = <DexihDatalinkTable> this.datalinkTransformForm.value.joinDatalinkTable;\n        let validFrom = joinTable.dexihDatalinkColumns.find(c => c.deltaType === eDeltaType.ValidFromDate);\n        let validTo = joinTable.dexihDatalinkColumns.find(c => c.deltaType === eDeltaType.ValidToDate);\n        if ( !validFrom || !validTo ) {\n            this.authService.informationDialog('No valid from',  'The join table does not contain a columns with a valid from/to delta type.');\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        item.sourceDatalinkColumn = column;\n        item.joinDatalinkColumn = validFrom;\n        item.transformItemType = eTransformItemType.JoinPair;\n        item.filterCompare = eCompare.GreaterThanEqual;\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n\n        item = new DexihDatalinkTransformItem();\n        item.sourceDatalinkColumn = column;\n        item.joinDatalinkColumn = validTo;\n        item.transformItemType = eTransformItemType.JoinPair;\n        item.filterCompare = eCompare.LessThan;\n        itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n\n    }\n}\n","\n<dexih-widget-section title=\"Properties\" [showExpandButton]=\"true\" [isExpanded]=\"false\">\n<form *ngIf=\"datalinkTransformForm\"  [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <section>\n                <form-input label=\"Transform Name\" formControlName=\"name\" placeholder=\"Enter a name for the transform\" [autocapitalize]=\"true\" iconClass=\"fa fa-list\"\n                    [errors]=\"formErrors.name\">\n                </form-input>\n            </section>\n            <section>\n                <form-textarea  label=\"Description\" formControlName=\"description\" placeholder=\"Enter the description.\"\n                    [errors]=\"formErrors.description\">\n                </form-textarea>\n            </section>\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Aggregate || this.datalinkTransformForm.value.transformType == eTransformType.Series || this.datalinkTransformForm.value.transformType == eTransformType.Rows || this.datalinkTransformForm.value.transformType == eTransformType.Mapping\">\n                <section>\n                    <form-checkbox label=\"Allow unmapped input columns to pass through to the next transform.\" formControlName=\"passThroughColumns\">\n                    </form-checkbox>\n                </section>\n            </div>\n            \n            <section *ngIf=\"nodes?.length > 0\">\n                <form-select label=\"Node level\" formControlName=\"nodeDatalinkColumn\" [items]=\"nodes\" [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" node='Specify the node where the transform should be applied to.' [allowNullSelect]=\"true\" selectNullMessage='Use top level'>\n                </form-select>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"number\" formControlName=\"maxInputRows\" label=\"Maximum number of rows to input into the transform (0 = unlimited)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"number\" formControlName=\"maxOutputRows\" label=\"Maximum number of rows to output into the transform (0 = unlimited)\"></form-input>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && (this.datalinkTransformForm.value.transformType == eTransformType.Join || this.datalinkTransformForm.value.transformType == eTransformType.Lookup)\" title=\"Join Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <datalink-table [datalinkTableForm]=\"datalinkTransformForm.controls.joinDatalinkTable\"></datalink-table>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select [label]=\"'Strategy when ' + eTransformType[this.datalinkTransformForm.value.transformType] + ' produces duplicate matches'\" formControlName=\"joinDuplicateStrategy\" [items]=\"eDuplicateStrategyItems\"\n                        itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section class=\"form-group col-md-6\">\n                    <form-select [label]=\"'Strategy when ' + eTransformType[this.datalinkTransformForm.value.transformType] + ' produces no match '\" formControlName=\"joinNotFoundStrategy\" [items]=\"eJoinNotFoundStrategyItems\"\n                        itemKey=\"key\" itemName=\"description\">\n                    </form-select>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.datalinkTransformForm.value.transformType == eTransformType.Concatenate\" title=\"Concatenate Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <datalink-table [datalinkTableForm]=\"datalinkTransformForm.controls.joinDatalinkTable\"></datalink-table>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.datalinkTransformForm.value.transformType == eTransformType.Series\" title=\"Series Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"seriesForm\">\n        <fieldset>\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Series Grain\" formControlName=\"seriesGrain\" [items]=\"seriesGrains\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Input Column\" formControlName=\"sourceDatalinkColumn\" [items]=\"inputColumns\" [(textValue)]=\"sourceValue\"\n                    [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" [errors]=\"sourceErrors\">\n                    </form-select>\n                </section>\n            </div>\n\n            <form-checkbox label=\"Fill empty series values\" formControlName=\"seriesFill\"></form-checkbox>\n\n            <div class=\"form-row\" *ngIf=\"seriesForm.controls.seriesFill.value && seriesForm.controls.seriesGrain.value !== eSeriesGrain.Number\">\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"date\" formControlName=\"seriesStart\" label=\"Series Start Date (empty to use first value)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"date\" formControlName=\"seriesFinish\" label=\"Series Finish Date (empty to use last value)\"></form-input>\n                </section>\n            </div>\n\n            <div class=\"form-row\" *ngIf=\"seriesForm.controls.seriesFill.value && seriesForm.controls.seriesGrain.value === eSeriesGrain.Number\">\n                <section class=\"form-group col-md-6\">\n                    <form-input formControlName=\"seriesStart\" label=\"Series Start Number (empty to use first value)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input formControlName=\"seriesFinish\" label=\"Series Finish Number (empty to use last value)\"></form-input>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.nodeType\" title=\"Group Node\" [showExpandButton]=\"true\">\n    <form>\n        <fieldset>\n            <form-checkbox label=\"Group rows under a node\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"allowNode\" (ngModelChange)=\"toggleNode($event)\"></form-checkbox>\n            <section *ngIf=\"allowNode\" class=\"form-group col-md-6\">\n                <form-input [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"nodeName\" (ngModelChange)=\"updateNode($event)\" label=\"Name of the node\"></form-input>\n            </section>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<div class=\"list-group-item p-1\">\n\n<div *ngIf=\"datalinkTransformForm\" class=\"d-flex\" cdkDropListGroup>\n        <dexih-widget class=\"d-none d-lg-inline\" title=\"Inputs\" height=\"80vh\" style=\"width:300px\" [scrollable]=\"true\">\n            <input-columns [datalinkTransformForm]='datalinkTransformForm'></input-columns>\n\n            <div class=\"mt-1\"  *ngIf=\"datalinkTransformForm.controls.joinDatalinkTable.value\">\n                <join-columns [datalinkTransformForm]='datalinkTransformForm' (inputJoinDrop)=\"newDragDropJoin($event)\"></join-columns>\n            </div>\n        </dexih-widget>\n\n        <div class=\"w-100 mr-1 ml-1\">\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Join || this.datalinkTransformForm.value.transformType == eTransformType.Lookup\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowJoin]=\"true\" title=\"{{eTransformType[this.datalinkTransformForm.value.transformType]}} Table\"  >\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Mapping\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mapping Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Sort\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowSort]=\"true\" title=\"Sort Columns\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.Sort, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Group || this.datalinkTransformForm.value.transformType == eTransformType.Aggregate  || this.datalinkTransformForm.value.transformType == eTransformType.Series  || this.datalinkTransformForm.value.transformType == eTransformType.Rows\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" title=\"Group Columns\"  [allowGroup]=\"true\" [allowSeries]=\"this.datalinkTransformForm.value.transformType == eTransformType.Series\"\n                    (onColumnDrop)=\"newDragDropMapping(eTransformItemType.Column, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Group\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowOutput]=\"true\" title=\"Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Series\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowSeries]=\"true\" [allowOutput]=\"true\" title=\"Series/Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mappings\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Aggregate\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowOutput]=\"true\" title=\"Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mappings\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Filter\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowCondition]=\"true\" [allowOutput]=\"false\" title=\"Filters\" >\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Rows\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowRow]=\"true\" [allowStandard]=\"true\" [allowJoinNode]=\"false\" [allowOutput]=\"true\" [allowCondition]=\"true\" title=\"Row Functions\">\n                </mapping>\n            </div>\n        </div>\n\n        <dexih-widget class=\"d-none d-lg-inline\" [title]=\"'Outputs' + (datalinkTransformForm.controls.nodeDatalinkColumn?.value ? '(@' + datalinkTransformForm.controls.nodeDatalinkColumn.value.name + ')' : '')\"  height=\"80vh\" style=\"width:300px\"  [scrollable]=\"true\">\n            <output-columns [datalinkTransformForm]='datalinkTransformForm' [allowMappingOutputs]=\"allowMappingOutputs\" (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></output-columns>\n            <target-columns [datalinkTransformForm]='datalinkTransformForm' [targets]=\"datalinkForm.controls.dexihDatalinkTargets.value\" [allowMappingOutputs]=\"allowMappingOutputs\" (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></target-columns>\n        </dexih-widget>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { seriesGrains } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eTransformType, eTransformItemType, DexihDatalinkColumn, DexihDatalinkTransform,\n    eTypeCode, DexihDatalinkTransformItem, eAggregate, eSortDirection, eJoinNotFoundStrategyItems,\n    eDuplicateStrategyItems, eSeriesGrain } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-transform-form',\n    templateUrl: './datalink-edit-transform.component.html',\n})\nexport class DatalinkEditTransformComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n    public seriesForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _datalinkFormSubscription: Subscription;\n    private _transformsArraySubscription: Subscription;\n\n    public action: string; // new or edit\n    public pageTitle = 'Transform';\n    public message: string;\n    public datalinkTransformKey: number;\n\n    public showName = false;\n    public showDescription = false;\n\n    eTransformType = eTransformType;\n    eTransformItemType = eTransformItemType;\n    eDuplicateStrategyItems = eDuplicateStrategyItems;\n    eJoinNotFoundStrategyItems = eJoinNotFoundStrategyItems;\n\n    public allowMappingOutputs: boolean;\n    inputColumns: Array<DexihDatalinkColumn>;\n\n    eSeriesGrain = eSeriesGrain;\n    seriesGrains = seriesGrains;\n\n    public allowNode = false;\n    public nodeName = '';\n    public nodeType: eTransformItemType;\n\n    public logger = new LogFactory('datalink-edit-transform');\n\n    public nodes = [];\n\n    public formErrors = {};\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkTransformKey = + result[1]['datalinkTransformKey'];\n                this.datalinkForm = result[2];\n\n                if (this.datalinkForm) {\n\n                    let transformsArray = (<FormArray>this.datalinkForm.controls.dexihDatalinkTransforms);\n\n                    if (this._transformsArraySubscription) { this._transformsArraySubscription.unsubscribe(); }\n                    this._transformsArraySubscription = transformsArray.valueChanges.subscribe(transforms => {\n                        let tmpDatalinkTransformForm = transforms\n                            .find(c => c.datalinkTransformKey === this.datalinkTransformKey);\n\n                        if (!tmpDatalinkTransformForm) {\n                            this.router.navigate(['transforms'], { relativeTo: this.route.parent.parent.parent });\n                        }\n                    });\n\n                    this.datalinkTransformForm = <FormGroup>transformsArray.controls\n                        .find(c => c.value.key === this.datalinkTransformKey);\n\n                    // if the transform isn't found, this is probably due to a save/reload which changes the keys.\n                    // navigate up one level when this happens.\n                    if (!this.datalinkTransformForm) {\n                        this.authService.navigateUp();\n                        return;\n                    }\n\n                    let datalinkTransform = <DexihDatalinkTransform> this.datalinkTransformForm.value;\n\n                    let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n\n                    if (datalinkTransform.transformType === eTransformType.Series) {\n                        this.seriesForm = <FormGroup>items.controls\n                            .filter(d => d.value.transformItemType === eTransformItemType.Series)[0];\n                    }\n\n                    if (datalinkTransform.transformType === eTransformType.Aggregate) {\n                        this.nodeType = eTransformItemType.GroupNode;\n                    }\n\n                    if (datalinkTransform.transformType === eTransformType.Lookup\n                        || datalinkTransform.transformType === eTransformType.Join) {\n                        this.nodeType = eTransformItemType.JoinNode;\n                    }\n\n                    if (this.nodeType) {\n                        let node = datalinkTransform.dexihDatalinkTransformItems\n                        .find(d => d.transformItemType === this.nodeType);\n\n                        if (node) {\n                            this.allowNode = true;\n                            this.nodeName = node.targetDatalinkColumn.name;\n                        } else {\n                            this.allowNode = false;\n                        }\n                    }\n\n                    this.inputColumns = datalinkTransform['runTime'].inputColumns;\n\n                    this.nodes = [];\n                    this.addNodeColumns(this.inputColumns, '');\n\n                    let transformType = datalinkTransform.transformType;\n                    this.allowMappingOutputs =\n                        // transformType === eTransformType.Group ||\n                        transformType === eTransformType.Series ||\n                        // transformType === eTransformType.Aggregate ||\n                        transformType === eTransformType.Rows ||\n                        transformType === eTransformType.Mapping ||\n                        transformType === eTransformType.Validation;\n\n                    if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n                    this._datalinkFormSubscription = this.datalinkForm.valueChanges.subscribe(value => {\n                        this.formErrors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.datalinkForm, true);\n                    });\n\n                    if (!this.datalinkTransformForm) {\n                        this.router.navigate(['properties'], { relativeTo: this.route.parent.parent.parent });\n                    }\n\n                    this.logger.LogC(() => `datalink form is loaded`, eLogLevel.Trace);\n                }\n            });\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Transform');\n        }\n    }\n\n    private addNodeColumns(columns: DexihDatalinkColumn[], path: string) {\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                let name = path ? (path + '.' + col.logicalName) : col.logicalName;\n                this.nodes.push({key: col.key, name: name});\n\n                if (col.childColumns && col.childColumns.length > 0) {\n                    this.addNodeColumns(col.childColumns, name);\n                }\n            });\n        }\n    }\n\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformsArraySubscription) { this._transformsArraySubscription.unsubscribe(); }\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n    }\n\n    deleteTransform() {\n        this.logger.LogC(() => `deleteTransform`, eLogLevel.Trace);\n        this.editDatalinkService.deleteDatalinkTransform(this.datalinkTransformForm.value);\n        this.router.navigate(['properties'], { relativeTo: this.route.parent.parent });\n    }\n\n    previewData() {\n        this.router.navigate(['preview-transform-data'], { relativeTo: this.route.parent });\n    }\n\n    toggleNode(allowNode: boolean) {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        let nodeItem = <FormGroup> items.controls.find(d => d.value.transformItemType === this.nodeType);\n        if (allowNode) {\n            if (!this.nodeName) {\n                this.nodeName = eTransformItemType[this.nodeType];\n            }\n\n            if (nodeItem) {\n                this.authService.informationDialog('Can not add node',  'Only one node can be added per transform.');\n                return;\n            }\n\n            let item = new DexihDatalinkTransformItem();\n            let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n            outputColumn.position = 0;\n            outputColumn.key = this.hubService.getHubCache().getNextSequence();\n            outputColumn.name = this.nodeName;\n            outputColumn.logicalName = this.nodeName;\n            outputColumn.dataType = eTypeCode.Node;\n\n            item.position = -1;\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.targetDatalinkColumn = outputColumn;\n            item.isValid = true;\n            item.transformItemType = this.nodeType;\n\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        } else {\n            this.editDatalinkService.deleteDatalinkTransformItem(this.datalinkTransformForm, nodeItem);\n        }\n    }\n\n    updateNode(name: string) {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        let nodeItem = <FormGroup> items.controls.find(d => d.value.transformItemType === this.nodeType);\n        if (nodeItem) {\n            let column = <DexihDatalinkColumn> nodeItem.controls.targetDatalinkColumn.value;\n            if (column) {\n                column.name = name;\n                column.logicalName = name;\n                nodeItem.controls.targetDatalinkColumn.setValue(column);\n            }\n        }\n    }\n\n    newDragDropMapping(itemType: eTransformItemType, $event) {\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = $event.outputColumn;\n        let inputColumn: DexihDatalinkColumn = $event.inputColumn;\n        let io = new InputOutputColumns();\n\n\n        switch (itemType) {\n            case eTransformItemType.ColumnPair:\n                if (!outputColumn) {\n                    outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n                }\n\n                outputColumn.key = this.hubService.getHubCache().getNextSequence();\n                if (outputColumn.childColumns) {\n                    outputColumn.childColumns.forEach(col => {\n                        col.key = this.hubService.getHubCache().getNextSequence();\n                    });\n                }\n                outputColumn.datalinkTableKey = null;\n                break;\n            case eTransformItemType.Sort:\n                item.sortDirection = eSortDirection.Ascending;\n                break;\n            case eTransformItemType.AggregatePair:\n                if (!outputColumn) {\n                    outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n                }\n\n                outputColumn.key = this.hubService.getHubCache().getNextSequence();\n                if (outputColumn.childColumns) {\n                    outputColumn.childColumns.forEach(col => {\n                        col.key = this.hubService.getHubCache().getNextSequence();\n                    });\n                }\n                outputColumn.datalinkTableKey = null;\n                // outputColumn.name = 'Sum ' + outputColumn.name;\n                item.aggregate = eAggregate.Sum;\n                break;\n        }\n\n        if (itemType) {\n\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.sourceDatalinkColumn = inputColumn;\n            item.targetDatalinkColumn = outputColumn;\n            item.isValid = true;\n\n            item.transformItemType = itemType;\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        }\n    }\n\n    newDragDropJoin($event) {\n        let transformType = this.datalinkTransformForm.value.transformType;\n\n        if (transformType === eTransformType.Join\n            || transformType === eTransformType.Lookup) {\n            let joinColumn: DexihDatalinkColumn = $event.joinColumn;\n            let inputColumn: DexihDatalinkColumn = $event.inputColumn;\n            let item = new DexihDatalinkTransformItem();\n            item.transformItemType = eTransformItemType.JoinPair;\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.sourceDatalinkColumn = inputColumn;\n            item.joinDatalinkColumn = joinColumn;\n            item.isValid = true;\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        }\n    }\n}\n","<dexih-widget-section title=\"Profile Rules\" [showExpandButton]=\"true\">\n        <form *ngIf=\"datalinkForm\"  [formGroup]=\"datalinkForm\" >\n    <fieldset>\n        <section>\n            <form-input label=\"Profile Table Name\" formControlName=\"profileTableName\" placeholder=\"Enter the profile table name.\" [autocapitalize]=\"true\" iconClass=\"fa fa-list\" \n            note=\"Specify the table name in the 'Audit Connection' to send the profile results to.  If this table does not exist, it will be created on first run.\">\n            </form-input>\n        </section>\n    </fieldset>\n</form>\n\n<dexih-table \n    [enableMultiSelect]=\"true\" \n    [enableManualSort]=\"false\"\n    [enableFilter]=\"false\"\n    [columns]=\"columns\" \n    [dataObservable]=\"tableData\" \n    [(selectedItems)]=\"selectedProfileRules\" \n    (onSelectedChange)=\"hasChanged($event)\"\n    keyColumn=\"functionMethodName\">\n\n    <ng-template #rowAction select=\"rowAction\" let-item=\"item\">\n        <form-checkbox label=\"Capture Detailed Distribution\" [(ngModel)]=\"item.detailedResults\" name=\"detailedResults\" (change)=\"updateProfileRule(item)\" ></form-checkbox>\n    </ng-template>\n</dexih-table>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DexihDatalinkProfile, eFunctionType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'profile-rules',\n    templateUrl: './profile-rules.component.html'\n})\n\n\nexport class DatalinkEditProfileRulesComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private hubCache: HubCache;\n\n    private _subscription: Subscription;\n\n    selectedProfileRules: Array<DexihDatalinkProfile> = new Array<DexihDatalinkProfile>();\n\n    columns = [\n        { name: 'name', title: 'Profile Name', format: '' },\n        { name: 'description', title: 'Description', format: '' }\n    ];\n\n    private _tableData = new BehaviorSubject<Array<DexihDatalinkProfile>>(null);\n    tableData: Observable<Array<DexihDatalinkProfile>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(async result => {\n                this.hubCache = result[0];\n                this.datalinkForm = result[1];\n\n                if (this.datalinkForm) {\n                    // load the cache first\n                    if (this.hubCache.isLoaded()) {\n                        this.selectedProfileRules = this.datalinkForm.value.dexihDatalinkProfiles;\n                        let profileRules = (await this.hubService.GetFunctionsByType(eFunctionType.Profile))\n                            .map(profile => {\n\n                                let profileRuleForm = this.selectedProfileRules.find(c =>\n                                    c.functionAssemblyName === profile.functionAssemblyName\n                                    && c.functionClassName === profile.functionClassName\n                                    && c.functionMethodName === profile.functionMethodName);\n\n                                return <DexihDatalinkProfile> {\n                                    functionAssemblyName: profile.functionAssemblyName,\n                                    functionClassName: profile.functionClassName,\n                                    functionMethodName: profile.functionMethodName,\n                                    detailedResults: profileRuleForm ? profileRuleForm.detailedResults : false\n                                }\n                        });\n                        this._tableData.next(profileRules);\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n        }\n\n    }\n\n    updateProfileRules() {\n        if (this.datalinkForm) {\n            let profiles = <FormArray>this.datalinkForm.controls.dexihDatalinkProfiles;\n\n            // reset existing profiles.\n            profiles.controls.forEach(profile => {\n                let profileFormGroup = <FormGroup>profile;\n                profileFormGroup.controls.isValid.setValue(false);\n            });\n\n            // add the selected profiles, with isValid = true\n            this.selectedProfileRules.forEach(profile => {\n                let profileRuleForm = <FormGroup>profiles.controls.find(c => c.value.functionAssemblyName === profile.functionAssemblyName\n                    && c.value.functionClassName === profile.functionClassName\n                    && c.value.functionMethodName === profile.functionMethodName);\n\n                if (!profileRuleForm) {\n                    let profileRule = new DexihDatalinkProfile();\n                    profileRule.key = this.hubCache.getNextSequence();\n                    profileRule.datalinkKey = this.datalinkForm.value.key;\n                    profileRule.functionAssemblyName = profile.functionAssemblyName;\n                    profileRule.functionClassName = profile.functionClassName;\n                    profileRule.functionMethodName = profile.functionMethodName;\n                    profileRule.detailedResults = profile.detailedResults;\n                    profileRule.isValid = true;\n                    profileRuleForm = this.editDatalinkService.hubFormsService.datalinkProfileFormGroup(profileRule);\n                    profiles.push(profileRuleForm);\n                } else {\n                    profileRuleForm.controls.isValid.setValue(true);\n                }\n            });\n\n            for (let i = profiles.controls.length - 1; i >= 0; i--) {\n                if (!profiles.controls[i].value.isValid) {\n                    profiles.removeAt(i);\n                }\n            }\n        }\n    }\n\n    updateProfileRule(profile: DexihDatalinkProfile) {\n        let profiles = <FormArray>this.datalinkForm.controls.dexihDatalinkProfiles;\n\n        let profileRuleForm = <FormGroup>profiles.controls.find(c => c.value.functionAssemblyName === profile.functionAssemblyName\n            && c.value.functionClassName === profile.functionClassName\n            && c.value.functionMethodName === profile.functionMethodName);\n\n        profileRuleForm.controls.detailedResults.setValue(profile.detailedResults);\n        this.editDatalinkService.hubFormsService.hasChanged = true;\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.updateProfileRules();\n    }\n\n    hasChanged(items) {\n        if (items) {\n            this.selectedProfileRules = items;\n        }\n        this.updateProfileRules();\n        this.editDatalinkService.hubFormsService.hasChanged = true;\n    }\n\n}\n","<dexih-widget-section title='Validation' [showExpandButton]=\"true\">\n<div *ngIf=\"!datalinkTransformForm\">\n    <h4>Target column validation is not currently enabled. </h4>\n    <dexih-button *ngIf=\"!datalinkTransformForm\" (click)=\"enableValidation()\" buttonClass=\"btn btn-success\" iconClass=\"fa fa-check\"  [autoCompact]=\"false\"\n        title=\"Enable the validation on the target table.\">Enable Validation</dexih-button>\n</div>\n\n<div *ngIf=\"datalinkTransformForm\">\n\n    <form *ngIf=\"datalinkTransformForm\" [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <section>\n                <dexih-button (click)=\"disableValidation()\" buttonClass=\"btn btn-success\" iconClass=\"fa fa-check\" [autoCompact]=\"false\"\n                    title=\"Enable the validation on the target table.\">Disable Validation</dexih-button>\n            </section>\n            <section>\n                <form-textarea label=\"Description\" formControlName=\"description\" placeholder=\"Enter the description.\">\n                </form-textarea>\n            </section>\n        </fieldset>\n    </form>\n</div>\n</dexih-widget-section>\n\n<div class=\"list-group-item p-1\">\n\n    <div *ngIf=\"datalinkTransformForm\" class=\"d-flex\">\n        <div class=\"mr-1 d-none d-md-inline\">\n            <div>\n                <div class=\"alert alert-primary mb-1\">\n                    <h4>Inputs</h4>\n                </div>\n                <div>\n                    <input-columns [datalinkTransformForm]='datalinkTransformForm'></input-columns>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"w-100\">\n            <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowCondition]=\"true\" [allowOutput]=\"true\"\n               [allowStandard]=\"true\" [allowValidation]=\"true\" title=\"Validation\">\n            </mapping>\n        </div>\n\n        <div class=\"ml-1 d-none d-md-inline\">\n            <div class=\"alert alert-primary mb-1\">\n                <h4>Outputs\n                    <div class=\"float-right\">\n                    </div>\n                </h4>\n            </div>\n            <output-columns [datalinkTransformForm]='datalinkTransformForm' [allowMappingOutputs]=\"allowMappingOutputs\"\n                (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></output-columns>\n        </div>\n\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubCache } from '../../../hub.models';\nimport { DexihTable, DexihTableColumn, eTransformType, RemoteLibraries } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-validation-form',\n    templateUrl: './datalink-edit-validation.component.html',\n})\nexport class DatalinkEditValidationComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private remoteLibraries: RemoteLibraries;\n    public action: string; // new or edit\n    public pageTitle = 'Validation';\n    public message: string;\n\n    public showName = false;\n    public showDescription = false;\n\n    public inputColumns: Array<DexihTable>;\n    public outputColumns: Array<DexihTableColumn>;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.hubCache = result[1];\n                this.datalinkForm = result[2];\n                this.remoteLibraries = result[3];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Validation');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    enableValidation() {\n        let transform = this.remoteLibraries.transforms.find(c => c.transformType === eTransformType.Validation);\n        this.datalinkTransformForm = this.editDatalinkService.insertDatalinkTransform(1, transform);\n    }\n\n    disableValidation() {\n        this.editDatalinkService.deleteDatalinkTransform(this.datalinkTransformForm.value);\n        this.datalinkTransformForm = null;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'dexih-datalink-run-plan',\n    templateUrl: './datalink-run-plan.component.html'\n})\nexport class DatalinkRunPlanComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n\n    public allowSave = false;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkForm = result[3];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Run Plan');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n}\n","<div class=\"no-padding\">\n    <div class=\"widget-body\">\n\n        <div section class=\"widget-body-toolbar\">\n\n            <div class=\"form-row\">\n                <div class=\"col-sm-6\">\n                    <h4>Run Plan</h4>\n                </div>\n                <div class=\"col-sm-6 text-right\">\n                </div>\n            </div>\n        </div>\n\n        NOT COMPLETED\n\n    </div>\n</div>","    <section>\n        <div class=\"input-group d-flex\">\n            <form *ngFor=\"let inputParameterForm of inputParameterForms; let i = index;\" [formGroup]=\"inputParameterForm\" class=\"flex-fill\">\n                <div class=\"input-group\">\n                    <div *ngIf=\"!allowNameSelect\" class=\"input-group-prepend\">\n                        <div class=\"input-group-text\">\n                            {{inputParameterForm.value.runTime?.functionParameter?.name + \"(\" + eTypeCode[type.dataType] + \")\"}} {{rank > 0 ? \"[]\" : \"\"}}\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"allowNameSelect == true\" class=\"form-control p-0\">\n                        <form-input [border]=\"false\" formControlName=\"name\" type=\"text\"\n                            placeholder=\"Enter a name for the parameter\">\n                        </form-input>\n                    </div>\n\n                    <div *ngIf=\"!inputParameterForm.value.runTime?.functionParameter?.isLabel\" class=\"form-control p-0\">\n                        <form-select formControlName=\"datalinkColumn\" [border]=\"false\"\n                            [items]=\"inputColumnGroups\" parentName=\"group\" childItems=\"columns\" itemKey=\"key\" itemName=\"logicalName\" [(textValue)]=\"inputs[i].staticValue\"\n                            [enableKeySelect]=\"false\" [enableTextEntry]=\"rank === 0\" [enableTextEntryMatch]=\"false\" [setTextEntryToValue]=\"false\"\n                            (textValueChange)=\"updateStatic($event, i)\"\n                            [textEntryNote]=\"rank > 0 ? 'Select an array type source (otherwise select add to build an array)' : 'Select a column or enter a static value.'\" \n                            [textEntryItems]=\"inputs[i].textItems\" textEntryItemsTitle=\"Variables\"\n                            [errors]=\"errors[i].datalinkColumn\"\n                            >\n                        </form-select>\n                    </div>\n\n                    <div *ngIf=\"inputParameterForm.value.runTime?.functionParameter?.isLabel\" class=\"form-control p-0\">\n                        <form-input [border]=\"false\" [(ngModel)]=\"inputs[i].staticValue\" [ngModelOptions]=\"{standalone: true}\"\n                            type=\"text\" placeholder=\"Enter a static value.\">\n                        </form-input>\n                    </div>\n\n                    <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == true\" class=\"input-group-text\">\n                        {{\"(\" + eTypeCode[type.dataType] + \")\"}}\n                    </div>\n\n                    <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control p-0\">\n                        <form-select [border]=\"false\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                            itemName=\"name\" >\n                        </form-select>\n                    </div>\n                    <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control\">\n                        <form-checkbox label=\"Allow Null\" [border]=\"false\" formControlName=\"allowNull\"></form-checkbox>\n                    </div>\n\n                </div>\n            </form>\n\n            <form *ngFor=\"let outputParameterForm of outputParameterForms; let i = index;\" [formGroup]=\"outputParameterForm\" class=\"ml-1  flex-fill\">\n                <!-- <form-select class=\"flex-grow-1\" [border]=\"false\" class=\"form-control p-0\"\n                    formControlName=\"datalinkColumn\" [items]=\"outputColumns\" itemName=\"logicalName\" itemKey=\"key\"\n                    [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" textEntryNote=\"Enter a value to add a new column\"\n                    (textValueChange)=\"updateNewColumn($event, i)\">\n                </form-select> -->\n                <form-select class=\"flex-grow-1\" [border]=\"false\" class=\"form-control p-0\" \n                    formControlName=\"datalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\" itemKey=\"key\"\n                    itemName=\"logicalName\" [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n                    textEntryNote=\"Enter new column name, or select existing\"\n                    (textValueChange)=\"updateNewColumn($event, i)\">\n                </form-select>\n            </form>\n\n            <div *ngIf=\"allowAdd && allowRemove\" class=\"input-group-append flex-shrink-1 ml-1 \">\n                <button *ngIf=\"allowAdd\" class=\"btn btn-light\" type=\"button\" (click)=\"add()\" [disabled]=\"!allowAdd\" value=\"Add\">\n                    <i class=\"fa fa-plus-square-o\"></i>\n                </button>\n                <button *ngIf=\"allowRemove\" class=\"btn btn-light\" type=\"button\" (click)=\"remove()\" [disabled]=\"!allowRemove\" value=\"Remove\">\n                    <i class=\"fa fa-minus-square-o\"></i>\n                </button>\n            </div>\n        </div>\n        <small *ngIf=\"!allowAdd && inputParameterForms[0].value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n            <markdown [data]=\"inputParameterForms[0].value.runTime.functionParameter.description\"></markdown>\n        </small>\n    </section>\n","import { Component, Input, Output, OnInit, OnDestroy, EventEmitter, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { TypeCodes, eBasicType, TypeFunctions } from '../../../hub.remote.models';\nimport { HubService } from '../../../hub.service';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { DexihDatalinkColumn, DexihTableColumn, DexihFunctionParameter, eTypeCode, DexihTable, DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\nexport class InputValues {\n    public staticValue: string;\n    public textItems: string[];\n    public name: string;\n    public inputParameterSubscription: Subscription;\n    public datalinkColumnSubscription: Subscription;\n}\n\n@Component({\n\n    selector: 'input-parameter',\n    templateUrl: './input-parameter.component.html'\n})\nexport class InputParameterComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() public allowDataTypeSelect = false;\n    @Input() public allowNameSelect = false;\n    @Input() public allowAdd = false;\n    @Input() public allowRemove = false;\n    @Input() public inputParameterForms: FormGroup[] = [];\n    @Input() public inputColumns: Array<DexihDatalinkColumn> = null;\n    @Input() public updateParameterName = false;\n    @Input() public rank = 0;\n    @Input() public nodeDatalinkColumnKey = null;\n\n    @Input() public outputParameterForms: FormGroup[] = null;\n    @Input() public outputColumns: Array<DexihTableColumn> = null;\n    @Input() public datalinkTargets: Array<DexihDatalinkTarget> = null;\n    @Input() public variables = [];\n\n    @Output() public addParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n    @Output() public removeParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n\n    private type: TypeFunctions;\n    eBasicType = eBasicType;\n    typeCodes = TypeCodes;\n    eTypeCode = eTypeCode;\n\n    public columns: Array<DexihTableColumn>;\n    inputColumnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    outputTables: Array<DexihTable>;\n\n    public inputs: InputValues[] = [];\n\n    ignoreChanges = false;\n\n    newColumn: DexihDatalinkColumn;\n\n    public errors;\n\n    constructor(public hubService: HubService, public editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        this.inputs = this.inputParameterForms.map(param => new InputValues());\n        this.errors = this.inputParameterForms.map(a => this.editDatalinkService.hubFormsService.getFormErrorMessages(a, true));\n\n        let io = new InputOutputColumns();\n        if (this.nodeDatalinkColumnKey) {\n            this.inputColumns = io.getAvailableColumns(this.inputColumns, this.nodeDatalinkColumnKey, 0);\n        }\n\n        if (this.rank > 0 && this.inputColumns) {\n            let tables = [];\n            this.inputColumns = this.inputColumns.filter(c => c.rank > 0);\n        }\n\n        if (this.inputColumns) {\n            this.inputColumnGroups = this.editDatalinkService.getColumnGroups(this.inputColumns);\n        } else {\n            this.inputColumnGroups = [];\n        }\n\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let inputParameter: DexihFunctionParameter = this.inputParameterForms[i].value;\n\n            if (inputParameter.datalinkColumn || inputParameter.value === null || inputParameter.value === undefined) {\n                this.inputs[i].staticValue = '';\n            } else {\n                this.inputs[i].staticValue = inputParameter.value;\n            }\n\n            this.inputs[i].textItems = [];\n\n            if (inputParameter.dataType === eTypeCode.Boolean) {\n                this.inputs[i].textItems = this.inputs[i].textItems.concat(['true', 'false' ]);\n                this.inputs[i].staticValue = this.inputs[i].staticValue.toString();\n            }\n\n            if (inputParameter['runTime'] && inputParameter['runTime'].functionParameter.listOfValues) {\n                this.inputs[i].textItems = this.inputs[i].textItems.concat(inputParameter['runTime'].functionParameter.listOfValues);\n            }\n\n            this.inputs[i].textItems = this.inputs[i].textItems.concat(this.variables);\n        }\n\n        this.updateItems();\n\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let runTime = this.inputParameterForms[i].value.runTime;\n            if (!runTime || !runTime.functionParameter || !runTime.functionParameter.listOfValues) {\n                this.inputs[i].inputParameterSubscription = this.inputParameterForms[i].valueChanges.subscribe(() => {\n                    if (!this.ignoreChanges) {\n                        this.updateItems();\n                        this.ignoreChanges = true;\n                        if (this.inputParameterForms[i].controls.datalinkColumn.value) {\n                            this.inputParameterForms[i].controls.value.setValue(null);\n                        } else {\n                            this.inputParameterForms[i].controls.value.setValue(this.inputs[i].staticValue);\n                        }\n                        this.ignoreChanges = false;\n                    }\n                    this.errors[i] = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.inputParameterForms[i], true);\n                });\n            }\n\n            if (this.updateParameterName) {\n                this.inputs[i].datalinkColumnSubscription\n                    = this.inputParameterForms[i].controls.datalinkColumn.valueChanges.subscribe(value => {\n                    if (value) {\n                        this.inputParameterForms[i].controls.dataType.setValue(value.dataType);\n                        this.inputParameterForms[i].controls.name.setValue(value.name);\n                    } else {\n                        this.inputParameterForms[i].controls.dataType.setValue(eTypeCode.String);\n                        this.inputParameterForms[i].controls.name.setValue('');\n                    }\n                    this.errors[i] = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.inputParameterForms[i], true);\n                });\n            }\n        }\n    }\n\n    updateStatic(event: any, i: number) {\n        this.inputParameterForms[i].controls.value.setValue(event);\n    }\n\n    ngOnDestroy() {\n        if (this.inputs) {\n            this.inputs.forEach(input => {\n                if (input.datalinkColumnSubscription) { input.datalinkColumnSubscription.unsubscribe(); }\n                if (input.inputParameterSubscription) { input.inputParameterSubscription.unsubscribe(); }\n            });\n        }\n    }\n\n    ngOnChanges() {\n        let table = new DexihTable();\n        table.name = 'Output Columns';\n        table.dexihTableColumns = this.outputColumns;\n\n        this.outputTables = [table];\n\n        if (this.datalinkTargets) {\n            this.datalinkTargets.forEach(target => {\n                this.outputTables.push(target['table']);\n            });\n        }\n    }\n\n    updateItems() {\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let inputParameter: DexihFunctionParameter = this.inputParameterForms[i].value;\n            this.type = new TypeFunctions(inputParameter.dataType, null, null, null);\n\n            if (!this.allowDataTypeSelect && !this.allowNameSelect) {\n                this.inputs[i].name = inputParameter.name + '(' + this.type.dataType + ')' + (this.rank > 0 ? '[]' : '')\n            } else {\n                this.inputs[i].name = inputParameter.name\n            }\n        }\n    }\n\n    add() {\n        this.addParameter.emit(this.inputParameterForms[0]);\n    }\n\n    remove() {\n        this.removeParameter.emit(this.inputParameterForms[0]);\n    }\n\n    updateNewColumn(value: string, i: number) {\n        let current = this.outputParameterForms[i].controls.targetDatalinkColumn.value;\n        if (value && (!current || value !== current.name) ) {\n            if (!this.newColumn) {\n                this.newColumn = new DexihDatalinkColumn();\n                this.newColumn.position = 1000 - this.newColumn.key;\n                this.newColumn.key = this.hubService.getHubCache().getNextSequence();\n            }\n\n            this.newColumn.dataType = this.outputParameterForms[i].controls.dataType.value;\n            this.newColumn.name = value;\n            this.newColumn.logicalName = value;\n\n            this.outputParameterForms[i].controls.datalinkColumn.setValue(this.newColumn);\n\n            this.updateItems();\n        }\n    }\n\n}\n","<form [formGroup]=\"outputParameterForm\" class=\"mb-1\">\n    <section>\n        <div class=\"input-group\">\n\n            <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == false\" class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{outputParameterForm.value.runTime?.functionParameter?.name + \"(\" + eTypeCode[type.dataType] + \")\"}}\n                    {{rank > 0 ? \"[]\" : \"\"}}\n                </div>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == true && allowNameSelect == false\" class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{outputParameterForm.value.runTime?.functionParameter?.name }}\n                </div>\n            </div>\n\n            <div *ngIf=\"allowNameSelect\" class=\"form-control p-0\">\n                <form-input formControlName=\"name\" [border]=\"false\" type=\"text\" name=\"name\"\n                    placeholder=\"Enter a name for the parameter\">\n                </form-input>\n                <span class=\"input-group-btn\" style=\"width:0px;\"></span>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == true\" class=\"input-group-text\">\n                {{\"(\" + eTypeCode[type.dataType] + \")\"}}\n            </div>\n\n            <div class=\"form-control p-0\">\n                <form-select [border]=\"false\" formControlName=\"datalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\" itemKey=\"key\"\n                    itemName=\"logicalName\" [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n                    textEntryNote=\"Enter new column name, or select existing\"\n                    (textValueChange)=\"updateNewColumn($event)\"\n                    [errors]=\"errors.datalinkColumn\">\n                </form-select>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control p-0\">\n                <form-select formControlName=\"dataType\" [border]=\"false\" [items]=\"typeCodes\" itemKey=\"key\"\n                    itemName=\"name\">\n                </form-select>\n            </div>\n            <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control\">\n                <form-checkbox label=\"Allow Null\" [border]=\"false\" formControlName=\"allowNull\"></form-checkbox>\n            </div>\n\n            <div class=\"input-group-append\">\n                <button *ngIf=\"outputParameterForm.controls.datalinkColumn?.value && outputParameterForm.controls.dataType.value !== outputParameterForm.controls.datalinkColumn?.value?.dataType\" class=\"btn btn-danger\" type=\"button\" (click)=\"fixDataType()\" title=\"fix target column datatype\">\n                    <i class=\"fa fa-medkit\"></i>\n                </button>\n                <button class=\"btn btn-light\" type=\"button\" (click)=\"add()\" [disabled]=\"!allowAdd\" value=\"Add\">\n                    <i class=\"fa fa-plus-square-o\"></i>\n                </button>\n                <button class=\"btn btn-light\" type=\"button\" (click)=\"remove()\" [disabled]=\"!allowRemove\" value=\"Remove\">\n                    <i class=\"fa fa-minus-square-o\"></i>\n                </button>\n            </div>\n        </div>\n\n        <small *ngIf=\"outputParameterForm.value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n            <markdown [data]=\"outputParameterForm.value.runTime.functionParameter.description\"></markdown>\n        </small>\n\n    </section>\n</form>","import { Component, Input, Output, ViewChild, OnInit, OnDestroy, EventEmitter, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { TypeFunctions, TypeCodes, eBasicType } from '../../../hub.remote.models';\nimport { DexihTableColumn, DexihDatalinkColumn, eTypeCode, DexihDatalinkTarget, DexihDatalinkTable, DexihTable } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\n@Component({\n\n    selector: 'output-parameter',\n    templateUrl: './output-parameter.component.html'\n})\nexport class OutputParameterComponent implements OnInit, OnChanges, OnDestroy {\n\n    @Input() public allowDataTypeSelect = false;\n    @Input() public allowNameSelect = false;\n    @Input() public allowAdd = false;\n    @Input() public allowRemove = false;\n    @Input() public outputParameterForm: FormGroup = null;\n    @Input() public outputColumns: Array<DexihTableColumn> = null;\n    @Input() public datalinkTargets: Array<DexihDatalinkTarget> = null;\n    @Input() public updateParameterName = false;\n    @Input() public rank = 0;\n\n    @Output() public addParameter: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public removeParameter: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public hasChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    private _datalinkColumnSubscription: Subscription;\n    private _parameterSubscription: Subscription;\n    private _dataTypeSubscription: Subscription;\n\n    newColumn: DexihDatalinkColumn;\n    tmpColumnKey: number;\n\n    outputTables: Array<DexihTable>;\n\n    type: TypeFunctions;\n    eBasicType = eBasicType;\n    eTypeCode = eTypeCode;\n\n    typeCodes = TypeCodes;\n\n    public errors;\n\n    ignoreChanges = false;\n\n    constructor(public hubService: HubService, public editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        this.updateItems();\n        this.errors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.outputParameterForm, true);\n\n        if (this.updateParameterName) {\n            this._datalinkColumnSubscription = this.outputParameterForm.controls.datalinkColumn.valueChanges.subscribe(value => {\n                this.outputParameterForm.controls.dataType.setValue(value.dataType);\n                this.outputParameterForm.controls.name.setValue(value.name);\n            });\n        }\n        this._parameterSubscription = this.outputParameterForm.valueChanges.subscribe(param => {\n            this.errors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.outputParameterForm, true);\n            this.updateItems();\n        });\n\n        this._dataTypeSubscription = this.outputParameterForm.controls.dataType.valueChanges.subscribe(dataType => {\n            if (this.newColumn) {\n                this.newColumn.dataType = dataType;\n            }\n        });\n    }\n\n    ngOnChanges() {\n        let table = new DexihTable();\n        table.name = 'Output Columns';\n        table.dexihTableColumns = this.outputColumns;\n\n        this.outputTables = [table];\n\n        if (this.datalinkTargets) {\n            this.datalinkTargets.forEach(target => {\n                this.outputTables.push(target['table']);\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._datalinkColumnSubscription) { this._datalinkColumnSubscription.unsubscribe(); }\n        if (this._parameterSubscription) { this._parameterSubscription.unsubscribe(); }\n        if (this._dataTypeSubscription) { this._dataTypeSubscription.unsubscribe(); }\n    }\n\n    updateItems() {\n        this.type = new TypeFunctions(this.outputParameterForm.value.dataType, null, null, null);\n    }\n\n    add() {\n        this.addParameter.emit(this.outputParameterForm);\n    }\n\n    remove() {\n        this.removeParameter.emit(this.outputParameterForm);\n    }\n\n    fixDataType() {\n        const column = this.outputParameterForm.controls.datalinkColumn.value;\n        column.dataType = this.outputParameterForm.controls.dataType.value;\n    }\n\n    updateNewColumn(value: string) {\n        let current = this.outputParameterForm.controls.datalinkColumn.value;\n        if (value && (!current || current.name !== value)) {\n            if (!this.newColumn) {\n                this.newColumn = new DexihDatalinkColumn();\n                this.newColumn.key = this.hubService.getHubCache().getNextSequence();\n                this.newColumn.position = 1000 - this.newColumn.key;\n            }\n\n            this.newColumn.dataType = this.outputParameterForm.controls.dataType.value;\n            this.newColumn.allowDbNull = true;\n            this.newColumn.name = value;\n            this.newColumn.logicalName = value;\n            this.newColumn.rank = this.rank;\n            this.newColumn.columnGroup = 'mapping';\n\n            this.outputParameterForm.controls.datalinkColumn.setValue(this.newColumn);\n\n            this.updateItems();\n        }\n    }\n}\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section  title=\"Edit Function\" [showExpandButton]=\"false\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\" (click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\"\n\t\t\tclass=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"datalinkTransformForm\" [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\n\t\t\t\t<section *ngIf=\"hubCache?.hub.dexihCustomFunctions.length > 0\">\n\t\t\t\t\t<form-checkbox label=\"Use a custom function\" [(ngModel)]=\"useCustomFunction\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t\t<ng-template [ngIf]=\"useCustomFunction\">\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 499, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Select a hub function\" formControlName=\"customFunctionKey\" [items]=\"customFunctions\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" itemTitle=\"description\">\n\t\t\t\t\t\t \t<customFunction-edit-button [key]=\"newDatalinkTransformItemForm.controls.customFunctionKey.value\"></customFunction-edit-button>\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template [ngIf]=\"!useCustomFunction\">\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 500, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Category\" [items]=\"functionCategories\" [allowNullSelect]=\"true\" selectNullMessage=\"(All functions)\"\n\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"functionCategory\" (ngModelChange)=\"updateCategory($event)\" [sortItems]=\"true\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 499, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Select a standard function\" (ngModelChange)=\"selectFunction($event, true)\" [(ngModel)]=\"selectedFunction\"\n\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\" [items]=\"filteredFunctions\" [enableKeySelect]=\"false\" itemKey=\"name\" itemName=\"name\" itemTitle=\"description\" [note]=\"selectedFunction?.description\"\n\t\t\t\t\t\t [sortItems]=\"true\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</ng-template>\n\t\t\t\t<div *ngIf=\"selectedFunction || selectedCustomFunction\" class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"transformFunctionType != eFunctionType.Validate && transformFunctionType != eFunctionType.condition\"\n\t\t\t\t\t class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 405, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when null\" formControlName=\"onNull\" [items]=\"eErrorActionItems\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 404, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when error\" formControlName=\"onError\" [items]=\"eErrorActionItems\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t\n\t\t\t\t\t<div *ngIf=\"transformFunctionType == eFunctionType.Validate\" class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 402, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when false\" formControlName=\"invalidAction\" [items]=\"eInvalidActionItems\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" [enableFilter]=\"false\" iconClass=\"fa fa-database\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<section *ngIf=\"(selectedFunction?.returnType == 'Boolean') || (selectedCustomFunction && selectedCustomFunction?.returnType == 'Boolean')\" class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t\t\t\t<form-checkbox label=\"Return 'NOT' result\" formControlName=\"notCondition\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\n\t\t\t\t\t<section *ngIf=\"selectedFunction?.genericType !== eGenericType.None\" class=\"col-xs-12 col-sm-6 col-md-3\">\n\t\t\t\t\t\t<form-select label=\"Data Type\" formControlName=\"genericTypeCode\" [items]=\"typeCodes\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section  class=\"col-xs-12 col-sm-6 col-md-3\">\n\t\t\t\t\t\t<form-select label=\"Cache Options\" formControlName=\"functionCaching\" [items]=\"functionCache\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"(selectedFunction || selectedCustomFunction) && inputParameterControls.length > 0\" class=\"mt-1\">\n\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let inputParameter of inputParameterControls; let i = index\" [ngStyle]=\"{'z-index': 300-i, 'position': 'relative'}\" class=\"mb-1\">\n\t\t\t\t\t\t<div *ngIf=\"inputParameter.value.rank > 0 && !inputParameter.value.runTime.functionParameter.linkedName\">\n\t\t\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t\t\tArray - {{inputParameter.value.name}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t\t\t<dexih-button *ngIf=\"selectedFunction.importMethodName\" iconClass=\"fa fa-download\" text=\"Import Mappings\" (click)=\"importMappings(inputParameter)\"\n\t\t\t\t\t\t\t\t\t title=\"Attempt to import the mappings from the source data\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\" text=\"Add Parameter\" (click)=\"addParameter(inputParameter, eParameterDirection.Input)\" title=\"Add a parameter to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-columns\" text=\"Add All Inputs\" (click)=\"addAllColumns(inputParameter)\" title=\"Add all the input columns to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\" text=\"Clear\" (click)=\"clearArray(inputParameter)\"></dexih-button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input-parameter *ngIf=\"inputParameter.controls.arrayParameters.controls.length === 0\" [inputParameterForms]=\"[inputParameter]\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t [inputColumns]=\"inputColumns\" [allowAdd]=\"false\" [allowRemove]=\"false\" [updateParameterName]=\"false\" [rank]=\"inputParameter.value.rank\"\n\t\t\t\t\t\t\t [variables]=\"variables\">\n\t\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t\t\t<div *ngFor=\"let arrayParameter of inputParameter.controls.arrayParameters.controls; let j = index, let last = last\" class=\"pl-2 mb-1\"\n\t\t\t\t\t\t\t [ngStyle]=\"{'z-index': 300-j, 'position': 'relative'}\">\n\t\t\t\t\t\t\t\t<input-parameter [inputParameterForms]=\"[arrayParameter]\" [inputColumns]=\"inputColumns\" [allowAdd]=\"true\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t\t [allowRemove]=\"true\" [updateParameterName]=\"false\" (addParameter)=\"addParameter(inputParameter, eParameterDirection.Input, j)\"\n\t\t\t\t\t\t\t\t (removeParameter)=\"removeParameter(inputParameter, j)\" [variables]=\"variables\">\n\t\t\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t\t\t\t<small *ngIf=\"last && arrayParameter.value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n\t\t\t\t\t\t\t\t\t<markdown [data]=\"arrayParameter.value.runTime.functionParameter.description\"></markdown>\n\t\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input-parameter *ngIf=\"inputParameter.value.rank == 0 && !inputParameter.value.runTime.functionParameter.linkedName\" [inputParameterForms]=\"[inputParameter]\" [inputColumns]=\"inputColumns\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t [allowAdd]=\"false\" [allowRemove]=\"false\" [updateParameterName]=\"false\" [variables]=\"variables\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- When linked array, then place parameters side/side -->\n\t\t\t\t<div *ngFor=\"let arrayParameter of arrayParameters\" class=\"mt-1\">\n\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t{{arrayParameter.name}}\n\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t<dexih-button *ngIf=\"selectedFunction.importMethodName\" iconClass=\"fa fa-download\" text=\"Import Mappings\" (click)=\"importInputOutputMappings(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Attempt to import the mappings from the source data\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\" text=\"Add Mapping\" (click)=\"addInputOutputParameter(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Add a parameter to the array\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-columns\" text=\"Add All Inputs\" (click)=\"addAllInputOutputColumns(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Add all the input columns to the array\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\" text=\"Clear\" (click)=\"clearInputOutputArray(arrayParameter)\"></dexih-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let parameterItem of arrayParameter.parameterItems; let j = index\" class=\"pl-2\"\n\t\t\t\t\t [ngStyle]=\"{'z-index': 200-j, 'position': 'relative'}\">\n\t\t\t\t\t\t<input-parameter \n\t\t\t\t\t\t [inputParameterForms]=\"parameterItem.inputItems\" \n\t\t\t\t\t\t [outputParameterForms]=\"parameterItem.outputItems\" \n\t\t\t\t\t\t [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t [inputColumns]=\"inputColumns\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"true\" [allowRemove]=\"true\"\n\t\t\t\t\t\t [updateParameterName]=\"false\" (addParameter)=\"addInputOutputParameter(arrayParameter, j)\"\n\t\t\t\t\t\t (removeParameter)=\"removeInputOutputParameter(arrayParameter, j)\"\n\t\t\t\t\t\t [variables]=\"variables\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"(selectedFunction || selectedCustomFunction) && allowOutput\" class=\"mt-1\">\n\t\t\t\t\t<label class=\"d-flex flex-row\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\tOutput Parameters\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t<dexih-button text=\"Auto Map\" buttonClass=\"btn-sm btn-outline-primary\" (click)=\"autoMap(outputParameter)\"></dexih-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</label>\n\t\t\t\t\t<div *ngFor=\"let outputParameter of outputParameterControls; let i = index\" [ngStyle]=\"{'z-index': 100-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<div *ngIf=\"outputParameter.value.rank > 0 && !outputParameter.value.runTime.functionParameter.linkedName\">\n\t\t\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t\t\tArray - {{outputParameter.value.name}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\"  text=\"Add Parameter\" (click)=\"addParameter(outputParameter, eParameterDirection.Output)\" title=\"Add a parameter to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\"  text=\"Clear\" (click)=\"clearArray(outputParameter)\"></dexih-button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<output-parameter *ngIf=\"outputParameter.controls.arrayParameters.controls.length === 0\" [outputParameterForm]=\"outputParameter\"\n\t\t\t\t\t\t\t [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"false\" [allowRemove]=\"false\" [rank]=\"outputParameter.value.rank\">\n\t\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t\t\t<div *ngFor=\"let arrayParameter of outputParameter.controls.arrayParameters.controls; let j = index\" class=\"pl-2\"\n\t\t\t\t\t\t\t [ngStyle]=\"{'z-index': 200-j, 'position': 'relative'}\">\n\t\t\t\t\t\t\t\t<output-parameter [outputParameterForm]=\"arrayParameter\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"true\"\n\t\t\t\t\t\t\t\t [allowRemove]=\"true\" (addParameter)=\"addParameter(outputParameter, eParameterDirection.Output, j)\"\n\t\t\t\t\t\t\t\t (removeParameter)=\"removeParameter(outputParameter, j)\">\n\t\t\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<output-parameter *ngIf=\"outputParameter.value.rank == 0\" [outputParameterForm]=\"outputParameter\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t [allowAdd]=\"false\" [allowRemove]=\"false\">\n\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, InvalidActions, FunctionCache} from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { FunctionParameter, eFunctionType, eParameterDirection, eGenericType, DexihDatalinkColumn, FunctionReference,\n  DexihCustomFunction, eTransformType, DexihDatalinkTable, DexihDatalinkTransformItem, eTransformItemType,\n  DexihFunctionParameter, eTypeCode, DexihCustomFunctionParameter,\n  DexihFunctionArrayParameter, RemoteLibraries, eInvalidActionItems, eErrorActionItems, DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\nexport class ArrayParameter {\n  public name: string;\n  public functionParameter: FunctionParameter;\n\n  public inputParameterForms: FormGroup[] = [];\n  public outputParameterForms: FormGroup[] = [];\n\n  public parameterItems: ArrayParameterItem[] = [];\n\n  public resetItems() {\n    let inputArray = <FormArray>this.inputParameterForms[0].controls.arrayParameters;\n    for (let i = 0; i < inputArray.controls.length; i++) {\n      let item = new ArrayParameterItem();\n      this.inputParameterForms.forEach(inputParameterForm => {\n        let array = <FormArray>inputParameterForm.controls.arrayParameters;\n        item.inputItems.push(<FormGroup>array.controls[i]);\n      });\n      this.outputParameterForms.forEach(outputParameterForm => {\n        let array = <FormArray>outputParameterForm.controls.arrayParameters;\n        item.outputItems.push(<FormGroup>array.controls[i]);\n      });\n\n      this.parameterItems.push(item);\n    }\n  }\n}\n\nexport class ArrayParameterItem {\n  public inputItems: FormGroup[] = [];\n  public outputItems: FormGroup[] = [];\n}\n\n\n@Component({\n\n  selector: 'dexih-function-edit',\n  templateUrl: './standard-function-edit.component.html'\n})\nexport class StandardFunctionEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n  public remoteLibraries: RemoteLibraries;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  typeCodes = TypeCodes;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _returnParameterSubscription: Subscription;\n  private _functionSubscription: Subscription;\n  private _saveSubscription: Subscription;\n\n  private cancelToken: CancelToken = new CancelToken();\n\n  transformFunctionType: eFunctionType;\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  // returnParameterForm: FormGroup;\n  resultReturnParameterForm: FormGroup;\n\n  useCustomFunction: boolean;\n\n  invalidActions = InvalidActions;\n  functionCache = FunctionCache;\n  eGenericType = eGenericType;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n\n  functionCategory: string;\n  functionCategories: Array<string>;\n  functions: Array<FunctionReference>;\n  filteredFunctions: Array<FunctionReference>;\n  selectedFunction: FunctionReference;\n  customFunctions: Array<DexihCustomFunction>;\n  selectedCustomFunction: DexihCustomFunction;\n\n  variables = [];\n\n  allowOutput = false;\n  allowReturn = true;\n\n  inputParameterControls: Array<FormGroup>;\n  outputParameterControls: Array<FormGroup>;\n\n  arrayParameters: ArrayParameter[] = [];\n\n  eInvalidActionItems = eInvalidActionItems.filter(c => c.key > 0);\n  eErrorActionItems = eErrorActionItems.filter(c => c.key > 0);\n\n  logger = new LogFactory('standard-function-edit');\n\n  isJoin = false;\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.hubService.getRemoteLibrariesObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        this.remoteLibraries = result[3]\n        this.datalinkForm = result[4];\n\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        if (this.hubCache && this.hubCache.isLoaded() && this.datalinkForm\n          && this.remoteLibraries && this.remoteLibraries.functions.length > 0) {\n\n          this.transformFunctionType = +params['functionType'];\n          if (this.transformFunctionType === eFunctionType.Validate) {\n            this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n            this.datalinkTransformKey = this.datalinkTransformForm.value.key;\n          } else {\n            this.datalinkTransformKey = +params['datalinkTransformKey'];\n            this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n          }\n\n          this.variables = this.editDatalinkService.getVariables();\n\n          this.useCustomFunction = this.datalinkTransformForm.controls.customFunctionKey ? true : false;\n          this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n\n          this.isJoin = this.datalinkTransformForm.value.transformType === eTransformType.Join ||\n            this.datalinkTransformForm.value.transformType === eTransformType.Lookup;\n\n          // if this is a join transform, then the use the join columns for the input.\n          if (this.isJoin) {\n            const table = <DexihDatalinkTable>this.datalinkTransformForm.controls.joinDatalinkTable.value;\n            if (!table) {\n              this.hubService.addHubErrorMessage('The join table could not be found.');\n              this.authService.navigateUp();\n              return;\n            }\n\n            this.inputColumns = table.dexihDatalinkColumns;\n          } else {\n            let nodeDatalinkColumn = <DexihDatalinkColumn> this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n            let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n            let io = new InputOutputColumns();\n            if (nodeDatalinkColumnKey) {\n              let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n            } else {\n              this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            }\n          }\n\n          this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n            if (!this.datalinkTransformItemForm) {\n              this.authService.navigateUp();\n              return;\n            }\n\n            // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n            if (this.datalinkTransformItemForm.controls.customFunctionKey.value) {\n                this.selectCustomFunction(this.datalinkTransformItemForm.value.customFunctionKey, false);\n            } else {\n            let selectedFunction = this.remoteLibraries.functions.find(c =>\n              c.functionClassName === this.datalinkTransformItemForm.value.functionClassName &&\n              c.functionMethodName === this.datalinkTransformItemForm.value.functionMethodName &&\n              c.functionAssemblyName === this.datalinkTransformItemForm.value.functionAssemblyName\n            );\n\n            // this.selectedFunction = selectedFunction;\n              this.selectFunction(selectedFunction, false);\n            // this.refreshParameters();\n            }\n\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.BuiltInFunction;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          switch (this.transformFunctionType) {\n            case eFunctionType.Condition:\n            case eFunctionType.JoinCondition:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Condition);\n              this.allowOutput = false;\n              break;\n            case eFunctionType.Validate:\n              this.functions = this.remoteLibraries.functions\n                .filter(c => c.functionType === eFunctionType.Condition || c.functionType === eFunctionType.Validate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Map:\n              this.functions = this.remoteLibraries.functions\n                .filter(c => c.functionType === eFunctionType.Condition ||\n                  c.functionType === eFunctionType.Validate ||\n                  c.functionType === eFunctionType.Map);\n\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Aggregate:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Aggregate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Series:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Series ||\n                c.functionType === eFunctionType.Aggregate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Rows:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Rows);\n              this.allowOutput = true;\n              this.allowReturn = false;\n              break;\n            case eFunctionType.Profile:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Profile);\n              this.allowOutput = false;\n              break;\n            default:\n              this.functions = null;\n          }\n\n          this.functionCategories = Array.from(new Set(this.functions.map(c => c.category)));\n          this.filteredFunctions = this.functions;\n          this.customFunctions = this.hubCache.hub.dexihCustomFunctions;\n          if (this.datalinkTransformItemForm && this.datalinkTransformItemForm.value.customFunctionKey) {\n            this.useCustomFunction = true;\n            this.selectedCustomFunction = this.hubCache.hub.dexihCustomFunctions\n              .find(c => c.key === this.datalinkTransformItemForm.value.customFunctionKey);\n          }\n\n          if (this._functionSubscription) { this._functionSubscription.unsubscribe(); }\n          this._functionSubscription = this.newDatalinkTransformItemForm.controls.customFunctionKey.valueChanges\n            .subscribe(customFunctionKey => {\n              this.selectCustomFunction(customFunctionKey, false);\n            });\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Standard Function Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n    if (this._functionSubscription) { this._functionSubscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  updateCategory(value) {\n    if (value) {\n      this.filteredFunctions = this.functions.filter(c => c.category === value);\n    } else {\n      this.filteredFunctions = this.functions;\n    }\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('The function has changed',\n          'The function has changed.  Do you want to discard the changes and continue?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private parametersArray() {\n    return <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n  }\n\n  refreshParameters() {\n    let parametersArray = this.parametersArray();\n\n    // convoluted sort below allows sorting by the direction then the position\n    this.inputParameterControls = <FormGroup[]>parametersArray.controls\n      .sort((a, b) => a.value.position - b.value.position)\n      .filter(c => (c.value.direction === eParameterDirection.Input || c.value.direction === eParameterDirection.ResultInput\n        || c.value.direction === eParameterDirection.Join));\n\n    // convoluted sort below allows sorting by the direction then the position\n    this.outputParameterControls = <FormGroup[]>parametersArray.controls\n      .sort((a, b) => a.value.position - b.value.position)\n      .filter(c => HubCache.parameterIsOutput(c.value));\n\n    // don't include return value (which will determine pass/fail) for validation transforms.\n    if (this.transformFunctionType === eFunctionType.Validate) {\n      this.outputParameterControls = this.outputParameterControls.filter(c => c.value.direction !== eParameterDirection.ReturnValue);\n    }\n\n    this.arrayParameters = [];\n\n    if (this.selectedFunction) {\n\n      this.selectedFunction.inputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, true);\n      });\n\n      this.selectedFunction.outputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n      this.selectedFunction.resultInputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, true);\n      });\n\n      this.selectedFunction.resultOutputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n      this.selectedFunction.resultReturnParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n    }\n\n    this.arrayParameters.forEach(arrayParameter => arrayParameter.resetItems());\n  }\n\n  private addArrayParameter(parameter: FunctionParameter, isInput: boolean) {\n    let arrayParameter = this.arrayParameters.find(c => c.name === parameter.linkedName);\n    if (!arrayParameter) {\n      arrayParameter = new ArrayParameter();\n      arrayParameter.name = parameter.linkedName;\n      arrayParameter.functionParameter = parameter;\n      this.arrayParameters.push(arrayParameter);\n    }\n\n    if (isInput) {\n      let controls = this.inputParameterControls.find(c => c.controls.name.value === parameter.name);\n      arrayParameter.inputParameterForms.push(controls);\n    } else {\n      let controls = this.outputParameterControls.find(c => c.controls.name.value === parameter.name);\n      arrayParameter.outputParameterForms.push(controls);\n    }\n\n  }\n\n  // when a new standard function is selected\n  // reset all the parameters\n  selectFunction(value: FunctionReference, markAsDirty: boolean) {\n    this.selectedFunction = value;\n\n    if (value === null || value === undefined) { return; }\n\n    this.newDatalinkTransformItemForm.controls.functionAssemblyName.setValue(this.selectedFunction.functionAssemblyName);\n    this.newDatalinkTransformItemForm.controls.functionClassName.setValue(this.selectedFunction.functionClassName);\n    this.newDatalinkTransformItemForm.controls.functionMethodName.setValue(this.selectedFunction.functionMethodName);\n    this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(null);\n\n    if (!this.newDatalinkTransformItemForm.controls.genericTypeCode.value) {\n      if (this.selectedFunction.genericTypeDefault) {\n        this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(this.selectedFunction.genericTypeDefault);\n      } else {\n        if (this.selectedFunction.genericType === eGenericType.Numeric) {\n          this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(eTypeCode.Decimal);\n        } else {\n          this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(eTypeCode.String);\n        }\n      }\n    }\n\n    switch (this.selectedFunction.genericType) {\n      case eGenericType.All:\n        this.typeCodes = TypeCodes;\n        break;\n      case eGenericType.Numeric:\n        this.typeCodes = TypeCodes.filter(c => c.isNumeric);\n        break;\n      case eGenericType.String:\n        this.typeCodes = TypeCodes.filter(c => c.isString);\n        break;\n      case eGenericType.None:\n        this.typeCodes = [];\n    }\n\n    if (this.selectedFunction) {\n      let parameters = this.parametersArray();\n      let existingParameters: any[] = [];\n\n      while (parameters.length) {\n        existingParameters.push(parameters.value[0])\n        parameters.removeAt(0);\n      }\n\n      if (this.selectedFunction.inputParameters) {\n        this.selectedFunction.inputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            parameters.push(\n                this.newParameter(existingParameters, param, index, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input,\n                    this.selectedFunction.genericTypeDefault));\n          }\n        });\n      }\n\n      if (this.selectedFunction.outputParameters) {\n        this.selectedFunction.outputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            if (param) {\n              parameters.push(this.newParameter(existingParameters, param, index + 100, eParameterDirection.Output,\n                this.selectedFunction.genericTypeDefault));\n            }\n          }\n        });\n      }\n\n      if (this.selectedFunction.resultInputParameters) {\n        this.selectedFunction.resultInputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            parameters.push(\n                this.newParameter(existingParameters, param, index + 200, eParameterDirection.ResultInput,\n                  this.selectedFunction.genericTypeDefault));\n          }\n        });\n      }\n\n      if (this.selectedFunction.resultOutputParameters) {\n        this.selectedFunction.resultOutputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            if (param) {\n              parameters.push(\n                  this.newParameter(existingParameters, param, index + 300, eParameterDirection.ResultOutput,\n                    this.selectedFunction.genericTypeDefault));\n            }\n          }\n        });\n      }\n\n      if (this.selectedFunction.returnParameters) {\n        if (this.allowReturn && this.selectedFunction.returnParameters.length > 0) {\n          this.selectedFunction.returnParameters.forEach((parameter: FunctionParameter, index: number) => {\n            parameters.push(this.newParameter(existingParameters, parameter, index + 400,\n              eParameterDirection.ReturnValue, this.selectedFunction.genericTypeDefault ));\n          });\n        }\n      }\n\n      if (this.selectedFunction.resultReturnParameters) {\n        if (this.allowReturn && this.selectedFunction.resultReturnParameters.length > 0) {\n            this.selectedFunction.resultReturnParameters.forEach(parameter => {\n            parameters.push(this.newParameter(existingParameters, parameter, 0,\n                eParameterDirection.ResultReturnValue, this.selectedFunction.genericTypeDefault));\n          });\n        }\n      }\n\n      this.refreshParameters();\n\n      if (markAsDirty) {\n        this.newDatalinkTransformItemForm.markAsDirty();\n      }\n    } else {\n      this.selectedFunction = null;\n    }\n  }\n\n  private newParameter(existingParameters: DexihFunctionParameter[],\n    param: any, index: number, direction: eParameterDirection, genericTypeDefault: eTypeCode): FormGroup {\n\n    let existingValue = existingParameters.find(c => c.name === param.parameterName)\n\n    let newParameter = new DexihFunctionParameter();\n    // newParameter.datalinkTransformItemKey = this.datalinkTransformItemKey;\n    newParameter.name = param.parameterName;\n    newParameter.rank = param.rank;\n    newParameter.direction = direction;\n    newParameter.isGeneric = param.isGeneric;\n    newParameter.position = index;\n    newParameter.key = this.hubCache.getNextSequence();\n    newParameter['runTime'] = {functionParameter: param};\n\n    if (existingValue) {\n      newParameter.key = existingValue.key;\n      newParameter.datalinkColumn = existingValue.datalinkColumn;\n      newParameter.value = existingValue.value;\n      newParameter.dataType = param.isGeneric ? existingValue.dataType : param.dataType;\n      existingValue.arrayParameters.forEach(p => {\n        p['runTime'] = {functionParameter: param};\n      });\n      newParameter.arrayParameters = existingValue.arrayParameters;\n    } else {\n      newParameter.value = param.defaultValue;\n      newParameter.dataType = param.isGeneric ? genericTypeDefault : param.dataType;\n    }\n\n    newParameter.isValid = true;\n\n    let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionParametersFormGroup(newParameter);\n    return newParameterForm;\n  }\n\n  // when a new standard function is selected\n  // reset all the parameters\n  selectCustomFunction(customFunctionKey: number, markAsDirty: boolean) {\n    this.selectedCustomFunction = this.hubCache.hub.dexihCustomFunctions.find(c => c.key === customFunctionKey);\n\n    if (this.selectedCustomFunction) {\n      let parameters = this.parametersArray();\n      let existingParameters: any[] = [];\n\n      while (parameters.length) {\n        existingParameters.push(parameters.value[0]);\n        parameters.removeAt(0);\n      }\n\n      this.selectedCustomFunction.dexihCustomFunctionParameters\n        .filter(c => (c.direction === eParameterDirection.Input || c.direction === eParameterDirection.Join)  && c.isValid)\n        .forEach((param: DexihCustomFunctionParameter, index: number) => {\n          if (param) {\n            let newParameterForm =\n              this.newParameter(existingParameters, param, index, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input,\n                this.selectedCustomFunction.genericTypeDefault);\n            parameters.push(newParameterForm);\n          }\n        });\n\n      this.selectedCustomFunction.dexihCustomFunctionParameters.filter(c => c.direction === eParameterDirection.Output && c.isValid)\n        .forEach((param: DexihCustomFunctionParameter, index: number) => {\n          if (param) {\n            let newParameterForm =\n              this.newParameter(existingParameters, param, index, eParameterDirection.Output,\n                this.selectedCustomFunction.genericTypeDefault);\n            parameters.push(newParameterForm);\n          }\n        });\n\n        let returnParameter = new DexihFunctionParameter();\n        returnParameter.dataType = this.selectedCustomFunction.returnType;\n        returnParameter.name = 'Return';\n        returnParameter.direction = eParameterDirection.Output;\n        returnParameter.rank = 0;\n        returnParameter.position = -1;\n        returnParameter.isValid = true;\n        let newParameterForm2 = this.newParameter(existingParameters, returnParameter, 0, eParameterDirection.ReturnValue,\n          this.selectedCustomFunction.genericTypeDefault);\n        parameters.push(newParameterForm2);\n\n      this.refreshParameters();\n\n      if (markAsDirty) {\n        this.newDatalinkTransformItemForm.markAsDirty();\n      }\n    }\n  }\n\n  private createArrayParameter(parentParameter: DexihFunctionArrayParameter,\n    direction: eParameterDirection, position: number = null, genericTypeDefault: eTypeCode):\n    DexihFunctionArrayParameter {\n    let param = parentParameter['runTime'].functionParameter;\n    let newParameter = new DexihFunctionArrayParameter();\n    newParameter.isGeneric = param.isGeneric;\n    newParameter.dataType = param.isGeneric ? genericTypeDefault : parentParameter.dataType;\n    newParameter.position = position ? position + 1 : 10000000;\n    newParameter.name = param.name;\n    newParameter.direction = direction;\n    newParameter.rank = 0;\n    newParameter.key = this.hubCache.getNextSequence();\n    newParameter.datalinkColumn = null;\n    newParameter.isValid = true;\n    newParameter['runTime'] = {functionParameter: param};\n\n    return newParameter;\n  }\n\n  addParameter(parentParameterForm: FormGroup, direction: eParameterDirection, position: number = null): FormGroup {\n    if (direction === eParameterDirection.Input && this.isJoin) { direction = eParameterDirection.Join; }\n    let parentParameter = parentParameterForm.value;\n    let newParameter = this.createArrayParameter(parentParameter, direction, 0,\n      this.newDatalinkTransformItemForm.controls.genericTypeCode.value);\n    let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionArrayParametersFormGroup(newParameter);\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    if (position !== null) {\n      arrayForm.insert(position + 1, newParameterForm);\n    } else {\n      arrayForm.push(newParameterForm);\n    }\n\n    // reset the positions\n    arrayForm.controls.forEach((p, index) => {\n      (<FormGroup>p).controls.position.setValue(index * 10);\n    });\n\n    this.refreshParameters()\n    return newParameterForm;\n  }\n\n  addInputOutputParameter(arrayParameter: ArrayParameter, position: number = null) {\n    let item = new ArrayParameterItem();\n\n    arrayParameter.inputParameterForms.forEach(parameterForm => {\n      let parameter = this.addParameter(parameterForm, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input, position);\n      item.inputItems.push(parameter);\n    });\n\n    arrayParameter.outputParameterForms.forEach(parameterForm => {\n      let parameter = this.addParameter(parameterForm, eParameterDirection.Output, position);\n      item.outputItems.push(parameter);\n    });\n\n    if (position !== null) {\n      arrayParameter.parameterItems.splice(position, 0, item);\n    } else {\n      arrayParameter.parameterItems.push(item);\n    }\n  }\n\n  removeParameter(parentParameterForm: FormGroup, position: number) {\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    if (position > -1) {\n      arrayForm.removeAt(position);\n      this.newDatalinkTransformItemForm.markAsDirty();\n      this.refreshParameters();\n    }\n  }\n\n  removeInputOutputParameter(arrayParameter: ArrayParameter, position: number = null) {\n\n    arrayParameter.inputParameterForms.forEach(parameterForm => {\n      this.removeParameter(parameterForm, position);\n    });\n\n    arrayParameter.outputParameterForms.forEach(parameterForm => {\n      this.removeParameter(parameterForm, position);\n    });\n\n    if (position !== null) {\n      arrayParameter.parameterItems.splice(position, 1);\n    } else {\n      arrayParameter.parameterItems.splice(arrayParameter.parameterItems.length - 1, 1);\n    }\n  }\n\n  addAllColumns(parentParameterForm: FormGroup) {\n    this.clearArray(parentParameterForm);\n\n    let isLabel = parentParameterForm.value.runTime.functionParameter.isLabel;\n    let parentParameter = parentParameterForm.value;\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    let position = 1;\n    this.inputColumns.forEach(column => {\n      let newParameter = this.createArrayParameter(parentParameter,\n        this.isJoin ? eParameterDirection.Join : eParameterDirection.Input, position++, this.selectedFunction.genericTypeDefault);\n        if (isLabel) {\n          newParameter.value = column.name;\n        } else {\n          newParameter.datalinkColumn = column;\n        }\n\n      let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionArrayParametersFormGroup(newParameter);\n      arrayForm.push(newParameterForm);\n    });\n    this.refreshParameters();\n  }\n\n  addAllInputOutputColumns(arrayParameter: ArrayParameter) {\n    // add the first parameter\n    this.addAllColumns(arrayParameter.inputParameterForms[0]);\n    let inputArrayForm = <FormArray>arrayParameter.inputParameterForms[0].controls.arrayParameters;\n\n    if (arrayParameter.inputParameterForms.length > 1) {\n      this.clearArray(arrayParameter.inputParameterForms[1]);\n      for (let i = 0; i < inputArrayForm.length; i++) {\n        let parameter = this.addParameter(arrayParameter.inputParameterForms[1],\n          this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n\n        // if the first parameter is a label, then map the matching column to the second input parameter\n        if (arrayParameter.inputParameterForms[0].value.runTime.functionParameter.isLabel) {\n          parameter.controls.datalinkColumn.setValue(this.inputColumns[i]);\n        }\n      }\n\n      // add any other parameters with default values.\n      for (let i = 2; i < arrayParameter.inputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.inputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n          let parameter = this.addParameter(arrayParameter.inputParameterForms[i],\n            this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n            parameter.controls.value.setValue(arrayParameter.inputParameterForms[i].value.runTime.functionParameter.defaultValue);\n        }\n      }\n    }\n\n    // add any output columns of the same length.\n    if (arrayParameter.outputParameterForms.length > 0) {\n      for (let i = 0; i < arrayParameter.outputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.outputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n        }\n      }\n    }\n\n    arrayParameter.resetItems();\n  }\n\n  clearArray(parameterForm: FormGroup) {\n    let arrayForm = <FormArray>parameterForm.controls.arrayParameters;\n    for (let i = arrayForm.controls.length - 1; i >= 0; i--) {\n      arrayForm.removeAt(i);\n    }\n    this.refreshParameters();\n  }\n\n  clearInputOutputArray(arrayParameter: ArrayParameter) {\n    arrayParameter.inputParameterForms.forEach(form => {\n      this.clearArray(form);\n    });\n\n    arrayParameter.outputParameterForms.forEach(form => {\n      this.clearArray(form);\n    });\n  }\n\n\n  async importInputOutputMappings(arrayParameter: ArrayParameter) {\n    let result = await this.editDatalinkService\n      .importFunctionMappings(this.datalinkTransformKey, this.newDatalinkTransformItemForm.value, this.cancelToken);\n\n      if (result === null) { return; }\n\n      let inputArrayForm = <FormArray>arrayParameter.inputParameterForms[0].controls.arrayParameters;\n\n      this.clearArray(arrayParameter.inputParameterForms[0]);\n      for (let i = 0; i < result.length; i++) {\n        let parameter = this.addParameter(arrayParameter.inputParameterForms[0],\n          this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n\n          parameter.controls.value.setValue(result[i]);\n\n        // // if the first parameter is a label, then map the matching column to the second input parameter\n        // if (arrayParameter.inputParameterForms[0].value.runTime.functionParameter.isLabel) {\n        //   parameter.controls.datalinkColumn.setValue(this.inputColumns[i]);\n        // }\n      }\n\n      // add any other parameters with default values.\n      for (let i = 1; i < arrayParameter.inputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.inputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n          let parameter = this.addParameter(arrayParameter.inputParameterForms[i],\n            this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n            parameter.controls.value.setValue(arrayParameter.inputParameterForms[i].value.runTime.functionParameter.defaultValue);\n        }\n      }\n\n      // add any output columns of the same length.\n      if (arrayParameter.outputParameterForms.length > 0) {\n        for (let i = 0; i < arrayParameter.outputParameterForms.length; i++) {\n          this.clearArray(arrayParameter.outputParameterForms[i]);\n          for (let j = 0; j < inputArrayForm.length; j++) {\n          }\n        }\n      }\n\n      arrayParameter.resetItems();\n  }\n\n  autoMap() {\n    this.outputParameterControls.forEach(param => {\n      let newColumn = new DexihDatalinkColumn();\n      newColumn.key = this.hubService.getHubCache().getNextSequence();\n      newColumn.position = 1000 - newColumn.key;\n\n      let paramValue = <DexihFunctionParameter> param.value;\n\n      newColumn.dataType = paramValue.dataType;\n      newColumn.allowDbNull = true;\n      newColumn.name = paramValue['runTime'].functionParameter.name;\n      newColumn.logicalName = paramValue['runTime'].functionParameter.name;\n      newColumn.rank = paramValue.rank;\n\n      param.controls.datalinkColumn.setValue(newColumn);\n      this.newDatalinkTransformItemForm.markAsDirty();\n    })\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n}\n\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section *ngIf=\"datalinkTransformForm\" title=\"Edit Custom Function\" [showExpandButton]=\"true\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-validate class=\"mr-1\" (click)=\"test()\" text=\"Syntax Check\"></dexih-button-validate>\n\t\t\t<dexih-button-download class=\"mr-1\" (click)=\"downloadCode()\" text=\"Download Code\"></dexih-button-download>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\"\n\t\t\t\t(click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"newDatalinkTransformItemForm\" [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"functionType != eFunctionType.Validate && functionType != eFunctionType.condition\"\n\t\t\t\t\t\tclass=\"col col-xs-4\" [ngStyle]=\"{'z-index': 305, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when null\" formControlName=\"onNull\" [items]=\"eErrorActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"col col-xs-4\" [ngStyle]=\"{'z-index': 304, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when error\" formControlName=\"onError\" [items]=\"eErrorActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"selectedFunction && selectedFunction?.returnType == 'Boolean'\" class=\"col col-xs-4\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 303, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-checkbox label=\"Return 'NOT' result\" formControlName=\"notCondition\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<div *ngIf=\"functionType == eFunctionType.Validate\" class=\"col col-xs-4\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 302, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when false\" formControlName=\"invalidAction\" [items]=\"eInvalidActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"label\">\n\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"inputParameters.length === 0\" class=\"mb-1\">\n\t\t\t\t\t\t<dexih-button (click)=\"addParameter(null, eParameterDirection.Input)\"\n\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\" title=\"Click to add a parameter\">Add Parameter\n\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let inputParameter of inputParameters; let i = index\" class=\"pl-2\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<input-parameter [allowNameSelect]=\"true\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[inputParameterForms]=\"[inputParameter]\" [inputColumns]=\"inputColumns\"\n\t\t\t\t\t\t\t[nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t(hasChanged)=\"parameterHasChanged($event)\" [updateParameterName]=\"true\"\n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Input)\"\n\t\t\t\t\t\t\t(removeParameter)=\"removeParameter($event)\" [allowAdd]=\"true\" [allowRemove]=\"true\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"functionType != eFunctionType.Condition && functionType != eFunctionType.JoinCondition\">\n\t\t\t\t\t<div class=\"label mb-1\">\n\t\t\t\t\t\tOutput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div [ngStyle]=\"{'z-index': 101, 'position': 'relative'}\">\n\t\t\t\t\t\t<output-parameter [allowNameSelect]=\"false\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[outputParameterForm]=\"returnParameterForm\" [outputColumns]=\"outputColumns\"  [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Output)\"></output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"outputParameters.length === 0\">\n\t\t\t\t\t\t<dexih-button (click)=\"addParameter(null, eParameterDirection.Output)\"\n\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\" title=\"Click to add a parameter\">Add Parameter\n\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let parameter of outputParameters; let i = index\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 100-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<output-parameter [allowNameSelect]=\"true\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[outputParameterForm]=\"parameter\" [outputColumns]=\"outputColumns\"  [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t\t[updateParameterName]=\"true\"\n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Output)\"\n\t\t\t\t\t\t\t(removeParameter)=\"removeParameter($event)\" [allowAdd]=\"true\" [allowRemove]=\"true\">\n\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\tFunction Code\n\t\t\t\t<textarea class='form-control' rows=\"20\" width=\"100%\" spellcheck=\"false\"\n\t\t\t\t\tformControlName=\"functionCode\"></textarea>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n\n\n\n\t<dexih-widget-section *ngIf=\"datalinkTransformForm && newDatalinkTransformItemForm\" title=\"Test Function\"\n\t\t[showExpandButton]=\"true\">\n\t\t<ng-template #header>\n\t\t\t<button class=\"btn btn-success mr-1\" (click)=\"test()\">Syntax Check</button>\n\t\t\t<button class=\"btn btn-success mr-1\" (click)=\"test(inputParameterValues)\">Run</button>\n\t\t\t<button class=\"btn btn-success\" (click)=\"downloadCode(inputParameterValues)\">Download Code</button>\n\t\t</ng-template>\n\n\t\t<form>\n\t\t\t<div class=\"label\">\n\t\t\t\tInput Parameters\n\t\t\t</div>\n\t\t\t<div *ngFor=\"let inputParameter of inputParameters; let i = index\"\n\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t<form-input [label]=\"inputParameter.controls.name.value\" [(ngModel)]=\"inputParameterValues[i]\"\n\t\t\t\t\t[name]=\"'inputParameterValues' + i\" type=\"text\" placeholder=\"Enter a test value for the parameter\">\n\t\t\t\t</form-input>\n\t\t\t</div>\n\t\t\t<form-input label=\"Return Value\" [disabled]=\"true\" [(ngModel)]=\"returnParameterValue\"\n\t\t\t\tname=\"returnParameterValue\" type=\"text\"></form-input>\n\t\t\t<div class=\"label\" *ngIf=\"outputParameters.length > 0\">\n\t\t\t\tOutputs Parameters\n\t\t\t</div>\n\t\t\t<div *ngFor=\"let outputParameter of outputParameters; let i = index\"\n\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t<form-input [disabled]=\"true\" [label]=\"outputParameter.controls.name.value\"\n\t\t\t\t\t[(ngModel)]=\"outputParameterValues[i]\" [name]=\"'outputParameterValues' + i\" type=\"text\">\n\t\t\t\t</form-input>\n\t\t\t</div>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache, InvalidActions } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription ,  Observable, combineLatest} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eParameterDirection, DexihDatalinkColumn, DexihDatalinkTransformItem,\n  eTransformItemType, eTypeCode, DexihFunctionParameter, eErrorActionItems, eInvalidActionItems, FunctionParameter,\n  DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-custom-function-edit',\n  templateUrl: './custom-function-edit.component.html'\n})\nexport class CustomFunctionEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n\n  public pageTitle: string;\n\n  public cancelToken: CancelToken = new CancelToken();\n\n  private _subscription: Subscription;\n  private _returnParameterSubscription: Subscription;\n  private _parametersSubscription: Subscription;\n  private _saveSubscription: Subscription;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  functionType: eFunctionType;\n\n  eInvalidActionItems = eInvalidActionItems.filter(c => c.key > 0);\n  eErrorActionItems = eErrorActionItems.filter(c => c.key > 0);\n\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  returnParameterForm: FormGroup;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  parameters: FormArray;\n  inputParameters: AbstractControl[] = [];\n  outputParameters: AbstractControl[] = [];\n\n  inputParameterValues = [];\n  outputParameterValues = [];\n  returnParameterValue;\n\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n          this.route.data,\n          this.route.params,\n          this.hubService.getHubCacheObservable(),\n          this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n          this.hubService.getRemoteLibrariesObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        this.hubCache = result[2];\n        this.datalinkForm = result[3];\n\n        this.functionType = result[1]['functionType'];\n        if (this.functionType === eFunctionType.Validate) {\n          this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n          this.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        } else {\n          this.datalinkTransformKey = +result[1]['datalinkTransformKey'];\n          this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n        }\n\n        this.datalinkTransformItemKey = +result[1]['datalinkTransformItemKey'];\n\n        if (this.datalinkTransformForm) {\n          // // if this is a join transform, then the use the join columns for the input.\n          // if (this.datalinkTransformForm.value.transformType === eTransformType.Join ||\n          //   this.datalinkTransformForm.value.transformType === eTransformType.Lookup ) {\n          //   const table = this.datalinkTransformForm.controls.joinDatalinkTable.value;\n          //   if (!table) {\n          //     this.hubService.addHubErrorMessage('The join table could not be found.');\n          //     this.authService.navigateUp();\n          //   }\n          //   table.name = '(Joined) ' + table.name;\n          //   this.sourceTables = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          //   this.sourceTables.unshift(table);\n          // }  else {\n          //   this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          // }\n          // this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n\n          let nodeDatalinkColumn = <DexihDatalinkColumn> this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n          let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n          let io = new InputOutputColumns();\n          if (nodeDatalinkColumnKey) {\n            let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n          } else {\n            this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          }\n\n          this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n              // create a copy of the form item to allow for cancel.\n              this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n            if (!this.newDatalinkTransformItemForm) {\n                this.authService.navigateUp();\n                return;\n            }\n          } else {\n\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.CustomFunction;\n\n            let returnParameter = new DexihFunctionParameter();\n\n            if (this.functionType === eFunctionType.Condition\n              || this.functionType === eFunctionType.JoinCondition || this.functionType === eFunctionType.Validate) {\n                returnParameter.dataType = eTypeCode.Boolean;\n            } else {\n              returnParameter.dataType = eTypeCode.String;\n            }\n            returnParameter.name = 'Return';\n            returnParameter.direction = eParameterDirection.ReturnValue;\n            returnParameter.rank = 0;\n            returnParameter.position = -1;\n            returnParameter.datalinkColumn = null;\n            returnParameter.isValid = true;\n\n            let funcParam = new FunctionParameter();\n            funcParam.name = 'Return';\n            returnParameter['runTime'] = {functionParameter: funcParam};\n\n            newItem.dexihFunctionParameters = new Array<DexihFunctionParameter>();\n            newItem.dexihFunctionParameters.push(returnParameter);\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          // this.returnParameterForm = this.editDatalinkService.hubFormsService\n          //   .datalinkFunctionParametersFormGroup(returnParameter);\n\n          // if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n          // this._returnParameterSubscription = this.returnParameterForm.valueChanges.subscribe(parameter => {\n          //   this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(parameter.datalinkColumn);\n          //   this.newDatalinkTransformItemForm.controls.returnType.setValue(parameter.dataType);\n          //   this.newDatalinkTransformItemForm.markAsDirty();\n          // });\n\n          this.parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n\n          this.setParameters(this.parameters.controls);\n\n          if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n          this._parametersSubscription = this.parameters.valueChanges.subscribe(p => {\n            this.setParameters(p);\n          });\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n    if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('Function has changed',\n        'The function has changed.  Would you like to discard the changes and return to the previous screen?'\n        ).then(confirm => {\n          resolve(confirm);\n        }).catch(reason => {\n          resolve(false);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private setParameters(p: AbstractControl[]) {\n      this.inputParameters = this.parameters.controls.sort((a, b) => a.value.position - b.value.position)\n      .filter(c => c.value.direction === eParameterDirection.Input);\n\n      this.inputParameterValues = new Array(this.inputParameters.length);\n\n    this.outputParameters = this.parameters.controls.sort((a, b) => a.value.position - b.value.position)\n      .filter(c => c.value.direction === eParameterDirection.Output);\n\n      this.outputParameterValues = new Array(this.inputParameters.length);\n\n      this.returnParameterForm = <FormGroup> this.parameters.controls.find(c => c.value.direction === eParameterDirection.ReturnValue);\n    }\n\n  private parametersArray() {\n    return <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n  }\n\n  addParameter(parameter: FormGroup, direction: eParameterDirection) {\n    try {\n      let newParameter = new DexihFunctionParameter();\n      if (parameter) {\n        let oldParameter = parameter.value;\n        newParameter.dataType = oldParameter.dataType;\n        newParameter.name = oldParameter.name;\n        newParameter.position = oldParameter.position + 1;\n      }\n\n      newParameter.name = '';\n      newParameter.datalinkColumn = null;\n      newParameter.value = null;\n      newParameter.dataType = eTypeCode.String;\n      newParameter.direction = direction;\n      newParameter.rank = 0;\n      newParameter.isValid = true;\n\n      let parameters = this.parametersArray();\n      let newParameterForm = this.editDatalinkService.hubFormsService\n        .datalinkFunctionParametersFormGroup(newParameter);\n      parameters.push(newParameterForm);\n\n      // reset the positions\n      parameters.controls.sort((a, b) => a.value.position - b.value.position).forEach((p, index) => {\n        (<FormGroup>p).controls.position.setValue(index * 10);\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, add parameter');\n    }\n\n  }\n\n  removeParameter(parameter: FormGroup) {\n    try {\n      let inputParameters = this.parametersArray();\n      let index: number = inputParameters.controls.indexOf(parameter);\n      if (index > -1) {\n        inputParameters.removeAt(index);\n      }\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, remove parameter');\n    }\n  }\n\n  newDefaultParameter(): DexihFunctionParameter {\n    try {\n      let parameter = new DexihFunctionParameter();\n      parameter.datalinkTransformItemKey = this.newDatalinkTransformItemForm.value.key;\n      parameter.dataType = eTypeCode.String;\n      parameter.rank = 0;\n      parameter.isValid = true;\n      return parameter;\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, default parameter');\n    }\n\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n  downloadCode(parameters = null) {\n    this.hubService.downloadCustomFunction(this.newDatalinkTransformItemForm.value, parameters).catch(reason => {});\n  }\n\n  test(parameters = null) {\n    this.hubService.testCustomFunction(this.newDatalinkTransformItemForm.value, parameters, this.cancelToken).then(result => {\n      this.hubService.addHubSuccessMessage('The function has successfully compiled.');\n\n      if (result && result.length > 0) {\n        result.forEach((value, index) => {\n          if (index === 0) {\n            this.returnParameterValue = value;\n          } else {\n            this.outputParameterValues[index - 1] = value;\n          }\n        });\n      } else {\n        this.returnParameterValue = null;\n        this.outputParameterValues.forEach(c => c = null );\n      }\n    }).catch(reason => {\n      this.returnParameterValue = null;\n      this.outputParameterValues.forEach(c => c = null );\n      this.hubService.addHubMessage(reason);\n    });\n  }\n}\n\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section [title]=\"pageTitle\" [showExpandButton]=\"false\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\"\n\t\t\t\t(click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\t\t<form [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.AggregatePair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Aggregate\" formControlName=\"aggregate\" [items]=\"eAggregateItems\" itemKey=\"key\"\n\t\t\t\t\t\t\titemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section *ngIf=\"showInput\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Input Column\" formControlName=\"sourceDatalinkColumn\" [items]=\"inputColumns\"\n\t\t\t\t\t\t\tparentName=\"group\" childItems=\"columns\"\n\t\t\t\t\t\t\t[(textValue)]=\"sourceValue\" (textValueChange)=\"updateSourceValue($event)\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\"\n\t\t\t\t\t\t\t[enableTextEntry]=\"true\" [enableTextEntryMatch]=\"false\" itemName=\"logicalName\" itemKey=\"key\"\n\t\t\t\t\t\t\t[errors]=\"sourceErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.FilterPair || transformItemType == eTransformItemType.JoinPair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Compare\" formControlName=\"filterCompare\" [items]=\"compare\" itemKey=\"key\"\n\t\t\t\t\t\t\titemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.FilterPair && newDatalinkTransformItemForm.controls.filterCompare.value != eCompare.IsNotNull && newDatalinkTransformItemForm.controls.filterCompare.value != eCompare.IsNull\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select\n\t\t\t\t\t\t\tlabel=\"Compare Column/Value\" formControlName=\"filterDatalinkColumn\"  [items]=\"inputColumns\"\n\t\t\t\t\t\t\tparentName=\"group\" childItems=\"columns\"\n\t\t\t\t\t\t\t[enableTextEntry]=\"true\" [(textValue)]=\"filterValue\"\n\t\t\t\t\t\t\t(textValueChange)=\"updateFilterValue($event)\" [enableTextEntryMatch]=\"false\" [enableKeySelect]=\"false\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"logicalName\" [errors]=\"filterValueErrors\"\n\t\t\t\t\t\t\t[textEntryItems]=\"variables\" textEntryItemsTitle=\"Variables\" [setTextEntryToValue]=\"false\"\n\t\t\t\t\t\t\tnote=\"Note: For static date values use format YYYY-MM-DD (e.g. 2018-01-30)\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"showOutput\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Output Column\" formControlName=\"targetDatalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"logicalName\" note=\"Enter new column, or select existing\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\" (textValueChange)=\"updateNewColumn($event)\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n\t\t\t\t\t\t\ttextEntryNote=\"Enter new column name, or select existing\" [errors]=\"targetErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.Sort\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Direction\" formControlName=\"sortDirection\" [items]=\"sortDirections\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.JoinPair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Join Column\" formControlName=\"joinDatalinkColumn\" [items]=\"joinColumns\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"logicalName\" note=\"Select a join column\"\n\t\t\t\t\t\t\ttextEntryNote=\"Enter a value to add a new column\" [errors]=\"joinErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, sortDirections } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup } from '@angular/forms';\nimport { compare } from '../../../hub.query.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eTransformItemType, DexihDatalinkColumn, eAggregate, eCompare, \n  DexihDatalinkTransformItem, eTypeCode, DexihDatalinkTarget, DexihTable, DexihTableColumn, eAggregateItems } from '../../../../shared/shared.models';\n\n@Component({\n  selector: 'mapping-edit',\n  templateUrl: './mapping-edit.component.html'\n})\nexport class MappingEditComponent implements OnInit, OnDestroy {\n  // public hubCache: HubCache;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _formChangesObserve: Subscription;\n  private _saveSubscription: Subscription;\n\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  public hubCache: HubCache;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  transformItemType: eTransformItemType;\n  eTransformItemType = eTransformItemType;\n\n  variables: string[];\n\n  newDatalinkTransformItemForm: FormGroup;\n  newColumn: DexihDatalinkColumn;\n  filterValue: any;\n  sourceValue: any;\n\n  inputColumns: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n  outputColumns: Array<DexihDatalinkColumn>;\n  joinColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n  outputTables: Array<DexihTable>;\n  showInput = true;\n  showOutput = true;\n\n  eAggregate = eAggregate;\n  eAggregateItems = eAggregateItems.filter(c => c.key > 0);\n  compare = compare;\n  eCompare = eCompare;\n\n  sourceErrors: string;\n  targetErrors: string;\n  joinErrors: string;\n\n  sortDirections = sortDirections;\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n        this.hubService.getRemoteLibrariesObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        let datalinkForm = result[3];\n\n        if (!this.hubCache.isLoaded()) { return; }\n\n        this.datalinkForm = datalinkForm;\n\n        this.variables = this.editDatalinkService.getVariables();\n\n        this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n        this.datalinkTransformKey = +params['datalinkTransformKey'];\n        this.transformItemType = +params['type'];\n\n        if (this.datalinkForm) {\n          this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n          switch (this.transformItemType) {\n              case eTransformItemType.JoinPair:\n                this.showInput = true;\n                this.showOutput = false;\n                this.pageTitle = 'Edit Join';\n                break;\n              case eTransformItemType.Column:\n              this.showInput = true;\n              this.showOutput = false;\n              this.pageTitle = 'Edit Group';\n                break;\n              case eTransformItemType.JoinNode:\n              this.showInput = false;\n              this.showOutput = true;\n                this.pageTitle = 'Edit Join Node';\n                break;\n              case eTransformItemType.GroupNode:\n              this.showInput = false;\n              this.showOutput = true;\n                this.pageTitle = 'Edit Group Node';\n                break;\n              case eTransformItemType.Sort:\n              this.showInput = true;\n              this.showOutput = false;\n                this.pageTitle = 'Edit Sort';\n                break;\n              case eTransformItemType.FilterPair:\n              this.showInput = true;\n              this.showOutput = false;\n                this.pageTitle = 'Edit Condition';\n                break;\n              case eTransformItemType.AggregatePair:\n                this.pageTitle = 'Edit Aggregate';\n                this.showInput = true;\n                this.showOutput = true;\n                break;\n              default:\n                this.pageTitle = 'Edit Mapping';\n                this.showInput = true;\n                this.showOutput = true;\n          }\n\n          let nodeDatalinkColumn = this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n          let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n          let io = new InputOutputColumns();\n          if (nodeDatalinkColumnKey) {\n            let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            let nodeColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n            this.inputColumns = this.editDatalinkService.getColumnGroups(nodeColumns);\n            this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          } else {\n            this.inputColumns = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n            this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          }\n          if (this.datalinkTransformForm.value.joinDatalinkTable) {\n            this.joinColumns = this.datalinkTransformForm.value.joinDatalinkTable.dexihDatalinkColumns;\n          }\n\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n          let table = new DexihTable() \n          table.name = \"Output Columns\";\n          table.dexihTableColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.outputTables = [table];\n\n          if(this.datalinkTargets) {\n              this.datalinkTargets.forEach(target => {\n                  this.outputTables.push(target['table']);\n              });\n          }\n\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n              this.filterValue = this.datalinkTransformItemForm.controls.filterValue.value;\n              this.sourceValue = this.datalinkTransformItemForm.controls.sourceValue.value;\n\n              // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = this.transformItemType;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          this.getErrors();\n          if (this._formChangesObserve) { this._formChangesObserve.unsubscribe(); }\n          this._formChangesObserve = this.newDatalinkTransformItemForm.statusChanges.subscribe(() => {\n            this.getErrors();\n          })\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Mapping Function');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._formChangesObserve) { this._formChangesObserve.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  getErrors() {\n    this.targetErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.targetDatalinkColumn);\n    this.sourceErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn);\n    this.joinErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn);\n  }\n\n  apply() {\n    // this.datalinkTransformItemForm.setValue(this.newDatalinkTransformItemForm.value);\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n  }\n\n  updateNewColumn(value: string) {\n    let current = this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.value;\n    if (value && (!current || current.name !== value )) {\n      let key: number;\n      if (this.newColumn) {\n        key = this.newColumn.key;\n      } else {\n        key = this.hubService.getHubCache().getNextSequence();\n      }\n\n      let sourceColumn = <DexihDatalinkColumn>this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn.value;\n\n      if (sourceColumn) {\n        let io = new InputOutputColumns();\n        this.newColumn = io.copyDatalinkColumn(sourceColumn, 1000 - key, 'mapping');\n      } else {\n        this.newColumn = new DexihDatalinkColumn();\n        this.newColumn.position = 1000 - key;\n\n        if (this.transformItemType === eTransformItemType.JoinNode) {\n          this.newColumn.dataType = eTypeCode.Node;\n          this.newColumn.childColumns = this.joinColumns;\n        } else {\n          this.newColumn.dataType = eTypeCode.String;\n        }\n      }\n\n      this.newColumn.name = value;\n      this.newColumn.logicalName = value;\n      this.newColumn.columnGroup = 'mapping';\n      this.newColumn.key = key;\n\n      this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(this.newColumn);\n    }\n  }\n\n  updateFilterValue(value: string) {\n      this.newDatalinkTransformItemForm.controls.filterValue.setValue(value);\n  }\n\n  updateSourceValue(value: string) {\n    this.newDatalinkTransformItemForm.controls.sourceValue.setValue(value);\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, combineLatest} from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable()\nexport class DatalinkEditGuard implements CanDeactivate<CanComponentDeactivate> {\n\n  canDeactivate(component: CanComponentDeactivate) {\n    return component && component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n","<dexih-widget-section title=\"Preview Transform Data\" [showExpandButton]=\"true\" [padding]=\"false\">\n    <ng-template #header>\n        <dexih-button-close (click)=\"close()\"></dexih-button-close>\n    </ng-template>\n    <preview-data [datalink]='datalinkForm?.value' [datalinkTransformKey]=\"datalinkTransformKey\" [viewSource]='eDataObjectType.Datalink'></preview-data>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'datalink-preview-data',\n    templateUrl: './preview-data.component.html'\n})\nexport class PreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    public error: string;\n\n    datalinkTransformKey: number;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[4];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                // load the cache first\n                if (this.hubCache.isLoaded()) {\n                    // get the hub key from the route data, and update the service.\n                    this.datalinkTransformKey = + params['datalinkTransformKey'];\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Preview Transform Data');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n}\n","<dexih-widget-section [title]=\"'Preview ' + name\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #header>\n        <dexih-button-close (click)=\"close()\"></dexih-button-close>\n    </ng-template>\n    <preview-data *ngIf=\"tableKey\" [key]='tableKey' [viewSource]='eDataObjectType.Table'></preview-data>\n    <preview-data *ngIf=\"datalinkKey\" [key]='datalinkKey' [viewSource]='eDataObjectType.Datalink'></preview-data>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { FormGroup } from '@angular/forms';\nimport { eDataObjectType, DexihTable } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'datalink-preview-table',\n    templateUrl: './preview-table.component.html'\n})\nexport class PreviewTableComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    public error: string;\n\n    tableKey: number;\n    datalinkKey: number;\n    \n    name: string;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                // load the cache first\n                if (this.hubCache.isLoaded()) {\n                    // get the hub key from the route data, and update the service.\n                    if (params['tableKey']) {\n                        this.tableKey = +params['tableKey'];\n                        let table = this.hubCache.getTable(this.tableKey);\n                        if (table) {\n                            this.name = table.name;\n                        }\n                    } else {\n                        this.datalinkKey = +params['datalinkKey'];\n                        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key == this.datalinkKey);\n                        if (datalink) {\n                            this.name = datalink.name;\n                        }\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Preview Table Data');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n}\n","<div>\n\t<div class=\"widget-body-toolbar\">\n\t\t<div class=\"form-row\">\n\t\t\t<div class=\"col-sm-6\">\n\t\t\t\t<h5>Transform Output Columns</h5>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm-6 text-right\">\n                <dexih-button-close (click)=\"close()\"></dexih-button-close>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n    <dexih-table \n        [enableMultiSelect]=\"true\"\n        [enableManualSort]=\"true\"\n        (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\"\n        [columns]=\"columns\"\n        [dataObservable]=\"columnData\"\n        >\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\"></dexih-button-delete>\n            </ng-template>\n\n            <ng-template #selectedItemAction select=\"selectedItemAction\" let-column=\"item\">\n                <dexih-button-edit (click)=\"editColumn(column)\" title=\"Edit the column\"></dexih-button-edit>\n            </ng-template>\n\n            <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n                <dexih-button-new (click)=\"deleteSelected(items)\" title=\"Create a new column\"></dexih-button-new>\n            </ng-template>\n\n    </dexih-table>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService} from '../../../../+auth/auth.service';\nimport { Observable, Subscription, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'transform-table-edit-form',\n    templateUrl: './transform-table-edit.component.html',\n})\nexport class TransformTableEditComponent implements OnInit, OnDestroy {\n\n    private _subscription: Subscription;\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    datalinkTransformKey: number;\n    datalinkTransformForm: FormGroup;\n    transformTableForm: FormGroup;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { control: 'name', title: 'Column Name', format: '', tooltip: 'description'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'logicalName', title: 'Logical Name', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.datalinkTransformKey = +params['datalinkTransformKey'];\n                this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n                this.transformTableForm = <FormGroup>this.datalinkTransformForm.controls.transformTable\n                this.updateColumnData();\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Transform Table Edit');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        let tableData = [];\n\n        let tableColumns = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n        tableColumns.controls\n        .filter(c => c.value.isValid)\n        .sort((a, b) => a.value.position - b.value.position)\n        .forEach(column => {\n            const columnForm = <FormGroup>column;\n            tableData.push({\n                key: column.value.key,\n                position: column.value.position,\n                name: columnForm.controls.name,\n                description: column.value.description,\n                dataType: column.value.dataType,\n                allowDbNull: column.value.allowDbNull,\n                logicalName: column.value.logicalName,\n                updateDate: column.value.updateDate,\n            });\n        });\n        this._columnData.next(tableData);\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      const columnsArray = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let columnIndex = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        if (columnIndex >= 0) {\n            columnsArray.removeAt(columnIndex);\n        }\n        this.updateColumnData();\n    });\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n\n  close() {\n      this.authService.navigateUp();\n  }\n\n}\n","<dexih-widget-section title='Transforms' [padding]=\"false\">\n    <div *ngIf=\"datalinkTransforms\" class=\"bg-light pt-1 pb-1 d-flex ≈\">\n        <ul class=\"transform-container\">\n            <li class=\"d-flex align-items-stretch p-0 m-3\" *ngIf=\"datalinkTransforms.length === 0\">\n                <a [routerLink]=\"['new', 1]\" class=\"btn btn-outline-success\" title=\"Insert a transform before this\">\n                    <div class=\"d-block\">\n                        Add Transform\n                    </div>\n                    <i class=\"fa fa-4x fa-plus\"></i>\n                </a>\n                \n            </li>\n\n            <div class=\"d-flex m-3 \" *ngFor=\"let datalinkTransform of datalinkTransforms; last as isLast\">\n                <li  class=\"d-flex align-items-stretch p-0\">\n                    <a [routerLink]=\"['new', datalinkTransform.transform.value.position-1]\" class=\"insert-before btn btn-sm btn-primary\"\n                        title=\"Insert a transform before this\"><i class=\"fa fa-plus\"></i></a>\n                \n                    <a [routerLink]=\"['new', datalinkTransform.transform.value.position+1]\" class=\"insert-after btn btn-sm btn-primary\"\n                        title=\"Insert a transform after this\"><i class=\"fa fa-plus\"></i></a>\n\n                        <a class=\"delete btn btn-sm btn-danger  mr-1\" href=\"javascript:void(0)\"\n                        (click)=\"deleteTransform(datalinkTransform.transform.value)\"\n                        title=\"Delete this transform\"><i class=\"fa fa-remove\"></i></a>\n\n\n                    <a [routerLink]=\"['transform', datalinkTransform.transform.value.key]\" routerLinkActive=\"btn-outline-success\" class=\"btn btn-outline-primary\" style=\"width:100%\"\n                        [title]=\"'Select the ' + datalinkTransform.transform.value.name + ' transform.'\">\n                        <div class=\"d-block\">\n                        {{datalinkTransform.name}}\n                        <div>\n                        <span class=\"fa-4x\" [ngClass]=\"datalinkTransform.icon\"></span>\n                        <dexih-invalid-form-icon [control]=\"datalinkTransform.transform\">\n                        </dexih-invalid-form-icon>\n                    </div>\n                    </div>\n                    </a>\n\n                </li>\n\n                \n                <div class=\"arrow bg-primary\">\n                    <a class=\"preview btn btn-sm btn-primary  mr-1\"\n                        [routerLink]=\"['transform', datalinkTransform.transform.value.key, 'preview-transform-data']\"\n                        title=\"Preview transform data\"><i class=\"fa fa-search\"></i></a>\n\n                    <div *ngIf=\"!isLast\" class=\"arrow-head\">\n\n                    </div>\n                </div>\n            </div>\n        </ul>\n    </div>\n</dexih-widget-section>\n<router-outlet></router-outlet>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { transformTypes } from '../../../hub.remote.models';\nimport { HubCache } from '../../../hub.models';\nimport { DexihDatalinkTransform, eTransformType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-transforms-form',\n    templateUrl: './datalink-edit-transforms.component.html',\n    styleUrls: ['./transforms.scss']\n})\nexport class DatalinkEditTransformsComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _transformsChange: Subscription;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle = 'Transform';\n    public message: string;\n\n    public datalinkTransforms: {transform: AbstractControl, name: string, icon: string, invalid: boolean}[] = null;\n\n    public logger = new LogFactory('datalink-edit-transforms');\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    let datalinkTransformKey = + params['datalinkTransformKey'];\n\n                    this.logger.LogC(() => `loading transform with key ${datalinkTransformKey}`, eLogLevel.Trace);\n\n                    // this.datalinkForm.updateValueAndValidity({emitEvent: true, onlySelf: true});\n\n                    this.refreshTransforms();\n\n                    if (this._transformsChange) { this._transformsChange.unsubscribe(); }\n                    this._transformsChange = this.datalinkForm.controls.dexihDatalinkTransforms.valueChanges\n                        .subscribe(() => this.refreshTransforms());\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Transform');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformsChange) { this._transformsChange.unsubscribe(); }\n    }\n\n    refreshTransforms() {\n        this.logger.LogC(() => `refreshing transforms list`, eLogLevel.Trace);\n\n        const transformsArray = <FormArray> this.datalinkForm.controls.dexihDatalinkTransforms;\n        const transforms =  transformsArray.controls\n            .filter(c => c.value.transformType !== eTransformType.Validation &&\n                c.value.transformType !== eTransformType.Profile)\n            .sort((a, b) => a.value.position - b.value.position);\n\n        const datalinkTransforms = transforms.map(transform => {\n            const type = transformTypes.find(c => c.key === transform.value.transformType);\n            let icon = '';\n            if (type) {\n                icon = type.icon\n            }\n            const name = this.hubCache.getTransformName(transform.value);\n            return {transform: transform, icon: icon, name: name, invalid: transform.invalid};\n        });\n\n        this.datalinkTransforms = datalinkTransforms;\n    }\n\n    deleteTransform(datalinkTransform: DexihDatalinkTransform) {\n        this.logger.LogC(() => `deleteTransform`, eLogLevel.Trace);\n        this.editDatalinkService.deleteDatalinkTransform(datalinkTransform).then(() => {\n            this.refreshTransforms();\n        });\n    }\n\n    previewData(datalinkTransform: DexihDatalinkTransform) {\n        this.router.navigate(['transform', datalinkTransform.key, 'preview-transform-data'], { relativeTo: this.route });\n    }\n}\n","<dexih-widget-section title='Select a Transform' [padding]=\"true\">\n    <div class=\"d-flex flex-wrap justify-content-around\">\n            <a *ngFor=\"let transform of transforms\" (click)=\"insert(transform.transformReference)\" href=\"javascript:void(0)\" \n            class=\"btn btn-outline-primary p-0 m-3\" style=\"width:400px\">\n                <div class=\"d-flex\">\n                    <div class=\"border-right border-primary p-3\" style=\"min-width:140px\">\n                        <div class=\"d-block\">\n                            {{transform.transformReference.name}}\n                        </div>\n                        <i class=\"fa fa-4x\" [ngClass]=\"transform.icon\"></i>\n                    </div>\n                    <div class=\"p-3 text-left\">\n                        {{transform.transformReference.description}}\n                    </div>\n                </div>\n            </a>\n    </div>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { TransformReference, transformTypes } from '../../../hub.remote.models';\n\n\n@Component({\n    selector: 'datalink-edit-new-transform',\n    templateUrl: './datalink-edit-new-transform.component.html'\n})\n\nexport class DatalinkEditNewTransformComponent implements OnInit, OnDestroy {\n\n    private _subscription: Subscription;\n\n    public transforms: Array<{transformReference: TransformReference, icon: string}>;\n    public position: number;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private authService: AuthService,\n        private route: ActivatedRoute,\n        private router: Router\n\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(async result => {\n                this.transforms = [];\n                let userConfigTransforms = await this.hubService.GetUserConfigTransformReference();\n\n                userConfigTransforms.forEach(transform => {\n                    let transformType = transformTypes.find(c => c.key === transform.transformType);\n\n                    let icon = '';\n                    if (transformType) {\n                        icon = transformType.icon;\n                    }\n\n                    this.transforms.push({transformReference: transform, icon: icon })\n                })\n\n                this.position = + result[1]['position'];\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'New Transform');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n    insert(transform: TransformReference) {\n        let newDatalinkTransformForm = this.editDatalinkService.insertDatalinkTransform(this.position, transform);\n        this.router.navigate(['transform', newDatalinkTransformForm.value.key], { relativeTo: this.route.parent });\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<div *ngIf=\"columnFormService?.currentForm\">\n    <div class=\"list-group-item list-group-item-info rounded-0\">\n        <div class=\"d-flex flex-row\">\n            <h5>Edit Column </h5>\n            <div class=\"ml-auto\">\n                <dexih-invalid-form-details (click)=\"columnFormService.showErrors()\"\n                    [control]=\"columnFormService.currentForm\" class=\"mr-1\"></dexih-invalid-form-details>\n                <dexih-button-apply [disabled]=\"columnFormService.currentForm.pristine\"\n                    (click)=\"!columnFormService.currentForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n                <dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n            </div>\n        </div>\n    </div>\n\n\n    <div class=\"container  mt-3 mb-3\">\n        <column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"true\"></column-edit-base>\n    </div>\n\n    <table-edit-columns *ngIf=\"columnFormService.currentForm.controls.dataType.value === eTypeCode.Node\"\n        [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n</div>","import { Component, OnInit, OnChanges, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, deltaTypes, securityFlags, } from '../../../hub.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription ,  combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { eTypeCode, eParameterDirection, DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datalink-column-edit',\n    templateUrl: './datalink-column-edit.component.html',\n})\nexport class DatalinkColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    private _subscription: Subscription;\n    private _saveSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public datalinkColumnKey: number;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private sourceDatalinkTableForm: FormGroup;\n\n    eTypeCode = eTypeCode;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    public columnFormService: HubFormsService;\n    private originalColumnForm: FormGroup;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        fb: FormBuilder,\n        private route: ActivatedRoute,\n    ) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkColumnKey = + result[0]['datalinkColumnKey'];\n                this.hubCache = result[1];\n\n                this.sourceDatalinkTableForm = <FormGroup>this.editDatalinkService.hubFormsService.currentForm\n                .controls.sourceDatalinkTable;\n\n                this.initializeForm();\n            });\n\n            if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n            this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n                if(value) {\n                    this.applyExit();\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink column edit');\n        }\n    }\n\n    ngOnChanges() {\n        if (this.hubCache) {\n            this.initializeForm();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    }\n\n    // searches the datalink and transforms for a column\n    findColumn(): FormGroup {\n        // look for column in source table\n        let columnsArray = <FormArray>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns;\n        let column = <FormGroup> columnsArray.controls.find(c => c.value.key === this.datalinkColumnKey);\n        if (column) { return column; }\n\n        // look for column as transform outputs\n        let transformForms = <FormArray>this.editDatalinkService.hubFormsService.currentForm\n            .controls.dexihDatalinkTransforms;\n\n        transformForms.controls.forEach(t => {\n            let datalinkTransformForm = <FormGroup>t\n            let items = <FormArray>datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            items.controls.forEach(i => {\n                if (!column) {\n                    let itemForm = <FormGroup>i;\n                    if (itemForm.controls.targetDatalinkColumn.value &&\n                        itemForm.controls.targetDatalinkColumn.value.key === this.datalinkColumnKey) {\n                        column = <FormGroup> itemForm.controls.targetDatalinkColumn;\n                    }\n\n                    if (!column) {\n                        columnsArray = <FormArray> itemForm.controls.dexihFunctionParameters;\n                        let parameter = <FormGroup> columnsArray.controls.find(c =>\n                            HubCache.parameterIsOutput(c.value) &&\n                            c.value.datalinkColumn &&\n                            c.value.datalinkColumn.key === this.datalinkColumnKey\n                        );\n                        if (parameter) {\n                            column = <FormGroup> parameter.controls.datalinkColumn;\n                        }\n                        if (!column) {\n                            columnsArray.controls.forEach(c => {\n                                let arrayParameters = <FormArray> (<FormGroup> c).controls.arrayParameters;\n                                if (arrayParameters) {\n                                    parameter = <FormGroup> arrayParameters.controls.find(p =>\n                                        HubCache.parameterIsOutput(p.value) &&\n                                        p.value.datalinkColumn &&\n                                        p.value.datalinkColumn.key === this.datalinkColumnKey\n                                    );\n                                    if (parameter) {\n                                        column = <FormGroup> parameter.controls.datalinkColumn;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        });\n\n        return column;\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n\n        if (this.datalinkColumnKey) {\n            this.originalColumnForm = this.findColumn();\n            if (!this.originalColumnForm) {\n                this.authService.informationDialog('Cannot Edit', 'The selected column could not be edited.').then(() => {\n                    this.authService.navigateUp();\n                });\n\n                return;\n            }\n            columnForm = this.columnFormService.datalinkTableColumn(null, this.originalColumnForm.value);\n        } else {\n            let column = new DexihDatalinkColumn();\n            column.key = this.hubCache.getNextSequence();\n            column.datalinkTableKey = this.sourceDatalinkTableForm.controls.key.value;\n            let columnsArray = <DexihDatalinkColumn[]>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns.value;\n            let maxPos = 1;\n            columnsArray.forEach(col => {\n                if (col.position > maxPos) { maxPos = col.position; }\n            })\n            column.position = maxPos + 1;\n            columnForm = this.columnFormService.datalinkTableColumn(columnsArray, column);\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.authService.navigateUp();\n    }\n\n    applyExit() {\n        const columnForm = this.columnFormService.currentForm;\n\n        // if no originalColumn, then add it to the source columns.\n        if (!this.originalColumnForm) {\n            let columnsArray = <FormArray>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns;\n            columnsArray.push(columnForm);\n        } else {\n            this.originalColumnForm.setValue(columnForm.value);\n        }\n\n        this.sourceDatalinkTableForm.markAsDirty();\n        this.authService.navigateUp();\n    }\n}\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<div class=\"list-group-item list-group-item-info rounded-0\">\n\t\t<div class=\"d-flex flex-row\">\n\t\t\t<h5>Un-Group Column Node</h5>\n\t\t\t<div class=\"ml-auto\">\n\t\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\" (click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\"\n\t\t\t\t class=\"mr-1\"></dexih-button-apply>\n\t\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div class=\"container  mt-3 mb-3\" *ngIf=\"datalinkTransformForm\">\n\n\t\t<form [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section class=\"col col-xs-12\">\n\t\t\t\t\t<form-select label=\"Column Node\" \n\t\t\t\t\t\tformControlName=\"sourceDatalinkColumn\" \n\t\t\t\t\t\t[items]=\"inputColumns\" \n\t\t\t\t\t\t[(textValue)]=\"sourceValue\"\n\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t[enableTextEntryMatch]=\"false\"\n\t\t\t\t\t\t[enableKeySelect]=\"false\"\n\t\t\t\t\t\titemKey=\"key\"\n\t\t\t\t\t\titemName=\"logicalName\"\n\t\t\t\t\t\t[errors]=\"sourceErrors\"\n\t\t\t\t\t\t>\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\n\t\t\t\t<div class=\"mt-1\">\n\n\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col border bg-primary text-white font-weight-bold text-truncate\">UnGroup Column</div>\n\t\t\t\t\t\t</div>\n\t\t\t\n\t\t\t\t\t\t<div *ngFor=\"let parameter of newDatalinkTransformItemForm.controls.dexihFunctionParameters.controls; let i = index;\" class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col border bg-secondary text-white text-truncate\">\n\t\t\t\t\t\t\t\t<div>{{parameter.controls.name.value}}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eParameterDirection, DexihDatalinkColumn, DexihDatalinkTransformItem, eTransformItemType, DexihFunctionParameter, FunctionParameter, eTypeCode } from '../../../../shared/shared.models';\n\n@Component({\n\n  selector: 'dexih-unGroup-edit',\n  templateUrl: './unGroup-edit.component.html'\n})\nexport class UnGroupEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  typeCodes = TypeCodes;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _nodeSubscription: Subscription;\n\n  transformFunctionType: eFunctionType;\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n\n  variables = [];\n\n  allowOutput = false;\n  allowReturn = true;\n\n  logger = new LogFactory('unGroup-edit');\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        this.datalinkForm = result[3];\n\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        if (this.hubCache && this.hubCache.isLoaded() && this.datalinkForm) {\n            this.datalinkTransformKey = +params['datalinkTransformKey'];\n            this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n            this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n            this.variables = this.editDatalinkService.getVariables();\n\n            let nodeDatalinkColumn = this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n            let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n            let io = new InputOutputColumns();\n            if (nodeDatalinkColumnKey) {\n              let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n              this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n            } else {\n              this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n            }\n\n            this.inputColumns = this.inputColumns.filter(c => c.dataType === eTypeCode.Node);\n\n            if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n            if (!this.datalinkTransformItemForm) {\n              this.authService.navigateUp();\n              return;\n            }\n\n            // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n              let parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n              parameters.controls.forEach((control: FormGroup) => {\n                let runTime = {};\n                runTime['functionParameter'] = new FunctionParameter();\n                if (control.value.datalinkColumn) {\n                  runTime['functionParameter'].name = control.value.datalinkColumn.name;\n                }\n                control.controls['runTime'].setValue(runTime);\n              });\n\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.UnGroup;\n            this.datalinkTransformItemKey = 0;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          if (this._nodeSubscription) { this._nodeSubscription.unsubscribe(); }\n          this._nodeSubscription = this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn.valueChanges\n            .subscribe(sourceDatalinkColumn => {\n              let parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n              // clear previous parameters\n              while (parameters.length) {\n                parameters.removeAt(0);\n              }\n              let column = <DexihDatalinkColumn> sourceDatalinkColumn;\n              // add a paramter for each childColumn\n              if (column.childColumns && column.childColumns.length > 0) {\n                column.childColumns.forEach((childColumn, index) => {\n                  let outputColumn = io.copyDatalinkColumn(childColumn, 0, 'un-group')\n                  let newParameter = new DexihFunctionParameter();\n                  newParameter.datalinkTransformItemKey = this.datalinkTransformItemKey;\n                  newParameter.name = childColumn.name;\n                  newParameter.rank = childColumn.rank;\n                  newParameter.direction = eParameterDirection.Output;\n                  newParameter.dataType = childColumn.dataType;\n                  newParameter.position = index;\n                  newParameter.key = this.hubCache.getNextSequence();\n                  newParameter.datalinkColumn = outputColumn\n                  newParameter.isValid = true;\n                  newParameter['runTime'] = {};\n                  newParameter['runTime'].functionParameter = new FunctionParameter();\n                  newParameter['runTime'].functionParameter.name = childColumn.name;\n\n                  let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionParametersFormGroup(newParameter);\n                  parameters.push(newParameterForm);\n                });\n              }\n            });\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'UnGroup Node Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._nodeSubscription) { this._nodeSubscription.unsubscribe(); }\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('The function has changed',\n          'The function has changed.  Do you want to discard the changes and continue?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n}\n\n","<div *ngIf=\"!showColumn\">\n\n<dexih-widget-section title=\"Edit Target Table\" [showExpandButton]=\"true\">\n    <ng-template #header>\n        <dexih-button-preview class=\"mr-1\" (click)=\"previewData()\"></dexih-button-preview>\n        <dexih-button class=\"mr-1\" (click)=\"importTable()\" buttonClass=\"btn-primary\" iconClass=\"fa fa-refresh\" title=\"Re-import table from connection.\">\n            Re-Import\n        </dexih-button>\n        <dexih-button (click)=\"createTable()\" class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-bullseye\" title=\"Drop & re-create the table on the connection.  Warning: This remove all data from the table!\">\n            Drop & Create\n        </dexih-button>\n\n        <dexih-button-apply class=\"mr-1\" (click)=\"apply()\" [disabled]=\"!this.targetTableForm?.dirty\"></dexih-button-apply>\n        <cancel-button [formsService]=\"tableFormService\"></cancel-button>\n    </ng-template>\n\n    <form *ngIf=\"targetTableForm\"  [formGroup]=\"targetTableForm\">\n        <fieldset>\n            <section>\n                <form-checkbox label=\"Create a new table\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"newTable\" (ngModelChange)=\"toggleNewTable($event)\"></form-checkbox>\n            </section>\n            <section *ngIf=\"!newTable\">\n                <form-select label=\"Target Table\" formControlName=\"tableKey\" [items]=\"connectionTables\" parentName=\"name\" childItems=\"dexihTables\"\n                    itemKey=\"key\" itemName=\"logicalName\" note='Select the target table'>\n                </form-select>\n            </section>\n            <section *ngIf=\"nodes?.length > 0\">\n                <form-select label=\"Node level\" formControlName=\"nodeDatalinkColumn\" [items]=\"nodes\" [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" node='Specify the node where the transform should be applied to.' [allowNullSelect]=\"true\" selectNullMessage='Use top level'>\n                </form-select>\n            </section>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-table-edit-properties *ngIf=\"tableFormService.currentForm.value\" [formsService]=\"tableFormService\" [isExpanded]=\"newTable\"></dexih-table-edit-properties>\n\n<ng-template [ngIf]=\"targetTableForm?.controls.table.value\">\n        <dexih-widget-section title=\"Columns\" [showExpandButton]=\"true\" [padding]=\"false\">\n        <dexih-table [enableMultiSelect]=\"true\"\n            [enableManualSort]=\"true\" [enableSort]=\"false\" [enableFilter]=\"false\" (onSortChanged)=\"columnSortChange($event)\" [columns]=\"columns\"\n            [dataObservable]=\"tableData\" (rowClick)=\"editColumn($event)\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\">\n    \n            <ng-template #actions let-items=\"items\">\n                <dexih-button-splitdropdown text=\"Add Column\" title=\"Create a new column\" iconClass=\"fa fa-plus-square\" buttonClass=\"btn-primary\"\n                    (buttonClick)=\"newColumn(null)\">\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.AutoIncrement)\">Add Auto Incrementing Key Column</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.ValidFromDate)\">Add Valid from Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.ValidToDate)\">Add Valid to Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.IsCurrentField)\">Add Is Current Column</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.CreateAuditKey)\">Add Create Audit Key</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.UpdateAuditKey)\">Add Update Audit Key</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.CreateDate)\">Add Create Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.UpdateDate)\">Add Update Date</a>\n                    </li>\n                </dexih-button-splitdropdown>\n\n                <column-edit-bulk *ngIf=\"showBulkEdit && items.length > 0\" [columns]=\"items\" [columnsFormArray]=\"targetTableForm.controls.table.controls.dexihTableColumns\" (updated)=\"updateData()\" ></column-edit-bulk>\n                <dexih-button iconClass=\"fa fa-retweet\" class=\"ml-1\" (click)=\"resetColumns()\">Reset All Columns</dexih-button>\n                <dexih-button-preview class=\"ml-1\" (click)=\"previewData()\"></dexih-button-preview>\n                <dexih-button class=\"ml-1\" (click)=\"importTable()\" buttonClass=\"btn-primary\" iconClass=\"fa fa-refresh\" title=\"Re-import table from connection.\">\n                    Re-Import\n                </dexih-button>\n                <dexih-button (click)=\"createTable()\" class=\"ml-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-bullseye\" title=\"Drop & re-create the table on the connection.  Warning: This remove all data from the table!\">\n                    Drop & Create\n                </dexih-button>\n            </ng-template>\n    \n            <ng-template #selectedItemAction select=\"selectedItemAction\" let-column=\"item\">\n                <dexih-button-edit (click)=\"editColumn(column)\" class=\"ml-1\"></dexih-button-edit>\n            </ng-template>\n    \n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button-delete (click)=\"deleteColumns(items)\" class=\"ml-1\"></dexih-button-delete>\n                <dexih-button iconClass=\"fa fa-th-list\" class=\"ml-1\" (click)=\"showBulkEdit=!showBulkEdit\">{{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </dexih-button>\n            </ng-template>\n    \n    \n        </dexih-table>\n        </dexih-widget-section>\n\n        <dexih-widget-section title=\"Unused Columns\" [showExpandButton]=\"true\" [padding]=\"false\">\n        <dexih-table [enableMultiSelect]=\"true\"\n            sortColumn=\"position\" [enableFilter]=\"false\" [columns]=\"columns\" [dataObservable]=\"missingColumnsData\"\n            [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\">\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button (click)=\"addMissing(items)\" buttonClass=\"btn-primary\" iconClass=\"fa fa-plus-square\" title=\"Add selected outputs to the target table\">Add To Table</dexih-button>\n            </ng-template>\n    \n        </dexih-table>\n        </dexih-widget-section>\n    </ng-template>\n</div>\n\n<div *ngIf=\"showColumn\">\n    <column-edit [columnKey]=\"columnKey\" [tableForm]=\"this.targetTableForm.controls.table\" [deltaType]='deltaType' (isUpdated)=\"columnUpdated()\"></column-edit>\n</div>\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { InputOutputColumns, eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, BehaviorSubject , combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { HubCache, eMappingStatus, updateStrategies, loadStrategies, ConnectionTables, lineageMappingStatuses, deltaTypes } from '../../../hub.models';\nimport { eDeltaType, eUpdateStrategy, eTransformWriterMethod, DexihConnection,\n    DexihDatalinkColumn, DexihDatalinkTarget, DexihTable, DexihTableColumn, DexihDatalinkTable, eTypeCode, eSecurityFlag } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-target-table',\n    templateUrl: './datalink-edit-target-table.component.html'\n})\nexport class DatalinkEditTargetTableComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n    private _loadStrategySubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n    private _saveSubscription: Subscription;\n\n    private cancelToken: CancelToken = new CancelToken();\n\n    public eMappingStatus = eMappingStatus;\n    public eDeltaType = eDeltaType;\n\n    public tableFormService: HubFormsService;\n\n    public eUpdateStrategy = eUpdateStrategy;\n    public updateStrategies = updateStrategies;\n\n    public eTransformWriterMethod = eTransformWriterMethod;\n    public loadStrategies = loadStrategies;\n\n    public managedConnections: DexihConnection[];\n    public connectionTables: ConnectionTables[];\n\n    public showTableProperties = false;\n    public showColumn = false;\n\n    private ignoreUpdateTable = false;\n\n    public nodes = [];\n\n    public newTable = false;\n\n    public inputColumns: DexihDatalinkColumn[];\n\n    public targetKey: number;\n    public targetTableForm: FormGroup;\n\n    public columnKey: number;\n    public deltaType: eDeltaType;\n\n    public showBulkEdit = false;\n\n    private canExit = false;\n\n    public logger = new LogFactory('datalink-edit-target-table');\n\n    columns = [\n        { name: 'position', title: '#', format: '' },\n        { name: 'columnStatus', title: 'Lineage', format: 'Html' },\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'logicalName', title: 'Logical', format: '' },\n        { name: 'dataType', title: 'Data Type', format: '' },\n        { name: 'deltaType', title: 'Delta Type', format: '' },\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean' },\n        { name: 'defaultValue', title: 'Default Value', format: '' },\n        { name: 'securityFlag', title: 'Security Flag', format: 'Enum', enum: eSecurityFlag },\n        { name: 'columnValidation', title: 'Validation', format: '', class: 'columnValidationClass', tooltip: 'columnValidationTooltip' }\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    private _missingColumnsData = new BehaviorSubject<Array<any>>(null);\n    missingColumnsData: Observable<Array<any>> = this._missingColumnsData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private fb: FormBuilder) {\n\n        this.tableFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `ngOnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                const ioColumns = new InputOutputColumns();\n                this.inputColumns = ioColumns.getDatalinkOutputColumns(this.datalinkForm.value);\n\n                if (this.action === 'edit') {\n                    this.targetKey = +params['targetKey'];\n                    let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n\n                    // create a copy of the target form.\n                    let originalTargetTableForm = <FormGroup> targets.controls.find(c => c.value.key === this.targetKey);\n\n                    if (originalTargetTableForm && originalTargetTableForm.controls.key.value <= 0) {\n                        this.newTable = true;\n                    }\n\n                    // if the table is not found, then navigate back to the parent.\n                    if (originalTargetTableForm === undefined) {\n                        this.canExit = true;\n                        this.authService.navigateUp();\n                        return;\n                    }\n\n                    this.targetTableForm = this.editDatalinkService.hubFormsService\n                        .datalinkTargetFormGroup(originalTargetTableForm.value, originalTargetTableForm.controls.table.value);\n\n                } else if (this.action === 'new') {\n                    let target = new DexihDatalinkTarget();\n                    target.key = this.hubCache.getNextSequence();\n                    this.targetTableForm = this.editDatalinkService.hubFormsService.datalinkTargetFormGroup(target);\n\n                } else {\n                    this.hubService.addHubErrorMessage('Invalid action ' + this.action);\n                }\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.managedConnections = this.hubCache.getManagedConnections();\n\n                    this.updateData();\n                    this.resetSubscription();\n\n\n                    this.logger.LogC(() => `ngOnInit - completed`, eLogLevel.Trace);\n                }\n\n                if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n                this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n                    if(value) {\n                        this.apply();\n                    }\n                });\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Target Table');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._loadStrategySubscription) { this._loadStrategySubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    }\n\n    canDeactivate(): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n          if (!this.canExit && this.targetTableForm?.dirty) {\n            this.authService.confirmDialog('Target Table Changed',\n            'The table has changed.  Would you like to discard the changes and return to the previous screen?  Otherwise, use the apply button to save the changes.'\n            ).then(confirm => {\n              resolve(confirm);\n            }).catch(reason => {\n              resolve(false);\n            });\n          } else {\n            resolve(true);\n          }\n        });\n      }\n\n    resetSubscription() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        this._tableFormSubscription = this.targetTableForm.controls.tableKey.valueChanges.subscribe(() => {\n            this.updateData();\n        });\n    }\n\n    previewData() {\n        this.router.navigate(['preview-table-data', this.targetTableForm.controls.tableKey.value], { relativeTo: this.route });\n    }\n\n    columnStatus(table: DexihTable, column: DexihTableColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, null, column, null, null, eMappingStatus.NotMapped, this.hubCache);\n        const lineage = columnUsage.createDatalinkLineage(true);\n        const mappingStatus = lineageMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `<i class=\"${mappingStatus.statusClass}\"></i>&nbsp;${mappingStatus.name}`\n        }\n    }\n\n    datalinkColumnStatus(table: DexihDatalinkTable, column: DexihDatalinkColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, column, null, null, null, eMappingStatus.NotMapped, this.hubCache);\n        const lineage = columnUsage.createDatalinkLineage(true);\n        const mappingStatus = lineageMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `<i class=\"${mappingStatus.statusClass}\"></i>&nbsp;${mappingStatus.name}`\n        }\n    }\n\n    private addNodeColumns(columns: DexihDatalinkColumn[], path: string) {\n        if (!path) {\n            this.nodes = [];\n        }\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                let name = path ? (path + '.' + col.logicalName) : col.logicalName;\n                this.nodes.push({key: col.key, name: name});\n\n                if (col.childColumns && col.childColumns.length > 0) {\n                    this.addNodeColumns(col.childColumns, name);\n                }\n            });\n        }\n    }\n\n    updateData() {\n        if (this.ignoreUpdateTable) {\n            return;\n        }\n\n        this.logger.LogC(() => `updateData started`, eLogLevel.Trace);\n        this.showBulkEdit = false;\n\n        let validation = this.editDatalinkService.getValidationTransform()\n\n        this.tableFormService.startForm(<FormGroup>this.targetTableForm.controls.table)\n        if (this.targetTableForm.controls.table) {\n\n            if (!this.targetTableForm.controls.table.value) {\n                this.logger.LogC(() => `updateData no targetTable specified.`, eLogLevel.Trace);\n                this._tableData.next(null);\n            } else {\n                const table = this.targetTableForm.controls.table.value;\n                this.logger.LogC(() => `updateData targetTable ${table.name}`, eLogLevel.Trace);\n\n                let columnData = [];\n                table.dexihTableColumns\n                    .filter(c => c.isValid)\n                    .sort((a, b) => a.position - b.position)\n                    .forEach(column => {\n                        let deltaType = deltaTypes.find(c => c.key === column.deltaType);\n                        let newColumn = {\n                            key: column.key,\n                            position: column.position,\n                            columnStatus: this.columnStatus(table, column),\n                            name: column.name,\n                            dataType: this.hubCache.dataTypeToString(column),\n                            deltaType: deltaType ? deltaType.name : 'Not specified',\n                            allowDbNull: column.allowDbNull,\n                            logicalName: column.logicalName,\n                            isIncrementalUpdate: column.isIncrementalUpdate,\n                            securityFlag: column.securityFlag,\n                            defaultValue: column.defaultValue,\n                            columnValidation: this.hubCache.getColumnValidation(column.columnValidationKey).name,\n                            columnValidationClass: column.columnValidationKey && !validation ? 'dexih-error-icon' : '',\n                            columnValidationTooltip: column.columnValidationKey && !validation ?\n                                'Enabled the validation transform for this to function' : '',\n                        };\n\n                        columnData.push(newColumn);\n                    });\n\n                this._tableData.next(columnData);\n\n                let validColumns = this.validColumns();\n\n                if (validColumns) {\n                    this.addNodeColumns(validColumns, '');\n\n                    let missingColumnData = [];\n                    let position = 0;\n                    validColumns.forEach(column => {\n                        if (table.dexihTableColumns.findIndex(c => c.name === column.name) < 0 &&\n                            missingColumnData.findIndex(c => c.name === column.name) < 0) {\n                            let deltaType = deltaTypes.find(c => c.key === column.deltaType);\n                            let newColumn = {\n                                key: column.key,\n                                position: column.position + position,\n                                columnStatus: this.datalinkColumnStatus(table, column),\n                                name: column.name,\n                                dataType: this.hubCache\n                                    .dataTypeToString(column),\n                                deltaType: deltaType ? deltaType.name : 'Not specified',\n                                allowDbNull: column.allowDbNull,\n                                logicalName: column.logicalName,\n                                isIncrementalUpdate: column.isIncrementalUpdate,\n                                securityFlag: column.securityFlag,\n                                defaultValue: column.defaultValue,\n                                columnValidation: '',\n                            };\n                            missingColumnData.push(newColumn);\n                        }\n                        position += 1000;\n                    });\n                    this._missingColumnsData.next(missingColumnData);\n                }\n\n                this.logger.LogC(() => `updateData columns loaded`, eLogLevel.Trace);\n            }\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    validColumns(): DexihDatalinkColumn[] {\n        let validColumns = this.inputColumns;\n\n        if (this.targetTableForm.controls.nodeDatalinkColumn && this.targetTableForm.controls.nodeDatalinkColumn.value) {\n            let io = new InputOutputColumns();\n            validColumns =  io.validColumns(this.targetTableForm.controls.nodeDatalinkColumn.value.key,\n                    this.inputColumns);\n        }\n\n        return validColumns;\n    }\n\n    addMissing(items: Array<DexihDatalinkColumn>) {\n        this.logger.LogC(() => `addMissing started`, eLogLevel.Trace);\n\n        const tableForm = <FormGroup>this.targetTableForm.controls.table;\n\n        // const ioColumns = new InputOutputColumns();\n        // const outputColumns = ioColumns.getDatalinkOutputColumns(this.datalinkForm.value);\n\n        const outputColumns = this.validColumns();\n\n        if (tableForm && outputColumns) {\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            items.forEach(item => {\n                let missingColumn: DexihDatalinkColumn = null;\n                outputColumns.forEach(column => {\n                    if (!missingColumn && item.key === column.key) {\n                        missingColumn = column;\n                    }\n                });\n                if (missingColumn) {\n                    const newColumn = new DexihTableColumn();\n\n                    Object.assign(newColumn, missingColumn);\n\n                    this.resetColumnKeys(newColumn);\n                    let positions = tableColumns.controls.map<number>(c => <number>c.value.position);\n                    let position = positions.length === 0 ? 0 : Math.max(...positions) + 1; // add the the last position\n                    newColumn.position = position;\n                    const columnForm = this.editDatalinkService.hubFormsService.tableColumn(tableColumns.value, newColumn);\n                    tableColumns.push(columnForm);\n                    tableForm.markAsDirty();\n                    this.targetTableForm.markAsDirty();\n                }\n            });\n            this.updateData();\n        }\n        this.logger.LogC(() => `addMissing completed`, eLogLevel.Trace);\n    }\n\n    resetColumnKeys(column: DexihTableColumn) {\n        column.key = this.hubCache.getNextSequence();\n\n        if (column.childColumns) {\n            column.childColumns.forEach(childColumn => this.resetColumnKeys(childColumn));\n        }\n    }\n\n    toggleNewTable() {\n        this.logger.LogC(() => `newTable started`, eLogLevel.Trace);\n\n        if (this.newTable) {\n            const newTable = new DexihTable();\n            this.targetTableForm.setControl('table', this.editDatalinkService.hubFormsService.tableForm(newTable));\n            this.targetTableForm.controls.tableKey.setValue(0);\n            this.resetSubscription();\n            this.addMissing(this._missingColumnsData.value);\n\n            this.showTableProperties = true;\n        }\n\n        this.logger.LogC(() => `newTable completed`, eLogLevel.Trace);\n    }\n\n    editColumn(column: DexihTableColumn) {\n        this.columnKey = column.key;\n        this.showColumn = true;\n    }\n\n    newColumn(deltaType: eDeltaType) {\n        if (deltaType !== null) {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            let newColumn = this.hubCache.newColumn(tableForm.value, deltaType);\n            if (newColumn === null) {\n                this.authService.informationDialog('Invalid column.', `The column ${deltaType} could not be added as it already exists.`);\n                return;\n            }\n            const columnForm = this.editDatalinkService.hubFormsService.tableColumn(tableColumns.value, newColumn);\n            tableColumns.push(columnForm);\n            tableForm.markAsDirty();\n            this.targetTableForm.markAsDirty();\n        } else {\n            this.columnKey = null;\n            this.deltaType = deltaType;\n            this.showColumn = true;\n        }\n    }\n\n    async resetColumns() {\n        let confirm = await this.authService.confirmDialog('Warning reset columns',\n            'This will remove and reload all the columns in this table using the last mapped outputs.  Continue?')\n\n        if (confirm) {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n\n            while (tableColumns.length !== 0) {\n                tableColumns.removeAt(0)\n              }\n            }\n\n            this.addMissing(this.validColumns());\n    }\n\n    deleteColumns(columns: Array<DexihTableColumn>) {\n        columns.forEach(column => {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            const index = tableColumns.controls.findIndex(c => c.value.key === column.key);\n            if (index >= 0) {\n                tableColumns.removeAt(index);\n                tableForm.markAsDirty();\n            }\n        });\n\n        this.updateData();\n    }\n\n    importTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        const connection = this.hubCache.getConnection(table.connectionKey)\n        this.hubService.importTables([table], false, this.cancelToken)\n            .then(tables => {\n                if (!tables || tables.length === 0) { return; }\n                const returnTable: any = tables[0];\n                returnTable.useLogical =\n                    this.hubCache.defaultTableLogicalName(returnTable.schema, returnTable.name) !== returnTable.logicalName;\n                let tableForm = this.editDatalinkService.hubFormsService.tableForm(returnTable);\n                this.targetTableForm.controls.tableKey.setValue(returnTable.key);\n                this.targetTableForm.setControl('table', tableForm);\n            }).catch(reason => {\n                // this.hubService.addHubErrorMessage(reason);\n            });\n    }\n\n    createTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        const connection = this.hubCache.getConnection(table.connectionKey)\n        this.hubService.createTables([table], this.cancelToken)\n            .then(tables => {\n                this.hubService.addHubSuccessMessage('The table was created successfully.');\n                // this.targetTableForm.controls.table.setValue(returnTable);\n            }).catch(reason => {\n                // this.hubService.addHubErrorMessage(reason);\n            });\n    }\n\n    columnSortChange(items: Array<DexihTableColumn>) {\n        this.logger.LogC(() => `columns sort change - started `, eLogLevel.Trace);\n        this.tableFormService.IgnoreFormChange = true;\n        this.editDatalinkService.hubFormsService.IgnoreFormChange = true;\n        this.ignoreUpdateTable = true;\n        const tableForm = <FormGroup>this.targetTableForm.controls.table;\n        let columnsArray = <FormArray>tableForm.controls.dexihTableColumns;\n        let position = 1;\n        items.forEach(c => {\n            let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n            column.controls.position.setValue(position++);\n        });\n\n        tableForm.markAsDirty();\n        this.editDatalinkService.hubFormsService.IgnoreFormChange = false;\n        this.tableFormService.IgnoreFormChange = false;\n        this.ignoreUpdateTable = false;\n        this.updateData();\n        this.logger.LogC(() => `columns sort change - finished `, eLogLevel.Trace);\n    }\n\n    columnUpdated() {\n        this.showColumn = false;\n        this.updateData();\n    }\n\n    saveTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        this.hubService.saveTables([table]).then(savedTables => {\n            let savedTable = savedTables[0];\n            this.targetTableForm.setControl('table', this.editDatalinkService.hubFormsService.tableForm(savedTable));\n            this.targetTableForm.controls.tableKey.setValue(savedTable.key);\n            this.resetSubscription();\n            this.editDatalinkService.hubFormsService.save(false);\n        });\n    }\n\n    apply() {\n        if (this.targetTableForm.dirty) {\n            let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n            let index = targets.length;\n            if (this.action === 'edit') {\n                index = targets.controls.findIndex(c => c.value.key === this.targetKey);\n                targets.removeAt(index);\n            }\n            targets.insert(index, this.targetTableForm);\n            targets.markAsDirty();\n            this.canExit = true;\n            this.authService.navigateUp();\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routing } from './datalink-edit.routing';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DatalinkEditService } from './datalink-edit.service';\nimport { HubFormsService } from '../../hub.forms.service';\n\nimport { DatalinkEditComponent } from './datalink-edit.component';\nimport { DatalinkEditPropertiesComponent } from './properties/datalink-edit-properties.component';\nimport { DatalinkEditSourceTableComponent } from './source-table/datalink-edit-source-table.component';\nimport { DatalinkEditTargetTableComponent } from './target/datalink-edit-target-table.component';\nimport { DatalinkEditTargetComponent } from './target/datalink-edit-target.component';\nimport { DatalinkEditTransformComponent } from './transform/datalink-edit-transform.component';\nimport { DatalinkEditValidationComponent } from './validation/datalink-edit-validation.component';\nimport { DatalinkEditProfileRulesComponent } from './profile-rules/profile-rules.component';\nimport { DatalinkEditSaveButtonComponent } from './save-button/datalink-edit-save-button.component';\nimport { DatalinkRunPlanComponent } from './run-plan/datalink-run-plan.component';\nimport { DatalinkEditNewTransformComponent } from './new-transform/datalink-edit-new-transform.component';\nimport { StandardFunctionEditComponent }  from './standard-function-edit';\nimport { CustomFunctionEditComponent } from './custom-function-edit';\nimport { UnGroupEditComponent } from './unGroup-edit';\nimport { OutputColumnComponent, OutputColumnsComponent } from './output-columns';\nimport { JoinColumnComponent, JoinColumnsComponent } from './join-columns';\nimport { InputColumnsComponent, InputColumnComponent } from './input-columns';\nimport { MappingEditComponent } from './mapping-edit';\nimport { MappingComponent, MappingItemComponent } from './mapping';\nimport { PreviewDataComponent } from './preview-data';\nimport { PreviewTableComponent} from './preview-table';\nimport { DatalinkEditGuard } from './datalink-edit-guard';\nimport { TransformTableEditComponent } from './transform-table-edit/transform-table-edit.component';\nimport { DatalinkEditTransformsComponent } from './transforms/datalink-edit-transforms.component';\nimport { HubSharedModule } from '../../hub.shared.module';\nimport { TargetTableColumnComponent } from './target-table-column/target-table-column.component';\nimport { TableSharedModule } from '../../table/table.shared.module';\nimport { DatalinkTableComponent } from './datalink-table/datalink-table.component'\nimport { DatalinkColumnEditComponent } from './datalink-column-edit/datalink-column-edit.component'\nimport { ResultsViewModule } from '../../results/results-view/results-view.module';\nimport { InputParameterComponent, OutputParameterComponent} from './parameters'\nimport { TargetColumnsComponent, TargetColumnComponent} from './target-columns';\nimport { DatalinkPreviewDataComponent } from '../datalink-preview-data';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Routing,\n        HubSharedModule,\n        TableSharedModule,\n        ResultsViewModule\n    ],\n    declarations: [\n        DatalinkEditComponent,\n        DatalinkEditPropertiesComponent,\n        DatalinkEditSourceTableComponent,\n        DatalinkEditTargetTableComponent,\n        DatalinkEditTargetComponent,\n        DatalinkEditTransformComponent,\n        DatalinkEditValidationComponent,\n        DatalinkEditProfileRulesComponent,\n        DatalinkRunPlanComponent,\n        StandardFunctionEditComponent,\n        CustomFunctionEditComponent,\n        OutputColumnComponent, OutputColumnsComponent,\n        JoinColumnComponent, JoinColumnsComponent,\n        InputColumnsComponent, InputColumnComponent,\n        TargetColumnsComponent, TargetColumnComponent,\n        MappingEditComponent,\n        MappingComponent, MappingItemComponent,\n        PreviewDataComponent,\n        PreviewTableComponent,\n        // DatalinkPreviewDataComponent,\n        TransformTableEditComponent,\n        DatalinkEditTransformsComponent,\n        DatalinkEditSaveButtonComponent,\n        DatalinkEditNewTransformComponent,\n        TargetTableColumnComponent,\n        DatalinkTableComponent,\n        DatalinkColumnEditComponent,\n        InputParameterComponent, OutputParameterComponent,\n        UnGroupEditComponent\n    ],\n    providers: [ DatalinkEditService, HubFormsService, DatalinkEditGuard ],\n    exports: []\n})\nexport class DatalinkEditModule {\n\n    static forRoot(): ModuleWithProviders<DatalinkEditModule> {\n        return {\n            ngModule: DatalinkEditModule,\n            providers: [ DatalinkEditService, HubFormsService ]\n        };\n    }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { DatalinkEditPropertiesComponent } from './properties/datalink-edit-properties.component';\nimport { DatalinkEditComponent } from './datalink-edit.component';\nimport { DatalinkEditSourceTableComponent } from './source-table/datalink-edit-source-table.component';\nimport { DatalinkEditTargetComponent } from './target/datalink-edit-target.component';\nimport { DatalinkEditTransformComponent } from './transform/datalink-edit-transform.component';\nimport { DatalinkEditProfileRulesComponent } from './profile-rules/profile-rules.component';\nimport { DatalinkEditValidationComponent } from './validation/datalink-edit-validation.component';\nimport { DatalinkRunPlanComponent } from './run-plan/datalink-run-plan.component';\n\nimport { StandardFunctionEditComponent }  from './standard-function-edit';\nimport { CustomFunctionEditComponent }  from './custom-function-edit';\nimport { MappingEditComponent } from './mapping-edit';\nimport { DatalinkEditGuard } from './datalink-edit-guard';\nimport { PreviewDataComponent } from './preview-data';\nimport { PreviewTableComponent} from './preview-table';\nimport { TransformTableEditComponent } from './transform-table-edit/transform-table-edit.component';\nimport { DatalinkEditTransformsComponent } from './transforms/datalink-edit-transforms.component';\nimport { DatalinkEditNewTransformComponent } from './new-transform/datalink-edit-new-transform.component';\nimport { TargetTableColumnComponent } from './target-table-column/target-table-column.component';\nimport { DatalinkColumnEditComponent } from './datalink-column-edit/datalink-column-edit.component'\nimport { ResultsIndexComponent, ResultsViewComponent } from '../../results';\nimport { UnGroupEditComponent } from './unGroup-edit';\nimport { DatalinkEditTargetTableComponent } from './target/datalink-edit-target-table.component';\n\nexport const standardFunctionRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n    {path: ':functionType', canDeactivate: [DatalinkEditGuard],\n        component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n    {path: ':functionType/:datalinkTransformItemKey',\n        canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const customFunctionRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent, data: { pageTitle: 'Custom Function' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const mappingEditRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: MappingEditComponent, data: { pageTitle: 'Mapping' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const datalinkEditRoutes: Routes = [\n    { path: '', redirectTo: 'properties'},\n\n    { path: 'properties', component: DatalinkEditPropertiesComponent, data: { pageTitle: 'Properties', help: 'datalink.md' } },\n\n    { path: 'source-table', data: { pageTitle: 'Source Table' }, children: [\n        { path: '', pathMatch: 'full', component: DatalinkEditSourceTableComponent},\n        { path: 'preview-table-data/table/:tableKey', component: PreviewTableComponent,\n            data: { pageTitle: 'Preview Table', action: 'preview'} },\n        { path: 'preview-table-data/datalink/:datalinkKey', component: PreviewTableComponent,\n            data: { pageTitle: 'Preview Datalink', action: 'preview'} },\n        { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'Edit Column', action: 'edit'} },\n        { path: 'newcolumn', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'New Column', action: 'new'} },\n        { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n                loadChildren: () => import('../../table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n    ] },\n\n    { path: 'target', data: { breadCrumb: true, pageTitle: 'Targets' }, children: [\n        { path: '', pathMatch: 'full', component: DatalinkEditTargetComponent},\n        { path: 'table-edit/:targetKey', data: { pageTitle: 'Edit Target Table', action: 'edit'}, children: [\n            { path: '', pathMatch: 'full', canDeactivate: [DatalinkEditGuard], component: DatalinkEditTargetTableComponent },\n            { path: 'preview-table-data/:tableKey', component: PreviewTableComponent,\n                data: { pageTitle: 'Preview Table', action: 'preview'} },\n            ]},\n        { path: 'table-new', data: { pageTitle: 'New Target Table', action: 'new'}, children: [\n            { path: '', pathMatch: 'full', canDeactivate: [DatalinkEditGuard], component: DatalinkEditTargetTableComponent },\n            { path: 'preview-table-data/:tableKey', component: PreviewTableComponent,\n                data: { pageTitle: 'Preview Table', action: 'preview'} },\n            ]},\n    ] },\n\n    { path: 'transforms', component: DatalinkEditTransformsComponent, data: { pageTitle: 'Transforms' }, children: [\n        { path: 'new/:position', component: DatalinkEditNewTransformComponent, data: {pageTitle: 'New Transform'}},\n        { path: 'transform/:datalinkTransformKey', data: { pageTitle: 'Transform' } , children: [\n            { path: '', pathMatch: 'full', component: DatalinkEditTransformComponent },\n            { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n                    loadChildren: () => import('../../table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n            { path: 'standard-function-edit', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'standard-function-edit/:functionType', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'standard-function-edit/:functionType/:datalinkTransformItemKey', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'custom-function-edit', data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'custom-function-edit/:functionType', data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'custom-function-edit/:functionType/:datalinkTransformItemKey',\n                data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'mapping-edit/:type', data: { pageTitle: 'Mapping Edit' },\n                component: MappingEditComponent },\n            { path: 'mapping-edit/:type/:datalinkTransformItemKey', data: { pageTitle: 'Mapping Edit' },\n                component: MappingEditComponent },\n            { path: 'unGroup-edit', data: { pageTitle: 'Un-Group Edit' },\n                component: UnGroupEditComponent },\n            { path: 'unGroup-edit/:datalinkTransformItemKey', data: { pageTitle: 'Un-Group Edit' },\n                component: UnGroupEditComponent },\n            { path: 'preview-transform-data', data: { pageTitle: 'Preview Data' },\n                component: PreviewDataComponent },\n            { path: 'transform-table-edit', data: { pageTitle: 'Transform Table Edit' },\n                component: TransformTableEditComponent },\n            { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n                data: { pageTitle: 'Edit Column', action: 'edit'} },\n        ] },\n\n    ] },\n\n    { path: 'validation', data: { pageTitle: 'Validation' }, children: [\n        {path: '', pathMatch: 'full', component: DatalinkEditValidationComponent, data: { pageTitle: 'Validation' } },\n        { path: 'standard-function-edit', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'standard-function-edit/:functionType', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'standard-function-edit/:functionType/:datalinkTransformItemKey', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'custom-function-edit', data: { pageTitle: 'Custom Function' },\n            canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n        { path: 'custom-function-edit/:functionType', data: { pageTitle: 'Custom Function' },\n            canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n        { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'Edit Column', action: 'edit'} },\n    ]},\n    { path: 'profile-rules', component: DatalinkEditProfileRulesComponent, data: { pageTitle: 'Profile Rules' } },\n    { path: 'run-plan', component: DatalinkRunPlanComponent, data: { pageTitle: 'Run Plan' } },\n    { path: 'result-view/:auditConnectionKey/:auditKey', component: ResultsViewComponent, data: { pageTitle: 'Detailed Result' } }\n];\n\nexport const routes: Routes = [\n        { path: 'new', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'new', navigateSkip: true, pageTitle: 'New Datalink' }, children: datalinkEditRoutes},\n        { path: 'edit/:datalinkKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'edit', navigateSkip: true, pageTitle: 'Edit Datalink' }, children: datalinkEditRoutes},\n        { path: 'copy/:datalinkKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'copy', navigateSkip: true, pageTitle: 'Copy Datalink' }, children: datalinkEditRoutes},\n        { path: 'sourceTable/:sourceTableKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'sourceTable', navigateSkip: true, pageTitle: 'Edit Datalink' }, children: datalinkEditRoutes}\n];\n\nexport const Routing = RouterModule.forChild(routes);\n"]}