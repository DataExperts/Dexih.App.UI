{"version":3,"sources":["webpack:///src/app/+hub/test/datalinkTest-edit/datalinkTest-edit.component.html","webpack:///src/app/+hub/test/datalinkTest-edit/datalinkTest-edit.component.ts","webpack:///src/app/+hub/test/datalinkTest-edit/properties/datalinkTest-properties.component.html","webpack:///src/app/+hub/test/datalinkTest-edit/properties/datalinkTest-properties.component.ts","webpack:///src/app/+hub/test/datalinkTest-edit/step-edit/datalinkTest-edit-step.component.html","webpack:///src/app/+hub/test/datalinkTest-edit/step-edit/datalinkTest-edit-step.component.ts","webpack:///src/app/+hub/test/datalinkTest-edit/datalinkTest-edit-guard.ts","webpack:///src/app/+hub/test/datalinkTest-edit/datalinkTest-edit.routing.ts","webpack:///src/app/+hub/test/datalinkTest-edit/datalinkTest-edit.module.ts"],"names":["formsService","DatalinkTestEditComponent","hubService","authService","route","router","isLoaded","this","_subscription","combineLatest","data","params","getHubCacheObservable","subscribe","result","hubCache","action","pageTitle","status","Loaded","hasChanged","confirmDialog","then","confirm","load","catch","reason","e","addHubClientErrorMessage","_hubCacheChangeSubscription","unsubscribe","_formChangeSubscription","ngOnDestroy","datalinkTestKey","hub","dexihDatalinkTests","datalinkTest","find","c","key","addHubErrorMessage","getCurrentFormObservable","form","controls","value","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","Promise","resolve","$event","returnValue","DatalinkTestPropertiesComponent","stepColumns","name","title","format","_stepTableData","BehaviorSubject","stepTableData","asObservable","mainForm","updateSteps","stepData","forEach","stepControl","step","datalink","dexihDatalinks","datalinkKey","push","updateDate","errors","valid","next","navigate","relativeTo","parent","steps","stepsArray","dexihDatalinkTestSteps","index","findIndex","datalinkTestStepKey","removeAt","navigateUp","editStep","DatalinkTestEditStepComponent","formService","fb","showAllErrors","stepFormService","datalinkTestForm","minKey","t","isValid","updateTableNames","stepForm","datalinkTestStep","_formChanges","valueChanges","startForm","inputTableNames","dexihDatalinkTestTables","map","tt","table","getTable","tableKey","targetTableName","dexihDatalinkTargets","length","join","currentForm","DatalinkTestEditGuard","component","canDeactivate","Routing","forChild","path","children","redirectTo","navigateSkip","DatalinkTestEditModule","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["<div class=\"container\">\n    <dexih-widget title=\"Edit Datalink Test\" iconClass=\"fa fa-lg fa-fw fa-cog\">\n\n    <ng-template #header>\n            <dexih-invalid-form-details class=\"mr-1\" [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\"></dexih-invalid-form-details>\n            <save-button *ngIf=\"hubCache.canWrite\"  class=\"mr-1\" [formsService]=\"formsService\"></save-button>\n            <cancel-button  class=\"mr-1\" [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n        <router-outlet></router-outlet>\n    </dexih-widget>\n</div>  \n\n\n","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { DexihDatalinkTest } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'dexih-datalinkTest-edit-form',\n  templateUrl: './datalinkTest-edit.component.html'\n})\nexport class DatalinkTestEditComponent implements OnInit, OnDestroy {\n  public datalinkTestKey: number;\n\n  public hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private isLoaded = false;\n\n  constructor(private hubService: HubService,\n    public formsService: HubFormsService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'DatalinkTest Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n\n    this.formsService.ngOnDestroy();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.datalinkTestKey = + this.params['datalinkTestKey'];\n\n      if (!this.datalinkTestKey) {\n        this.hubService.addHubErrorMessage('There was no datalink test specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihDatalinkTests) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n\n          let datalinkTest = this.hubCache.hub.dexihDatalinkTests.find(c => c.key === this.datalinkTestKey);\n          if (!datalinkTest) {\n            this.hubService.addHubErrorMessage('The specified datalink test could not be found.');\n          } else {\n            this.formsService.datalinkTest(datalinkTest);\n          }\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n        let  datalinkTest = new DexihDatalinkTest();\n        datalinkTest.key = 0;\n        this.formsService.datalinkTest(datalinkTest);\n\n        // update the url with the saved key\n        this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n          let key = form.controls.key.value;\n          if (key) {\n            if (history.pushState) {\n              let newUrl = window.location.pathname.replace('/datalinkTest-new', `/datalinkTest-edit/${key}`)\n              this.router.navigateByUrl(newUrl);\n              this._formChangeSubscription.unsubscribe();\n            }\n          }\n        });\n    }\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The data job has not been saved',\n          'The datalink test changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The datalink test changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<div class=\"list-group-item list-group-item-info  rounded-0\">\n\t<div class=\"d-flex flex-row\">\n\t\t<h5>Properties</h5>\n\t</div>\n</div>\n\n<div class=\"list-group-item p-3\">\n\n\t<form *ngIf=\"mainForm\" [formGroup]=\"mainForm\">\n\t\t<fieldset>\n\n\t\t\t<section>\n\t\t\t\t<form-input label=\"Test Name\" formControlName=\"name\" placeholder=\"Enter the name.\" [autocapitalize]=\"on\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\">\n\t\t\t\t</form-input>\n\t\t\t</section>\n\n\t\t\t<section>\n\t\t\t\t<form-textarea label=\"Description\" formControlName=\"description\" placeholder=\"Enter a description\" iconClass=\"fa fa-comment\"\n\t\t\t\t [errors]=\"formsService.formErrors['description']\">\n\t\t\t\t</form-textarea>\n\t\t\t</section>\n\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Audit Connection\" formControlName=\"auditConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t\titemKey=\"key\" itemName=\"name\" [errors]=\"formsService.formErrors.auditConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t\tnote=\"Connection where test results are stored.\">\n\t\t\t\t\t<connection-edit-button [key]=\"mainForm.controls.auditConnectionKey.value\"></connection-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t</fieldset>\n\t</form>\n\n</div>\n\n<div class=\"list-group-item list-group-item-info  rounded-0\">\n\t<div class=\"d-flex flex-row\">\n\t\t<h5>Steps</h5>\n\t</div>\n</div>\n<div class=\"list-group-item p-0\">\n\t<dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" sortColumn=\"position\" [columns]=\"stepColumns\"\n\t [dataObservable]=\"stepTableData\" (rowClick)='editStep($event)'>\n\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t<dexih-button-delete (click)=\"deleteSteps(items)\"></dexih-button-delete>\n\t\t</ng-template>\n\n\t\t<ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n\t\t\t<dexih-button-edit (click)=\"editStep(item)\"></dexih-button-edit>\n\t\t</ng-template>\n\n\t\t<ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n\t\t\t<dexih-button-new class=\"mr-1\" (click)=\"newStep()\" title=\"Create a new step\"></dexih-button-new>\n\t\t</ng-template>\n\t</dexih-table>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest, BehaviorSubject, Observable} from 'rxjs';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubCache } from '../../../hub.models';\nimport { DexihDatalinkTestStep } from '../../../../shared/shared.models';\n\n@Component({\n\n  selector: 'datalinkTest-properties-form',\n  templateUrl: './datalinkTest-properties.component.html'\n})\nexport class DatalinkTestPropertiesComponent implements OnInit, OnDestroy {\n\n  private datalinkTestKey: number;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n\n  public hasChanged = false;\n  public mainForm: FormGroup;\n\n  stepColumns = [\n    { name: 'name', title: 'Name', format: '' },\n    { name: 'datalink', title: 'Datalink', format: '' },\n    { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    { name: 'errors', title: 'Errors', format: '' },\n  ];\n\n  private _stepTableData = new BehaviorSubject<Array<any>>(null);\n  stepTableData: Observable<Array<any>> = this._stepTableData.asObservable();\n\n  constructor(private hubService: HubService,\n    private authService: AuthService,\n    public formsService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.hubService.getHubCacheObservable(),\n        this.formsService.getCurrentFormObservable(),\n      ).subscribe(result => {\n        this.hubCache = result[0];\n        this.mainForm = result[1];\n\n        this.updateSteps();\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Data Job Edit Properties');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n  }\n\n  updateSteps() {\n    let stepData = [];\n    if (this.mainForm) {\n      let steps = (<FormArray>this.mainForm.controls['dexihDatalinkTestSteps']);\n      steps.controls.forEach(stepControl => {\n        let step = <DexihDatalinkTestStep> stepControl.value;\n        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === step.datalinkKey);\n        stepData.push({\n          key: step.key,\n          name: step.name,\n          datalink: datalink ? datalink.name : 'Not specified',\n          updateDate: step.updateDate,\n          errors: stepControl.valid ? 'No errors' : 'Errors'\n        });\n      });\n    }\n\n    this._stepTableData.next(stepData);\n  }\n\n  newStep() {\n    this.router.navigate(['step'], { relativeTo: this.route.parent });\n  }\n\n  editStep(step: DexihDatalinkTestStep) {\n    this.router.navigate(['step', step.key], { relativeTo: this.route.parent });\n  }\n\n\n  deleteSteps(steps: Array<DexihDatalinkTestStep>) {\n    let stepsArray = <FormArray>this.mainForm.controls.dexihDatalinkTestSteps;\n\n    steps.forEach(step => {\n      let index = stepsArray.controls.findIndex(c => c.value.datalinkTestStepKey === step.key);\n      stepsArray.removeAt(index);\n    });\n    this.updateSteps();\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n}\n","<div *ngIf=\"stepFormService.currentForm\">\n<div class=\"list-group-item list-group-item-info rounded-0\">\n\t<div class=\"d-flex flex-row\">\n\t\t<h5>Step Properties</h5>\n\t\t<div class=\"ml-auto\">\n\t\t\t<dexih-button-apply class=\"mr-1\" [disabled]=\"!stepFormService.hasChanged\" (click)=\"applyExit()\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</div>\n\t</div>\n</div>\n\n<div class=\"list-group-item\" >\n\t<form [formGroup]=\"stepFormService.currentForm\">\n\t\t<fieldset>\n\t\t\t<section>\n\t\t\t\t<form-input label=\"Data Step Name\" formControlName=\"name\" placeholder=\"Enter the step name.\" [autocapitalize]=\"on\" iconClass=\"fa fa-list\"\n\t\t\t\t [errors]=\"stepFormService.formErrors.name\" note=\"Enter a name for the data step, blank will use datalink name.\">\n\t\t\t\t</form-input>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<form-textarea label=\"Description\" formControlName=\"description\" placeholder=\"Enter a description\" iconClass=\"fa fa-comment\"\n\t\t\t\t [errors]=\"stepFormService.formErrors['description']\">\n\t\t\t\t</form-textarea>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Data Link\" formControlName=\"datalinkKey\" [items]=\"hubCache.hub.dexihDatalinks\" itemKey=\"key\"\n\t\t\t\t itemName=\"name\" [errors]=\"stepFormService.formErrors.datalinkKey\" iconClass=\"fa fa-database\">\n\t\t\t\t <datalink-edit-button [key]=\"stepFormService.currentForm.controls.datalinkKey?.value\"></datalink-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t</fieldset>\n\t</form>\n</div>\n\n<div class=\"list-group-item list-group-item-info rounded-0\">\n\t<div class=\"d-flex flex-row\">\n\t\t<h5>Target Table: {{targetTableName}}</h5>\n\t\t<div class=\"ml-auto\">\n\t\t\t<dexih-button-apply class=\"mr-1\" [disabled]=\"!stepFormService.hasChanged\" (click)=\"applyExit()\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</div>\n\t</div>\n</div>\n<div class=\"list-group-item\" *ngIf=\"stepFormService.currentForm\">\n\t<form [formGroup]=\"stepFormService.currentForm\">\n\t\t<fieldset>\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Target Connection\" formControlName=\"targetConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t itemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.targetConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t note=\"Connection for the datalink target table\">\n\t\t\t\t <connection-edit-button [key]=\"stepFormService.currentForm.controls.targetConnectionKey?.value\"></connection-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Target Table Name\" formControlName=\"targetTableName\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t [errors]=\"stepFormService.formErrors['targetTableName']\" note=\"Name of target table\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Target Table Schema\" formControlName=\"targetSchema\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t [errors]=\"stepFormService.formErrors['targetSchema']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Expected Connection\" formControlName=\"expectedConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t itemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.expectedConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t note=\"Connection where the expected target data is.\">\n\t\t\t\t <connection-edit-button [key]=\"stepFormService.currentForm.controls.expectedConnectionKey?.value\"></connection-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Expected Table Name\" formControlName=\"expectedTableName\" placeholder=\"Enter the name.\"\n\t\t\t\t\t iconClass=\"fa fa-list\" [errors]=\"stepFormService.formErrors['expectedTableName']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Expected Table Schema\" formControlName=\"expectedSchema\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t [errors]=\"stepFormService.formErrors['expectedSchema']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Error Connection\" formControlName=\"errorConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t itemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.errorConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t note=\"Connection where the error data should be sent.\">\n\t\t\t\t <connection-edit-button [key]=\"stepFormService.currentForm.controls.errorConnectionKey?.value\"></connection-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Error Table Name\" formControlName=\"errorTableName\" placeholder=\"Enter the name.\"\n\t\t\t\t\t iconClass=\"fa fa-list\" [errors]=\"stepFormService.formErrors['errorTableName']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-input label=\"Error Table Schema\" formControlName=\"errorSchema\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t [errors]=\"stepFormService.formErrors['errorSchema']\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</fieldset>\n\t</form>\n</div>\n\n<div *ngFor=\"let testTable of stepFormService.currentForm.controls.dexihDatalinkTestTables.controls; let i = index;\">\n\t<div class=\"list-group-item list-group-item-info rounded-0\">\n\t\t<div class=\"d-flex flex-row\">\n\t\t\t<h5>Source Table: {{inputTableNames[i]}}</h5>\n\t\t\t<div class=\"ml-auto\">\n\t\t\t\t<dexih-button-apply class=\"mr-1\" [disabled]=\"!stepFormService.hasChanged\" (click)=\"applyExit()\"></dexih-button-apply>\n\t\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"list-group-item\" *ngIf=\"stepFormService.currentForm\">\n\t\t<form [formGroup]=\"testTable\">\n\t\t\t<fieldset>\n\t\t\t\t<section>\n\t\t\t\t\t<form-select label=\"Source Connection\" formControlName=\"sourceConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t\t itemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.sourceConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t\t note=\"Connection where the source test data is.\">\n\t\t\t\t\t <connection-edit-button [key]=\"stepFormService.currentForm.controls.sourceConnectionKey?.value\"></connection-edit-button>\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Source Table Name\" formControlName=\"sourceTableName\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t [errors]=\"stepFormService.formErrors['sourceTableName']\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Source Table Schema\" formControlName=\"sourceSchema\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t [errors]=\"stepFormService.formErrors['sourceSchema']\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t\t<section>\n\t\t\t\t\t<form-select label=\"Test Connection\" formControlName=\"testConnectionKey\" [items]=\"hubCache.hub.dexihConnections\"\n\t\t\t\t\t itemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.testConnectionKey\" iconClass=\"fa fa-database\"\n\t\t\t\t\t note=\"Connection where the test data is.\">\n\t\t\t\t\t <connection-edit-button [key]=\"stepFormService.currentForm.controls.testConnectionKey?.value\"></connection-edit-button>\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Test Table Name\" formControlName=\"testTableName\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t [errors]=\"stepFormService.formErrors['testTableName']\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t\t<form-input label=\"Test Table Schema\" formControlName=\"testSchema\" placeholder=\"Enter the name.\" iconClass=\"fa fa-list\"\n\t\t\t\t\t\t [errors]=\"stepFormService.formErrors['testSchema']\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</div>\n</div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache } from '../../../hub.models';\nimport { DexihDatalinkTestStep } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datalinkTest-edit-step',\n    templateUrl: './datalinkTest-edit-step.component.html'\n})\nexport class DatalinkTestEditStepComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private _formChanges: Subscription;\n\n    private hubCache: HubCache;\n\n    private datalinkTestStepKey: number;\n    datalinkTestKey: number;\n\n    datalinkTestForm: FormGroup;\n\n    targetTableName: string;\n    inputTableNames: string[];\n\n    stepFormService: HubFormsService;\n    showAllErrors = false;\n\n    stepColumns = [\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'datalink', title: 'Datalink', format: '' },\n        { name: 'dependencies', title: 'Dependencies', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _stepTableData = new BehaviorSubject<Array<any>>(null);\n    stepTableData: Observable<Array<any>> = this._stepTableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private formService: HubFormsService,\n        private route: ActivatedRoute,\n        private fb: FormBuilder) {\n\n        // create a separate formService instance to manage the copied form\n        this.stepFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.formService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let params = result[1];\n                this.hubCache = result[2];\n                let mainForm = result[3];\n\n                this.datalinkTestStepKey = +params['datalinkTestStepKey'];\n\n                if (mainForm) {\n                    this.datalinkTestForm = mainForm;\n                    let step: DexihDatalinkTestStep;\n\n                    if (this.datalinkTestStepKey) {\n                        step = mainForm.value.dexihDatalinkTestSteps\n                            .find(c => c.key === this.datalinkTestStepKey);\n\n                        if (!step) {\n                            this.authService.navigateUp();\n                            return;\n                        }\n                    } else {\n                        step = new DexihDatalinkTestStep();\n                        // if new trigger, then set a temporary key of -1 or lower.\n                        let minKey = -1;\n                        this.datalinkTestForm.value.dexihDatalinkTestSteps.forEach(t => {\n                            if (t.key <= minKey) {\n                                minKey = t.key - 1;\n                            }\n                        });\n                        step.key = minKey;\n                        this.datalinkTestStepKey = minKey;\n                        step.isValid = true;\n                    }\n\n                    this.updateTableNames(step);\n\n                    const stepForm = this.stepFormService.datalinkTestStep(step);\n                    this._formChanges = stepForm.controls.datalinkKey.valueChanges.subscribe(datalinkKey => {\n                        this.updateTableNames(stepForm.value);\n                    });\n\n                    this.stepFormService.startForm(stepForm);\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'DatalinkTest Edit Step');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    private updateTableNames(step: DexihDatalinkTestStep) {\n        this.inputTableNames = step.dexihDatalinkTestTables.map(tt => {\n            let table = this.hubCache.getTable(tt.tableKey);\n            if (table) {\n                return table.name;\n            } else {\n                return 'Table not found.';\n            }\n        });\n\n        this.targetTableName = 'No target defined.';\n        if (step.datalinkKey) {\n            let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key ===  step.datalinkKey);\n            if (datalink && datalink.dexihDatalinkTargets.length > 0) {\n                this.targetTableName = datalink.dexihDatalinkTargets.map(c => this.hubCache.getTable(c.tableKey).name).join(', ');\n            }\n        }\n    }\n\n    cancel() {\n        this.authService.navigateUp();\n    }\n\n    applyExit() {\n        const stepForm = this.stepFormService.currentForm;\n        const stepsArray = <FormArray>this.datalinkTestForm.controls.dexihDatalinkTestSteps;\n\n        const index = stepsArray.controls\n            .findIndex(c => c.value.key === this.datalinkTestStepKey && c.value.isValid);\n\n        if (index < 0) {\n            stepsArray.push(stepForm);\n        } else {\n            stepsArray.removeAt(index);\n            stepsArray.push(stepForm);\n        }\n\n        this.authService.navigateUp();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, combineLatest} from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable()\nexport class DatalinkTestEditGuard implements CanDeactivate<CanComponentDeactivate> {\n\n  canDeactivate(component: CanComponentDeactivate) {\n    return component && component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { DatalinkTestEditComponent } from './datalinkTest-edit.component';\nimport { DatalinkTestPropertiesComponent } from './properties/datalinkTest-properties.component';\nimport { DatalinkTestEditStepComponent } from './step-edit/datalinkTest-edit-step.component';\nimport { DatalinkTestEditGuard} from './datalinkTest-edit-guard';\n\nexport const editRoutes = [\n        { path: '', redirectTo: 'properties',  data: { navigateSkip: true}},\n        { path: 'properties', component: DatalinkTestPropertiesComponent, data: { navigateSkip: true, pageTitle: 'Properties' } },\n        { path: 'step', component: DatalinkTestEditStepComponent, data: { pageTitle: 'New Step' }  },\n        { path: 'step/:datalinkTestStepKey', component: DatalinkTestEditStepComponent, data: { pageTitle: 'Edit Step' }  },\n];\n\nexport const routes: Routes = [\n        { path: '', component: DatalinkTestEditComponent, canDeactivate: [DatalinkTestEditGuard], children: editRoutes},\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routing } from './datalinkTest-edit.routing';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DatalinkTestEditComponent } from './datalinkTest-edit.component';\nimport { DatalinkTestPropertiesComponent } from './properties/datalinkTest-properties.component';\nimport { DatalinkTestEditStepComponent } from './step-edit/datalinkTest-edit-step.component';\n\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DatalinkTestEditGuard } from './datalinkTest-edit-guard';\nimport { HubSharedModule } from '../../hub.shared.module';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        Routing,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n        DatalinkTestEditComponent,\n        DatalinkTestPropertiesComponent,\n        DatalinkTestEditStepComponent,\n    ],\n    providers: [ HubFormsService, DatalinkTestEditGuard ],\n    exports: []\n})\nexport class DatalinkTestEditModule {\n\n    static forRoot(): ModuleWithProviders<DatalinkTestEditModule> {\n        return {\n            ngModule: DatalinkTestEditModule,\n            providers: [ HubFormsService ]\n        };\n    }\n}\n"]}