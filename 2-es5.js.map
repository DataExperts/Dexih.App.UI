{"version":3,"sources":["webpack:///src/app/+hub/dashboard/dashboard-edit/dashboard-edit.module.ts","webpack:///src/app/+hub/dashboard/dashboard-edit/dashboard-edit.routing.ts","webpack:///src/app/+hub/dashboard/dashboard-edit/properties/dashboard-properties.component.ts","webpack:///src/app/+hub/dashboard/dashboard-edit/properties/dashboard-properties.component.html"],"names":["DashboardEditModule","ngModule","providers","imports","exports","declarations","dashboardEditRoutes","path","redirectTo","component","data","navigateSkip","action","pageTitle","routes","canDeactivate","children","Routing","forChild","DashboardPropertiesComponent","authService","hubService","formsService","showEdit","lock","refreshDataSubject","eViewType","eSourceType","cancelToken","options","gridType","ScrollVertical","compactType","None","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","mobileBreakpoint","minCols","maxCols","minRows","maxRows","maxItemCols","minItemCols","maxItemRows","minItemRows","maxItemArea","minItemArea","defaultItemCols","defaultItemRows","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","scrollSensitivity","scrollSpeed","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","enabled","resizable","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","disableWindowResize","disableWarnings","scrollToNewItems","itemChangeCallback","item","itemComponent","itemResize","itemResizeCallback","itemInitCallback","_hubCacheSubscription","getHubCacheObservable","subscribe","hubCache","isLoaded","_formChangeSubscription","getCurrentFormObservable","currentForm","dashboardItemControls","controls","dexihDashboardItems","parameters","value","runTime","_runTimeSubscription","unsubscribe","valueChanges","updateShowEdit","cancel","gridItem","x","y","cols","rows","control","newItem","gridster","getFirstPossiblePosition","Always","Object","assign","setWhenChanged","c","setValue","resizeEvent","width","emit","height","index","form","items","removeAt","maximizedItem","autoRefresh","refresh","previewDashboard","then","keys","next","forEach","url","find","key","dashboardItemKey","getRemoteResponse","dataKey","result","columns","constructDataTableColumns","status","addHubMessage","name","selector","templateUrl"],"mappings":"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","file":"2-es5.js","sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { DashboardEditComponent } from './dashboard-edit.component';\nimport { DashboardItemComponent } from './item/dashboard-item.component';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { SharedModule } from '../../../shared';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routing } from './dashboard-edit.routing';\nimport { HubSharedModule } from '../../hub.shared.module';\nimport { DashboardPropertiesComponent } from './properties//dashboard-properties.component';\nimport { ViewEditComponent } from '../../view';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Routing,\n        HubSharedModule,\n    ],\n    exports: [],\n    declarations: [\n        DashboardEditComponent,\n        DashboardItemComponent,\n        DashboardPropertiesComponent,\n        ],\n    providers: [\n        HubFormsService,\n        ItemEditGuard\n    ],\n})\nexport class DashboardEditModule {\n    static forRoot(): ModuleWithProviders<DashboardEditModule> {\n        return {\n            ngModule: DashboardEditModule,\n            providers: [ HubFormsService ]\n        };\n    }\n}\n","import { DashboardEditComponent } from './dashboard-edit.component';\nimport { ViewEditComponent } from '../../view';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardPropertiesComponent } from './properties/dashboard-properties.component';\n\nexport const dashboardEditRoutes = [\n    { path: '', redirectTo: 'properties'},\n    { path: 'properties', component: DashboardPropertiesComponent,  data: { navigateSkip: true} },\n    { path: 'view-edit/:viewKey', component: ViewEditComponent,  data: { action: 'edit', pageTitle: 'Edit View'} },\n    { path: 'view-new', component: ViewEditComponent, data: { action: 'new', pageTitle: 'New View'}}\n];\n\nexport const routes: Routes = [\n    { path: '', component: DashboardEditComponent, canDeactivate: [ItemEditGuard], children: dashboardEditRoutes},\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { Component, OnInit, OnDestroy, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { HubService } from '../../..';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { FormArray, FormGroup, AbstractControl } from '@angular/forms';\nimport { HubCache, PreviewResults, DataCache } from '../../../hub.models';\nimport { Subscription, Subject } from 'rxjs';\nimport { GridsterConfig, GridType, CompactType, DisplayGrid, GridsterItem, GridsterItemComponentInterface,\n  GridsterComponent} from 'angular-gridster2';\nimport { eViewType, eSourceType, InputColumn } from '../../../../shared/shared.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dashboard-properties',\n    templateUrl: 'dashboard-properties.component.html',\n})\n\nexport class DashboardPropertiesComponent implements OnInit, OnDestroy {\n  @Input() showEdit = false;\n  @Input() lock = true;\n\n  @ViewChild('gridster', {static: true}) public gridster: GridsterComponent\n\n    private _formChangeSubscription: Subscription;\n    private _runTimeSubscription: Subscription;\n    private _hubCacheSubscription: Subscription;\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    eViewType = eViewType;\n    eSourceType = eSourceType;\n\n    public inputColumns: InputColumn[];\n\n    public maximizedItem: FormGroup;\n\n    columns: Array<any>;\n    public data: Array<any>;\n\n    public options: GridsterConfig;\n\n    currentForm: FormGroup;\n    dashboardItemControls: FormArray;\n    parameters: FormArray;\n\n    hubCache: HubCache;\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n      private authService: AuthService,\n      private hubService: HubService,\n      public formsService: HubFormsService) { }\n\n    ngOnInit() {\n      this.options = {\n        gridType: GridType.ScrollVertical,\n        compactType: CompactType.None,\n        margin: 5,\n        outerMargin: true,\n        outerMarginTop: null,\n        outerMarginRight: null,\n        outerMarginBottom: null,\n        outerMarginLeft: null,\n        useTransformPositioning: true,\n        mobileBreakpoint: 640,\n        minCols: 12,\n        maxCols: 100,\n        minRows: 6,\n        maxRows: 100,\n        maxItemCols: 100,\n        minItemCols: 1,\n        maxItemRows: 100,\n        minItemRows: 1,\n        maxItemArea: 2500,\n        minItemArea: 1,\n        defaultItemCols: 2,\n        defaultItemRows: 2,\n        fixedColWidth: 105,\n        fixedRowHeight: 105,\n        keepFixedHeightInMobile: false,\n        keepFixedWidthInMobile: false,\n        scrollSensitivity: 10,\n        scrollSpeed: 20,\n        enableEmptyCellClick: false,\n        enableEmptyCellContextMenu: false,\n        enableEmptyCellDrop: false,\n        enableEmptyCellDrag: false,\n        emptyCellDragMaxCols: 50,\n        emptyCellDragMaxRows: 50,\n        ignoreMarginInRow: false,\n        // setGridSize: true,\n        draggable: {\n          enabled: false,\n        },\n        resizable: {\n          enabled: false,\n        },\n        swap: false,\n        pushItems: true,\n        disablePushOnDrag: false,\n        disablePushOnResize: false,\n        pushDirections: {north: true, east: true, south: true, west: true},\n        pushResizeItems: false,\n        displayGrid: DisplayGrid.None,\n        disableWindowResize: false,\n        disableWarnings: false,\n        scrollToNewItems: false,\n        itemChangeCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n        itemResizeCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n        itemInitCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n      };\n\n      this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n          if (hubCache.isLoaded()) {\n            this.hubCache = hubCache;\n          }\n      });\n\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(currentForm => {\n          this.currentForm = currentForm;\n          if (currentForm) {\n            this.dashboardItemControls = <FormArray> currentForm.controls.dexihDashboardItems;\n            this.parameters = <FormArray> currentForm.controls.parameters;\n\n            this.options.minCols = currentForm.controls.minCols.value;\n            this.options.maxCols = currentForm.controls.maxCols.value;\n            this.options.minRows = currentForm.controls.minRows.value;\n            this.options.maxRows = currentForm.controls.maxRows.value;\n\n            this.showEdit = currentForm.controls.runTime.value.showEdit;\n\n            if (this._runTimeSubscription) { this._runTimeSubscription.unsubscribe(); }\n            this._runTimeSubscription = currentForm.controls.runTime.valueChanges.subscribe(runTime => {\n              this.showEdit = runTime.showEdit;\n              this.lock = runTime.lock;\n\n              this.updateShowEdit();\n            });\n\n            this.updateShowEdit();\n          }\n      });\n    }\n\n    ngOnDestroy(): void {\n      if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n      if (this._runTimeSubscription) { this._runTimeSubscription.unsubscribe(); }\n      if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n      this.cancelToken.cancel();\n    }\n\n    public getNextPossiblePosition(): GridsterItem {\n      let gridItem = {x: 0, y: 0, cols: 1, rows: 1, control: null};\n      let newItem = this.gridster.getFirstPossiblePosition(gridItem);\n      return newItem;\n    }\n\n    public updateShowEdit() {\n      if (this.showEdit || !this.lock ) {\n        this.options.displayGrid = DisplayGrid.Always;\n        this.options.draggable.enabled = true;\n        this.options.resizable.enabled = true;\n      } else {\n        this.options.displayGrid = DisplayGrid.None;\n          this.options.draggable.enabled = false;\n          this.options.resizable.enabled = false;\n      }\n      this.options = Object.assign({}, this.options);\n    }\n\n    public itemResize(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n      function setWhenChanged(c: AbstractControl, value: Number) {\n          if (c.value !== value) {\n            c.setValue(value);\n          }\n      }\n\n      let control = <FormGroup>item.control;\n\n      setWhenChanged(control.controls.x, item.x);\n      setWhenChanged(control.controls.y, item.y);\n      setWhenChanged(control.controls.cols, item.cols);\n      setWhenChanged(control.controls.rows, item.rows);\n\n      let resizeEvent = item.control.controls.runTime.value.resizeEvent;\n      if (itemComponent.width) {\n        resizeEvent.emit([itemComponent.width, itemComponent.height]);\n      }\n    }\n\n      removeItem(index) {\n        let form = this.formsService.currentForm;\n        let items = <FormArray> form.controls.dexihDashboardItems;\n        items.removeAt(index);\n      }\n\n      updateGrid() {\n        let currentForm = this.formsService.currentForm;\n        this.options.minCols = currentForm.controls.minCols.value;\n        this.options.maxCols = currentForm.controls.maxCols.value;\n        this.options.minRows = currentForm.controls.minRows.value;\n        this.options.maxRows = currentForm.controls.maxRows.value;\n        this.options = Object.assign({}, this.options);\n      }\n\n      maximize(item) {\n        if (this.maximizedItem) {\n          this.maximizedItem = null;\n        } else {\n          this.maximizedItem = item;\n        }\n      }\n\n      parameterChange() {\n        if (this.formsService.currentForm.controls.autoRefresh.value) {\n          this.refresh();\n        }\n      }\n\n      refresh() {\n        this.hubService.previewDashboard(this.formsService.currentForm.value,\n          this.formsService.currentForm.value.parameters, this.cancelToken).then(keys => {\n            this.refreshDataSubject.next();\n          let items = <FormArray> this.formsService.currentForm.controls.dexihDashboardItems;\n\n          keys.forEach(url => {\n            let item = <FormGroup> items.controls.find((form: FormGroup) => form.controls.key.value === url.dashboardItemKey);\n            if (item) {\n              let data = <DataCache> item.controls.runTime.value.data;\n              this.hubService.getRemoteResponse<PreviewResults>(url.dataKey, this.cancelToken).then(result => {\n                result.columns = this.authService.constructDataTableColumns(result.columns);\n                if (result.status) {\n                  this.hubService.addHubMessage(result.status, false, result.name);\n                }\n                data.data.next(result);\n              }).catch();\n            }\n          });\n        });\n      }\n}\n","<div [ngClass]=\"{ 'd-none': maximizedItem}\">\n\n    <dexih-widget-section *ngIf=\"showEdit\" title=\"Properties\" [showExpandButton]=\"true\">\n        <form *ngIf=\"formsService.currentForm \" [formGroup]=\"formsService.currentForm\">\n            <fieldset>\n                <section>\n                    <form-input label=\"Dashboard Name\" formControlName=\"name\" placeholder=\"Enter the dashboard name.\"\n                        [autocapitalize]=\"on\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\">\n                    </form-input>\n                </section>\n                <section>\n                    <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n                        placeholder=\"Enter the description.\">\n                    </form-textarea>\n                </section>\n                <section>\n                    <div class=\"form-row\">\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Minimum Columns\" formControlName=\"minCols\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Maximum Columns\" formControlName=\"maxCols\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Minimum Rows\" formControlName=\"minRows\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Maximum Rows\" formControlName=\"maxRows\">\n                            </form-input>\n                        </section>\n                        <dexih-button-refresh (click)=\"updateGrid()\" text=\"Update Grid\"></dexih-button-refresh>\n                    </div>\n\n                </section>\n\n                <section>\n                    <form-checkbox formControlName=\"autoRefresh\" label=\"Automatically refresh data when view is opened\">\n                    </form-checkbox>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n\t\t\t\t\t</form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n    </dexih-widget-section>\n\n    <dexih-widget-section  title=\"Parameters\" *ngIf=\"showEdit || parameters?.length > 0\" [showExpandButton]=\"true\" (onChange)=\"parameterChange()\">\n        <input-parameters [showEdit]=\"showEdit\" [parameters]=\"parameters\"\n            [formsService]=\"formsService\" (onChange)=\"parameterChange()\" (onRefreshData)=\"refresh()\" [refreshEvent]=\"refreshDataSubject.asObservable()\" ></input-parameters>\n    </dexih-widget-section>\n\n    <dexih-widget-section *ngIf=\"inputColumns && inputColumns.length > 0\" title=\"InputColumns\"\n        [showExpandButton]=\"true\">\n        <span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n            <div class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{column.logicalName}}\n                </div>\n            </div>\n            <form-input name=\"column{{i}}\" class=\"form-control p-0\" [placeholder]=\"'Enter ' + column.logicalName\"\n                [(ngModel)]=\"column.value\"></form-input>\n        </span>\n    </dexih-widget-section>\n\n    <div style=\"height:800px\">\n        <gridster [options]=\"options\" #gridster>\n            <ng-template [ngIf]=\"dashboardItemControls\">\n                <gridster-item\n                    [item]=\"{x: item.controls.x.value, y: item.controls.y.value, cols: item.controls.cols.value, rows: item.controls.rows.value, control: item}\"\n                    *ngFor=\"let item of dashboardItemControls.controls; let i = index;\">\n                    <dashboard-item [item]=\"item\" [showEdit]=\"showEdit\" (onRemove)=\"removeItem(i)\"\n                        (onMaximize)=\"maximize($event)\" [refreshData]=\"item.controls.runTime.value.refreshData\">\n                    </dashboard-item>\n                </gridster-item>\n            </ng-template>\n        </gridster>\n    </div>\n</div>\n<div *ngIf=\"maximizedItem\" class=\"position-relative\" style=\"height:800px; overflow: hidden;\">\n    <dashboard-item [item]=\"maximizedItem\" [showEdit]=\"showEdit\" (onRemove)=\"removeItem(i)\"\n        (onMaximize)=\"maximize($event)\" [refreshData]=\"maximizedItem.controls.runTime.value.refreshData\"\n        [isMaximized]=\"true\">\n    </dashboard-item>\n</div>"]}