{"version":3,"sources":["webpack:///src/app/+public/public.component.html","webpack:///src/app/+public/public.component.ts","webpack:///src/app/+public/public.routing.ts","webpack:///src/app/+public/public.service.ts","webpack:///src/app/+public/public.module.ts"],"names":["PublicComponent","route","logoUrl","embedded","this","_subscription","queryParams","subscribe","p","unsubscribe","Routing","forChild","path","component","children","redirectTo","data","pageTitle","PublicService","authService","logger","_hubMessages","BehaviorSubject","asObservable","value","message","addUpdateNotification","messages","getHubMessages","push","next","newMessage","addHubMessage","error","context","stack","searchString","hubKeys","maxResults","reload","sharedItemsIndex","post","Promise","resolve","sharedItems","zipFiles","downloadFormat","cancelToken","reject","flags","i","length","hubKey","forEach","then","activeAgent","postRemote","clientId","getWebSocketConnectionId","filter","c","remoteAgentId","instanceId","task","addUpdateTask","catch","reason","LogC","Error","objectKey","objectType","inputColumns","selectQuery","parameters","result","columns","constructDataTableColumns","parameterName","resetCache","dashboardKey","dashboard","PublicModule","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["<div *ngIf=\"!embedded\" id=\"content\">\n    <nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <div id=\"logo-group\">\n            <span id=\"logo\">\n                <img [src]='logoUrl' alt=\"Data Experts Group\"> </span>\n        </div>\n    \n        <div class=\"collapse navbar-collapse mr-sm-2\">\n        </div>\n        <form class=\"form-inline\">\n            <div>\n                <span class=\"d-none d-md-inline text-white m-1\" >\n                    Need an account?\n                </span>\n                <a routerLink=\"/auth/register\" class=\"btn btn-success mr-1\">Sign Up</a>\n            </div>\n    \n            <div>\n                <span class=\"d-none d-md-inline text-white m-1\" >\n                    Already Registered?\n                </span>\n                <a routerLink=\"/auth/login\" class=\"btn btn-success mr-1\">Sign In</a>\n            </div>\n    \n            <a routerLink=\"/auth/help\" class=\"d-none d-md-inline btn btn-secondary text-white mr-1\">Help</a>\n    \n            <dexih-button-dropdown [pullRight]=\"true\" [hideCarrot]=\"true\" buttonClass=\"btn-primary\" iconClass=\"fa fa-navicon\">\n                <a class=\"dropdown-item\" routerLink=\"/auth/register\">Sign Up</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/login\">Sign In</a>\n                <div class=\"dropdown-divider\"></div>\t\n                <a class=\"dropdown-item\" routerLink=\"/auth/forgot-password\">Forgot password</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/verifyemail\">Verify password</a>\n                <div class=\"dropdown-divider\"></div>\t\n                <a class=\"dropdown-item\" routerLink=\"/auth/privacy\">Privacy Policy</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/terms\">Terms and Conditions</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/help\">Help</a>\n            </dexih-button-dropdown>\n        </form>\n    </nav>\n    \n    <dexih-ribbon></dexih-ribbon>\n\n    <router-outlet></router-outlet>\n</div>\n\n<router-outlet *ngIf=\"embedded\"></router-outlet>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription} from 'rxjs';\nimport { logoUrl } from '../+auth/auth.models';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n    selector: 'dexih-public',\n    templateUrl: './public.component.html'\n})\nexport class PublicComponent implements OnInit, OnDestroy {\n    _subscription: Subscription;\n\n    logoUrl = logoUrl;\n    embedded = false;\n\n    constructor(private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this._subscription = this.route.queryParams.subscribe(p => {\n            if (p['embed'] === 'true') {\n                this.embedded = true;\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { PublicComponent } from './public.component';\nimport { SharedDataComponent, PreviewComponent, PreviewDashboardComponent } from '../shared/ui/sharedData';\n\n// insert the \"hubs\" routes once for the base, and once under the summary section to ensure the\n// breadcrumbs are accurate.\nexport const routes: Routes = [\n    {\n        path: '',\n        component: PublicComponent,\n        children: [\n            { path: '', redirectTo: 'index' },\n            { path: 'index', data: { pageTitle: 'Shared Data' }, children : [\n                { path: '', component: SharedDataComponent, data: { pageTitle: 'Shared Data' } },\n                { path: 'preview/:hubKey/:objectType/:objectKey', component: PreviewComponent, data: { pageTitle: 'Preview' } },\n                { path: 'previewDashboard/:hubKey/:dashboardKey', component: PreviewDashboardComponent, data: { pageTitle: 'Preview Dashboard' } },\n            ] },\n        ]\n    }\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { Message, CancelToken } from '../+auth/auth.models';\nimport { eLogLevel, LogFactory } from '../../logging';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { AuthService } from '../+auth/auth.service';\nimport { BehaviorSubject, Observable} from 'rxjs';\nimport { eDownloadFormat, DexihActiveAgent, InputColumn, SelectQuery,\n    SharedData, eDataObjectType, DexihDashboard, InputParameterBase, ManagedTask, ListOfValuesItem } from '../shared/shared.models';\nimport { PreviewResults } from '../+hub/hub.models';\n\n@Injectable()\nexport class PublicService implements OnDestroy {\n\n    private logger = new LogFactory('public.service');\n    private _hubMessages = new BehaviorSubject<Array<Message>>([]);\n\n\n    private sharedItemsIndex: SharedData[];\n\n    constructor(\n        private authService: AuthService\n        ) {\n    }\n\n    ngOnDestroy() {\n    }\n\n    getHubMessagesObservable(): Observable<Array<Message>> {\n        return this._hubMessages.asObservable();\n    }\n\n    getHubMessages(): Array<Message> {\n        return this._hubMessages.value;\n    }\n\n    addHubMessage(message: Message) {\n        this.authService.addUpdateNotification(message, false);\n        let messages = this.getHubMessages();\n        messages.push(message);\n        this._hubMessages.next(messages);\n    }\n\n    addHubErrorMessage(message: string) {\n        let newMessage = new Message(false, message, null, null);\n        this.addHubMessage(newMessage);\n    }\n\n    addHubClientErrorMessage(error: Error, context: string) {\n        let message = context + '.  The following error occurred on the client: ' + error.message;\n        let newMessage = new Message(false, message, error.stack, null);\n        this.addHubMessage(newMessage);\n    }\n\n    addHubSuccessMessage(message: string) {\n        let newMessage = new Message(true, message, null, null);\n        this.addHubMessage(newMessage);\n    }\n\n    // gets all shared data items\n    getSharedDataIndex(searchString: string, hubKeys: number[], maxResults: number, reload: boolean): Promise<SharedData[]> {\n        if (reload || !this.sharedItemsIndex) {\n            return this.authService.post<SharedData[]>('/api/SharedData/SharedDataIndex', {\n                searchString, hubKeys, maxResults\n            }, 'Getting shared data index...');\n        } else {\n            Promise.resolve(this.sharedItemsIndex);\n        }\n    }\n\n    downloadData(sharedItems: Array<SharedData>, zipFiles: boolean, downloadFormat: eDownloadFormat, cancelToken: CancelToken):\n        Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n\n            // get distinct list of hubKeys\n            let flags = [], hubKeys = []\n            for (let i = 0; i < sharedItems.length; i++) {\n                if (flags[sharedItems[i].hubKey]) { continue };\n                flags[sharedItems[i].hubKey] = true;\n                hubKeys.push(sharedItems[i].hubKey);\n            }\n\n            hubKeys.forEach(hubKey => {\n                this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey}, 'Getting active remote agent...')\n                .then(activeAgent => {\n\n                    this.authService.postRemote<ManagedTask>('/api/SharedData/DownloadData', {\n                        hubKey: hubKey,\n                        clientId: this.authService.getWebSocketConnectionId(),\n                        downloadFormat: downloadFormat,\n                        zipFiles: zipFiles,\n                        sharedItems: sharedItems.filter(c => c.hubKey === hubKey),\n                        remoteAgentId: activeAgent.instanceId,\n                    }, activeAgent, 'Downloading data...', cancelToken)\n                        .then(task => {\n                        this.authService.addUpdateTask(task);\n                        resolve(true);\n                    }).catch(reason => {\n                        this.logger.LogC(() => `downloadData, error: ${reason.message}.`, eLogLevel.Error);\n                        reject(reason);\n                    });\n                });\n            });\n        });\n    }\n\n    // starts a preview, and returns the url to get the download stream.\n    previewData(hubKey: number, objectKey: number, objectType: eDataObjectType,\n        inputColumns: InputColumn[], selectQuery: SelectQuery, parameters: InputParameterBase[], cancelToken: CancelToken):\n        Promise<PreviewResults> {\n\n        return new Promise<PreviewResults>((resolve, reject) => {\n            this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey }, 'Getting active remote agent...')\n            .then(activeAgent => {\n                this.authService.postRemote<PreviewResults>('/api/SharedData/PreviewData', {\n                    hubKey: hubKey,\n                    objectType: objectType,\n                    objectKey: objectKey,\n                    selectQuery: selectQuery,\n                    remoteAgentId: activeAgent.instanceId,\n                    inputColumns: inputColumns,\n                    parameters: parameters\n                }, activeAgent, 'Previewing data...', cancelToken).then(result => {\n                    result.columns = this.authService.constructDataTableColumns(result.columns);\n                    resolve(result);\n                }).catch(reason => {\n                    reject(reason);\n                })\n            }).catch(reason => {\n                reject(reason);\n            });\n        });\n    }\n\n      // starts a preview, and returns the url to get the download stream.\n      previewListOfValues(hubKey: number, objectKey: number, objectType: eDataObjectType, parameterName,\n        resetCache: boolean, cancelToken: CancelToken):\n        Promise<ListOfValuesItem[]> {\n\n        return new Promise<ListOfValuesItem[]>((resolve, reject) => {\n            this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey }, 'Getting active remote agent...')\n            .then(activeAgent => {\n                this.authService.postRemote<ListOfValuesItem[]>('/api/SharedData/PreviewListOfValues', {\n                    hubKey: hubKey,\n                    objectType: objectType,\n                    objectKey: objectKey,\n                    parameterName: parameterName,\n                    resetCache: resetCache,\n                    remoteAgentId: activeAgent.instanceId,\n                }, activeAgent, 'Previewing list of values...', cancelToken).then(result => {\n                    resolve(result);\n                }).catch(reason => {\n                    reject(reason);\n                })\n            }).catch(reason => {\n                reject(reason);\n            });\n        });\n    }\n\n    getDashboard(hubKey: number, dashboardKey: number): Promise<DexihDashboard> {\n\n        return new Promise<DexihDashboard>((resolve, reject) => {\n            this.authService.post<DexihDashboard>('/api/SharedData/PreviewDashboard', {\n                hubKey: hubKey,\n                dashboardKey: dashboardKey,\n            }, 'Getting dashboard download locations...').then(dashboard => {\n                resolve(dashboard);\n            }).catch(reason => reject(reason));\n        });\n    }\n\n\n\n}\n\n\n\n\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { Routing } from './public.routing';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PublicService } from './public.service';\nimport { PublicComponent } from './public.component';\nimport { RibbonModule } from '../shared/layout/ribbon';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        Routing,\n        ReactiveFormsModule,\n        RibbonModule\n    ],\n    declarations: [\n        PublicComponent,\n    ],\n    providers: [PublicService],\n    exports: []\n})\nexport class PublicModule {\n\n    static forRoot(): ModuleWithProviders<PublicModule> {\n        return {\n            ngModule: PublicModule,\n            providers: [PublicService]\n        };\n    }\n}\n"]}