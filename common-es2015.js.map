{"version":3,"sources":["./src/app/shared/forms/forms.service.ts","./src/app/shared/index.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Subscription, BehaviorSubject, Observable, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Injectable()\nexport class FormsService implements OnDestroy {\n  private _valueChangesSubscription: Subscription;\n\n  private _changesSubscription1: Subscription;\n  private _changesSubscription2: Subscription;\n  private _changesSubscription3: Subscription;\n  private _changesSubscription4: Subscription;\n  private _changesSubscription5: Subscription;\n\n  public currentForm: FormGroup;\n  private _currentFormObservable = new BehaviorSubject<FormGroup>(null);\n  public formErrors = {};\n  public hasChanged = false;\n  public formSaving = false;\n  public showAllErrors = false;\n\n  private saveMethod: string;\n\n  validationMessages = {\n    'required': 'A value is required.',\n    'duplicateName': 'The value is already being used.'\n  };\n\n  validationFieldMessages = {\n\n  };\n\n  constructor(\n    private fb: FormBuilder,\n  ) {\n  }\n\n  ngOnDestroy() {\n    this.clearFormSubscriptions();\n  }\n\n  public clearFormSubscriptions() {\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    if (this._changesSubscription1) { this._changesSubscription1.unsubscribe(); }\n    if (this._changesSubscription2) { this._changesSubscription2.unsubscribe(); }\n    if (this._changesSubscription3) { this._changesSubscription3.unsubscribe(); }\n    if (this._changesSubscription4) { this._changesSubscription4.unsubscribe(); }\n    if (this._changesSubscription5) { this._changesSubscription5.unsubscribe(); }\n  }\n\n  public createDefault(item: any, template: any) {\n    const newForm = this.fb.group({ });\n    this.addMissing(item, newForm, template);\n    this.startForm(newForm);\n  }\n\n  public addMissing(item: any, form: FormGroup, itemTemplate: any) {\n    let keys = Object.keys(itemTemplate);\n    let existingKeys = Object.keys(form.controls);\n    keys.forEach(key => {\n      if (existingKeys.findIndex(c => c === key) >= 0) {\n        // skip items already added.\n      } else {\n        let control = new FormControl(key);\n        control.setValue(item[key]);\n        form.addControl(key, control);\n      }\n    });\n  }\n\n  public startForm(form: FormGroup) {\n    this.currentForm = form;\n    this._currentFormObservable.next(form);\n\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n\n    // when a value changes, update the errors.\n    this._valueChangesSubscription = this.currentForm.valueChanges\n        .pipe(debounceTime(500))\n        .subscribe(data => {\n          this.onValueChanged(data);\n        });\n\n    this.onValueChanged(); // (re)set validation messages now\n\n    this.hasChanged = false;\n  }\n\n  public getCurrentFormObservable(): Observable<FormGroup> {\n    return this._currentFormObservable.asObservable();\n  }\n\n  private onValueChanged(data?: any) {\n    if (!this.currentForm) { return; }\n    const form = this.currentForm;\n\n    this.hasChanged = true;\n\n      for (const field of Object.keys(this.currentForm.controls)) {\n        // clear previous error message (if any)\n        this.formErrors[field] = '';\n        const control = form.get(field);\n\n        // if the control is dirty or flag is set to show all errors.\n        if (control && (control.dirty || this.showAllErrors)) {\n          if (!control.valid) {\n            const messages = this.validationFieldMessages[field];\n            if (control.errors) {\n            for (const key of Object.keys(control.errors)) {\n              if (messages && messages[key]) {\n                this.formErrors[field] += messages[key] + ' ';\n              } else if (this.validationMessages[key]) {\n                this.formErrors[field] += this.validationMessages[key] + ' ';\n              } else {\n                let message: string;\n\n                switch (key) {\n                  case 'minlength':\n                    message = 'Value is ' +\n                      control.errors.minlength.actualLength +\n                      ' charaters long, required minimum length is '\n                      + control.errors.minlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxlength':\n                    message = 'Value is ' +\n                      control.errors.maxlength.actualLength +\n                      ' charaters long, required maximum length is '\n                      + control.errors.maxlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required maximum is '\n                      + control.errors.maxvalue.requiredValue + '.';\n                    break;\n                  case 'minvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required minimum is '\n                      + control.errors.minvalue.requiredValue + '.';\n                    break;\n                  case 'email':\n                    message = 'Value is not a valid email address.';\n                    break;\n                  case 'passwordMatch':\n                    message = 'The passwords do not match.';\n                    break;\n                  case 'pattern':\n                    message = 'Passwords must have one upper, lower, number, and symbol.';\n                    break;\n                  default:\n                    message = 'Field error: ' + key;\n                }\n                this.formErrors[field] += message + ' ';\n              }\n            }\n          } else {\n            // this.formErrors[field] = 'Invalid value';\n          }\n          }\n        }\n      }\n  }\n\n  public showErrors() {\n    this.showAllErrors = true;\n    this.onValueChanged();\n  }\n\n}\n","export {SharedModule} from './shared.module';\n"],"sourceRoot":"webpack:///"}