{"version":3,"sources":["webpack:///src/app/+hub/table/column-edit/column-edit-base.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit-base.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.html","webpack:///src/app/+hub/table/table.shared.module.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.html"],"names":["ColumnEditBaseComponent","hubService","detailedView","typeCodes","deltaTypes","securityFlags","s","this","_hubCacheSubscription","getHubCacheObservable","subscribe","cache","hubCache","unsubscribe","TableEditInputColumnComponent","columnForm","$event","TableEditRestComponent","route","router","location","cancelToken","inputTable","formatTypes","eTypeCode","status","Loaded","tables","getConnectionTables","_currentFormSubscription","formService","getCurrentFormObservable","currentForm","inputColumns","controls","dexihTableColumns","filter","c","value","isInput","isValid","_restfulUrlSubscription","restfulUri","valueChanges","pipe","debounceTime","newValue","updateInputColumns","cancel","importTable","forEach","column","importCol","find","name","inputValue","push","importTables","then","result","columns","length","removeAt","tableColumn","match","regExp","item","setValue","position","exec","col","logicalName","dataType","String","deltaType","NaturalKey","maxLength","description","allowDbNull","isUnique","sort","a","b","TableEditFileComponent","authService","isFile","hasBaseDropZoneOver","updatingTable","_subscription","e","addHubClientErrorMessage","files","doImport","event","srcElement","file","fileFormat","fileFormatKey","size","type","addHubErrorMessage","File","slice","form","FormData","append","hub","hubKey","toString","JsonNoNulls","connection","key","remoteAgent","getRemoteAgentCurrent","postFormRemoteGetKey","getRemoteData","importedTables","importedTable","entityStatus","lastStatus","message","updateColumns","reason","addHubMessage","tableColumnsForm","count","i","TableEditPropertiesComponent","isExpanded","entityType","canEdit","eTableType","eTableTypeItems","eConnectionCategory","eConnectionPurpose","runningSql","_columnData","BehaviorSubject","columnData","asObservable","combineLatest","data","params","formsService","getRemoteLibrariesObservable","mainForm","action","pageTitle","isLoaded","connectionReference","connections","dexihConnections","connectionKey","GetConnectionReference","_connectionSubscription","table","map","addHubSuccessMessage","join","sqlMessage","columnFormService","ColumnEditComponent","fb","isUpdated","changeColumn","tableForm","initializeForm","columnKey","originalColumn","navigateUp","newColumn","informationDialog","startForm","emit","columnsArray","markAsDirty","childColumns","apply","hasChanged","TableEditColumnsComponent","showBulkEdit","title","format","class","tooltip","footer","updateColumnData","_tableFormSubscription","tableData","parentColumnForm","columnGroup","nameClass","valid","dataTypeToString","logicalNameClass","defaultValue","columnValidation","getColumnValidation","columnValidationKey","isIncrementalUpdate","securityFlag","updateDate","next","deleteSelected","index","findIndex","navigate","relativeTo","parent","items","control","columnSortChange","editColumn","TableSharedModule","ngModule","ColumnEditBulkComponent","updated","properties","property","bulkColumn","subscription","columnsFormArray","getColumnForm","rank","precision","scale","isUnicode"],"mappings":"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","file":"x","sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags} from '../../hub.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubService } from '../../hub.service';\nimport { TypeCodes } from '../../hub.remote.models';\n\n@Component({\n    selector: 'column-edit-base',\n    templateUrl: './column-edit-base.component.html',\n})\nexport class ColumnEditBaseComponent implements OnInit, OnDestroy {\n    @Input() columnFormService: HubFormsService;\n    @Input() detailedView = true;\n\n    private _hubCacheSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    constructor(private hubService: HubService) { }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            this.hubCache = cache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n}\n","<form *ngIf=\"columnFormService.currentForm\" [formGroup]=\"columnFormService.currentForm\">\n    <fieldset>\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-6\">\n                <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\" iconClass=\"fa fa-list\"\n                    [errors]=\"columnFormService.formErrors.columnGroup\" note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n                </form-input>\n            </section>\n            <section class=\"form-group col-md-6\">\n                    <form-input label=\"Column Name\" formControlName=\"name\" placeholder=\"Enter the column name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"columnFormService.formErrors.name\" note=\"The physical column name in the underlying table\">\n                    </form-input>\n                </section>\n            </div>\n\n        <section>\n            <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n            </form-checkbox>\n        </section>\n        <section *ngIf=\"columnFormService.currentForm.value.useLogical\">\n            <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                [errors]=\"columnFormService.formErrors.logicalName\" note=\"The logical name is a short term to represent the column\">\n            </form-input>\n        </section>\n\n        <section *ngIf=\"detailedView\">\n            <form-textarea label=\"Description\" formControlName=\"description\" [showMarkdown]=\"true\" placeholder=\"Enter the description.\"\n                [errors]=\"columnFormService.formErrors.description\">\n            </form-textarea>\n        </section>\n\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-4\">\n                <form-select label=\"Data Type\" formControlName=\"dataType\" [errors]=\"columnFormService.formErrors.dataType\" [items]=\"typeCodes\"\n                    itemKey=\"key\" itemName=\"name\">\n                </form-select>\n            </section>\n            <section class=\"form-group col-md-2\">\n                <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\" [errors]=\"columnFormService.formErrors.rank\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isString\" class=\"form-group col-md-6\">\n                <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\" type=\"number\" [errors]=\"columnFormService.formErrors.maxLength\"\n                    note=\"Maximum string length (blank for unlimited)\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\" type=\"number\" [errors]=\"columnFormService.formErrors.precision\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\" [errors]=\"columnFormService.formErrors.scale\">\n                </form-input>\n            </section>\n        </div>\n\n        <div *ngIf=\"detailedView\">\n\n            <section>\n                <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n            </section>\n            <section>\n                <form-checkbox label=\"Is always incrementing column that can be used for change detection\" formControlName=\"isIncrementalUpdate\"></form-checkbox>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Delta Type\" formControlName=\"deltaType\" [errors]=\"columnFormService.formErrors.deltaType\" [items]=\"deltaTypes\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to treat the column when used to update target table.\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [errors]=\"columnFormService.formErrors.securityFlag\" [items]=\"securityFlags\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n                    </form-select>\n                </section>\n            </div>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\" [errors]=\"columnFormService.formErrors.defaultValue\"\n                        note=\"Default value if unmapped or null.\">\n                    </form-input>\n                </section>\n                <section class=\"form-group col-md-6\" *ngIf=\"columnFormService.currentForm.controls.columnValidationKey\">\n                    <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\" [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\"\n                        itemKey=\"key\" itemName=\"name\" note=\"Validation rule to apply.\">\n                        <columnValidation-edit-button [key]=\"columnFormService.currentForm.controls.columnValidationKey.value\"></columnValidation-edit-button>\n                    </form-select>\n                </section>\n            </div>\n        </div>\n    </fieldset>\n</form>\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'table-edit-input-column',\n    templateUrl: './table-edit-input-column.component.html'\n})\nexport class TableEditInputColumnComponent implements OnInit, OnChanges {\n    @Input() public columnForm: FormGroup = null;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    toggleInput($event) {\n    }\n}\n","<form [formGroup]=\"columnForm\" class=\"\">\n    <section>\n        <form-input \n        [label]=\"columnForm.value.name\" \n        formControlName=\"defaultValue\" \n        placeholder=\"Enter default value for the input column\" \n        iconClass=\"fa fa-dollar\">\n        </form-input>\n    </section>\n</form>","<div class=\"list-group-item list-group-item-info  rounded-0\">\n    <div class=\"d-flex flex-row\">\n        <h5>Web Service Properties</h5>\n    </div>\n</div>\n<div class=\"container mt-3 mb-3\">\n    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\">\n\n        <section>\n            <form-input label=\"Web Service Uri String\" formControlName=\"restfulUri\" placeholder=\"Enter the uri.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.restfulUri\" [note]=\"'Specify the uri following the base path ' + connection.server +'.  To include input columns use {} in the uri definition (eg. GetWeather?City={CityName})'\">\n            </form-input>\n        </section>\n        <section>\n        </section>\n\n        <section>\n            <div *ngFor=\"let columnForm of inputColumns | isValidFilter\">\n                <table-edit-input-column [columnForm]=\"columnForm\"></table-edit-input-column>\n            </div>\n        </section>\n\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">\n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, defaults will be used.\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section class=\"btn-toolbar\">\n            <dexih-button [busy]=\"formService.formSaving\" (click)=\"!formService.formSaving && importTable()\">Import </dexih-button>\n\n            <div *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\" class=\"input-group pl-1\">\n                <div  class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">Max Import Levels</div>\n                </div>\n                <input class=\"form-control\" placeholder=\"Maximum levels...\" title=\"Maximum import levels\" formControlName=\"maxImportLevels\"\n                    style=\"width: 100%; max-width: 100px\">\n            </div>\n        </section>\n\n    </form>\n</div>","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Location } from '@angular/common';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihTable, eTypeCode, DexihTableColumn, eDeltaType } from '../../../../shared/shared.models';\nimport { HubCache, ConnectionTables, formatTypes, eCacheStatus } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dexih-table-edit-rest',\n    templateUrl: './table-edit-rest.component.html'\n})\nexport class TableEditRestComponent implements OnInit, OnDestroy {\n    @Input() public formService: HubFormsService;\n    @Input() public connection: DexihConnection;\n\n    private _hubCacheSubscription: Subscription;\n    private _currentFormSubscription: Subscription;\n    private _restfulUrlSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    private hubCache: HubCache;\n\n    tables: ConnectionTables[];\n    inputColumns: Array<FormGroup>;\n    inputTable: DexihTable = null;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    constructor(private hubService: HubService, private route: ActivatedRoute, private router: Router, private location: Location) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n\n                this.hubCache = cache;\n\n                this.tables = this.hubCache.getConnectionTables();\n\n            }\n        });\n\n        this._currentFormSubscription = this.formService.getCurrentFormObservable().subscribe( currentForm => {\n            // load the inputColumns\n            const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n            this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n            if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n            this._restfulUrlSubscription = currentForm.controls.restfulUri.valueChanges\n                .pipe(debounceTime(500))\n                .subscribe(newValue => {\n                    this.updateInputColumns();\n                });\n        });\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n        if (this._currentFormSubscription) { this._currentFormSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    hasChanged($event) {\n        // this.tableChanged = true;\n    }\n\n    importTable() {\n        let importTable = this.formService.currentForm.value;\n        let inputColumns = this.formService.currentForm.value.dexihTableColumns.filter(c => c.isInput && c.isValid);\n\n        // merge any input columns with columns already in the table\n        if (inputColumns) {\n            inputColumns.forEach(column => {\n                let importCol = importTable.dexihTableColumns.find(c => c.name === column.name);\n                if (importCol) {\n                    importCol.inputValue = column.inputValue;\n                } else {\n                    importCol = column;\n                    importTable.dexihTableColumns.push(importCol);\n                }\n            });\n        }\n\n        this.hubService.importTables([importTable], false, this.cancelToken)\n            .then(result => {\n                const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n                while (columns.controls.length > 0) {\n                    columns.removeAt(0);\n                }\n\n                result[0].dexihTableColumns.forEach(column => {\n                    columns.push(this.formService.tableColumn(result[0].dexihTableColumns, column));\n                });\n            }).catch();\n    }\n\n    updateInputColumns() {\n        // use the regex to extract items in uri between { }.  These will be input columns\n        const regExp = /\\{([^}]+)\\}/g;\n\n        const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n        const inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n        inputColumns.forEach(item => {\n            const columnForm = <FormGroup>item;\n            columnForm.controls.isValid.setValue(false);\n        });\n        let match;\n        let position = -1000;\n\n        while ((match = regExp.exec(this.formService.currentForm.value.restfulUri))) {\n            let columnForm = <FormGroup>columns.controls.find(c => c.value.name === match[1] && c.value.isInput);\n\n            if (!columnForm) {\n                let col = new DexihTableColumn();\n\n                // add the basic properties\n                col.name = match[1];\n                col.isInput = true;\n                col.logicalName = match[1];\n                col.dataType = eTypeCode.String;\n                col.deltaType = eDeltaType.NaturalKey;\n                col.maxLength = 1024;\n                col.position = position++;\n                col.description = 'Url Parameter ' + match[1];\n\n                col.allowDbNull = true;\n                col.isUnique = false;\n                col.isValid = true;\n\n                columnForm = this.formService.tableColumn(columns.value, col);\n                columns.push(columnForm);\n            } else {\n                columnForm.controls.isValid.setValue(true);\n            }\n        }\n\n        position = 1;\n        columns.controls.filter(column => column.value.isValid) .sort((a, b) => a.value.position - b.value.position).forEach(column => {\n            (<FormGroup>column).controls.position.setValue(position++);\n        });\n\n        this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n    }\n}\n","<dexih-widget-section title='File Properties' [showExpandButton]=\"true\" [padding]=\"true\">\n\n    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\">\n        <ng-template [ngIf]=\"isFile\">\n            <section>\n                <form-input label=\"Files Subdirectory\" formControlName=\"fileRootPath\" placeholder=\"Enter the file path name.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileRootPath\" [note]=\"'Specify the subdirectory.  This will be the connection directory (' + connection.server + ') plus the path specified.'\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-input label=\"File Match Pattern\" formControlName=\"fileMatchPattern\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileMatchPattern\" note=\"Specify the file pattern to use to match files when bulk uploading.  Patterns can include wildcards */?, leave blank for all files.\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Auto manage files\" formControlName=\"autoManageFiles\" note=\"Files loaded from the incoming directory, and moved to the processed or rejected directories when they are loaded by a datalink.  If not checked source files will be left untouched after a load.\">\n                </form-checkbox>\n            </section>\n\n            <div *ngIf=\"formService.currentForm.value.autoManageFiles \">\n\n                <section>\n                    <form-checkbox label=\"Specify custom file paths for auto-managed files\" formControlName=\"useCustomFilePaths\" [note]=\"'If custom paths are not specified files will be read/written to the directory: ' + connection.server + '/' + formService.currentForm.value.name + '/'\">\n                    </form-checkbox>\n                </section>\n\n                <div *ngIf=\"formService.currentForm.value.useCustomFilePaths\">\n\n                    <section>\n                        <form-input label=\"Incoming subdirectory\" formControlName=\"fileIncomingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileIncomingPath\" note=\"Specify the sub-directory for incoming files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Outgoing subdirectory\" formControlName=\"fileOutgoingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileOutgoingPath\" note=\"Specify the sub-directory for outgoing (written) files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Processed subdirectory\" formControlName=\"fileProcessedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileProcessedPath\" note=\"Specify the sub-directory for processed files\">\n                        </form-input>\n                    </section>\n                    <section>\n                        <form-input label=\"Rejected subdirectory\" formControlName=\"fileRejectedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileRejectedPath\" note=\"Specify the sub-directory for rejected files\">\n                        </form-input>\n                    </section>\n\n                </div>\n            </div>\n        </ng-template>\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">    \n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, a csv (command separated) format will be used.\"\n                [allowNullSelect]=\"true\" selectNullMessage=\"Use default (csv) format\">\n                <a routerLink=\"../fileFormat-new\">(<i class=\"fa fa-sticky-note-o\"></i> New Format )</a>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section>\n            <label class=\"label\">Add a sample file which will be used to determine column names.\n                <a  href=\"javascript:void(0)\" (click)=\"import()\">(<i class=\"fa fa-download\"></i> Import directly from source )</a>\n            </label>\n\n            <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                Drop Sample File Here\n                <div class=\"custom-file w-25 float-right\">\n                    <input type=\"file\" class=\"custom-file-input\" (change)=\"uploadFile($event)\" onclick=\"this.value=null\">\n                    <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\n                </div>\n            </div>\n\n            <br/>\n            <dexih-button-refresh *ngIf=\"uploader?.queue?.length == 1\" (click)=\"importTable()\" text='Import Table Columns' [busy]=\"updatingTable\"></dexih-button-refresh>\n            <section>\n                <form-input label=\"Max Import Levels\" formControlName=\"maxImportLevels\" placeholder=\"Enter the maximum node levels to query the json structure.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.maxImportLevels\" note=\"Enter the maximum levels to query the json file.\">\n                </form-input>\n            </section>\n        </section>\n    </form>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { Subscription} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihFileFormat, eTypeCode, DexihTable, DexihTableColumn, ConnectionReference } from '../../../../shared/shared.models';\nimport { HubCache, formatTypes } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-file',\n    templateUrl: './table-edit-file.component.html'\n})\nexport class TableEditFileComponent implements OnInit, OnDestroy {\n    @Input() public connection: DexihConnection;\n    @Input() public isFile = false;\n    @Input() public formService: HubFormsService;\n\n    public hasBaseDropZoneOver = false;\n\n    public updatingTable = false;\n\n    private _subscription: Subscription;\n    public hubCache: HubCache;\n    public fileFormats: DexihFileFormat[];\n\n    filesSubdirectory: string;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    public cancelToken: CancelToken = new CancelToken();\n\n    constructor(private authService: AuthService,\n        private hubService: HubService) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = this.hubService.getHubCacheObservable().subscribe(result => {\n                this.hubCache = result;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit File');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    public filesDrop(files: any) {\n        this.doImport(files[0]);\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doImport(files[0]);\n    }\n\n    public doImport(file: File) {\n\n        if (this.formService.currentForm.value.fileFormat) {\n            this.formService.currentForm.value.fileFormatKey = this.formService.currentForm.value.fileFormat.fileFormatKey;\n        }\n\n        if (file.size > 100000) {\n            if (file.type === 'text/csv' || file.type === 'text/plain') {\n                file = new File([file.slice(0, 100000) ], file.name);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage(`The file size ${file.size}b exceeded the maximum of 100,000b.  Submit a smaller sample file, or a plain text file (which will be trimmed automatically) to proceed.`);\n                return;\n            }\n        }\n\n        const form: FormData = new FormData();\n        form.append('file', file, file.name);\n        form.append('hubKey', this.hubCache.hub.hubKey.toString());\n        form.append('table', this.authService.JsonNoNulls(this.formService.currentForm.value));\n        form.append('connectionKey', this.connection.key.toString());\n        form.append('save', 'false');\n\n        let remoteAgent = this.hubService.getRemoteAgentCurrent();\n\n        this.authService.postFormRemoteGetKey('/api/Hub/ImportFileFormat', form, remoteAgent, this.cancelToken)\n            .then(key => {\n                this.authService.getRemoteData<DexihTable[]>(remoteAgent, key, this.cancelToken, 'download').then(importedTables => {\n                    let importedTable = importedTables[0];\n                    if (importedTable.entityStatus.lastStatus.toString() === 'Error') {\n                        this.hubService.addHubErrorMessage(importedTable.entityStatus.message);\n                    }\n\n                    this.updateColumns(importedTable.dexihTableColumns);\n                });\n\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    import() {\n        this.hubService.importTables([this.formService.currentForm.value], false, this.cancelToken).then(tables => {\n            if (tables && tables.length > 0) {\n                this.updateColumns(tables[0].dexihTableColumns);\n            }\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    updateColumns(columns: DexihTableColumn[]) {\n        let tableColumnsForm = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n\n        // remove existing columns.\n        const count = tableColumnsForm.controls.length;\n        for (let i = 0; i <= count; i++) {\n            tableColumnsForm.removeAt(0);\n        }\n        columns.filter(c => c.isValid).forEach(column => {\n            tableColumnsForm.push(this.formService.tableColumn(tableColumnsForm.value, column));\n        });\n    }\n}\n","<dexih-widget-section title='Properties' [showExpandButton]=\"true\" [isExpanded]=\"isExpanded\" >\n        <form *ngIf=\"mainForm\" [formGroup]=\"mainForm\">\n            <fieldset>\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-4\">\n                        <form-select label=\"Connection\" formControlName=\"connectionKey\" [items]=\"connections\" itemKey=\"key\" itemName=\"name\"\n                            [errors]=\"formsService.formErrors.connectionKey\" iconClass=\"fa fa-database\" note='The connection for this table.'>\n                            <connection-edit-button [key]=\"mainForm.controls.connectionKey.value\"></connection-edit-button>\n                        </form-select>\n                    </section>\n\n                    <section class=\"form-group col-md-4\">\n                        <form-input [label]=\"entityType + ' Name'\" formControlName=\"name\" placeholder=\"Enter the physical name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.name\" note=\"The physical name of the underlying entity\">\n                        </form-input>\n                    </section>\n\n                    <section class=\"form-group col-md-4\" *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                        <form-input [label]=\"entityType + ' Schema'\" formControlName=\"schema\" placeholder=\"Enter the (database) schema name\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.schema\" note=\"The physical name of the database schema (if applicable).\">\n                        </form-input>\n                    </section>\n                </div>\n                \n                <section>\n                    <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n                    </form-checkbox>\n                </section>\n\n                <section *ngIf=\"formsService.currentForm.value.useLogical\">\n                    <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"formsService.formErrors.logicalName\" note=\"The logical name is a short term to represent the table\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-textarea label=\"Description\" formControlName=\"description\" [showMarkdown]=\"true\" placeholder=\"Enter the description.\"\n                        [errors]=\"formsService.formErrors.description\">\n                    </form-textarea>\n                </section>\n\n                <div *ngIf=\"connection?.purpose == eConnectionPurpose.Managed\" class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Reject Table Name\" formControlName=\"rejectedTableName\" placeholder=\"Enter the rejected table name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.rejectedTableName\" note=\"The name of the table to send any records that could not be written to the primary table.\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                    <form-select label=\"Table Type\" formControlName=\"tableType\" [errors]=\"formsService.formErrors.tableType\" [items]=\"eTableTypeItems\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section *ngIf=\"formsService.currentForm.controls.tableType.value === eTableType.Query\">\n                    <form-textarea label=\"Specify the sql query\" rows=\"15\" formControlName=\"queryString\" [hideToggle]=\"true\" placeholder=\"Sql Query\"\n                        [showPreview]=\"false\">\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"test()\"> (\n                            <i class=\"fa fa-check-circle-o\"></i> Test) </a>\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"reloadColumns()\"> (\n                            <i class=\"fa fa-refresh\"></i> Reload Columns) </a>\n                        <span *ngIf=\"runningSql == true\">\n                            <i class=\"fa fa-spin fa-refresh\"></i> (Busy... please wait) </span>\n                        <dexih-message [message]=\"sqlMessage\"></dexih-message>\n                    </form-textarea>\n                </section>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.Hub\">\n                    <form-input label=\"Source Connection Name\" formControlName=\"sourceConnectionName\" placeholder=\"Name of the source connection.\"\n                        iconClass=\"fa fa-list\" note=\"The name of the connection for this table in the source hub.\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                    </form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n</dexih-widget-section>\n\n<div *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.WebService\">\n    <dexih-table-edit-rest [formService]='formsService' [connection]='connection' (onTableChanged)=\"onTableChanged($event)\"></dexih-table-edit-rest>\n</div>\n\n<div *ngIf=\"connection && ( connectionReference?.connectionCategory == eConnectionCategory.File || connection?.purpose !== eConnectionPurpose.Source )\">\n    <dexih-table-edit-file [formService]='formsService' [connection]='connection' [isFile]='connectionReference?.connectionCategory == eConnectionCategory.File' (onTableChanged)=\"onTableChanged($event)\"></dexih-table-edit-file>\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags } from '../../../hub.models';\nimport { eTableType, DexihConnection, ConnectionReference,\n    eConnectionCategory, DexihTableColumn, eConnectionPurpose, DexihTable, eTableTypeItems } from '../../../../shared/shared.models';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { CancelToken, Message } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-properties',\n    templateUrl: './table-edit-properties.component.html',\n})\nexport class TableEditPropertiesComponent implements OnInit, OnDestroy {\n    @Input() public formsService: HubFormsService;\n    @Input() public isExpanded = true;\n\n    // private connection: DexihConnection;\n\n    private _subscription: Subscription;\n    private _connectionSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    eTableType = eTableType;\n    eTableTypeItems = eTableTypeItems;\n\n    public sqlMessage: Message;\n\n    public connections: DexihConnection[];\n    public connection: DexihConnection;\n    public connectionReference: ConnectionReference;\n    eConnectionCategory = eConnectionCategory;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    public runningSql = false;\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private route: ActivatedRoute    ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable(), // included to ensure correct connection reference when refreshing page.\n            ).subscribe(async result => {\n                let data = result[0];\n                this.hubCache = result[2];\n                this.mainForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.mainForm ) {\n                    this.connections = this.hubCache.hub.dexihConnections;\n                    this.connection = this.connections.find(c => c.key === this.mainForm.controls.connectionKey.value);\n                    this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n\n                    if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n                    this._connectionSubscription = this.mainForm.controls.connectionKey.valueChanges.subscribe(async (connectionKey) => {\n                        this.connection = this.connections.find(c => c.key === connectionKey);\n                        this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n                    });\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table edit properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    reloadColumns() {\n        this.runningSql = true;\n        this.hubService.importTables([this.mainForm.value], false, this.cancelToken).then(tables => {\n            if (!tables || tables.length === 0) { return; }\n\n            const table: DexihTable = tables[0];\n            const tableColumnsForm = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            while (tableColumnsForm.controls.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n            table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.formsService.tableColumn(table.dexihTableColumns, column));\n            });\n            this.runningSql = false;\n        }).catch(() => this.runningSql = false);\n    }\n\n    test() {\n        this.runningSql = true;\n        this.hubService.doImport([this.mainForm.value], false, this.cancelToken).then(tables => {\n            let columns = tables[0].dexihTableColumns.map(c => c.name);\n            this.hubService.addHubSuccessMessage('The query was successful, and returned the following columns.  ' + columns.join(', '));\n            this.runningSql = false;\n        }).catch((reason) => {\n            this.runningSql = false;\n            this.sqlMessage = reason;\n            this.hubService.addHubMessage(reason);\n        });\n    }\n}\n","import { Component, OnInit, OnChanges, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { HubCache, eCacheStatus,\n     } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { eDeltaType, DexihTableColumn, eTypeCode } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'column-edit',\n    templateUrl: './column-edit.component.html',\n})\nexport class ColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() columnKey: number;\n    @Input() deltaType: eDeltaType;\n    @Input() detailedView = true;\n    @Output() isUpdated = new EventEmitter<boolean>();\n    @Output() changeColumn = new EventEmitter<number>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private originalColumn: DexihTableColumn;\n\n    public columns: any[];\n\n    public eTypeCode = eTypeCode;\n\n\n    public columnFormService: HubFormsService;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        fb: FormBuilder) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.status === eCacheStatus.Loaded) {\n                this.hubCache = hubCache;\n\n                if (!this.hubCache.isLoaded() || !this.tableForm) { return; }\n\n                this.initializeForm();\n\n                this.updateColumns();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this.tableForm && this.hubCache) {\n            this.initializeForm();\n            this.updateColumns();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n        let columns = this.tableForm.value.dexihTableColumns;\n\n        if (this.columnKey) {\n            if (this.tableForm) {\n                this.originalColumn = columns.find(c => c.key === this.columnKey);\n                if (!this.originalColumn) {\n                    this.authService.navigateUp();\n                    return;\n                }\n                columnForm = this.columnFormService.tableColumn(columns, this.originalColumn);\n            }\n        } else {\n            let column = this.hubCache.newColumn(this.tableForm.value, this.deltaType);\n            if (column) {\n                columnForm = this.columnFormService.tableColumn(columns, column);\n            } else {\n                this.authService.informationDialog('Column not added.',\n                `The column with delta type ${this.deltaType} could not be inserted into the current table.`);\n            }\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.isUpdated.emit(false);\n    }\n\n    apply() {\n        const columnForm = this.columnFormService.currentForm;\n        const columnsArray = <FormArray>this.tableForm.controls.dexihTableColumns;\n\n        if (!this.originalColumn) {\n        columnsArray.push(columnForm);\n        } else {\n        const originalColumn = columnsArray.controls.find(c => c.value.key === columnForm.value.key);\n        originalColumn.setValue(columnForm.value);\n        }\n\n        this.tableForm.markAsDirty();\n    }\n\n    updateColumns() {\n        if (this.tableForm && this.originalColumn) {\n            this.columns = (<DexihTableColumn[]> this.originalColumn.childColumns)\n            .sort((a, b) => a.position - b.position)\n        }\n    }\n\n    navigateToColumn(col: DexihTableColumn) {\n        this.apply();\n        this.changeColumn.emit(col.key);\n    }\n\n    applyExit() {\n        if (this.columnFormService.hasChanged) {\n            this.apply();\n            this.isUpdated.emit(true);\n        }\n    }\n}\n","<dexih-widget-section title='Edit Column' [showExpandButton]=\"true\">\n<ng-template #header>\n        <dexih-invalid-form-details class=\"mr-1\" (click)=\"columnFormService.showErrors()\" [control]=\"columnFormService.currentForm\"></dexih-invalid-form-details>\n        <dexih-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" text=\"Column\">\n            <li *ngFor=\"let col of columns\">\n                <a class=\"dropdown-item\" (click)=\"navigateToColumn(col)\">{{col.columnGroup ? col.columnGroup + \".\" : \"\"}}{{col.name}}</a>\n            </li>\n        </dexih-button-dropdown>\n        <dexih-button-apply class=\"mr-1\" [disabled]=\"!columnFormService?.hasChanged\" (click)=\"applyExit()\"></dexih-button-apply>\n        <dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n</ng-template>\n\n<column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"detailedView\"></column-edit-base>\n</dexih-widget-section>\n\n<table-edit-columns *ngIf=\"columnFormService?.currentForm?.controls.dataType.value === eTypeCode.Node\" [tableForm]='tableForm' [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n","import { Component, OnInit, OnChanges, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags, eCacheStatus } from '../../../hub.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-columns',\n    templateUrl: './table-edit-columns.component.html',\n})\nexport class TableEditColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() parentColumnForm: FormGroup;\n\n    private _hubCacheSubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    private deltaTypes = deltaTypes;\n    private securityFlags = securityFlags;\n    public showBulkEdit = false;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { name: 'name', title: 'Column Name', format: '', class: 'nameClass', tooltip: 'description'},\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description', class: 'logicalNameClass'},\n        { name: 'isInput', title: 'Input?', format: 'Boolean'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'deltaType', title: 'Delta Type', format: ''},\n        { name: 'defaultValue', title: 'Default Value', format: ''},\n        { name: 'columnValidation', title: 'Column Validation', format: ''},\n        { name: 'isIncrementalUpdate', title: 'Is Incremental', format: 'Boolean'},\n        { name: 'securityFlag', title: 'Security Flag', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        public formsService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n                this.hubCache = cache;\n                this.updateColumnData();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this.formsService.currentForm) {\n            this._tableFormSubscription = this.formsService.currentForm.valueChanges.subscribe(() => this.updateColumnData());\n        }\n        this.updateColumnData();\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        if (this.hubCache && this.formsService.currentForm) {\n            let tableData = [];\n\n            let columns: FormArray;\n\n            if (this.parentColumnForm) {\n                columns = <FormArray>this.parentColumnForm.controls.childColumns;\n            } else {\n                columns = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            }\n\n            columns.controls\n                .filter(c => c.value.isValid)\n                .sort((a, b) => a.value.position - b.value.position)\n                .forEach(column => {\n                    let columnForm = <FormGroup>column;\n                    tableData.push({\n                        key: column.value.key,\n                        position: column.value.position,\n                        name: (column.value.columnGroup ? column.value.columnGroup + '.' : '') + column.value.name,\n                        nameClass: (columnForm.controls.name.valid ? '' : 'dexih-state-error'),\n                        description: column.value.description,\n                        isInput: column.value.isInput,\n                        dataType: this.hubCache.dataTypeToString(column.value),\n                        allowDbNull: column.value.allowDbNull,\n                        logicalName: column.value.logicalName,\n                        logicalNameClass: (columnForm.controls.logicalName.valid ? '' : 'dexih-error-icon'),\n                        deltaType: this.deltaTypes.find(c => c.key === column.value.deltaType).name,\n                        defaultValue: column.value.defaultValue,\n                        columnValidation: this.hubCache.getColumnValidation(column.value.columnValidationKey).name,\n                        isIncrementalUpdate: column.value.isIncrementalUpdate,\n                        securityFlag: this.securityFlags.find(c => c.key === column.value.securityFlag).name,\n                        updateDate: column.value.updateDate,\n                    });\n                });\n            this._columnData.next(tableData);\n        } else {\n            this._columnData.next(null);\n        }\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        columnsArray.removeAt(index);\n    });\n    // this._columnData.next(this.table.dexihTableColumns.filter(c => c.isValid));\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n}\n","<dexih-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\" [columns]=\"columns\" [dataObservable]=\"columnData\" (rowClick)=\"editColumn($event)\">\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\" class=\"mr-1\"></dexih-button-delete>\n            <dexih-button iconClass=\"fa fa-th-list\" class=\"mr-1\" (click)=\"showBulkEdit=!showBulkEdit\">\n                {{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </dexih-button>\n        </ng-template>\n\n        <ng-template #tableHeader let-items=\"items\">\n            <column-edit-bulk *ngIf=\"formsService.currentForm && showBulkEdit && items.length > 0\" [columns]=\"items\"\n                [columnsFormArray]=\"formsService.currentForm.controls.dexihTableColumns\" (updated)=\"showBulkEdit = false\" class=\"mr-1\"></column-edit-bulk>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <dexih-button-new (click)=\"newColumn()\" title=\"Create a new column\" class=\"mr-1\"></dexih-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\" class=\"mr-1\">\n            <dexih-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\" class=\"mr-1\"></dexih-button-edit>\n        </ng-template>\n\n    </dexih-table>\n\n</dexih-widget-section>","\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TableEditPropertiesComponent } from './table-edit/table-edit-properties/table-edit-properties.component';\nimport { TableEditColumnsComponent } from './table-edit//table-edit-columns/table-edit-columns.component';\nimport { TableEditFileComponent } from './table-edit/table-edit-file/table-edit-file.component';\nimport { TableEditRestComponent } from './table-edit/table-edit-rest/table-edit-rest.component';\nimport { TableEditInputColumnComponent } from './table-edit//table-edit-rest/table-edit-input-column.component';\nimport { HubSharedModule } from '../hub.shared.module';\nimport { TableEditPreviewDataComponent } from './table-edit//table-edit-preview-data';\nimport { ColumnEditComponent, ColumnEditBaseComponent } from './column-edit';\nimport { ColumnEditBulkComponent } from './table-edit/column-edit-bulk/column-edit-bulk.component';\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ],\n    exports: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ]\n})\nexport class TableSharedModule {\n    static forRoot(): ModuleWithProviders<TableSharedModule> {\n        return {\n            ngModule: TableSharedModule,\n        };\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport {  deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { FormsService } from '../../../../shared/forms/forms.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn } from '../../../../shared/shared.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'column-edit-bulk',\n    templateUrl: 'column-edit-bulk.component.html'\n})\n\nexport class ColumnEditBulkComponent implements OnInit, OnDestroy {\n    @Input() columns: DexihTableColumn[];\n    @Input() columnsFormArray: FormArray;\n\n    @Output() updated = new EventEmitter();\n\n    subscription: Subscription;\n\n    public properties = [\n        {name: 'Group Name', property: 'group'},\n        {name: 'Data Type', property: 'dataType'},\n        {name: 'Delta Type', property: 'deltaType'},\n        {name: 'Security Flag', property: 'securityFlag'},\n        {name: 'Default Value', property: 'defaultValue'},\n        {name: 'Validation Rule', property: 'validationRule'},\n        {name: 'Allow DbNull', property: 'allowDbNull'},\n        {name: 'Is Input', property: 'isInput'},\n        {name: 'Is Unicode', property: 'isUnicode'},\n    ];\n\n    hubCache: HubCache;\n    property: string;\n    bulkColumn: FormGroup;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    constructor(private hubService: HubService,\n        private formsService: HubFormsService) { }\n\n    ngOnInit() {\n        this.bulkColumn = this.formsService.tableColumn([], new DexihTableColumn());\n\n        this.subscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            this.hubCache = hubCache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {this.subscription.unsubscribe(); }\n    }\n\n    getColumnForm(column: DexihTableColumn): FormGroup {\n        return <FormGroup> this.columnsFormArray.controls.find((c: FormGroup) => c.controls.key.value === column.key);\n    }\n\n    applyBulkEdit() {\n\n        let bulkColumn = <DexihTableColumn> this.bulkColumn.value;\n        this.columns.forEach(column => {\n            let columnForm = this.getColumnForm(column);\n            if (!columnForm) { return; }\n\n            switch (this.property) {\n                case 'group':\n                    columnForm.controls.columnGroup.setValue(bulkColumn.columnGroup);\n                    break;\n                case 'dataType':\n                    columnForm.controls.dataType.setValue(bulkColumn.dataType);\n                    columnForm.controls.maxLength.setValue(bulkColumn.maxLength);\n                    columnForm.controls.rank.setValue(bulkColumn.rank);\n                    columnForm.controls.precision.setValue(bulkColumn.precision);\n                    columnForm.controls.scale.setValue(bulkColumn.scale);\n                    break;\n                case 'deltaType':\n                    columnForm.controls.deltaType.setValue(bulkColumn.deltaType);\n                    break;\n                case 'securityFlag':\n                    columnForm.controls.securityFlag.setValue(bulkColumn.securityFlag);\n                    break;\n                case 'defaultValue':\n                    columnForm.controls.defaultValue.setValue(bulkColumn.defaultValue);\n                    break;\n                case 'validationRule':\n                    columnForm.controls.columnValidationKey.setValue(bulkColumn.columnValidationKey);\n                    break;\n                case 'allowDbNull':\n                    columnForm.controls.allowDbNull.setValue(bulkColumn.allowDbNull);\n                    break;\n                case 'isUnicode':\n                    columnForm.controls.isUnicode.setValue(bulkColumn.isUnicode);\n                    break;\n                case 'isInput':\n                    columnForm.controls.isInput.setValue(bulkColumn.isInput);\n                    break;\n            }\n        });\n        this.updated.emit();\n      }\n\n      cancel() {\n          this.updated.emit();\n      }\n\n      setAllowDbNull(value: boolean) {\n        this.columns.forEach(column => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.allowDbNull.setValue(value);\n        });\n      }\n\n      setIsInput(value: boolean) {\n        this.columns.forEach(column  => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.isInput.setValue(value);\n        });\n      }\n\n      setIsUnicode(value: boolean) {\n        this.columns.forEach(column  => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.isUnicode.setValue(value);\n        });\n      }\n}\n","<dexih-widget title=\"Update columns\" headerClass=\"text-white bg-primary\">\n<form [formGroup]=\"bulkColumn\">\n    <section class=\"form-group col-md-4\">\n        <form-select label=\"Property\" [(ngModel)]=\"property\" [ngModelOptions]=\"{standalone: true}\" [items]=\"properties\" itemKey=\"property\"\n            itemName=\"name\">\n        </form-select>\n    </section>\n    <div *ngIf=\"property=='dataType'\">\n        <section class=\"form-group col-md-4\">\n            <form-select label=\"Data Type\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                itemName=\"name\">\n            </form-select>\n        </section>\n        <section class=\"form-group col-md-2\">\n            <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isString\" class=\"form-group col-md-6\">\n            <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\"\n                type=\"number\" note=\"Maximum string length (blank for unlimited)\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\"\n                type=\"number\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\">\n            </form-input>\n        </section>\n    </div>\n\n    <div *ngIf=\"property=='group'\" >\n            <section class=\"form-group col-md-6\">\n        <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\"\n            iconClass=\"fa fa-list\"\n            note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n        </form-input>\n            </section>\n    </div>\n    <div *ngIf=\"property=='securityFlag'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [items]=\"securityFlags\"\n                itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='deltaType'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Delta Type\" formControlName=\"deltaType\" [items]=\"deltaTypes\"\n                itemKey=\"key\" itemName=\"name\"\n                note=\"How to treat the column when used to update target table.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='defaultValue'\" >\n        <section class=\"form-group col-md-6\">\n            <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\"\n                note=\"Default value if unmapped or null.\">\n            </form-input>\n        </section>\n    </div>\n    <div *ngIf=\"property=='validationRule'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\"\n                [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\" itemKey=\"key\"\n                itemName=\"name\" note=\"Validation rule to apply.\">\n                <columnValidation-edit-button [key]=\"bulkColumn.controls.columnValidationKey.value\"></columnValidation-edit-button>\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='allowDbNull'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isInput'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isUnicode'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n        </section>\n    </div>\n</form>\n    <ng-template #footer>\n        <dexih-button-apply class=\"mr-1\" (click)=\"applyBulkEdit(items)\"></dexih-button-apply>\n        <dexih-button-cancel class=\"mr-1\" (click)=\"cancel()\"></dexih-button-cancel>\n    </ng-template>\n</dexih-widget>\n\n\n\n\n\n"]}