{"version":3,"sources":["webpack:///src/app/+hub/dashboard/dashboard-edit/properties/dashboard-properties.component.html","webpack:///src/app/+hub/dashboard/dashboard-edit/dashboard-edit.routing.ts","webpack:///src/app/+hub/dashboard/dashboard-edit/properties/dashboard-properties.component.ts","webpack:///src/app/+hub/dashboard/dashboard-edit/dashboard-edit.module.ts"],"names":["Routing","forChild","path","component","canDeactivate","children","redirectTo","DashboardPropertiesComponent","authService","hubService","formsService","showEdit","lock","refreshDataSubject","Subject","eViewType","eSourceType","cancelToken","this","options","gridType","ScrollVertical","compactType","None","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","mobileBreakpoint","minCols","maxCols","minRows","maxRows","maxItemCols","minItemCols","maxItemRows","minItemRows","maxItemArea","minItemArea","defaultItemCols","defaultItemRows","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","scrollSensitivity","scrollSpeed","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","enabled","resizable","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","disableWindowResize","disableWarnings","scrollToNewItems","itemChangeCallback","item","itemComponent","itemResize","itemResizeCallback","itemInitCallback","_hubCacheSubscription","getHubCacheObservable","subscribe","hubCache","isLoaded","_formChangeSubscription","getCurrentFormObservable","currentForm","dashboardItemControls","controls","dexihDashboardItems","parameters","value","runTime","_runTimeSubscription","unsubscribe","valueChanges","updateShowEdit","cancel","gridster","getFirstPossiblePosition","x","y","cols","rows","control","Always","Object","assign","setWhenChanged","c","setValue","width","resizeEvent","emit","height","index","removeAt","maximizedItem","autoRefresh","refresh","previewDashboard","then","keys","next","items","forEach","url","find","form","key","dashboardItemKey","data","getRemoteResponse","dataKey","result","columns","constructDataTableColumns","status","addHubMessage","name","catch","navigateSkip","action","pageTitle","DashboardEditModule","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["<div [ngClass]=\"{ 'd-none': maximizedItem}\">\n\n    <dexih-widget-section *ngIf=\"showEdit\" title=\"Properties\" [showExpandButton]=\"true\">\n        <form *ngIf=\"formsService.currentForm \" [formGroup]=\"formsService.currentForm\">\n            <fieldset>\n                <section>\n                    <form-input label=\"Dashboard Name\" formControlName=\"name\" placeholder=\"Enter the dashboard name.\"\n                        [autocapitalize]=\"on\" iconClass=\"fa fa-list\" [errors]=\"formsService.formErrors['name']\">\n                    </form-input>\n                </section>\n                <section>\n                    <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n                        placeholder=\"Enter the description.\">\n                    </form-textarea>\n                </section>\n                <section>\n                    <div class=\"form-row\">\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Minimum Columns\" formControlName=\"minCols\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Maximum Columns\" formControlName=\"maxCols\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Minimum Rows\" formControlName=\"minRows\">\n                            </form-input>\n                        </section>\n                        <section class=\"form-group col-md-3\">\n                            <form-input type=\"number\" label=\"Maximum Rows\" formControlName=\"maxRows\">\n                            </form-input>\n                        </section>\n                        <dexih-button-refresh (click)=\"updateGrid()\" text=\"Update Grid\"></dexih-button-refresh>\n                    </div>\n\n                </section>\n\n                <section>\n                    <form-checkbox formControlName=\"autoRefresh\" label=\"Automatically refresh data when view is opened\">\n                    </form-checkbox>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n\t\t\t\t\t</form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n    </dexih-widget-section>\n\n    <dexih-widget-section  title=\"Parameters\" *ngIf=\"showEdit || parameters?.length > 0\" [showExpandButton]=\"true\" (onChange)=\"parameterChange()\">\n        <input-parameters [showEdit]=\"showEdit\" [parameters]=\"parameters\"\n            [formsService]=\"formsService\" (onChange)=\"parameterChange()\" (onRefreshData)=\"refresh()\" [refreshEvent]=\"refreshDataSubject.asObservable()\" ></input-parameters>\n    </dexih-widget-section>\n\n    <dexih-widget-section *ngIf=\"inputColumns && inputColumns.length > 0\" title=\"InputColumns\"\n        [showExpandButton]=\"true\">\n        <span *ngFor=\"let column of inputColumns; let i = index\" class=\"input-group\">\n            <div class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{column.logicalName}}\n                </div>\n            </div>\n            <form-input name=\"column{{i}}\" class=\"form-control p-0\" [placeholder]=\"'Enter ' + column.logicalName\"\n                [(ngModel)]=\"column.value\"></form-input>\n        </span>\n    </dexih-widget-section>\n\n    <div style=\"height:800px\">\n        <gridster [options]=\"options\" #gridster>\n            <ng-template [ngIf]=\"dashboardItemControls\">\n                <gridster-item\n                    [item]=\"{x: item.controls.x.value, y: item.controls.y.value, cols: item.controls.cols.value, rows: item.controls.rows.value, control: item}\"\n                    *ngFor=\"let item of dashboardItemControls.controls; let i = index;\">\n                    <dashboard-item [item]=\"item\" [showEdit]=\"showEdit\" (onRemove)=\"removeItem(i)\"\n                        (onMaximize)=\"maximize($event)\" [refreshData]=\"item.controls.runTime.value.refreshData\">\n                    </dashboard-item>\n                </gridster-item>\n            </ng-template>\n        </gridster>\n    </div>\n</div>\n<div *ngIf=\"maximizedItem\" class=\"position-relative\" style=\"height:800px; overflow: hidden;\">\n    <dashboard-item [item]=\"maximizedItem\" [showEdit]=\"showEdit\" (onRemove)=\"removeItem(i)\"\n        (onMaximize)=\"maximize($event)\" [refreshData]=\"maximizedItem.controls.runTime.value.refreshData\"\n        [isMaximized]=\"true\">\n    </dashboard-item>\n</div>","import { DashboardEditComponent } from './dashboard-edit.component';\nimport { ViewEditComponent } from '../../view';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DashboardPropertiesComponent } from './properties/dashboard-properties.component';\n\nexport const dashboardEditRoutes = [\n    { path: '', redirectTo: 'properties'},\n    { path: 'properties', component: DashboardPropertiesComponent,  data: { navigateSkip: true} },\n    { path: 'view-edit/:viewKey', component: ViewEditComponent,  data: { action: 'edit', pageTitle: 'Edit View'} },\n    { path: 'view-new', component: ViewEditComponent, data: { action: 'new', pageTitle: 'New View'}}\n];\n\nexport const routes: Routes = [\n    { path: '', component: DashboardEditComponent, canDeactivate: [ItemEditGuard], children: dashboardEditRoutes},\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { Component, OnInit, OnDestroy, Input, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { HubService } from '../../..';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { FormArray, FormGroup, AbstractControl } from '@angular/forms';\nimport { HubCache, PreviewResults, DataCache } from '../../../hub.models';\nimport { Subscription, Subject } from 'rxjs';\nimport { GridsterConfig, GridType, CompactType, DisplayGrid, GridsterItem, GridsterItemComponentInterface,\n  GridsterComponent} from 'angular-gridster2';\nimport { eViewType, eSourceType, InputColumn } from '../../../../shared/shared.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dashboard-properties',\n    templateUrl: 'dashboard-properties.component.html',\n})\n\nexport class DashboardPropertiesComponent implements OnInit, OnDestroy {\n  @Input() showEdit = false;\n  @Input() lock = true;\n\n  @ViewChild('gridster', {static: true}) public gridster: GridsterComponent\n\n    private _formChangeSubscription: Subscription;\n    private _runTimeSubscription: Subscription;\n    private _hubCacheSubscription: Subscription;\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    eViewType = eViewType;\n    eSourceType = eSourceType;\n\n    public inputColumns: InputColumn[];\n\n    public maximizedItem: FormGroup;\n\n    columns: Array<any>;\n    public data: Array<any>;\n\n    public options: GridsterConfig;\n\n    currentForm: FormGroup;\n    dashboardItemControls: FormArray;\n    parameters: FormArray;\n\n    hubCache: HubCache;\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n      private authService: AuthService,\n      private hubService: HubService,\n      public formsService: HubFormsService) { }\n\n    ngOnInit() {\n      this.options = {\n        gridType: GridType.ScrollVertical,\n        compactType: CompactType.None,\n        margin: 5,\n        outerMargin: true,\n        outerMarginTop: null,\n        outerMarginRight: null,\n        outerMarginBottom: null,\n        outerMarginLeft: null,\n        useTransformPositioning: true,\n        mobileBreakpoint: 640,\n        minCols: 12,\n        maxCols: 100,\n        minRows: 6,\n        maxRows: 100,\n        maxItemCols: 100,\n        minItemCols: 1,\n        maxItemRows: 100,\n        minItemRows: 1,\n        maxItemArea: 2500,\n        minItemArea: 1,\n        defaultItemCols: 2,\n        defaultItemRows: 2,\n        fixedColWidth: 105,\n        fixedRowHeight: 105,\n        keepFixedHeightInMobile: false,\n        keepFixedWidthInMobile: false,\n        scrollSensitivity: 10,\n        scrollSpeed: 20,\n        enableEmptyCellClick: false,\n        enableEmptyCellContextMenu: false,\n        enableEmptyCellDrop: false,\n        enableEmptyCellDrag: false,\n        emptyCellDragMaxCols: 50,\n        emptyCellDragMaxRows: 50,\n        ignoreMarginInRow: false,\n        // setGridSize: true,\n        draggable: {\n          enabled: false,\n        },\n        resizable: {\n          enabled: false,\n        },\n        swap: false,\n        pushItems: true,\n        disablePushOnDrag: false,\n        disablePushOnResize: false,\n        pushDirections: {north: true, east: true, south: true, west: true},\n        pushResizeItems: false,\n        displayGrid: DisplayGrid.None,\n        disableWindowResize: false,\n        disableWarnings: false,\n        scrollToNewItems: false,\n        itemChangeCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n        itemResizeCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n        itemInitCallback: (item, itemComponent: GridsterItemComponentInterface) => {\n          this.itemResize(item, itemComponent);\n        },\n      };\n\n      this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n          if (hubCache.isLoaded()) {\n            this.hubCache = hubCache;\n          }\n      });\n\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(currentForm => {\n          this.currentForm = currentForm;\n          if (currentForm) {\n            this.dashboardItemControls = <FormArray> currentForm.controls.dexihDashboardItems;\n            this.parameters = <FormArray> currentForm.controls.parameters;\n\n            this.options.minCols = currentForm.controls.minCols.value;\n            this.options.maxCols = currentForm.controls.maxCols.value;\n            this.options.minRows = currentForm.controls.minRows.value;\n            this.options.maxRows = currentForm.controls.maxRows.value;\n\n            this.showEdit = currentForm.controls.runTime.value.showEdit;\n\n            if (this._runTimeSubscription) { this._runTimeSubscription.unsubscribe(); }\n            this._runTimeSubscription = currentForm.controls.runTime.valueChanges.subscribe(runTime => {\n              this.showEdit = runTime.showEdit;\n              this.lock = runTime.lock;\n\n              this.updateShowEdit();\n            });\n\n            this.updateShowEdit();\n          }\n      });\n    }\n\n    ngOnDestroy(): void {\n      if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n      if (this._runTimeSubscription) { this._runTimeSubscription.unsubscribe(); }\n      if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n      this.cancelToken.cancel();\n    }\n\n    public getNextPossiblePosition(): GridsterItem {\n      let gridItem = {x: 0, y: 0, cols: 1, rows: 1, control: null};\n      let newItem = this.gridster.getFirstPossiblePosition(gridItem);\n      return newItem;\n    }\n\n    public updateShowEdit() {\n      if (this.showEdit || !this.lock ) {\n        this.options.displayGrid = DisplayGrid.Always;\n        this.options.draggable.enabled = true;\n        this.options.resizable.enabled = true;\n      } else {\n        this.options.displayGrid = DisplayGrid.None;\n          this.options.draggable.enabled = false;\n          this.options.resizable.enabled = false;\n      }\n      this.options = Object.assign({}, this.options);\n    }\n\n    public itemResize(item: GridsterItem, itemComponent: GridsterItemComponentInterface) {\n      function setWhenChanged(c: AbstractControl, value: Number) {\n          if (c.value !== value) {\n            c.setValue(value);\n          }\n      }\n\n      let control = <FormGroup>item.control;\n\n      setWhenChanged(control.controls.x, item.x);\n      setWhenChanged(control.controls.y, item.y);\n      setWhenChanged(control.controls.cols, item.cols);\n      setWhenChanged(control.controls.rows, item.rows);\n\n      let resizeEvent = item.control.controls.runTime.value.resizeEvent;\n      if (itemComponent.width) {\n        resizeEvent.emit([itemComponent.width, itemComponent.height]);\n      }\n    }\n\n      removeItem(index) {\n        let form = this.formsService.currentForm;\n        let items = <FormArray> form.controls.dexihDashboardItems;\n        items.removeAt(index);\n      }\n\n      updateGrid() {\n        let currentForm = this.formsService.currentForm;\n        this.options.minCols = currentForm.controls.minCols.value;\n        this.options.maxCols = currentForm.controls.maxCols.value;\n        this.options.minRows = currentForm.controls.minRows.value;\n        this.options.maxRows = currentForm.controls.maxRows.value;\n        this.options = Object.assign({}, this.options);\n      }\n\n      maximize(item) {\n        if (this.maximizedItem) {\n          this.maximizedItem = null;\n        } else {\n          this.maximizedItem = item;\n        }\n      }\n\n      parameterChange() {\n        if (this.formsService.currentForm.controls.autoRefresh.value) {\n          this.refresh();\n        }\n      }\n\n      refresh() {\n        this.hubService.previewDashboard(this.formsService.currentForm.value,\n          this.formsService.currentForm.value.parameters, this.cancelToken).then(keys => {\n            this.refreshDataSubject.next();\n          let items = <FormArray> this.formsService.currentForm.controls.dexihDashboardItems;\n\n          keys.forEach(url => {\n            let item = <FormGroup> items.controls.find((form: FormGroup) => form.controls.key.value === url.dashboardItemKey);\n            if (item) {\n              let data = <DataCache> item.controls.runTime.value.data;\n              this.hubService.getRemoteResponse<PreviewResults>(url.dataKey, this.cancelToken).then(result => {\n                result.columns = this.authService.constructDataTableColumns(result.columns);\n                if (result.status) {\n                  this.hubService.addHubMessage(result.status, false, result.name);\n                }\n                data.data.next(result);\n              }).catch();\n            }\n          });\n        });\n      }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { DashboardEditComponent } from './dashboard-edit.component';\nimport { DashboardItemComponent } from './item/dashboard-item.component';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { SharedModule } from '../../../shared';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routing } from './dashboard-edit.routing';\nimport { HubSharedModule } from '../../hub.shared.module';\nimport { DashboardPropertiesComponent } from './properties//dashboard-properties.component';\nimport { ViewEditComponent } from '../../view';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Routing,\n        HubSharedModule,\n    ],\n    exports: [],\n    declarations: [\n        DashboardEditComponent,\n        DashboardItemComponent,\n        DashboardPropertiesComponent,\n        ],\n    providers: [\n        HubFormsService,\n        ItemEditGuard\n    ],\n})\nexport class DashboardEditModule {\n    static forRoot(): ModuleWithProviders<DashboardEditModule> {\n        return {\n            ngModule: DashboardEditModule,\n            providers: [ HubFormsService ]\n        };\n    }\n}\n"]}