{"version":3,"sources":["webpack:///src/app/+hub/table/column-edit/column-edit-base.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit-base.component.html","webpack:///src/app/+hub/table/column-edit/column-edit.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit.component.html","webpack:///src/app/+hub/table/column-edit/index.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/index.ts","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.html","webpack:///src/app/+hub/table/table.shared.module.ts"],"names":["ColumnEditBaseComponent","hubService","detailedView","typeCodes","deltaTypes","securityFlags","_hubCacheSubscription","getHubCacheObservable","subscribe","cache","hubCache","unsubscribe","selector","templateUrl","columnFormService","ColumnEditComponent","authService","fb","isUpdated","changeColumn","eTypeCode","status","Loaded","isLoaded","tableForm","initializeForm","updateColumns","columnForm","columns","value","dexihTableColumns","columnKey","originalColumn","find","c","key","navigateUp","tableColumn","column","newColumn","deltaType","informationDialog","startForm","emit","currentForm","columnsArray","controls","push","setValue","markAsDirty","childColumns","sort","a","b","position","col","apply","hasChanged","ColumnEditBulkComponent","formsService","updated","properties","name","property","bulkColumn","subscription","columnsFormArray","forEach","getColumnForm","columnGroup","dataType","maxLength","rank","precision","scale","securityFlag","defaultValue","columnValidationKey","allowDbNull","isUnicode","isInput","TableEditColumnsComponent","route","router","entityType","canEdit","showBulkEdit","eConnectionPurpose","title","format","tooltip","footer","_columnData","columnData","asObservable","updateColumnData","_tableFormSubscription","valueChanges","tableData","parentColumnForm","filter","isValid","nameClass","valid","description","dataTypeToString","logicalName","logicalNameClass","columnValidation","getColumnValidation","isIncrementalUpdate","updateDate","next","deleteSelected","index","findIndex","removeAt","navigate","relativeTo","parent","items","control","columnSortChange","editColumn","TableEditFileComponent","isFile","hasBaseDropZoneOver","updatingTable","formatTypes","cancelToken","_subscription","result","e","addHubClientErrorMessage","cancel","files","doImport","event","srcElement","file","formService","fileFormat","fileFormatKey","size","type","File","slice","addHubErrorMessage","form","FormData","append","hub","hubKey","toString","JsonNoNulls","connection","remoteAgent","getRemoteAgentCurrent","postFormRemoteGetKey","then","getRemoteData","importedTables","importedTable","entityStatus","lastStatus","message","reason","addHubMessage","importTables","tables","length","tableColumnsForm","count","i","TableEditPreviewDataComponent","eDataObjectType","data","getCurrentFormObservable","action","pageTitle","table","TableEditPropertiesComponent","isExpanded","eTableType","eTableTypeItems","eConnectionCategory","runningSql","params","getRemoteLibrariesObservable","mainForm","connections","dexihConnections","connectionKey","GetConnectionReference","connectionReference","_connectionSubscription","map","addHubSuccessMessage","join","sqlMessage","TableEditInputColumnComponent","$event","TableEditRestComponent","location","inputTable","getConnectionTables","_currentFormSubscription","inputColumns","_restfulUrlSubscription","restfulUri","pipe","newValue","updateInputColumns","importTable","importCol","inputValue","regExp","item","match","exec","String","NaturalKey","isUnique","TableSharedModule","ngModule","imports","declarations","exports"],"mappings":"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","file":"0-es5.js","sourcesContent":["import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags} from '../../hub.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubService } from '../../hub.service';\nimport { TypeCodes } from '../../hub.remote.models';\n\n@Component({\n    selector: 'column-edit-base',\n    templateUrl: './column-edit-base.component.html',\n})\nexport class ColumnEditBaseComponent implements OnInit, OnDestroy {\n    @Input() columnFormService: HubFormsService;\n    @Input() detailedView = true;\n\n    private _hubCacheSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    constructor(private hubService: HubService) { }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            this.hubCache = cache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n}\n","<form *ngIf=\"columnFormService.currentForm\" [formGroup]=\"columnFormService.currentForm\">\n    <fieldset>\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-6\">\n                <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\" iconClass=\"fa fa-list\"\n                    [errors]=\"columnFormService.formErrors.columnGroup\" note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n                </form-input>\n            </section>\n            <section class=\"form-group col-md-6\">\n                    <form-input label=\"Column Name\" formControlName=\"name\" placeholder=\"Enter the column name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"columnFormService.formErrors.name\" note=\"The physical column name in the underlying table\">\n                    </form-input>\n                </section>\n            </div>\n\n        <section>\n            <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n            </form-checkbox>\n        </section>\n        \n        <section *ngIf=\"columnFormService.currentForm.value.useLogical\">\n            <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                [errors]=\"columnFormService.formErrors.logicalName\" note=\"The logical name is a short term to represent the column\">\n            </form-input>\n        </section>\n\n        <section *ngIf=\"detailedView\">\n            <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                [errors]=\"columnFormService.formErrors.description\">\n            </form-textarea>\n        </section>\n\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-4\">\n                <form-select label=\"Data Type\" formControlName=\"dataType\" [errors]=\"columnFormService.formErrors.dataType\" [items]=\"typeCodes\"\n                    itemKey=\"key\" itemName=\"name\">\n                </form-select>\n            </section>\n            <section class=\"form-group col-md-2\">\n                <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\" [errors]=\"columnFormService.formErrors.rank\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isString\" class=\"form-group col-md-6\">\n                <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\" type=\"number\" [errors]=\"columnFormService.formErrors.maxLength\"\n                    note=\"Maximum string length (blank for unlimited)\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\" type=\"number\" [errors]=\"columnFormService.formErrors.precision\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\" [errors]=\"columnFormService.formErrors.scale\">\n                </form-input>\n            </section>\n        </div>\n\n        <div *ngIf=\"detailedView\">\n\n            <section>\n                <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n            </section>\n            <section>\n                <form-checkbox label=\"Is always incrementing column that can be used for change detection\" formControlName=\"isIncrementalUpdate\"></form-checkbox>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Delta Type\" formControlName=\"deltaType\" [errors]=\"columnFormService.formErrors.deltaType\" [items]=\"deltaTypes\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to treat the column when used to update target table.\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [errors]=\"columnFormService.formErrors.securityFlag\" [items]=\"securityFlags\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n                    </form-select>\n                </section>\n            </div>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\" [errors]=\"columnFormService.formErrors.defaultValue\"\n                        note=\"Default value if unmapped or null.\">\n                    </form-input>\n                </section>\n                <section class=\"form-group col-md-6\" *ngIf=\"columnFormService.currentForm.controls.columnValidationKey\">\n                    <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\" [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\"\n                        itemKey=\"key\" itemName=\"name\" note=\"Validation rule to apply.\">\n                        <columnValidation-edit-button [key]=\"columnFormService.currentForm.controls.columnValidationKey.value\"></columnValidation-edit-button>\n                    </form-select>\n                </section>\n            </div>\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, OnChanges, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { HubCache, eCacheStatus,\n     } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { eDeltaType, DexihTableColumn, eTypeCode } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'column-edit',\n    templateUrl: './column-edit.component.html',\n})\nexport class ColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() columnKey: number;\n    @Input() deltaType: eDeltaType;\n    @Input() detailedView = true;\n    @Output() isUpdated = new EventEmitter<boolean>();\n    @Output() changeColumn = new EventEmitter<number>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private originalColumn: DexihTableColumn;\n\n    public columns: any[];\n\n    public eTypeCode = eTypeCode;\n\n\n    public columnFormService: HubFormsService;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        fb: FormBuilder) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.status === eCacheStatus.Loaded) {\n                this.hubCache = hubCache;\n\n                if (!this.hubCache.isLoaded() || !this.tableForm) { return; }\n\n                this.initializeForm();\n\n                this.updateColumns();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this.tableForm && this.hubCache) {\n            this.initializeForm();\n            this.updateColumns();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n        let columns = this.tableForm.value.dexihTableColumns;\n\n        if (this.columnKey) {\n            if (this.tableForm) {\n                this.originalColumn = columns.find(c => c.key === this.columnKey);\n                if (!this.originalColumn) {\n                    this.authService.navigateUp();\n                    return;\n                }\n                columnForm = this.columnFormService.tableColumn(columns, this.originalColumn);\n            }\n        } else {\n            let column = this.hubCache.newColumn(this.tableForm.value, this.deltaType);\n            if (column) {\n                columnForm = this.columnFormService.tableColumn(columns, column);\n            } else {\n                this.authService.informationDialog('Column not added.',\n                `The column with delta type ${this.deltaType} could not be inserted into the current table.`);\n            }\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.isUpdated.emit(false);\n    }\n\n    apply() {\n        const columnForm = this.columnFormService.currentForm;\n        const columnsArray = <FormArray>this.tableForm.controls.dexihTableColumns;\n\n        if (!this.originalColumn) {\n        columnsArray.push(columnForm);\n        } else {\n        const originalColumn = columnsArray.controls.find(c => c.value.key === columnForm.value.key);\n        originalColumn.setValue(columnForm.value);\n        }\n\n        this.tableForm.markAsDirty();\n    }\n\n    updateColumns() {\n        if (this.tableForm && this.originalColumn) {\n            this.columns = (<DexihTableColumn[]> this.originalColumn.childColumns)\n            .sort((a, b) => a.position - b.position)\n        }\n    }\n\n    navigateToColumn(col: DexihTableColumn) {\n        this.apply();\n        this.changeColumn.emit(col.key);\n    }\n\n    applyExit() {\n        if (this.columnFormService.hasChanged) {\n            this.apply();\n            this.isUpdated.emit(true);\n        }\n    }\n}\n","<d-widget-section title='Edit Column' [showExpandButton]=\"true\">\n<ng-template #header>\n        <dexih-invalid-form-details class=\"mr-1\" (click)=\"columnFormService.showErrors()\" [control]=\"columnFormService.currentForm\"></dexih-invalid-form-details>\n        <d-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" text=\"Column\">\n            <li *ngFor=\"let col of columns\">\n                <a class=\"dropdown-item\" (click)=\"navigateToColumn(col)\">{{col.columnGroup ? col.columnGroup + \".\" : \"\"}}{{col.name}}</a>\n            </li>\n        </d-button-dropdown>\n        <d-button-apply class=\"mr-1\" [disabled]=\"!columnFormService?.hasChanged\" (click)=\"applyExit()\"></d-button-apply>\n        <d-button-cancel (click)=\"cancel()\"></d-button-cancel>\n</ng-template>\n\n<column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"detailedView\"></column-edit-base>\n</d-widget-section>\n\n<table-edit-columns *ngIf=\"columnFormService?.currentForm?.controls.dataType.value === eTypeCode.Node\" [tableForm]='tableForm' [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n","export * from './column-edit.component';\nexport * from './column-edit-base.component';\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport {  deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { FormsService } from '../../../../shared/forms/forms.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn } from '../../../../shared/shared.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'column-edit-bulk',\n    templateUrl: 'column-edit-bulk.component.html'\n})\n\nexport class ColumnEditBulkComponent implements OnInit, OnDestroy {\n    @Input() columns: DexihTableColumn[];\n    @Input() columnsFormArray: FormArray;\n\n    @Output() updated = new EventEmitter();\n\n    subscription: Subscription;\n\n    public properties = [\n        {name: 'Group Name', property: 'group'},\n        {name: 'Data Type', property: 'dataType'},\n        {name: 'Delta Type', property: 'deltaType'},\n        {name: 'Security Flag', property: 'securityFlag'},\n        {name: 'Default Value', property: 'defaultValue'},\n        {name: 'Validation Rule', property: 'validationRule'},\n        {name: 'Allow DbNull', property: 'allowDbNull'},\n        {name: 'Is Input', property: 'isInput'},\n        {name: 'Is Unicode', property: 'isUnicode'},\n    ];\n\n    hubCache: HubCache;\n    property: string;\n    bulkColumn: FormGroup;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    constructor(private hubService: HubService,\n        private formsService: HubFormsService) { }\n\n    ngOnInit() {\n        this.bulkColumn = this.formsService.tableColumn([], new DexihTableColumn());\n\n        this.subscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            this.hubCache = hubCache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {this.subscription.unsubscribe(); }\n    }\n\n    getColumnForm(column: DexihTableColumn): FormGroup {\n        return <FormGroup> this.columnsFormArray.controls.find((c: FormGroup) => c.controls.key.value === column.key);\n    }\n\n    applyBulkEdit() {\n\n        let bulkColumn = <DexihTableColumn> this.bulkColumn.value;\n        this.columns.forEach(column => {\n            let columnForm = this.getColumnForm(column);\n            if (!columnForm) { return; }\n\n            switch (this.property) {\n                case 'group':\n                    columnForm.controls.columnGroup.setValue(bulkColumn.columnGroup);\n                    break;\n                case 'dataType':\n                    columnForm.controls.dataType.setValue(bulkColumn.dataType);\n                    columnForm.controls.maxLength.setValue(bulkColumn.maxLength);\n                    columnForm.controls.rank.setValue(bulkColumn.rank);\n                    columnForm.controls.precision.setValue(bulkColumn.precision);\n                    columnForm.controls.scale.setValue(bulkColumn.scale);\n                    break;\n                case 'deltaType':\n                    columnForm.controls.deltaType.setValue(bulkColumn.deltaType);\n                    break;\n                case 'securityFlag':\n                    columnForm.controls.securityFlag.setValue(bulkColumn.securityFlag);\n                    break;\n                case 'defaultValue':\n                    columnForm.controls.defaultValue.setValue(bulkColumn.defaultValue);\n                    break;\n                case 'validationRule':\n                    columnForm.controls.columnValidationKey.setValue(bulkColumn.columnValidationKey);\n                    break;\n                case 'allowDbNull':\n                    columnForm.controls.allowDbNull.setValue(bulkColumn.allowDbNull);\n                    break;\n                case 'isUnicode':\n                    columnForm.controls.isUnicode.setValue(bulkColumn.isUnicode);\n                    break;\n                case 'isInput':\n                    columnForm.controls.isInput.setValue(bulkColumn.isInput);\n                    break;\n            }\n        });\n        this.updated.emit();\n      }\n\n      cancel() {\n          this.updated.emit();\n      }\n\n      setAllowDbNull(value: boolean) {\n        this.columns.forEach(column => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.allowDbNull.setValue(value);\n        });\n      }\n\n      setIsInput(value: boolean) {\n        this.columns.forEach(column  => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.isInput.setValue(value);\n        });\n      }\n\n      setIsUnicode(value: boolean) {\n        this.columns.forEach(column  => {\n            let columnForm = this.getColumnForm(column);\n            columnForm.controls.isUnicode.setValue(value);\n        });\n      }\n}\n","<d-widget title=\"Update columns\" headerClass=\"text-white bg-primary\">\n<form [formGroup]=\"bulkColumn\">\n    <section class=\"form-group col-md-4\">\n        <form-select label=\"Property\" [(ngModel)]=\"property\" [ngModelOptions]=\"{standalone: true}\" [items]=\"properties\" itemKey=\"property\"\n            itemName=\"name\">\n        </form-select>\n    </section>\n    <div *ngIf=\"property=='dataType'\">\n        <section class=\"form-group col-md-4\">\n            <form-select label=\"Data Type\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                itemName=\"name\">\n            </form-select>\n        </section>\n        <section class=\"form-group col-md-2\">\n            <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isString\" class=\"form-group col-md-6\">\n            <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\"\n                type=\"number\" note=\"Maximum string length (blank for unlimited)\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\"\n                type=\"number\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\">\n            </form-input>\n        </section>\n    </div>\n\n    <div *ngIf=\"property=='group'\" >\n            <section class=\"form-group col-md-6\">\n        <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\"\n            iconClass=\"fa fa-list\"\n            note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n        </form-input>\n            </section>\n    </div>\n    <div *ngIf=\"property=='securityFlag'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [items]=\"securityFlags\"\n                itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='deltaType'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Delta Type\" formControlName=\"deltaType\" [items]=\"deltaTypes\"\n                itemKey=\"key\" itemName=\"name\"\n                note=\"How to treat the column when used to update target table.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='defaultValue'\" >\n        <section class=\"form-group col-md-6\">\n            <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\"\n                note=\"Default value if unmapped or null.\">\n            </form-input>\n        </section>\n    </div>\n    <div *ngIf=\"property=='validationRule'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\"\n                [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\" itemKey=\"key\"\n                itemName=\"name\" note=\"Validation rule to apply.\">\n                <columnValidation-edit-button [key]=\"bulkColumn.controls.columnValidationKey.value\"></columnValidation-edit-button>\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='allowDbNull'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isInput'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isUnicode'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n        </section>\n    </div>\n</form>\n    <ng-template #footer>\n        <d-button-apply class=\"mr-1\" (click)=\"applyBulkEdit()\"></d-button-apply>\n        <d-button-cancel class=\"mr-1\" (click)=\"cancel()\"></d-button-cancel>\n    </ng-template>\n</d-widget>\n\n\n\n\n\n","import { Component, OnInit, OnChanges, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags, eCacheStatus } from '../../../hub.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-columns',\n    templateUrl: './table-edit-columns.component.html',\n})\nexport class TableEditColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() parentColumnForm: FormGroup;\n\n    private _hubCacheSubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    private deltaTypes = deltaTypes;\n    private securityFlags = securityFlags;\n    public showBulkEdit = false;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { name: 'name', title: 'Column Name', format: '', class: 'nameClass', tooltip: 'description'},\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description', class: 'logicalNameClass'},\n        { name: 'isInput', title: 'Input?', format: 'Boolean'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'deltaType', title: 'Delta Type', format: ''},\n        { name: 'defaultValue', title: 'Default Value', format: ''},\n        { name: 'columnValidation', title: 'Column Validation', format: ''},\n        { name: 'isIncrementalUpdate', title: 'Is Incremental', format: 'Boolean'},\n        { name: 'securityFlag', title: 'Security Flag', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        public formsService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n                this.hubCache = cache;\n                this.updateColumnData();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this.formsService.currentForm) {\n            this._tableFormSubscription = this.formsService.currentForm.valueChanges.subscribe(() => this.updateColumnData());\n        }\n        this.updateColumnData();\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        if (this.hubCache && this.formsService.currentForm) {\n            let tableData = [];\n\n            let columns: FormArray;\n\n            if (this.parentColumnForm) {\n                columns = <FormArray>this.parentColumnForm.controls.childColumns;\n            } else {\n                columns = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            }\n\n            columns.controls\n                .filter(c => c.value.isValid)\n                .sort((a, b) => a.value.position - b.value.position)\n                .forEach(column => {\n                    let columnForm = <FormGroup>column;\n                    tableData.push({\n                        key: column.value.key,\n                        position: column.value.position,\n                        name: (column.value.columnGroup ? column.value.columnGroup + '.' : '') + column.value.name,\n                        nameClass: (columnForm.controls.name.valid ? '' : 'dexih-state-error'),\n                        description: column.value.description,\n                        isInput: column.value.isInput,\n                        dataType: this.hubCache.dataTypeToString(column.value),\n                        allowDbNull: column.value.allowDbNull,\n                        logicalName: column.value.logicalName,\n                        logicalNameClass: (columnForm.controls.logicalName.valid ? '' : 'dexih-error-icon'),\n                        deltaType: this.deltaTypes.find(c => c.key === column.value.deltaType).name,\n                        defaultValue: column.value.defaultValue,\n                        columnValidation: this.hubCache.getColumnValidation(column.value.columnValidationKey).name,\n                        isIncrementalUpdate: column.value.isIncrementalUpdate,\n                        securityFlag: this.securityFlags.find(c => c.key === column.value.securityFlag).name,\n                        updateDate: column.value.updateDate,\n                    });\n                });\n            this._columnData.next(tableData);\n        } else {\n            this._columnData.next(null);\n        }\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        columnsArray.removeAt(index);\n    });\n    // this._columnData.next(this.table.dexihTableColumns.filter(c => c.isValid));\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n}\n","<d-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <d-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\" [columns]=\"columns\" [dataObservable]=\"columnData\" (rowClick)=\"editColumn($event)\">\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <d-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\" class=\"mr-1\"></d-button-delete>\n            <d-button iconClass=\"fa fa-th-list\" class=\"mr-1\" (click)=\"showBulkEdit=!showBulkEdit\">\n                {{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </d-button>\n        </ng-template>\n\n        <ng-template #tableHeader let-items=\"items\">\n            <column-edit-bulk *ngIf=\"formsService.currentForm && showBulkEdit && items.length > 0\" [columns]=\"items\"\n                [columnsFormArray]=\"formsService.currentForm.controls.dexihTableColumns\" (updated)=\"showBulkEdit = false\" class=\"mr-1\"></column-edit-bulk>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <d-button-new (click)=\"newColumn()\" title=\"Create a new column\" class=\"mr-1\"></d-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\" class=\"mr-1\">\n            <d-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\" class=\"mr-1\"></d-button-edit>\n        </ng-template>\n\n    </d-table>\n\n</d-widget-section>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { Subscription} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihFileFormat, eTypeCode, DexihTable, DexihTableColumn, ConnectionReference } from '../../../../shared/shared.models';\nimport { HubCache, formatTypes } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-file',\n    templateUrl: './table-edit-file.component.html'\n})\nexport class TableEditFileComponent implements OnInit, OnDestroy {\n    @Input() public connection: DexihConnection;\n    @Input() public isFile = false;\n    @Input() public formService: HubFormsService;\n\n    public hasBaseDropZoneOver = false;\n\n    public updatingTable = false;\n\n    private _subscription: Subscription;\n    public hubCache: HubCache;\n    public fileFormats: DexihFileFormat[];\n\n    filesSubdirectory: string;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    public cancelToken: CancelToken = new CancelToken();\n\n    constructor(private authService: AuthService,\n        private hubService: HubService) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = this.hubService.getHubCacheObservable().subscribe(result => {\n                this.hubCache = result;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit File');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    public filesDrop(files: any) {\n        this.doImport(files[0]);\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doImport(files[0]);\n    }\n\n    public doImport(file: File) {\n\n        if (this.formService.currentForm.value.fileFormat) {\n            this.formService.currentForm.value.fileFormatKey = this.formService.currentForm.value.fileFormat.fileFormatKey;\n        }\n\n        if (file.size > 100000) {\n            if (file.type === 'text/csv' || file.type === 'text/plain') {\n                file = new File([file.slice(0, 100000) ], file.name);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage(`The file size ${file.size}b exceeded the maximum of 100,000b.  Submit a smaller sample file, or a plain text file (which will be trimmed automatically) to proceed.`);\n                return;\n            }\n        }\n\n        const form: FormData = new FormData();\n        form.append('file', file, file.name);\n        form.append('hubKey', this.hubCache.hub.hubKey.toString());\n        form.append('table', this.authService.JsonNoNulls(this.formService.currentForm.value));\n        form.append('connectionKey', this.connection.key.toString());\n        form.append('save', 'false');\n\n        let remoteAgent = this.hubService.getRemoteAgentCurrent();\n\n        this.authService.postFormRemoteGetKey('/api/Hub/ImportFileFormat', form, remoteAgent, this.cancelToken)\n            .then(key => {\n                this.authService.getRemoteData<DexihTable[]>(remoteAgent, key, this.cancelToken, 'download').then(importedTables => {\n                    let importedTable = importedTables[0];\n                    if (importedTable.entityStatus.lastStatus.toString() === 'Error') {\n                        this.hubService.addHubErrorMessage(importedTable.entityStatus.message);\n                    }\n\n                    this.updateColumns(importedTable.dexihTableColumns);\n                });\n\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    import() {\n        this.hubService.importTables([this.formService.currentForm.value], false, this.cancelToken).then(tables => {\n            if (tables && tables.length > 0) {\n                this.updateColumns(tables[0].dexihTableColumns);\n            }\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    updateColumns(columns: DexihTableColumn[]) {\n        let tableColumnsForm = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n\n        // remove existing columns.\n        const count = tableColumnsForm.controls.length;\n        for (let i = 0; i <= count; i++) {\n            tableColumnsForm.removeAt(0);\n        }\n        columns.filter(c => c.isValid).forEach(column => {\n            tableColumnsForm.push(this.formService.tableColumn(tableColumnsForm.value, column));\n        });\n    }\n}\n","<d-widget-section title='File Properties' [showExpandButton]=\"true\" [padding]=\"true\">\n\n    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\">\n        <ng-template [ngIf]=\"isFile\">\n            <section>\n                <form-input label=\"Files Subdirectory\" formControlName=\"fileRootPath\" placeholder=\"Enter the file path name.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileRootPath\" [note]=\"'Specify the subdirectory.  This will be the connection directory (' + connection.server + ') plus the path specified.'\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-input label=\"File Match Pattern\" formControlName=\"fileMatchPattern\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileMatchPattern\" note=\"Specify the file pattern to use to match files when bulk uploading.  Patterns can include wildcards */?, leave blank for all files.\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Auto manage files\" formControlName=\"autoManageFiles\" note=\"Files loaded from the incoming directory, and moved to the processed or rejected directories when they are loaded by a datalink.  If not checked source files will be left untouched after a load.\">\n                </form-checkbox>\n            </section>\n\n            <div *ngIf=\"formService.currentForm.value.autoManageFiles \">\n\n                <section>\n                    <form-checkbox label=\"Specify custom file paths for auto-managed files\" formControlName=\"useCustomFilePaths\" [note]=\"'If custom paths are not specified files will be read/written to the directory: ' + connection.server + '/' + formService.currentForm.value.name + '/'\">\n                    </form-checkbox>\n                </section>\n\n                <div *ngIf=\"formService.currentForm.value.useCustomFilePaths\">\n\n                    <section>\n                        <form-input label=\"Incoming subdirectory\" formControlName=\"fileIncomingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileIncomingPath\" note=\"Specify the sub-directory for incoming files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Outgoing subdirectory\" formControlName=\"fileOutgoingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileOutgoingPath\" note=\"Specify the sub-directory for outgoing (written) files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Processed subdirectory\" formControlName=\"fileProcessedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileProcessedPath\" note=\"Specify the sub-directory for processed files\">\n                        </form-input>\n                    </section>\n                    <section>\n                        <form-input label=\"Rejected subdirectory\" formControlName=\"fileRejectedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileRejectedPath\" note=\"Specify the sub-directory for rejected files\">\n                        </form-input>\n                    </section>\n\n                </div>\n            </div>\n        </ng-template>\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">    \n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, a csv (command separated) format will be used.\"\n                [allowNullSelect]=\"true\" selectNullMessage=\"Use default (csv) format\">\n                <a routerLink=\"../fileFormat-new\">(<i class=\"fa fa-sticky-note-o\"></i> New Format )</a>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section>\n            <label class=\"label\">Add a sample file which will be used to determine column names.\n                <a  href=\"javascript:void(0)\" (click)=\"import()\">(<i class=\"fa fa-download\"></i> Import directly from source )</a>\n            </label>\n\n            <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                Drop Sample File Here\n                <div class=\"custom-file w-25 float-right\">\n                    <input type=\"file\" class=\"custom-file-input\" (change)=\"uploadFile($event)\" onclick=\"this.value=null\">\n                    <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\n                </div>\n            </div>\n\n            <br/>\n            <section>\n                <form-input label=\"Max Import Levels\" formControlName=\"maxImportLevels\" placeholder=\"Enter the maximum node levels to query the json structure.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.maxImportLevels\" note=\"Enter the maximum levels to query the json file.\">\n                </form-input>\n            </section>\n        </section>\n    </form>\n</d-widget-section>","export { TableEditPreviewDataComponent } from './table-edit-preview-data.component';\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihTable, eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-preview-data',\n    templateUrl: './table-edit-preview-data.component.html'\n})\nexport class TableEditPreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public table: DexihTable;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    constructor(\n        public formsService: HubFormsService,\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let tableForm = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (tableForm) {\n                    this.table = tableForm.value;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<d-widget-section title=\"Preview Table\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #header>\n        <d-button-close (click)=\"close()\"></d-button-close>\n    </ng-template>\n        <preview-data [table]='table' [viewSource]='eDataObjectType.Table'></preview-data>\n</d-widget-section>","<d-widget-section title='Properties' [showExpandButton]=\"true\" [isExpanded]=\"isExpanded\" >\n        <form *ngIf=\"mainForm\" [formGroup]=\"mainForm\">\n            <fieldset>\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-4\">\n                        <form-select label=\"Connection\" formControlName=\"connectionKey\" [items]=\"connections\" itemKey=\"key\" itemName=\"name\"\n                            [errors]=\"formsService.formErrors.connectionKey\" iconClass=\"fa fa-database\" note='The connection for this table.'>\n                            <connection-edit-button [key]=\"mainForm.controls.connectionKey.value\"></connection-edit-button>\n                        </form-select>\n                    </section>\n\n                    <section class=\"form-group col-md-4\">\n                        <form-input [label]=\"entityType + ' Name'\" formControlName=\"name\" placeholder=\"Enter the physical name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.name\" note=\"The physical name of the underlying entity\">\n                        </form-input>\n                    </section>\n\n                    <section class=\"form-group col-md-4\" *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                        <form-input [label]=\"entityType + ' Schema'\" formControlName=\"schema\" placeholder=\"Enter the (database) schema name\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.schema\" note=\"The physical name of the database schema (if applicable).\">\n                        </form-input>\n                    </section>\n                </div>\n                \n                <section>\n                    <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n                    </form-checkbox>\n                </section>\n\n                <section *ngIf=\"formsService.currentForm.value.useLogical\">\n                    <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"formsService.formErrors.logicalName\" note=\"The logical name is a short term to represent the table\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                        [errors]=\"formsService.formErrors.description\">\n                    </form-textarea>\n                </section>\n\n                <div *ngIf=\"connection?.purpose == eConnectionPurpose.Managed\" class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Reject Table Name\" formControlName=\"rejectedTableName\" placeholder=\"Enter the rejected table name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.rejectedTableName\" note=\"The name of the table to send any records that could not be written to the primary table.\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                    <form-select label=\"Table Type\" formControlName=\"tableType\" [errors]=\"formsService.formErrors.tableType\" [items]=\"eTableTypeItems\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section *ngIf=\"formsService.currentForm.controls.tableType.value === eTableType.Query\">\n                    <form-textarea label=\"Specify the sql query\" rows=\"15\" formControlName=\"queryString\" [hideToggle]=\"true\" placeholder=\"Sql Query\"\n                        [showPreview]=\"false\">\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"test()\"> (\n                            <i class=\"fa fa-check-circle-o\"></i> Test) </a>\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"reloadColumns()\"> (\n                            <i class=\"fa fa-refresh\"></i> Reload Columns) </a>\n                        <span *ngIf=\"runningSql == true\">\n                            <i class=\"fa fa-spin fa-refresh\"></i> (Busy... please wait) </span>\n                        <dexih-message [message]=\"sqlMessage\"></dexih-message>\n                    </form-textarea>\n                </section>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.Hub\">\n                    <form-input label=\"Source Connection Name\" formControlName=\"sourceConnectionName\" placeholder=\"Name of the source connection.\"\n                        iconClass=\"fa fa-list\" note=\"The name of the connection for this table in the source hub.\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                    </form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n</d-widget-section>\n\n<div *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.WebService\">\n    <dexih-table-edit-rest [formService]='formsService' [connection]='connection'></dexih-table-edit-rest>\n</div>\n\n<div *ngIf=\"connection && ( connectionReference?.connectionCategory == eConnectionCategory.File || connection?.purpose !== eConnectionPurpose.Source )\">\n    <dexih-table-edit-file [formService]='formsService' [connection]='connection' [isFile]='connectionReference?.connectionCategory == eConnectionCategory.File'></dexih-table-edit-file>\n</div>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags } from '../../../hub.models';\nimport { eTableType, DexihConnection, ConnectionReference,\n    eConnectionCategory, DexihTableColumn, eConnectionPurpose, DexihTable, eTableTypeItems } from '../../../../shared/shared.models';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { CancelToken, Message } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-properties',\n    templateUrl: './table-edit-properties.component.html',\n})\nexport class TableEditPropertiesComponent implements OnInit, OnDestroy {\n    @Input() public formsService: HubFormsService;\n    @Input() public isExpanded = true;\n\n    // private connection: DexihConnection;\n\n    private _subscription: Subscription;\n    private _connectionSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    eTableType = eTableType;\n    eTableTypeItems = eTableTypeItems;\n\n    public sqlMessage: Message;\n\n    public connections: DexihConnection[];\n    public connection: DexihConnection;\n    public connectionReference: ConnectionReference;\n    eConnectionCategory = eConnectionCategory;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    public runningSql = false;\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private route: ActivatedRoute    ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable(), // included to ensure correct connection reference when refreshing page.\n            ).subscribe(async result => {\n                let data = result[0];\n                this.hubCache = result[2];\n                this.mainForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.mainForm ) {\n                    this.connections = this.hubCache.hub.dexihConnections;\n                    this.connection = this.connections.find(c => c.key === this.mainForm.controls.connectionKey.value);\n                    this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n\n                    if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n                    this._connectionSubscription = this.mainForm.controls.connectionKey.valueChanges.subscribe(async (connectionKey) => {\n                        this.connection = this.connections.find(c => c.key === connectionKey);\n                        this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n                    });\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table edit properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    reloadColumns() {\n        this.runningSql = true;\n        this.hubService.importTables([this.mainForm.value], false, this.cancelToken).then(tables => {\n            if (!tables || tables.length === 0) { return; }\n\n            const table: DexihTable = tables[0];\n            const tableColumnsForm = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            while (tableColumnsForm.controls.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n            table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.formsService.tableColumn(table.dexihTableColumns, column));\n            });\n            this.runningSql = false;\n        }).catch(() => this.runningSql = false);\n    }\n\n    test() {\n        this.runningSql = true;\n        this.hubService.doImport([this.mainForm.value], false, this.cancelToken).then(tables => {\n            let columns = tables[0].dexihTableColumns.map(c => c.name);\n            this.hubService.addHubSuccessMessage('The query was successful, and returned the following columns.  ' + columns.join(', '));\n            this.runningSql = false;\n        }).catch((reason) => {\n            this.runningSql = false;\n            this.sqlMessage = reason;\n            this.hubService.addHubMessage(reason);\n        });\n    }\n}\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'table-edit-input-column',\n    templateUrl: './table-edit-input-column.component.html'\n})\nexport class TableEditInputColumnComponent implements OnInit, OnChanges {\n    @Input() public columnForm: FormGroup = null;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    toggleInput($event) {\n    }\n}\n","<form [formGroup]=\"columnForm\" class=\"\">\n    <section>\n        <form-input \n        [label]=\"columnForm.value.name\" \n        formControlName=\"defaultValue\" \n        placeholder=\"Enter default value for the input column\" \n        iconClass=\"fa fa-dollar\">\n        </form-input>\n    </section>\n</form>","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Location } from '@angular/common';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihTable, eTypeCode, DexihTableColumn, eDeltaType } from '../../../../shared/shared.models';\nimport { HubCache, ConnectionTables, formatTypes, eCacheStatus } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dexih-table-edit-rest',\n    templateUrl: './table-edit-rest.component.html'\n})\nexport class TableEditRestComponent implements OnInit, OnDestroy {\n    @Input() public formService: HubFormsService;\n    @Input() public connection: DexihConnection;\n\n    private _hubCacheSubscription: Subscription;\n    private _currentFormSubscription: Subscription;\n    private _restfulUrlSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    private hubCache: HubCache;\n\n    tables: ConnectionTables[];\n    inputColumns: Array<FormGroup>;\n    inputTable: DexihTable = null;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    constructor(private hubService: HubService, private route: ActivatedRoute, private router: Router, private location: Location) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n\n                this.hubCache = cache;\n\n                this.tables = this.hubCache.getConnectionTables();\n\n            }\n        });\n\n        this._currentFormSubscription = this.formService.getCurrentFormObservable().subscribe( currentForm => {\n            // load the inputColumns\n            const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n            this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n            if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n            this._restfulUrlSubscription = currentForm.controls.restfulUri.valueChanges\n                .pipe(debounceTime(500))\n                .subscribe(newValue => {\n                    this.updateInputColumns();\n                });\n        });\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n        if (this._currentFormSubscription) { this._currentFormSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    hasChanged($event) {\n        // this.tableChanged = true;\n    }\n\n    importTable() {\n        let importTable = this.formService.currentForm.value;\n        let inputColumns = this.formService.currentForm.value.dexihTableColumns.filter(c => c.isInput && c.isValid);\n\n        // merge any input columns with columns already in the table\n        if (inputColumns) {\n            inputColumns.forEach(column => {\n                let importCol = importTable.dexihTableColumns.find(c => c.name === column.name);\n                if (importCol) {\n                    importCol.inputValue = column.inputValue;\n                } else {\n                    importCol = column;\n                    importTable.dexihTableColumns.push(importCol);\n                }\n            });\n        }\n\n        this.hubService.importTables([importTable], false, this.cancelToken)\n            .then(result => {\n                const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n                while (columns.controls.length > 0) {\n                    columns.removeAt(0);\n                }\n\n                result[0].dexihTableColumns.forEach(column => {\n                    columns.push(this.formService.tableColumn(result[0].dexihTableColumns, column));\n                });\n            }).catch();\n    }\n\n    updateInputColumns() {\n        // use the regex to extract items in uri between { }.  These will be input columns\n        const regExp = /\\{([^}]+)\\}/g;\n\n        const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n        const inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n        inputColumns.forEach(item => {\n            const columnForm = <FormGroup>item;\n            columnForm.controls.isValid.setValue(false);\n        });\n        let match;\n        let position = -1000;\n\n        while ((match = regExp.exec(this.formService.currentForm.value.restfulUri))) {\n            let columnForm = <FormGroup>columns.controls.find(c => c.value.name === match[1] && c.value.isInput);\n\n            if (!columnForm) {\n                let col = new DexihTableColumn();\n\n                // add the basic properties\n                col.name = match[1];\n                col.isInput = true;\n                col.logicalName = match[1];\n                col.dataType = eTypeCode.String;\n                col.deltaType = eDeltaType.NaturalKey;\n                col.maxLength = 1024;\n                col.position = position++;\n                col.description = 'Url Parameter ' + match[1];\n\n                col.allowDbNull = true;\n                col.isUnique = false;\n                col.isValid = true;\n\n                columnForm = this.formService.tableColumn(columns.value, col);\n                columns.push(columnForm);\n            } else {\n                columnForm.controls.isValid.setValue(true);\n            }\n        }\n\n        position = 1;\n        columns.controls.filter(column => column.value.isValid) .sort((a, b) => a.value.position - b.value.position).forEach(column => {\n            (<FormGroup>column).controls.position.setValue(position++);\n        });\n\n        this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n    }\n}\n","<div class=\"list-group-item list-group-item-info  rounded-0\">\n    <div class=\"d-flex flex-row\">\n        <h5>Web Service Properties</h5>\n    </div>\n</div>\n<div class=\"container mt-3 mb-3\">\n    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\">\n\n        <section>\n            <form-input label=\"Web Service Uri String\" formControlName=\"restfulUri\" placeholder=\"Enter the uri.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.restfulUri\" [note]=\"'Specify the uri following the base path ' + connection.server +'.  To include input columns use {} in the uri definition (eg. GetWeather?City={CityName})'\">\n            </form-input>\n        </section>\n        <section>\n        </section>\n\n        <section>\n            <div *ngFor=\"let columnForm of inputColumns | isValidFilter\">\n                <table-edit-input-column [columnForm]=\"columnForm\"></table-edit-input-column>\n            </div>\n        </section>\n\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">\n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, defaults will be used.\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section class=\"btn-toolbar\">\n            <d-button [busy]=\"formService.formSaving\" (click)=\"!formService.formSaving && importTable()\">Import </d-button>\n\n            <div *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\" class=\"input-group pl-1\">\n                <div  class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">Max Import Levels</div>\n                </div>\n                <input class=\"form-control\" placeholder=\"Maximum levels...\" title=\"Maximum import levels\" formControlName=\"maxImportLevels\"\n                    style=\"width: 100%; max-width: 100px\">\n            </div>\n        </section>\n\n    </form>\n</div>","\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TableEditPropertiesComponent } from './table-edit/table-edit-properties/table-edit-properties.component';\nimport { TableEditColumnsComponent } from './table-edit//table-edit-columns/table-edit-columns.component';\nimport { TableEditFileComponent } from './table-edit/table-edit-file/table-edit-file.component';\nimport { TableEditRestComponent } from './table-edit/table-edit-rest/table-edit-rest.component';\nimport { TableEditInputColumnComponent } from './table-edit//table-edit-rest/table-edit-input-column.component';\nimport { HubSharedModule } from '../hub.shared.module';\nimport { TableEditPreviewDataComponent } from './table-edit//table-edit-preview-data';\nimport { ColumnEditComponent, ColumnEditBaseComponent } from './column-edit';\nimport { ColumnEditBulkComponent } from './table-edit/column-edit-bulk/column-edit-bulk.component';\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ],\n    exports: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ]\n})\nexport class TableSharedModule {\n    static forRoot(): ModuleWithProviders<TableSharedModule> {\n        return {\n            ngModule: TableSharedModule,\n        };\n    }\n}\n"]}