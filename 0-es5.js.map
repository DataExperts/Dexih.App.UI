{"version":3,"sources":["webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.html","webpack:///src/app/+hub/table/column-edit/column-edit-base.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit-base.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.html","webpack:///src/app/+hub/table/column-edit/index.ts","webpack:///src/app/+hub/table/column-edit/column-edit.component.ts","webpack:///src/app/+hub/table/column-edit/column-edit.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/index.ts","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.html","webpack:///src/app/+hub/table/table.shared.module.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.ts","webpack:///src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.html"],"names":["TableEditInputColumnComponent","columnForm","$event","selector","templateUrl","ColumnEditBaseComponent","hubService","detailedView","typeCodes","deltaTypes","securityFlags","formatItems","_hubCacheSubscription","getHubCacheObservable","subscribe","cache","hubCache","columnFormService","currentForm","_dataTypeSubscription","unsubscribe","controls","dataType","valueChanges","updateColumnFormats","value","type","getColumnFormats","format","findIndex","c","concat","name","TableEditPropertiesComponent","route","router","isExpanded","showColumns","cancelToken","entityType","canEdit","eTableType","eTableTypeItems","eSortDirectionItems","eConnectionCategory","eConnectionPurpose","runningSql","option","_columnData","columnData","asObservable","_subscription","data","queryParams","formsService","getCurrentFormObservable","getRemoteLibrariesObservable","result","mainForm","action","pageTitle","isLoaded","connections","hub","dexihConnections","connection","find","key","connectionKey","GetConnectionReference","connectionReference","_connectionSubscription","e","addHubClientErrorMessage","cancel","importTables","then","tables","length","table","tableColumnsForm","dexihTableColumns","removeAt","filter","isValid","forEach","column","push","tableColumn","doImport","columns","map","addHubSuccessMessage","join","reason","sqlMessage","addHubMessage","i","index","control","tableIndex","indexes","dexihTableIndexes","insert","j","tableIndexColumn","history","pushState","navigateByUrl","window","location","pathname","changeOption","TableEditRestComponent","inputTable","formatTypes","eTypeCode","status","Loaded","getConnectionTables","_currentFormSubscription","formService","inputColumns","isInput","_restfulUrlSubscription","restfulUri","pipe","newValue","updateInputColumns","importTable","importCol","inputValue","regExp","item","setValue","match","position","exec","col","logicalName","String","deltaType","NaturalKey","maxLength","description","allowDbNull","isUnique","sort","a","b","TableEditPreviewDataComponent","authService","eDataObjectType","tableForm","navigateUp","ColumnEditComponent","fb","isUpdated","changeColumn","initializeForm","updateColumns","columnKey","originalColumn","newColumn","informationDialog","startForm","emit","columnsArray","markAsDirty","childColumns","apply","hasChanged","TableEditFileComponent","isFile","hasBaseDropZoneOver","updatingTable","files","event","srcElement","file","fileFormat","fileFormatKey","size","File","slice","addHubErrorMessage","form","FormData","append","hubKey","toString","JsonNoNulls","remoteAgent","getRemoteAgentCurrent","postFormRemoteGetKey","getRemoteData","importedTables","importedTable","entityStatus","lastStatus","message","count","TableEditColumnsComponent","showBulkEdit","title","tooltip","footer","updateColumnData","_tableFormSubscription","tableData","parentColumnForm","columnGroup","nameClass","valid","dataTypeToString","logicalNameClass","defaultValue","columnValidation","getColumnValidation","columnValidationKey","isIncrementalUpdate","securityFlag","updateDate","next","deleteSelected","navigate","relativeTo","parent","queryParamsHandling","items","columnSortChange","editColumn","TableSharedModule","ngModule","imports","declarations","exports","ColumnEditBulkComponent","updated","properties","property","formats","bulkColumn","subscription","columnsFormArray","getColumnForm","rank","precision","scale","isUnicode"],"mappings":"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","file":"0-es5.js","sourcesContent":["import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'table-edit-input-column',\n    templateUrl: './table-edit-input-column.component.html'\n})\nexport class TableEditInputColumnComponent implements OnInit, OnChanges {\n    @Input() public columnForm: FormGroup = null;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    toggleInput($event) {\n    }\n}\n","<form [formGroup]=\"columnForm\" class=\"\">\n    <section>\n        <form-input \n        [label]=\"columnForm.value.name\" \n        formControlName=\"defaultValue\" \n        placeholder=\"Enter default value for the input column\" \n        iconClass=\"fa fa-dollar\">\n        </form-input>\n    </section>\n</form>","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags} from '../../hub.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubService } from '../../hub.service';\nimport { TypeCodes, TypeFunctions } from '../../hub.remote.models';\n\n@Component({\n    selector: 'column-edit-base',\n    templateUrl: './column-edit-base.component.html',\n})\nexport class ColumnEditBaseComponent implements OnInit, OnDestroy {\n    @Input() columnFormService: HubFormsService;\n    @Input() detailedView = true;\n\n    private _hubCacheSubscription: Subscription;\n    private _dataTypeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    formatItems = [];\n\n    constructor(private hubService: HubService) { }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            this.hubCache = cache;\n\n            if (this.columnFormService.currentForm) {\n                if(this._dataTypeSubscription) {this._dataTypeSubscription.unsubscribe();}\n                this._dataTypeSubscription = this.columnFormService.currentForm.controls.dataType.valueChanges.subscribe(dataType => {\n                    this.updateColumnFormats(dataType);\n                });\n\n                this.updateColumnFormats(this.columnFormService.currentForm.controls.dataType.value);\n            }\n        });\n    }\n\n    private updateColumnFormats(dataType) {\n        const type = new TypeFunctions(dataType, null, null, null);\n        this.formatItems = type.getColumnFormats();\n\n        const format = this.columnFormService.currentForm.controls.format.value;\n        if (format && this.formatItems.findIndex(c => c.value === format) < 0) {\n            this.formatItems = this.formatItems.concat({value: format, name: format})\n        }\n    }\n\n    ngOnDestroy() {\n        if(this._dataTypeSubscription) {this._dataTypeSubscription.unsubscribe();}\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n}\n","<form *ngIf=\"columnFormService.currentForm\" [formGroup]=\"columnFormService.currentForm\">\n    <fieldset>\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-6\">\n                <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\" iconClass=\"fa fa-list\"\n                    [errors]=\"columnFormService.formErrors.columnGroup\" note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n                </form-input>\n            </section>\n            <section class=\"form-group col-md-6\">\n                    <form-input label=\"Column Name\" formControlName=\"name\" placeholder=\"Enter the column name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"columnFormService.formErrors.name\" note=\"The physical column name in the underlying table\">\n                    </form-input>\n                </section>\n            </div>\n\n        <section>\n            <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n            </form-checkbox>\n        </section>\n        \n        <section *ngIf=\"columnFormService.currentForm.value.useLogical\">\n            <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                [errors]=\"columnFormService.formErrors.logicalName\" note=\"The logical name is a short term to represent the column\">\n            </form-input>\n        </section>\n\n        <section *ngIf=\"detailedView\">\n            <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                [errors]=\"columnFormService.formErrors.description\">\n            </form-textarea>\n        </section>\n\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-4\">\n                <form-select label=\"Data Type\" formControlName=\"dataType\" [errors]=\"columnFormService.formErrors.dataType\" [items]=\"typeCodes\"\n                    itemKey=\"key\" itemName=\"name\">\n                </form-select>\n            </section>\n            <section class=\"form-group col-md-2\">\n                <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\" [errors]=\"columnFormService.formErrors.rank\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isString\" class=\"form-group col-md-6\">\n                <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\" type=\"number\" [errors]=\"columnFormService.formErrors.maxLength\"\n                    note=\"Maximum string length (blank for unlimited)\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\" type=\"number\" [errors]=\"columnFormService.formErrors.precision\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\" [errors]=\"columnFormService.formErrors.scale\">\n                </form-input>\n            </section>\n        </div>\n\n        <div *ngIf=\"detailedView\">\n\n            <section>\n                <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n            </section>\n            <section>\n                <form-checkbox label=\"Is always incrementing column that can be used for change detection\" formControlName=\"isIncrementalUpdate\"></form-checkbox>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Format\" formControlName=\"format\" [errors]=\"columnFormService.formErrors.format\" [items]=\"formatItems\"\n                        itemKey=\"value\" itemName=\"name\" [enableTextEntry]=\"true\" [enableTextEntryMatch]=\"false\" [allowNullSelect]=\"true\" selectNullMessage=\"No Format\"\n                        note=\"How to format the column when displayed.\">\n                    </form-select>                \n                </section>\n\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Delta Type\" formControlName=\"deltaType\" [errors]=\"columnFormService.formErrors.deltaType\" [items]=\"deltaTypes\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to treat the column when used to update target table.\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [errors]=\"columnFormService.formErrors.securityFlag\" [items]=\"securityFlags\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n                    </form-select>\n                </section>\n            </div>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\" [errors]=\"columnFormService.formErrors.defaultValue\"\n                        note=\"Default value if unmapped or null.\">\n                    </form-input>\n                </section>\n                <section class=\"form-group col-md-6\" *ngIf=\"columnFormService.currentForm.controls.columnValidationKey\">\n                    <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\" [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\"\n                        itemKey=\"key\" itemName=\"name\" note=\"Validation rule to apply.\">\n                        <columnValidation-edit-button [key]=\"columnFormService.currentForm.controls.columnValidationKey.value\"></columnValidation-edit-button>\n                    </form-select>\n                </section>\n            </div>\n        </div>\n    </fieldset>\n</form>\n","<d-tabs title=\"Edit Table Properties\" [showExpandButton]=\"false\" [padding]=\"false\" (selectedIndexChange)=\"changeOption($event)\" [selectedIndex]=\"option\">\n<d-tab title='Properties' >\n        <form *ngIf=\"mainForm\" [formGroup]=\"mainForm\" class=\"container\">\n            <fieldset>\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-4\">\n                        <form-select label=\"Connection\" formControlName=\"connectionKey\" [items]=\"connections\" itemKey=\"key\" itemName=\"name\"\n                            [errors]=\"formsService.formErrors.connectionKey\" iconClass=\"fa fa-database\" note='The connection for this table.'>\n                            <connection-edit-button [key]=\"mainForm.controls.connectionKey.value\"></connection-edit-button>\n                        </form-select>\n                    </section>\n\n                    <section class=\"form-group col-md-4\">\n                        <form-input [label]=\"entityType + ' Name'\" formControlName=\"name\" placeholder=\"Enter the physical name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.name\" note=\"The physical name of the underlying entity\">\n                        </form-input>\n                    </section>\n\n                    <section class=\"form-group col-md-4\" *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                        <form-input [label]=\"entityType + ' Schema'\" formControlName=\"schema\" placeholder=\"Enter the (database) schema name\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.schema\" note=\"The physical name of the database schema (if applicable).\">\n                        </form-input>\n                    </section>\n                </div>\n                \n                <section>\n                    <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n                    </form-checkbox>\n                </section>\n\n                <section *ngIf=\"mainForm.value.useLogical\">\n                    <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"formsService.formErrors.logicalName\" note=\"The logical name is a short term to represent the table\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                        [errors]=\"formsService.formErrors.description\">\n                    </form-textarea>\n                </section>\n\n                <div *ngIf=\"connection?.purpose == eConnectionPurpose.Managed\" class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Reject Table Name\" formControlName=\"rejectedTableName\" placeholder=\"Enter the rejected table name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.rejectedTableName\" note=\"The name of the table to send any records that could not be written to the primary table.\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                    <form-select label=\"Table Type\" formControlName=\"tableType\" [errors]=\"formsService.formErrors.tableType\" [items]=\"eTableTypeItems\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section *ngIf=\"mainForm.controls.tableType.value === eTableType.Query\">\n                    <form-textarea label=\"Specify the sql query\" rows=\"15\" formControlName=\"queryString\" [hideToggle]=\"true\" placeholder=\"Sql Query\"\n                        [showPreview]=\"false\">\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"test()\"> (\n                            <i class=\"fa fa-check-circle-o\"></i> Test) </a>\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"reloadColumns()\"> (\n                            <i class=\"fa fa-refresh\"></i> Reload Columns) </a>\n                        <span *ngIf=\"runningSql == true\">\n                            <i class=\"fa fa-spin fa-refresh\"></i> (Busy... please wait) </span>\n                        <dexih-message [message]=\"sqlMessage\"></dexih-message>\n                    </form-textarea>\n                </section>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.Hub\">\n                    <form-input label=\"Source Connection Name\" formControlName=\"sourceConnectionName\" placeholder=\"Name of the source connection.\"\n                        iconClass=\"fa fa-list\" note=\"The name of the connection for this table in the source hub.\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                    </form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n</d-tab>\n \n<d-tab title='Indexes' *ngIf=\"mainForm\">\n    <div class=\"container form-row w-100 mb-3\" *ngFor=\"let index of mainForm.controls.dexihTableIndexes.controls; let i = index;\">\n        <form [formGroup]=\"index\" class=\"form-row w-100\">\n            <div class=\"input-group\">\n                <form-input labelLeft=\"Name\" formControlName=\"name\" placeholder=\"Index Name\" iconClass=\"fa fa-list\" ></form-input>\n                <div class=\"p-3\">\n                    <form *ngFor=\"let column of index.controls.columns.controls; let j = index\" class=\"input-group\" [formGroup]=\"column\">\n                        <div class=\"form-control p-0\">\n                            <form-select labelLeft=\"Column\" [border]=\"false\" formControlName=\"columnKey\" [items]=\"mainForm.controls.dexihTableColumns.value\" itemKey=\"key\" itemName=\"name\" ></form-select>\n                        </div>\n                        <div class=\"form-control p-0\">\n                            <form-select labelLeft=\"Direction\" [border]=\"false\" formControlName=\"direction\" [items]=\"eSortDirectionItems\" itemKey=\"key\" itemName=\"name\"></form-select>\n                        </div>\n                        <div class=\"input-group-append flex-shrink-1\">\n                            <button class=\"btn btn-light\" type=\"button\" (click)=\"addColumn(index, j)\" value=\"Add\">\n                                <i class=\"fa fa-plus-square-o\"></i>\n                            </button>\n                            <button class=\"btn btn-light\" type=\"button\" (click)=\"removeColumn(index, j)\" value=\"Remove\">\n                                <i class=\"fa fa-minus-square-o\"></i>\n                            </button>\n                        </div>\n                    </form>\n                    <div class=\"input-group-append flex-shrink-1 ml-1 \">\n                        <d-button iconClass=\"fa fa-plus-square-o\" (click)=\"addColumn(index, 0)\">Add Column</d-button>\n                        <d-button-delete (click)=\"removeIndex(index)\"></d-button-delete>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n    <d-button iconClass=\"fa fa-plus-square-o\" (click)=\"addIndex(mainForm.controls.dexihTableIndexes.controls.length)\" [autoCompact]=\"false\">Add Index</d-button>\n</d-tab>\n\n <d-tab *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.WebService\" title=\"Web Service Properties\">\n    <dexih-table-edit-rest [formService]='formsService' [connection]='connection'></dexih-table-edit-rest>\n</d-tab>\n\n<d-tab *ngIf=\"connection && ( connectionReference?.connectionCategory == eConnectionCategory.File || connection?.purpose !== eConnectionPurpose.Source )\" title=\"File Properties\">\n    <dexih-table-edit-file [formService]='formsService' [connection]='connection' [isFile]='connectionReference?.connectionCategory == eConnectionCategory.File'></dexih-table-edit-file>\n</d-tab>\n\n<d-tab *ngIf=\"showColumns\" title=\"Columns\" [padding]=\"false\">\n    <table-edit-columns [tableForm]='mainForm'></table-edit-columns>\n</d-tab>\n</d-tabs>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags } from '../../../hub.models';\nimport { eTableType, DexihConnection, ConnectionReference,\n    eConnectionCategory, DexihTableColumn, eConnectionPurpose, DexihTable, eTableTypeItems, eSortDirection, eSortDirectionItems, DexihTableIndex, DexihTableIndexColumn } from '../../../../shared/shared.models';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { CancelToken, Message } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-properties',\n    templateUrl: './table-edit-properties.component.html',\n})\nexport class TableEditPropertiesComponent implements OnInit, OnDestroy {\n    @Input() public formsService: HubFormsService;\n    @Input() public isExpanded = true;\n    @Input() public showColumns = true;\n\n    // private connection: DexihConnection;\n\n    private _subscription: Subscription;\n    private _connectionSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    eTableType = eTableType;\n    eTableTypeItems = eTableTypeItems;\n    eSortDirectionItems = eSortDirectionItems;\n\n    public sqlMessage: Message;\n\n    public connections: DexihConnection[];\n    public connection: DexihConnection;\n    public connectionReference: ConnectionReference;\n    eConnectionCategory = eConnectionCategory;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n    sortColumns: any[];\n\n    public runningSql = false;\n    public option = 0;\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private route: ActivatedRoute,\n        private router: Router  ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest([\n                this.route.data,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable(), // included to ensure correct connection reference when refreshing page.\n            ]\n            ).subscribe(async result => {\n                let data = result[0];\n                let queryParams = result[1];\n                this.hubCache = result[2];\n                this.mainForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (queryParams['option']) {\n                    this.option = +queryParams['option'];\n                } else {\n                    this.option = 0;\n                }\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.mainForm ) {\n                    this.connections = this.hubCache.hub.dexihConnections;\n                    this.connection = this.connections.find(c => c.key === this.mainForm.controls.connectionKey.value);\n                    this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n\n                    if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n                    this._connectionSubscription = this.mainForm.controls.connectionKey.valueChanges.subscribe(async (connectionKey) => {\n                        this.connection = this.connections.find(c => c.key === connectionKey);\n                        this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n                    });\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table edit properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    reloadColumns() {\n        this.runningSql = true;\n        this.hubService.importTables([this.mainForm.value], false, this.cancelToken).then(tables => {\n            if (!tables || tables.length === 0) { return; }\n\n            const table: DexihTable = tables[0];\n            const tableColumnsForm = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            while (tableColumnsForm.controls.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n            table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.formsService.tableColumn(table.dexihTableColumns, column));\n            });\n            this.runningSql = false;\n        }).catch(() => this.runningSql = false);\n    }\n\n    test() {\n        this.runningSql = true;\n        this.hubService.doImport([this.mainForm.value], false, this.cancelToken).then(tables => {\n            let columns = tables[0].dexihTableColumns.map(c => c.name);\n            this.hubService.addHubSuccessMessage('The query was successful, and returned the following columns.  ' + columns.join(', '));\n            this.runningSql = false;\n        }).catch((reason) => {\n            this.runningSql = false;\n            this.sqlMessage = reason;\n            this.hubService.addHubMessage(reason);\n        });\n    }\n\n    addIndex(i: number) {\n        const index = new DexihTableIndex();\n        index.columns.push(new DexihTableIndexColumn());\n\n        const table = <DexihTable> this.mainForm.value;\n        const control = this.formsService.tableIndex(table, index);\n        const indexes = <FormArray> this.mainForm.controls.dexihTableIndexes;\n        indexes.insert(i, control);\n    }\n\n    removeIndex(i: number) {\n        const indexes = <FormArray> this.mainForm.controls.dexihTableIndexes;\n        indexes.removeAt(i);\n    }\n\n    addColumn(index: FormGroup, j: number) {\n        const control = this.formsService.tableIndexColumn(new DexihTableIndexColumn());\n        const columns = <FormArray> index.controls.columns;\n        columns.insert(j, control);\n    }\n\n    removeColumn(index: FormGroup, j: number) {\n        const columns = <FormArray> index.controls.columns;\n        columns.removeAt(j);\n    }\n\n    changeOption(index) {\n    if (history.pushState) {\n        this.router.navigateByUrl(window.location.pathname + `?option=${index}`);\n    }\n    }\n\n}\n","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Location } from '@angular/common';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihTable, eTypeCode, DexihTableColumn, eDeltaType } from '../../../../shared/shared.models';\nimport { HubCache, ConnectionTables, formatTypes, eCacheStatus } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dexih-table-edit-rest',\n    templateUrl: './table-edit-rest.component.html'\n})\nexport class TableEditRestComponent implements OnInit, OnDestroy {\n    @Input() public formService: HubFormsService;\n    @Input() public connection: DexihConnection;\n\n    private _hubCacheSubscription: Subscription;\n    private _currentFormSubscription: Subscription;\n    private _restfulUrlSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public hubCache: HubCache;\n\n    tables: ConnectionTables[];\n    inputColumns: Array<FormGroup>;\n    inputTable: DexihTable = null;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    constructor(private hubService: HubService, private route: ActivatedRoute, private router: Router, private location: Location) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n\n                this.hubCache = cache;\n\n                this.tables = this.hubCache.getConnectionTables();\n\n            }\n        });\n\n        this._currentFormSubscription = this.formService.getCurrentFormObservable().subscribe( currentForm => {\n            // load the inputColumns\n            const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n            this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n            if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n            this._restfulUrlSubscription = currentForm.controls.restfulUri.valueChanges\n                .pipe(debounceTime(500))\n                .subscribe(newValue => {\n                    this.updateInputColumns();\n                });\n        });\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n        if (this._currentFormSubscription) { this._currentFormSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    hasChanged($event) {\n        // this.tableChanged = true;\n    }\n\n    importTable() {\n        let importTable = this.formService.currentForm.value;\n        let inputColumns = this.formService.currentForm.value.dexihTableColumns.filter(c => c.isInput && c.isValid);\n\n        // merge any input columns with columns already in the table\n        if (inputColumns) {\n            inputColumns.forEach(column => {\n                let importCol = importTable.dexihTableColumns.find(c => c.name === column.name);\n                if (importCol) {\n                    importCol.inputValue = column.inputValue;\n                } else {\n                    importCol = column;\n                    importTable.dexihTableColumns.push(importCol);\n                }\n            });\n        }\n\n        this.hubService.importTables([importTable], false, this.cancelToken)\n            .then(result => {\n                const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n                while (columns.controls.length > 0) {\n                    columns.removeAt(0);\n                }\n\n                result[0].dexihTableColumns.forEach(column => {\n                    columns.push(this.formService.tableColumn(result[0].dexihTableColumns, column));\n                });\n            }).catch();\n    }\n\n    updateInputColumns() {\n        // use the regex to extract items in uri between { }.  These will be input columns\n        const regExp = /\\{([^}]+)\\}/g;\n\n        const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n        const inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n        inputColumns.forEach(item => {\n            const columnForm = <FormGroup>item;\n            columnForm.controls.isValid.setValue(false);\n        });\n        let match;\n        let position = -1000;\n\n        while ((match = regExp.exec(this.formService.currentForm.value.restfulUri))) {\n            let columnForm = <FormGroup>columns.controls.find(c => c.value.name === match[1] && c.value.isInput);\n\n            if (!columnForm) {\n                let col = new DexihTableColumn();\n\n                // add the basic properties\n                col.name = match[1];\n                col.isInput = true;\n                col.logicalName = match[1];\n                col.dataType = eTypeCode.String;\n                col.deltaType = eDeltaType.NaturalKey;\n                col.maxLength = 1024;\n                col.position = position++;\n                col.description = 'Url Parameter ' + match[1];\n\n                col.allowDbNull = true;\n                col.isUnique = false;\n                col.isValid = true;\n\n                columnForm = this.formService.tableColumn(columns.value, col);\n                columns.push(columnForm);\n            } else {\n                columnForm.controls.isValid.setValue(true);\n            }\n        }\n\n        position = 1;\n        columns.controls.filter(column => column.value.isValid) .sort((a, b) => a.value.position - b.value.position).forEach(column => {\n            (<FormGroup>column).controls.position.setValue(position++);\n        });\n\n        this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n    }\n}\n","    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\" class=\"container\">\n\n        <section>\n            <form-input label=\"Web Service Uri String\" formControlName=\"restfulUri\" placeholder=\"Enter the uri.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.restfulUri\" [note]=\"'Specify the uri following the base path ' + connection.server +'.  To include input columns use {} in the uri definition (eg. GetWeather?City={CityName})'\">\n            </form-input>\n        </section>\n        <section>\n        </section>\n\n        <section>\n            <div *ngFor=\"let columnForm of inputColumns | isValidFilter\">\n                <table-edit-input-column [columnForm]=\"columnForm\"></table-edit-input-column>\n            </div>\n        </section>\n\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">\n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, defaults will be used.\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section class=\"btn-toolbar\">\n            <d-button [busy]=\"formService.formSaving\" (click)=\"!formService.formSaving && importTable()\">Import </d-button>\n\n            <div *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\" class=\"input-group pl-1\">\n                <div  class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">Max Import Levels</div>\n                </div>\n                <input class=\"form-control\" placeholder=\"Maximum levels...\" title=\"Maximum import levels\" formControlName=\"maxImportLevels\"\n                    style=\"width: 100%; max-width: 100px\">\n            </div>\n        </section>\n\n    </form>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihTable, eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-preview-data',\n    templateUrl: './table-edit-preview-data.component.html'\n})\nexport class TableEditPreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public table: DexihTable;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    constructor(\n        public formsService: HubFormsService,\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let tableForm = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (tableForm) {\n                    this.table = tableForm.value;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<d-widget-section title=\"Preview Table\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #sectionHeader>\n        <d-button-close (click)=\"close()\"></d-button-close>\n    </ng-template>\n        <preview-data [table]='table' [viewSource]='eDataObjectType.Table'></preview-data>\n</d-widget-section>","export * from './column-edit.component';\nexport * from './column-edit-base.component';\n","import { Component, OnInit, OnChanges, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { HubCache, eCacheStatus,\n     } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { eDeltaType, DexihTableColumn, eTypeCode } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'column-edit',\n    templateUrl: './column-edit.component.html',\n})\nexport class ColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() columnKey: number;\n    @Input() deltaType: eDeltaType;\n    @Input() detailedView = true;\n    @Output() isUpdated = new EventEmitter<boolean>();\n    @Output() changeColumn = new EventEmitter<number>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private originalColumn: DexihTableColumn;\n\n    public columns: any[];\n\n    public eTypeCode = eTypeCode;\n\n\n    public columnFormService: HubFormsService;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        fb: FormBuilder) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.status === eCacheStatus.Loaded) {\n                this.hubCache = hubCache;\n\n                if (!this.hubCache.isLoaded() || !this.tableForm) { return; }\n\n                this.initializeForm();\n\n                this.updateColumns();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this.tableForm && this.hubCache) {\n            this.initializeForm();\n            this.updateColumns();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n        let columns = this.tableForm.value.dexihTableColumns;\n\n        if (this.columnKey) {\n            if (this.tableForm) {\n                this.originalColumn = columns.find(c => c.key === this.columnKey);\n                if (!this.originalColumn) {\n                    this.authService.navigateUp();\n                    return;\n                }\n                columnForm = this.columnFormService.tableColumn(columns, this.originalColumn);\n            }\n        } else {\n            let column = this.hubCache.newColumn(this.tableForm.value, this.deltaType);\n            if (column) {\n                columnForm = this.columnFormService.tableColumn(columns, column);\n            } else {\n                this.authService.informationDialog('Column not added.',\n                `The column with delta type ${this.deltaType} could not be inserted into the current table.`);\n            }\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.isUpdated.emit(false);\n    }\n\n    apply() {\n        const columnForm = this.columnFormService.currentForm;\n        const columnsArray = <FormArray>this.tableForm.controls.dexihTableColumns;\n\n        if (!this.originalColumn) {\n        columnsArray.push(columnForm);\n        } else {\n        const originalColumn = columnsArray.controls.find(c => c.value.key === columnForm.value.key);\n        originalColumn.setValue(columnForm.value);\n        }\n\n        this.tableForm.markAsDirty();\n    }\n\n    updateColumns() {\n        if (this.tableForm && this.originalColumn) {\n            this.columns = (<DexihTableColumn[]> this.originalColumn.childColumns)\n            .sort((a, b) => a.position - b.position)\n        }\n    }\n\n    navigateToColumn(col: DexihTableColumn) {\n        this.apply();\n        this.changeColumn.emit(col.key);\n    }\n\n    applyExit() {\n        if (this.columnFormService.hasChanged) {\n            this.apply();\n            this.isUpdated.emit(true);\n        }\n    }\n}\n","<d-widget-section title='Edit Column' [showExpandButton]=\"true\">\n<ng-template #sectionHeader>\n        <dexih-invalid-form-details class=\"mr-1\" (click)=\"columnFormService.showErrors()\" [control]=\"columnFormService.currentForm\"></dexih-invalid-form-details>\n        <d-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" text=\"Column\">\n            <li *ngFor=\"let col of columns\">\n                <a class=\"dropdown-item\" (click)=\"navigateToColumn(col)\">{{col.columnGroup ? col.columnGroup + \".\" : \"\"}}{{col.name}}</a>\n            </li>\n        </d-button-dropdown>\n        <d-button-apply class=\"mr-1\" [disabled]=\"!columnFormService?.hasChanged\" (click)=\"applyExit()\"></d-button-apply>\n        <d-button-cancel (click)=\"cancel()\"></d-button-cancel>\n</ng-template>\n\n<column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"detailedView\"></column-edit-base>\n</d-widget-section>\n\n<table-edit-columns *ngIf=\"columnFormService?.currentForm?.controls.dataType.value === eTypeCode.Node\" [tableForm]='tableForm' [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n","export { TableEditPreviewDataComponent } from './table-edit-preview-data.component';\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { Subscription} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihFileFormat, eTypeCode, DexihTable, DexihTableColumn, ConnectionReference } from '../../../../shared/shared.models';\nimport { HubCache, formatTypes } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-file',\n    templateUrl: './table-edit-file.component.html'\n})\nexport class TableEditFileComponent implements OnInit, OnDestroy {\n    @Input() public connection: DexihConnection;\n    @Input() public isFile = false;\n    @Input() public formService: HubFormsService;\n\n    public hasBaseDropZoneOver = false;\n\n    public updatingTable = false;\n\n    private _subscription: Subscription;\n    public hubCache: HubCache;\n    public fileFormats: DexihFileFormat[];\n\n    filesSubdirectory: string;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    public cancelToken: CancelToken = new CancelToken();\n\n    constructor(private authService: AuthService,\n        private hubService: HubService) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = this.hubService.getHubCacheObservable().subscribe(result => {\n                this.hubCache = result;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit File');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    public filesDrop(files: any) {\n        this.doImport(files[0]);\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doImport(files[0]);\n    }\n\n    public doImport(file: File) {\n\n        if (this.formService.currentForm.value.fileFormat) {\n            this.formService.currentForm.value.fileFormatKey = this.formService.currentForm.value.fileFormat.fileFormatKey;\n        }\n\n        if (file.size > 100000) {\n            if (file.type === 'text/csv' || file.type === 'text/plain') {\n                file = new File([file.slice(0, 100000) ], file.name);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage(`The file size ${file.size}b exceeded the maximum of 100,000b.  Submit a smaller sample file, or a plain text file (which will be trimmed automatically) to proceed.`);\n                return;\n            }\n        }\n\n        const form: FormData = new FormData();\n        form.append('file', file, file.name);\n        form.append('hubKey', this.hubCache.hub.hubKey.toString());\n        form.append('table', this.authService.JsonNoNulls(this.formService.currentForm.value));\n        form.append('connectionKey', this.connection.key.toString());\n        form.append('save', 'false');\n\n        let remoteAgent = this.hubService.getRemoteAgentCurrent();\n\n        this.authService.postFormRemoteGetKey('/api/Hub/ImportFileFormat', form, remoteAgent, this.cancelToken)\n            .then(key => {\n                this.authService.getRemoteData<DexihTable[]>(remoteAgent, key, this.cancelToken, 'download').then(importedTables => {\n                    let importedTable = importedTables[0];\n                    if (importedTable.entityStatus.lastStatus.toString() === 'Error') {\n                        this.hubService.addHubErrorMessage(importedTable.entityStatus.message);\n                    }\n\n                    this.updateColumns(importedTable.dexihTableColumns);\n                });\n\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    import() {\n        this.hubService.importTables([this.formService.currentForm.value], false, this.cancelToken).then(tables => {\n            if (tables && tables.length > 0) {\n                this.updateColumns(tables[0].dexihTableColumns);\n            }\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    updateColumns(columns: DexihTableColumn[]) {\n        let tableColumnsForm = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n\n        // remove existing columns.\n        const count = tableColumnsForm.controls.length;\n        for (let i = 0; i <= count; i++) {\n            tableColumnsForm.removeAt(0);\n        }\n        columns.filter(c => c.isValid).forEach(column => {\n            tableColumnsForm.push(this.formService.tableColumn(tableColumnsForm.value, column));\n        });\n    }\n}\n","    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\" class=\"container\">\n        <ng-template [ngIf]=\"isFile\">\n            <section>\n                <form-input label=\"Files Subdirectory\" formControlName=\"fileRootPath\" placeholder=\"Enter the file path name.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileRootPath\" [note]=\"'Specify the subdirectory.  This will be the connection directory (' + connection.server + ') plus the path specified.'\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-input label=\"File Match Pattern\" formControlName=\"fileMatchPattern\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileMatchPattern\" note=\"Specify the file pattern to use to match files when bulk uploading.  Patterns can include wildcards */?, leave blank for all files.\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Auto manage files\" formControlName=\"autoManageFiles\" note=\"Files loaded from the incoming directory, and moved to the processed or rejected directories when they are loaded by a datalink.  If not checked source files will be left untouched after a load.\">\n                </form-checkbox>\n            </section>\n\n            <div *ngIf=\"formService.currentForm.value.autoManageFiles\">\n\n                <section>\n                    <form-checkbox label=\"Specify custom file paths for auto-managed files\" formControlName=\"useCustomFilePaths\" [note]=\"'If custom paths are not specified files will be read/written to the directory: ' + connection.server + '/' + formService.currentForm.value.name + '/'\">\n                    </form-checkbox>\n                </section>\n\n                <div *ngIf=\"formService.currentForm.value.useCustomFilePaths\">\n\n                    <section>\n                        <form-input label=\"Incoming subdirectory\" formControlName=\"fileIncomingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileIncomingPath\" note=\"Specify the sub-directory for incoming files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Outgoing subdirectory\" formControlName=\"fileOutgoingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileOutgoingPath\" note=\"Specify the sub-directory for outgoing (written) files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Processed subdirectory\" formControlName=\"fileProcessedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileProcessedPath\" note=\"Specify the sub-directory for processed files\">\n                        </form-input>\n                    </section>\n                    <section>\n                        <form-input label=\"Rejected subdirectory\" formControlName=\"fileRejectedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileRejectedPath\" note=\"Specify the sub-directory for rejected files\">\n                        </form-input>\n                    </section>\n\n                </div>\n            </div>\n        </ng-template>\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">    \n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, a csv (command separated) format will be used.\"\n                [allowNullSelect]=\"true\" selectNullMessage=\"Use default (csv) format\">\n                <a routerLink=\"../fileFormat-new\">(<i class=\"fa fa-sticky-note-o\"></i> New Format )</a>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section>\n            <label class=\"label\">Add a sample file which will be used to determine column names.\n                <a  href=\"javascript:void(0)\" (click)=\"import()\">(<i class=\"fa fa-download\"></i> Import directly from source )</a>\n            </label>\n\n            <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                Drop Sample File Here\n                <div class=\"custom-file w-25 float-right\">\n                    <input type=\"file\" class=\"custom-file-input\" (change)=\"uploadFile($event)\" onclick=\"this.value=null\">\n                    <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\n                </div>\n            </div>\n\n            <br/>\n            <section>\n                <form-input label=\"Max Import Levels\" formControlName=\"maxImportLevels\" placeholder=\"Enter the maximum node levels to query the json structure.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.maxImportLevels\" note=\"Enter the maximum levels to query the json file.\">\n                </form-input>\n            </section>\n        </section>\n    </form>\n","import { Component, OnInit, OnChanges, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags, eCacheStatus } from '../../../hub.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-columns',\n    templateUrl: './table-edit-columns.component.html',\n})\nexport class TableEditColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() parentColumnForm: FormGroup;\n\n    private _hubCacheSubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    private deltaTypes = deltaTypes;\n    private securityFlags = securityFlags;\n    public showBulkEdit = false;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { name: 'name', title: 'Column Name', format: '', class: 'nameClass', tooltip: 'description'},\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description', class: 'logicalNameClass'},\n        { name: 'isInput', title: 'Input?', format: 'Boolean'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'deltaType', title: 'Delta Type', format: ''},\n        { name: 'defaultValue', title: 'Default Value', format: ''},\n        { name: 'columnValidation', title: 'Column Validation', format: ''},\n        { name: 'isIncrementalUpdate', title: 'Is Incremental', format: 'Boolean'},\n        { name: 'format', title: 'Format'},\n        { name: 'securityFlag', title: 'Security Flag', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        public formsService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n                this.hubCache = cache;\n                this.updateColumnData();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this.formsService.currentForm) {\n            this._tableFormSubscription = this.formsService.currentForm.controls.dexihTableColumns.valueChanges.subscribe(() => this.updateColumnData());\n        }\n        this.updateColumnData();\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        if (this.hubCache && this.formsService.currentForm) {\n            let tableData = [];\n\n            let columns: FormArray;\n\n            if (this.parentColumnForm) {\n                columns = <FormArray>this.parentColumnForm.controls.childColumns;\n            } else {\n                columns = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            }\n\n            columns.controls\n                .filter(c => c.value.isValid)\n                .sort((a, b) => a.value.position - b.value.position)\n                .forEach(column => {\n                    let columnForm = <FormGroup>column;\n                    tableData.push({\n                        key: column.value.key,\n                        position: column.value.position,\n                        name: (column.value.columnGroup ? column.value.columnGroup + '.' : '') + column.value.name,\n                        nameClass: (columnForm.controls.name.valid ? '' : 'dexih-state-error'),\n                        description: column.value.description,\n                        isInput: column.value.isInput,\n                        dataType: this.hubCache.dataTypeToString(column.value),\n                        allowDbNull: column.value.allowDbNull,\n                        logicalName: column.value.logicalName,\n                        logicalNameClass: (columnForm.controls.logicalName.valid ? '' : 'dexih-error-icon'),\n                        deltaType: this.deltaTypes.find(c => c.key === column.value.deltaType).name,\n                        defaultValue: column.value.defaultValue,\n                        columnValidation: this.hubCache.getColumnValidation(column.value.columnValidationKey).name,\n                        isIncrementalUpdate: column.value.isIncrementalUpdate,\n                        format: column.value.format,\n                        securityFlag: this.securityFlags.find(c => c.key === column.value.securityFlag).name,\n                        updateDate: column.value.updateDate,\n                    });\n                });\n            this._columnData.next(tableData);\n        } else {\n            this._columnData.next(null);\n        }\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        columnsArray.removeAt(index);\n    });\n    // this._columnData.next(this.table.dexihTableColumns.filter(c => c.isValid));\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent, queryParamsHandling: 'preserve' });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent, queryParamsHandling: 'preserve' });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n}\n","<d-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <d-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\" [columns]=\"columns\" [dataObservable]=\"columnData\" (rowClick)=\"editColumn($event)\">\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <d-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\" class=\"mr-1\"></d-button-delete>\n            <d-button iconClass=\"fa fa-th-list\" class=\"mr-1\" (click)=\"showBulkEdit=!showBulkEdit\">\n                {{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </d-button>\n        </ng-template>\n\n        <ng-template #tableHeader let-items=\"items\">\n            <column-edit-bulk *ngIf=\"formsService.currentForm && showBulkEdit && items.length > 0\" [columns]=\"items\"\n                [columnsFormArray]=\"formsService.currentForm.controls.dexihTableColumns\" (updated)=\"showBulkEdit = false\" class=\"mr-1\"></column-edit-bulk>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <d-button-new (click)=\"newColumn()\" title=\"Create a new column\" class=\"mr-1\"></d-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\" class=\"mr-1\">\n            <d-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\" class=\"mr-1\"></d-button-edit>\n        </ng-template>\n\n    </d-table>\n\n</d-widget-section>","\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TableEditPropertiesComponent } from './table-edit/table-edit-properties/table-edit-properties.component';\nimport { TableEditColumnsComponent } from './table-edit//table-edit-columns/table-edit-columns.component';\nimport { TableEditFileComponent } from './table-edit/table-edit-file/table-edit-file.component';\nimport { TableEditRestComponent } from './table-edit/table-edit-rest/table-edit-rest.component';\nimport { TableEditInputColumnComponent } from './table-edit//table-edit-rest/table-edit-input-column.component';\nimport { HubSharedModule } from '../hub.shared.module';\nimport { TableEditPreviewDataComponent } from './table-edit//table-edit-preview-data';\nimport { ColumnEditComponent, ColumnEditBaseComponent } from './column-edit';\nimport { ColumnEditBulkComponent } from './table-edit/column-edit-bulk/column-edit-bulk.component';\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ],\n    exports: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ]\n})\nexport class TableSharedModule {\n    static forRoot(): ModuleWithProviders<TableSharedModule> {\n        return {\n            ngModule: TableSharedModule,\n        };\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport {  deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { FormsService } from '../../../../shared/forms/forms.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { columnDateFormats, columnNumberFormats, columnTimeFormats, TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn } from '../../../../shared/shared.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'column-edit-bulk',\n    templateUrl: 'column-edit-bulk.component.html'\n})\n\nexport class ColumnEditBulkComponent implements OnInit, OnDestroy {\n    @Input() columns: DexihTableColumn[];\n    @Input() columnsFormArray: FormArray;\n\n    @Output() updated = new EventEmitter();\n\n    subscription: Subscription;\n\n    public properties = [\n        {name: 'Group Name', property: 'group'},\n        {name: 'Data Type', property: 'dataType'},\n        {name: 'Delta Type', property: 'deltaType'},\n        {name: 'Format', property: 'format'},\n        {name: 'Security Flag', property: 'securityFlag'},\n        {name: 'Default Value', property: 'defaultValue'},\n        {name: 'Validation Rule', property: 'validationRule'},\n        {name: 'Allow DbNull', property: 'allowDbNull'},\n        {name: 'Is Input', property: 'isInput'},\n        {name: 'Is Unicode', property: 'isUnicode'},\n    ];\n\n    hubCache: HubCache;\n    property: string;\n    bulkColumn: FormGroup;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    formats = columnNumberFormats.concat(columnDateFormats.concat(columnTimeFormats));\n\n    constructor(private hubService: HubService,\n        private formsService: HubFormsService) { }\n\n    ngOnInit() {\n        this.bulkColumn = this.formsService.tableColumn([], new DexihTableColumn());\n\n        this.subscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            this.hubCache = hubCache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {this.subscription.unsubscribe(); }\n    }\n\n    getColumnForm(column: DexihTableColumn): FormGroup {\n        return <FormGroup> this.columnsFormArray.controls.find((c: FormGroup) => c.controls.key.value === column.key);\n    }\n\n    applyBulkEdit() {\n\n        let bulkColumn = <DexihTableColumn> this.bulkColumn.value;\n\n        if(this.columnsFormArray) {\n            this.columns.forEach(column => {\n                let columnForm = this.getColumnForm(column);\n                if (!columnForm) { return; }\n\n                switch (this.property) {\n                    case 'group':\n                        columnForm.controls.columnGroup.setValue(bulkColumn.columnGroup);\n                        break;\n                    case 'dataType':\n                        columnForm.controls.dataType.setValue(bulkColumn.dataType);\n                        columnForm.controls.maxLength.setValue(bulkColumn.maxLength);\n                        columnForm.controls.rank.setValue(bulkColumn.rank);\n                        columnForm.controls.precision.setValue(bulkColumn.precision);\n                        columnForm.controls.scale.setValue(bulkColumn.scale);\n                        break;\n                    case 'deltaType':\n                        columnForm.controls.deltaType.setValue(bulkColumn.deltaType);\n                        break;\n                    case 'format':\n                        columnForm.controls.format.setValue(bulkColumn.format);\n                        break;\n                    case 'securityFlag':\n                        columnForm.controls.securityFlag.setValue(bulkColumn.securityFlag);\n                        break;\n                    case 'defaultValue':\n                        columnForm.controls.defaultValue.setValue(bulkColumn.defaultValue);\n                        break;\n                    case 'validationRule':\n                        columnForm.controls.columnValidationKey.setValue(bulkColumn.columnValidationKey);\n                        break;\n                    case 'allowDbNull':\n                        columnForm.controls.allowDbNull.setValue(bulkColumn.allowDbNull);\n                        break;\n                    case 'isUnicode':\n                        columnForm.controls.isUnicode.setValue(bulkColumn.isUnicode);\n                        break;\n                    case 'isInput':\n                        columnForm.controls.isInput.setValue(bulkColumn.isInput);\n                        break;\n                }\n            });\n        } else {\n            this.columns.forEach(column => {\n                switch (this.property) {\n                    case 'group':\n                        column.columnGroup = bulkColumn.columnGroup;\n                        break;\n                    case 'dataType':\n                        column.dataType = bulkColumn.dataType;\n                        column.maxLength = bulkColumn.maxLength;\n                        column.rank = bulkColumn.rank;\n                        column.precision = bulkColumn.precision;\n                        column.scale = bulkColumn.scale;\n                        break;\n                    case 'deltaType':\n                        column.deltaType = bulkColumn.deltaType;\n                        break;\n                    case 'format':\n                        column.format = bulkColumn.format;\n                        break;\n                    case 'securityFlag':\n                        column.securityFlag = bulkColumn.securityFlag;\n                        break;\n                    case 'defaultValue':\n                        column.defaultValue = bulkColumn.defaultValue;\n                        break;\n                    case 'validationRule':\n                        column.columnValidationKey = bulkColumn.columnValidationKey;\n                        break;\n                    case 'allowDbNull':\n                        column.allowDbNull = bulkColumn.allowDbNull;\n                        break;\n                    case 'isUnicode':\n                        column.isUnicode = bulkColumn.isUnicode;\n                        break;\n                    case 'isInput':\n                        column.isInput = bulkColumn.isInput;\n                        break;\n                }\n            });\n        }\n\n        this.updated.emit();\n\n      }\n\n      cancel() {\n          this.updated.emit();\n      }\n\n      setAllowDbNull(value: boolean) {\n        this.columns.forEach(column => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n                columnForm.controls.allowDbNull.setValue(value);\n            } else {\n                column.allowDbNull = value\n            }\n        });\n      }\n\n      setIsInput(value: boolean) {\n        this.columns.forEach(column  => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n            columnForm.controls.isInput.setValue(value);\n            } else {\n                column.isInput = value\n            }\n        });\n      }\n\n      setIsUnicode(value: boolean) {\n        this.columns.forEach(column  => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n            columnForm.controls.isUnicode.setValue(value);\n            } else {\n                column.isUnicode = value\n            }\n        });\n      }\n}\n","<d-widget title=\"Update columns\" headerClass=\"text-white bg-primary\">\n<form [formGroup]=\"bulkColumn\">\n    <section class=\"form-group col-md-4\">\n        <form-select label=\"Property\" [(ngModel)]=\"property\" [ngModelOptions]=\"{standalone: true}\" [items]=\"properties\" itemKey=\"property\"\n            itemName=\"name\">\n        </form-select>\n    </section>\n    <div *ngIf=\"property=='dataType'\">\n        <section class=\"form-group col-md-4\">\n            <form-select label=\"Data Type\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                itemName=\"name\">\n            </form-select>\n        </section>\n        <section class=\"form-group col-md-2\">\n            <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isString\" class=\"form-group col-md-6\">\n            <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\"\n                type=\"number\" note=\"Maximum string length (blank for unlimited)\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\"\n                type=\"number\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\">\n            </form-input>\n        </section>\n    </div>\n\n    <div *ngIf=\"property=='group'\" >\n            <section class=\"form-group col-md-6\">\n        <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\"\n            iconClass=\"fa fa-list\"\n            note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n        </form-input>\n            </section>\n    </div>\n    <div *ngIf=\"property=='format'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Format\" formControlName=\"format\" [items]=\"formats\" [enableTextEntryMatch]=\"false\" [enableTextEntry]=\"true\"  [allowNullSelect]=\"true\" selectNullMessage=\"No Format\"\n                itemKey=\"value\" itemName=\"name\" note=\"The display format of the column.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='securityFlag'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [items]=\"securityFlags\"\n                itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='deltaType'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Delta Type\" formControlName=\"deltaType\" [items]=\"deltaTypes\"\n                itemKey=\"key\" itemName=\"name\"\n                note=\"How to treat the column when used to update target table.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='defaultValue'\" >\n        <section class=\"form-group col-md-6\">\n            <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\"\n                note=\"Default value if unmapped or null.\">\n            </form-input>\n        </section>\n    </div>\n    <div *ngIf=\"property=='validationRule'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\"\n                [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\" itemKey=\"key\"\n                itemName=\"name\" note=\"Validation rule to apply.\">\n                <columnValidation-edit-button [key]=\"bulkColumn.controls.columnValidationKey.value\"></columnValidation-edit-button>\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='allowDbNull'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isInput'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isUnicode'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n        </section>\n    </div>\n</form>\n    <ng-template #footer>\n        <d-button-apply class=\"mr-1\" (click)=\"applyBulkEdit()\"></d-button-apply>\n        <d-button-cancel class=\"mr-1\" (click)=\"cancel()\"></d-button-cancel>\n    </ng-template>\n</d-widget>\n\n\n\n\n\n"]}