{"version":3,"sources":["webpack:///src/app/shared/index.ts","webpack:///src/app/shared/forms/forms.service.ts","webpack:///src/app/+hub/table/table-edit/table-edit.component.html","webpack:///src/app/+hub/table/table-edit/table-edit.component.ts","webpack:///src/app/+hub/table/table-edit/table-column-edit/table-column-edit.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit-main.component.ts","webpack:///src/app/+hub/table/table-edit/table-edit.module.ts","webpack:///src/app/+hub/table/table-edit/table-column-edit/table-column-edit.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-main.component.html","webpack:///src/app/+hub/table/table-edit/table-edit.routing.ts","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.html","webpack:///src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.ts"],"names":["FormsService","fb","_currentFormObservable","formErrors","hasChanged","formSaving","showAllErrors","validationMessages","validationFieldMessages","this","clearFormSubscriptions","_valueChangesSubscription","unsubscribe","_changesSubscription1","_changesSubscription2","_changesSubscription3","_changesSubscription4","_changesSubscription5","item","template","newForm","group","addMissing","startForm","form","itemTemplate","keys","Object","existingKeys","controls","forEach","key","findIndex","c","control","setValue","addControl","currentForm","next","valueChanges","pipe","subscribe","data","onValueChanged","asObservable","field","get","dirty","valid","messages","errors","message","minlength","actualLength","requiredLength","maxlength","value","maxvalue","requiredValue","minvalue","formsService","TableEditComponent","TableColumnEditComponent","TableEditMainComponent","TableEditModule","hubService","authService","route","router","eConnectionCategory","cancelToken","isLoaded","_subscription","combineLatest","params","getHubCacheObservable","result","hubCache","action","pageTitle","status","Loaded","confirmDialog","then","confirm","load","reason","e","addHubClientErrorMessage","_hubCacheChangeSubscription","_formChangeSubscription","cancel","ngOnDestroy","table","tableKey","hub","dexihDatajobs","getTable","connection","getConnection","connectionKey","addHubErrorMessage","newTable","getCurrentFormObservable","tableForm","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","navigateUp","tables","createPaths","addHubSuccessMessage","Promise","resolve","$event","returnValue","close","formService","detailedView","queryParams","columnKey","navigate","relativeTo","parent","isUpdated","changeColumn","Routing","forChild","path","component","canDeactivate","children","redirectTo","navigateSkip","ngModule","providers","TableEditPreviewDataComponent","eDataObjectType"],"mappings":"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","file":"x","sourcesContent":["export {SharedModule} from './shared.module';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Subscription, BehaviorSubject, Observable, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Injectable()\nexport class FormsService implements OnDestroy {\n  private _valueChangesSubscription: Subscription;\n\n  private _changesSubscription1: Subscription;\n  private _changesSubscription2: Subscription;\n  private _changesSubscription3: Subscription;\n  private _changesSubscription4: Subscription;\n  private _changesSubscription5: Subscription;\n\n  public currentForm: FormGroup;\n  private _currentFormObservable = new BehaviorSubject<FormGroup>(null);\n  public formErrors = {};\n  public hasChanged = false;\n  public formSaving = false;\n  public showAllErrors = false;\n\n  private saveMethod: string;\n\n  validationMessages = {\n    'required': 'A value is required.',\n    'duplicateName': 'The value is already being used.'\n  };\n\n  validationFieldMessages = {\n\n  };\n\n  constructor(\n    private fb: FormBuilder,\n  ) {\n  }\n\n  ngOnDestroy() {\n    this.clearFormSubscriptions();\n  }\n\n  public clearFormSubscriptions() {\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    if (this._changesSubscription1) { this._changesSubscription1.unsubscribe(); }\n    if (this._changesSubscription2) { this._changesSubscription2.unsubscribe(); }\n    if (this._changesSubscription3) { this._changesSubscription3.unsubscribe(); }\n    if (this._changesSubscription4) { this._changesSubscription4.unsubscribe(); }\n    if (this._changesSubscription5) { this._changesSubscription5.unsubscribe(); }\n  }\n\n  public createDefault(item: any, template: any) {\n    const newForm = this.fb.group({ });\n    this.addMissing(item, newForm, template);\n    this.startForm(newForm);\n  }\n\n  public addMissing(item: any, form: FormGroup, itemTemplate: any) {\n    let keys = Object.keys(itemTemplate);\n    let existingKeys = Object.keys(form.controls);\n    keys.forEach(key => {\n      if (existingKeys.findIndex(c => c === key) >= 0) {\n        // skip items already added.\n      } else {\n        let control = new FormControl(key);\n        control.setValue(item[key]);\n        form.addControl(key, control);\n      }\n    });\n  }\n\n  public startForm(form: FormGroup) {\n    this.currentForm = form;\n    this._currentFormObservable.next(form);\n\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n\n    // when a value changes, update the errors.\n    this._valueChangesSubscription = this.currentForm.valueChanges\n        .pipe(debounceTime(500))\n        .subscribe(data => {\n          this.onValueChanged(data);\n        });\n\n    this.onValueChanged(); // (re)set validation messages now\n\n    this.hasChanged = false;\n  }\n\n  public getCurrentFormObservable(): Observable<FormGroup> {\n    return this._currentFormObservable.asObservable();\n  }\n\n  private onValueChanged(data?: any) {\n    if (!this.currentForm) { return; }\n    const form = this.currentForm;\n\n    this.hasChanged = true;\n\n      for (const field of Object.keys(this.currentForm.controls)) {\n        // clear previous error message (if any)\n        this.formErrors[field] = '';\n        const control = form.get(field);\n\n        // if the control is dirty or flag is set to show all errors.\n        if (control && (control.dirty || this.showAllErrors)) {\n          if (!control.valid) {\n            const messages = this.validationFieldMessages[field];\n            if (control.errors) {\n            for (const key of Object.keys(control.errors)) {\n              if (messages && messages[key]) {\n                this.formErrors[field] += messages[key] + ' ';\n              } else if (this.validationMessages[key]) {\n                this.formErrors[field] += this.validationMessages[key] + ' ';\n              } else {\n                let message: string;\n\n                switch (key) {\n                  case 'minlength':\n                    message = 'Value is ' +\n                      control.errors.minlength.actualLength +\n                      ' charaters long, required minimum length is '\n                      + control.errors.minlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxlength':\n                    message = 'Value is ' +\n                      control.errors.maxlength.actualLength +\n                      ' charaters long, required maximum length is '\n                      + control.errors.maxlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required maximum is '\n                      + control.errors.maxvalue.requiredValue + '.';\n                    break;\n                  case 'minvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required minimum is '\n                      + control.errors.minvalue.requiredValue + '.';\n                    break;\n                  case 'email':\n                    message = 'Value is not a valid email address.';\n                    break;\n                  case 'passwordMatch':\n                    message = 'The passwords do not match.';\n                    break;\n                  case 'pattern':\n                    message = 'Passwords must have one upper, lower, number, and symbol.';\n                    break;\n                  default:\n                    message = 'Field error: ' + key;\n                }\n                this.formErrors[field] += message + ' ';\n              }\n            }\n          } else {\n            // this.formErrors[field] = 'Invalid value';\n          }\n          }\n        }\n      }\n  }\n\n  public showErrors() {\n    this.showAllErrors = true;\n    this.onValueChanged();\n  }\n\n}\n","\n<div class=\"container-fluid\">\n    <dexih-widget \n    [title]=\"'Edit Table ('  + formsService.currentForm?.controls?.name?.value +')'\" \n    iconClass=\"fa fa-lg fa-fw fa-table\" \n    [showCloseButton]=\"true\"\n    (close)=\"close()\"\n    >\n        <ng-template #header>\n            <dexih-invalid-form-details class=\"mr-1\" [control]=\"formsService.currentForm\" (click)=\"formsService.showErrors()\"></dexih-invalid-form-details>\n            <actions-table-button class=\"mr-1\" [showEdit]=\"false\" [tables]=\"this.formsService?.currentForm?.value ? [this.formsService?.currentForm?.value] : []\" (changedTables)=\"changedTables($event)\"></actions-table-button>\n            <dexih-button class=\"mr-1\" *ngIf=\"hubCache?.canWrite && connectionReference?.connectionCategory == eConnectionCategory.File\" \n            (click)=\"createPaths()\" title=\"Create the file paths (or folders).\" iconClass=\"fa fa-folder-open\" buttonClass='btn-primary'>\n                Create Paths\n            </dexih-button>\n            <save-button class=\"mr-1\" *ngIf=\"hubCache?.canWrite\" [formsService]=\"formsService\"></save-button>\n            <cancel-button [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n        <div>\n        <router-outlet></router-outlet>\n    </div>\n    </dexih-widget>\n</div>\n\n\n","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DexihConnection, eConnectionCategory, DexihTable } from '../../../shared/shared.models';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { CancelToken } from '../../../+auth/auth.models';\n\n@Component({\n  selector: 'dexih-table-edit-form',\n  templateUrl: './table-edit.component.html'\n})\nexport class TableEditComponent implements OnInit, OnDestroy {\n  public tableKey: number;\n  public connectionKey: number;\n  public connection: DexihConnection;\n\n  eConnectionCategory = eConnectionCategory;\n\n  private hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  public cancelToken: CancelToken = new CancelToken();\n\n  private _subscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private isLoaded = false;\n\n\n  constructor(private hubService: HubService,\n    public formsService: HubFormsService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Table Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    this.cancelToken.cancel();\n\n    // shut down service\n    this.formsService.ngOnDestroy();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.tableKey = + this.params['tableKey'];\n\n      if (!this.tableKey) {\n        this.hubService.addHubErrorMessage('There was no table specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihDatajobs) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n\n          let table = this.hubCache.getTable(this.tableKey);\n          if (!table) {\n            this.hubService.addHubErrorMessage('The specified table could not be found.');\n          } else {\n            this.connection = this.hubCache.getConnection(table.connectionKey);\n            this.formsService.table(table);\n          }\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let table: DexihTable;\n      if (this.hubService.newTable) {\n        table = this.hubService.newTable;\n        this.hubService.newTable = null;\n      } else {\n        this.connectionKey = + this.params['connectionKey'];\n\n        table = new DexihTable();\n        table.key = 0;\n        table.connectionKey = this.connectionKey;\n      }\n      this.formsService.table(table);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(tableForm => {\n        let key = tableForm.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/table-new', `/table-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n  }\n\n  close() {\n    this.authService.navigateUp();\n  }\n\n  changedTables(tables) {\n    this.formsService.table(tables[0]);\n  }\n\n  createPaths() {\n    this.hubService.createPaths(this.formsService.currentForm.value, this.cancelToken).then(() => {\n      this.hubService.addHubSuccessMessage('The paths have been created.');\n    }).catch();\n  }\n\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The table has not been saved',\n          'The table changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The table changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { Location } from '@angular/common';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../../hub.forms.service';\n\n@Component({\n    selector: 'dexih-table-column-edit',\n    templateUrl: './table-column-edit.component.html',\n})\nexport class TableColumnEditComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public tableForm: FormGroup;\n    public columnKey: number;\n    public detailedView = true;\n\n    public pageTitle: string;\n    public action: string;\n\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        public formService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router        ) {\n    }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.route.queryParams,\n                this.formService.getCurrentFormObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                let queryParams = result[2];\n                this.tableForm = result[3];\n\n                this.pageTitle = data['pageTitle'];\n                this.action = data['action'];\n\n                this.columnKey = +params['columnKey'];\n                this.detailedView = queryParams['detailed'] === 'false' ? false : true;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Column Edit');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    isUpdated() {\n        this.authService.navigateUp();\n    }\n\n    changeColumn(columnKey: number) {\n        this.router.navigate(['column', columnKey], {relativeTo: this.route.parent});\n    }\n\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubFormsService } from '../../hub.forms.service';\n\n@Component({\n  selector: 'dexih-table-edit-form',\n  templateUrl: './table-edit-main.component.html'\n})\nexport class TableEditMainComponent implements OnInit, OnDestroy {\n\n  constructor(\n    public formsService: HubFormsService,\n  ) { }\n\n  ngOnInit() {\n  }\n\n  ngOnDestroy() {\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routing } from './table-edit.routing';\nimport { TableEditComponent } from './table-edit.component';\nimport { TableEditMainComponent } from './table-edit-main.component';\nimport { HubSharedModule } from '../../hub.shared.module';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { TableColumnEditComponent } from './table-column-edit/table-column-edit.component';\nimport { TableSharedModule } from '../table.shared.module';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Routing,\n        HubSharedModule,\n        TableSharedModule\n    ],\n    declarations: [\n      TableEditComponent,\n      TableEditMainComponent,\n      TableColumnEditComponent,\n    ],\n    providers: [\n        HubFormsService,\n        ItemEditGuard\n        ],\n    exports: [\n    ]\n})\nexport class TableEditModule {\n    static forRoot(): ModuleWithProviders<TableEditModule> {\n        return {\n            ngModule: TableEditModule,\n            providers: [ HubFormsService ]\n        };\n    }\n}\n","<column-edit [tableForm]=\"tableForm\" [columnKey]=\"columnKey\" [detailedView]=\"detailedView\" (isUpdated)=\"isUpdated()\" (changeColumn)=\"changeColumn($event)\"></column-edit>\n\n ","<dexih-table-edit-properties [formsService]='formsService'></dexih-table-edit-properties>\n<table-edit-columns [tableForm]='formsService.currentForm'></table-edit-columns>\n","import { Routes, RouterModule } from '@angular/router';\nimport { TableEditComponent } from './table-edit.component';\nimport { TableColumnEditComponent } from './table-column-edit/table-column-edit.component';\nimport { ItemEditGuard } from '../../item-edit.guard';\nimport { TableEditPreviewDataComponent } from './table-edit-preview-data';\nimport { TableEditMainComponent } from './table-edit-main.component';\nimport { FileFormatEditComponent } from '../../fileFormat';\n\nexport const tableEditRoutes = [\n        { path: '', redirectTo: 'properties'},\n        { path: 'properties', component: TableEditMainComponent,  data: { navigateSkip: true} },\n        { path: 'column', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column' } },\n        { path: 'column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column' } },\n        { path: 'table-preview/:tableKey', component: TableEditPreviewDataComponent, data: { pageTitle: 'Preview' } },\n        { path: 'fileFormat-new', component: FileFormatEditComponent, data: { action: 'new', pageTitle: 'New File Format'}},\n];\n\nexport const routes: Routes = [\n        { path: '', component: TableEditComponent, canDeactivate: [ItemEditGuard], children: tableEditRoutes},\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","<dexih-widget-section title=\"Preview Table\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #header>\n        <dexih-button-close (click)=\"close()\"></dexih-button-close>\n    </ng-template>\n        <preview-data [table]='table' [viewSource]='eDataObjectType.Table'></preview-data>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihTable, eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-preview-data',\n    templateUrl: './table-edit-preview-data.component.html'\n})\nexport class TableEditPreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public table: DexihTable;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    constructor(\n        public formsService: HubFormsService,\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let tableForm = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (tableForm) {\n                    this.table = tableForm.value;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n"]}