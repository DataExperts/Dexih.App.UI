{"version":3,"sources":["webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.service.ts","webpack:///src/app/+hub/datalink/datalink-edit/properties/datalink-edit-properties.component.html","webpack:///src/app/+hub/datalink/datalink-edit/properties/datalink-edit-properties.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/save-button/datalink-edit-save-button.component.html","webpack:///src/app/+hub/datalink/datalink-edit/save-button/datalink-edit-save-button.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-table/datalink-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-table/datalink-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/source-table/datalink-edit-source-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/source-table/datalink-edit-source-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/input-columns/input-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/output-columns/output-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target-columns/target-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-column.component.html","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-column.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-columns.component.html","webpack:///src/app/+hub/datalink/datalink-edit/join-columns/join-columns.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping-item.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping-item.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping/mapping.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transform/datalink-edit-transform.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transform/datalink-edit-transform.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/profile-rules/profile-rules.component.html","webpack:///src/app/+hub/datalink/datalink-edit/profile-rules/profile-rules.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/validation/datalink-edit-validation.component.html","webpack:///src/app/+hub/datalink/datalink-edit/validation/datalink-edit-validation.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/run-plan/datalink-run-plan.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/run-plan/datalink-run-plan.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/input-parameter.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/input-parameter.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/parameters/output-parameter.component.html","webpack:///src/app/+hub/datalink/datalink-edit/parameters/output-parameter.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/standard-function-edit/standard-function-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/standard-function-edit/standard-function-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/custom-function-edit/custom-function-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/custom-function-edit/custom-function-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/mapping-edit/mapping-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/mapping-edit/mapping-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit-guard.ts","webpack:///src/app/+hub/datalink/datalink-edit/preview-data/preview-data.component.html","webpack:///src/app/+hub/datalink/datalink-edit/preview-data/preview-data.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/preview-table/preview-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/preview-table/preview-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transform-table-edit/transform-table-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transform-table-edit/transform-table-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/transforms/datalink-edit-transforms.component.html","webpack:///src/app/+hub/datalink/datalink-edit/transforms/datalink-edit-transforms.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/new-transform/datalink-edit-new-transform.component.html","webpack:///src/app/+hub/datalink/datalink-edit/new-transform/datalink-edit-new-transform.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-column-edit/datalink-column-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/datalink-column-edit/datalink-column-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/unGroup-edit/unGroup-edit.component.html","webpack:///src/app/+hub/datalink/datalink-edit/unGroup-edit/unGroup-edit.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target-table.component.html","webpack:///src/app/+hub/datalink/datalink-edit/target/datalink-edit-target-table.component.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.routing.ts","webpack:///src/app/+hub/datalink/datalink-edit/datalink-edit.module.ts"],"names":["DatalinkEditService","hubService","authService","hubFormsService","showAllErrors","logger","savingDatalink","BehaviorSubject","hubCache","this","_hubCache","ngOnDestroy","asObservable","LogC","Trace","currentForm","controls","find","c","value","transformType","Validation","datalinkTransformKey","key","datalinkTransformForm","datalinkTransformItemKey","datalinkTransformItem","datalinkForm","io","dexihDatalinkTransforms","forEach","inputColumns","runTime","joinColumns","joinDatalinkTable","dexihDatalinkColumns","nodeColumns","getNodeColumns","fixMapping","nodeDatalinkColumn","joinSortDatalinkColumn","getAvailableColumns","dexihDatalinkTransformItems","item","sourceDatalinkColumn","joinDatalinkColumn","filterDatalinkColumn","dexihFunctionParameters","parameter","direction","Input","datalinkColumn","Join","arrayParameters","arrayParameter","columns","nodes","filter","dataType","Node","isValid","col","push","childColumns","length","concat","columnForm","column","findIndex","inputColumn","name","columnGroup","setValue","datalinkTransform","functionType","Filter","Condition","Mapping","Map","JoinCondition","Group","Aggregate","Series","Sort","Validate","Rows","Lookup","parameters","map","hub","dexihHubVariables","previousGroup","columnGroups","cols","sort","a","b","position","group","datalinkTransformItemForm","datalinkTransformItemsArray","currentIndex","removeAt","form","datalinkDatalinkTransformItemFormGroup","getNextSequence","Math","max","apply","o","fixMappings","datalinkTransformItems","index","indexOf","datalinkTargetKey","datalinkTargets","transform","datalinkTransforms","newDatalinkTransform","minKey","dt","transformAssemblyName","transformClassName","Array","passThroughColumns","Concatenate","seriesItem","transformItemType","datalinkTransformFormGroup","resetDatalinkTransformPositions","Promise","resolve","confirmDialog","then","confirm","catch","userConfigTransforms","GetUserConfigTransformReference","e","cancelToken","datalink","getDatalinkValue","hubPostRemote","hubKey","remoteAgentId","getCurrentRemoteAgentId","datalinkTable","confirm2","doRebuildDatalinkTable","sourceType","Table","sourceTable","getTable","sourceTableKey","mergeDatalinkColumns","dexihTableColumns","Datalink","dexihDatalinks","sourceDatalinkKey","datalinkColumns","buildInputOutput","sourceDatalinkTable","transforms","outputColumns","rowDatalinkColumn","datalinkTableKey","logicalName","Int32","isMandatory","description","groupName","newColumns","existingColumns","Object","keys","DatalinkEditPropertiesComponent","editDatalinkService","route","eConnectionPurpose","eDatalinkTypeItems","eAlertLevelItems","eAlertLevel","_subscription","combineLatest","data","params","getHubCacheObservable","getCurrentFormObservable","subscribe","result","pageTitle","addHubClientErrorMessage","unsubscribe","DatalinkEditSaveButtonComponent","router","eUpdateStrategy","cancel","saveAs","next","dexihDatalinkTargets","dirty","targets","tableNames","table","join","doSave","t","target","savedTable","saveTables","setControl","tableForm","tableKey","save","navigate","relativeTo","saveDatalink","doDownload","downloadItems","downloadObject","objectKey","objectType","downloadData","Csv","truncateTarget","resetIncremental","hasChanged","toPromise","runDatalinks","DatalinkEditComponent","logCount","eTransformWriterMethod","isLoaded","showPage","showPageMessage","routerState","root","snapshot","firstChild","help","events","event","getHelp","action","status","Loaded","init","load","reason","ngOnInit","_datalinkFormSubscription","datalinkKey","originalDatalink","d","Warning","addHubErrorMessage","datalinkType","Query","reBuildDatalinkTable","markAsDirty","copyDatalink","CopyDatalink","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","$event","returnValue","DatalinkTableComponent","datalinkEditService","eSourceType","sourceTypes","connectionTables","datalinks","isVersioned","errors","getFormErrorMessages","datalinkTableForm","subscribeDatalinkChanges","getConnectionTables","updateIsVersioned","_datalinkTableSubscription","merge","valueChanges","refreshColumns","rowsEndAt","rowsStartAt","rowsIncrement","tableColumnsForm","datalinkTableColumn","DatalinkEditSourceTableComponent","eMappingStatus","title","format","enum","_tableData","tableData","updateData","_sourceSubscription","informationDialog","lineage","SourceTable","Source","PassThroughMap","createDatalinkImpact","mappingStatus","statusClass","columnData","newColumn","columnStatus","dataTypeToString","deltaType","allowDbNull","isIncrementalUpdate","securityFlag","isInput","columnsArray","parent","items","existingItems","columnSortChange","editColumn","DatalinkEditTargetComponent","fb","eDeltaType","updateStrategies","loadStrategies","showTableProperties","targetTableColumns","tableFormService","getRemoteLibrariesObservable","managedConnections","getManagedConnections","updateTargets","_loadStrategySubscription","deleteDatalinkTarget","InputColumnComponent","eTypeCode","columnUsage","Transform","Target","NotMapped","mappingStatusImpact","mappingStatusInfoImpact","mappingStatusLineage","createDatalinkLineage","mappingStatusInfoLineage","findColumn","InputColumnsComponent","_inputColumnsSubscribe","getColumnGroups","OutputColumnComponent","inputTables","inputOutputDrop","refreshStatus","AutoGenerate","Mapped","MappedToNothing","OutputColumnsComponent","allowMappingOutputs","_outputColumnsSubscribe","transformColumns","outputColumn","emit","TargetColumnComponent","TargetTable","TargetColumnsComponent","JoinColumnComponent","inputJoinDrop","_hubCacheSubscription","lineageMappingStatus","impactMappingStatus","JoinColumnsComponent","eTransformType","updateTableData","_changesSubscription","joinTable","joinColumn","MappingItemComponent","updateMapping","transformItem","itemType","BuiltInFunction","functionClassName","func","GetFunctionReference","label","addBuiltInFunctionParameters","error","functionMethodName","customFunctionKey","dexihCustomFunctions","addCustomFunctionParameters","CustomFunction","AggregatePair","aggregate","sortDirection","UnGroup","addUnGroupParameters","useSource","source","columnOrValue","sourceValue","useTarget","describeDatalinkColumn","targetDatalinkColumn","useJoin","useFilter","filterValue","filterCompare","IsEqual","compare","expectedDataType","text","describeStaticValue","valid","args","array","arg","functionInputs","inputParameters","resultInputParameters","functionOutputs","outputParameters","returnParameters","resultOutputParameters","resultReturnParameters","inputParams","ResultInput","linkedName","param","p","parameterName","rank","describeParameterName","values","ap","outputParams","parameterIsOutput","allowCondition","ReturnValue","ResultReturnValue","linkedNames","from","Set","mapParameters","parameters2","sourceColumn","nodeDatalinkColumnKey","findValidColumn","MappingComponent","allowStandard","allowMapping","allowAggregate","allowRow","allowValidation","allowOutput","allowGroup","allowJoin","allowSort","allowSeries","allowJoinNode","addMapping","removeMapping","onColumnDrop","eTransformItemType","getFunctionType","inputDateColumns","DateTime","Date","filteredItems","JoinNode","Column","ColumnPair","FilterPair","JoinPair","getItemFormGroup","GroupNode","deleteSelected","itemForm","deleteDatalinkTransformItem","getHubCache","childColumn","copyDatalinkColumn","insertDatalinkTransformItem","createMapping","validFrom","ValidFromDate","validTo","ValidToDate","GreaterThanEqual","LessThan","editMapping","datalinkItemSortChange","newOutputDrop","DatalinkEditTransformComponent","showName","showDescription","eDuplicateStrategyItems","eJoinNotFoundStrategyItems","eSeriesGrain","seriesGrains","allowNode","nodeName","formErrors","transformsArray","_transformsArraySubscription","navigateUp","seriesForm","nodeType","node","addNodeColumns","path","deleteDatalinkTransform","nodeItem","Ascending","Sum","DatalinkEditProfileRulesComponent","selectedProfileRules","dexihDatalinkProfiles","profileRules","GetFunctionsByType","Profile","profile","profileRuleForm","functionAssemblyName","detailedResults","profiles","profileRule","datalinkProfileFormGroup","i","updateProfileRules","DatalinkEditValidationComponent","remoteLibraries","getValidationTransform","insertDatalinkTransform","DatalinkRunPlanComponent","allowSave","InputValues","InputParameterComponent","allowDataTypeSelect","allowNameSelect","allowAdd","allowRemove","inputParameterForms","updateParameterName","outputParameterForms","variables","addParameter","removeParameter","eBasicType","typeCodes","inputColumnGroups","inputs","ignoreChanges","inputParameter","staticValue","textItems","Boolean","toString","functionParameter","listOfValues","updateItems","inputParameterSubscription","datalinkColumnSubscription","String","input","outputTables","type","current","OutputParameterComponent","outputParameterForm","_datalinkColumnSubscription","_parameterSubscription","_dataTypeSubscription","updateNewColumn","add","remove","ArrayParameter","parameterItems","inputArray","ArrayParameterItem","inputParameterForm","inputItems","outputItems","StandardFunctionEditComponent","eFunctionType","eParameterDirection","invalidActions","functionCache","eGenericType","allowReturn","eInvalidActionItems","eErrorActionItems","isJoin","functions","transformFunctionType","getDatalinkTransform","getVariables","useCustomFunction","getDatalinkTransformItem","newDatalinkTransformItemForm","selectCustomFunction","selectedFunction","selectFunction","newItem","functionCategories","category","filteredFunctions","customFunctions","selectedCustomFunction","_functionSubscription","_saveSubscription","_returnParameterSubscription","pristine","parametersArray","inputParameterControls","outputParameterControls","addArrayParameter","resetItems","genericTypeCode","genericTypeDefault","genericType","Numeric","Decimal","All","isNumeric","isString","None","existingParameters","newParameter","Output","ResultOutput","refreshParameters","existingValue","isGeneric","defaultValue","datalinkFunctionParametersFormGroup","dexihCustomFunctionParameters","newParameterForm","returnParameter","returnType","newParameterForm2","parentParameter","parentParameterForm","createArrayParameter","datalinkFunctionArrayParametersFormGroup","arrayForm","insert","parameterForm","splice","clearArray","isLabel","addAllColumns","inputArrayForm","j","importFunctionMappings","paramValue","markAsPristine","CustomFunctionEditComponent","inputParameterValues","outputParameterValues","funcParam","setParameters","_parametersSubscription","returnParameterForm","oldParameter","downloadCustomFunction","testCustomFunction","addHubSuccessMessage","returnParameterValue","addHubMessage","MappingEditComponent","showInput","showOutput","eAggregate","eAggregateItems","eCompare","sortDirections","getErrors","_formChangesObserve","statusChanges","targetErrors","getErrorMessage","sourceErrors","joinErrors","DatalinkEditGuard","component","canDeactivate","PreviewDataComponent","eDataObjectType","getRemoteAgentObservable","PreviewTableComponent","TransformTableEditComponent","canEdit","deltaTypes","securityFlags","s","control","tooltip","_columnData","transformTableForm","transformTable","updateColumnData","updateDate","columnIndex","close","DatalinkEditTransformsComponent","refreshTransforms","_transformsChange","icon","getTransformName","invalid","DatalinkEditNewTransformComponent","transformReference","newDatalinkTransformForm","columnFormService","DatalinkColumnEditComponent","datalinkColumnKey","sourceDatalinkTableForm","initializeForm","applyExit","originalColumnForm","maxPos","startForm","UnGroupEditComponent","_nodeSubscription","DatalinkEditTargetTableComponent","showColumn","ignoreUpdateTable","newTable","showBulkEdit","canExit","class","_missingColumnsData","missingColumnsData","ioColumns","getDatalinkOutputColumns","targetKey","originalTargetTableForm","undefined","targetTableForm","datalinkTargetFormGroup","resetSubscription","_tableFormSubscription","validation","columnValidation","getColumnValidation","columnValidationKey","columnValidationClass","columnValidationTooltip","validColumns","missingColumnData","datalinkColumnStatus","tableColumns","missingColumn","assign","resetColumnKeys","positions","tableColumn","addMissing","columnKey","getConnection","connectionKey","importTables","tables","returnTable","useLogical","defaultTableLogicalName","schema","createTables","IgnoreFormChange","savedTables","datalinkEditRoutes","redirectTo","children","pathMatch","loadChildren","m","TableEditModule","breadCrumb","Routing","forChild","navigateSkip","DatalinkEditModule","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["import { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { FormArray, FormGroup } from '@angular/forms';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { eLogLevel, LogFactory } from '../../../../logging';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { InputOutputColumns } from '../../hub.lineage.models';\nimport { HubService } from '../../hub.service';\nimport { TransformReference } from '../../hub.remote.models';\nimport { CancelToken } from '../../../+auth/auth.models';\nimport { HubCache } from '../../hub.models';\nimport { eTransformType, DexihDatalinkColumn, eParameterDirection, eTypeCode, DexihDatalinkTransformItem,\n    DexihDatalinkTransform, DexihDatalinkTable, eTransformItemType, eSourceType, eFunctionType } from '../../../shared/shared.models';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n// contains shared objects used to edit the datalink.\n\n@Injectable()\nexport class DatalinkEditService implements OnInit, OnDestroy {\n\n    private _hubCache: HubCache;\n\n    public showAllErrors = false;\n\n    public datalinkKey: number;\n\n    public logger = new LogFactory('datalink-edit.service');\n\n    // used to stop save occurring when changing functions and target ables.\n    savingDatalink = new BehaviorSubject(false);\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        public hubFormsService: HubFormsService) {\n    }\n\n    ngOnInit() {\n    }\n\n    public init(hubCache: HubCache) {\n        this._hubCache = hubCache;\n    }\n\n    ngOnDestroy() {\n        this.hubFormsService.ngOnDestroy();\n    }\n\n    savingDataLinkObservable(): Observable<boolean> {\n        return this.savingDatalink.asObservable();\n    }\n\n    getValidationTransform(): FormGroup {\n        this.logger.LogC(() => `getValidationTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n        let datalinkTransform = <FormGroup>datalinkTransforms.controls\n            .find(c => c.value.transformType === eTransformType.Validation);\n\n        return datalinkTransform;\n    }\n\n    getDatalinkTransform(datalinkTransformKey: number): FormGroup {\n        this.logger.LogC(() => `getDatalinkTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n\n        let datalinkTransform = <FormGroup>datalinkTransforms.controls\n            .find(c => c.value.key === datalinkTransformKey);\n\n        return datalinkTransform;\n    }\n\n    getDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemKey: number): FormGroup {\n        this.logger.LogC(() => `getDatalinkTransformItem, key:${datalinkTransformItemKey}.`, eLogLevel.Trace);\n\n        let datalinkTransformItems = <FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let datalinkTransformItem = <FormGroup>datalinkTransformItems.controls\n            .find(c => c.value.key === datalinkTransformItemKey);\n\n        this.logger.LogC(() => `getDatalinkTransformItem finished.`, eLogLevel.Trace);\n\n        return datalinkTransformItem;\n    }\n\n     // fixes the key mappings when a transform is removed or columns are refreshed\n     fixMappings(datalinkForm: FormGroup) {\n        let io = new InputOutputColumns();\n        let datalinkTransforms = <FormArray> datalinkForm.controls.dexihDatalinkTransforms;\n        datalinkTransforms.controls.forEach((datalinkTransformForm: FormGroup) => {\n            let inputColumns = <DexihDatalinkColumn[]> datalinkTransformForm.controls.runTime.value.inputColumns;\n            let joinColumns = null;\n            if (datalinkTransformForm.value.joinDatalinkTable) {\n                joinColumns = datalinkTransformForm.value.joinDatalinkTable.dexihDatalinkColumns;\n            }\n\n            let nodeColumns = this.getNodeColumns(inputColumns);\n\n            this.fixMapping(nodeColumns, <FormGroup> datalinkTransformForm.controls.nodeDatalinkColumn);\n            this.fixMapping(joinColumns, <FormGroup> datalinkTransformForm.controls.joinSortDatalinkColumn);\n\n            // set the inputcolumns to the current node level.\n            if (datalinkTransformForm.controls.nodeDatalinkColumn.value) {\n                inputColumns = io.getAvailableColumns(inputColumns, datalinkTransformForm.controls.nodeDatalinkColumn.value.key , 0)\n            }\n\n            let items = <FormArray> datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            items.controls.forEach((item: FormGroup) => {\n                this.fixMapping(inputColumns, <FormGroup> item.controls.sourceDatalinkColumn);\n                this.fixMapping(joinColumns, <FormGroup> item.controls.joinDatalinkColumn);\n                this.fixMapping(inputColumns, <FormGroup> item.controls.filterDatalinkColumn);\n\n                let parameters = <FormArray> item.controls.dexihFunctionParameters;\n                parameters.controls.forEach((parameter: FormGroup) => {\n                    switch (parameter.controls.direction.value) {\n                        case eParameterDirection.Input:\n                            this.fixMapping(inputColumns, <FormGroup> parameter.controls.datalinkColumn);\n                            break;\n                        case eParameterDirection.Join:\n                            this.fixMapping(joinColumns, <FormGroup> parameter.controls.datalinkColumn);\n                            break;\n                    }\n\n                    let arrayParameters = <FormArray> parameter.controls.arrayParameters;\n                    arrayParameters.controls.forEach((arrayParameter: FormGroup) => {\n                        switch (arrayParameter.controls.direction.value) {\n                            case eParameterDirection.Input:\n                                this.fixMapping(inputColumns, <FormGroup> arrayParameter.controls.datalinkColumn);\n                                break;\n                            case eParameterDirection.Join:\n                                this.fixMapping(joinColumns, <FormGroup> arrayParameter.controls.datalinkColumn);\n                                break;\n                        }\n                    });\n                });\n            });\n        });\n    }\n\n    private getNodeColumns(columns: DexihDatalinkColumn[]): DexihDatalinkColumn[] {\n        let nodes: DexihDatalinkColumn[] = [];\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                nodes.push(col);\n                if (col.childColumns && col.childColumns.length > 0) {\n                    nodes = nodes.concat(this.getNodeColumns(col.childColumns));\n                }\n            });\n        }\n\n        return nodes;\n    }\n\n    private fixMapping(inputColumns: DexihDatalinkColumn[], columnForm: FormGroup) {\n        let column  = <DexihDatalinkColumn> columnForm.value;\n        if (!inputColumns || !column) { return; }\n\n        if (inputColumns.findIndex(c => c.key === column.key) < 0) {\n            let inputColumn = inputColumns\n                .find(c => c.name === column.name && c.columnGroup === column.columnGroup);\n            if (!inputColumn) {\n                inputColumn = inputColumns.find(c => c.name === column.name);\n            }\n\n            if (inputColumn) {\n                columnForm.setValue(inputColumn);\n            }\n        }\n    }\n\n    public getFunctionType(datalinkTransform: DexihDatalinkTransform): eFunctionType {\n        let functionType: eFunctionType;\n        switch (datalinkTransform.transformType) {\n            case eTransformType.Filter:\n                functionType = eFunctionType.Condition;\n                break;\n            case eTransformType.Mapping:\n                functionType = eFunctionType.Map;\n                break;\n            case eTransformType.Join:\n                functionType = eFunctionType.JoinCondition;\n                break;\n            case eTransformType.Group:\n            case eTransformType.Aggregate:\n                functionType = eFunctionType.Aggregate;\n                break;\n            case eTransformType.Series:\n                functionType = eFunctionType.Series;\n                break;\n            case eTransformType.Sort:\n                functionType = eFunctionType.Sort;\n                break;\n            case eTransformType.Validation:\n                functionType = eFunctionType.Validate;\n                break;\n            case eTransformType.Rows:\n                functionType = eFunctionType.Rows;\n                break;\n            case eTransformType.Lookup:\n                functionType = eFunctionType.JoinCondition;\n                break;\n            case eTransformType.Delta:\n                break;\n        }\n\n        return functionType;\n    }\n\n    public getVariables(): string[] {\n        let variables = this.hubFormsService.currentForm.controls.parameters.value.map(c => '{' + c.name + '}')\n        .concat(this._hubCache.hub.dexihHubVariables.map(c => '{' + c.name + '}'));\n\n        return variables;\n    }\n\n    public getColumnGroups(columns: DexihDatalinkColumn[]): Array<{ group: string, columns: Array<DexihDatalinkColumn> }> {\n        let previousGroup: string = null;\n\n        let columnGroups: Array<{ group: string, columns: Array<DexihDatalinkColumn> }> = [];\n        let cols: Array<DexihDatalinkColumn> = null;\n\n        columns\n            .filter(c => c.isValid)\n            .sort((a, b) => a.position - b.position)\n            .forEach(column => {\n                let group = column.columnGroup ? column.columnGroup : '(un-grouped)';\n                if (group !== previousGroup) {\n                    if (cols) {\n                        columnGroups.push({ group: previousGroup, columns: cols });\n                    }\n                    previousGroup = group;\n                    cols = [];\n                }\n                cols.push(column);\n            });\n\n        if (cols && cols.length > 0) {\n            columnGroups.push({ group: previousGroup, columns: cols });\n        }\n\n        return columnGroups;\n    }\n\n    insertDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemForm: FormGroup): DexihDatalinkTransformItem {\n        this.logger.LogC(() => `insertDatalinkTransformItem`, eLogLevel.Trace);\n\n        let datalinkTransformItem = <DexihDatalinkTransformItem> datalinkTransformItemForm.value;\n\n        let datalinkTransformItemsArray = (<FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems']);\n        // use temporary negative keys for items which have not been saved.\n        if (!datalinkTransformItem.key) {\n            datalinkTransformItem.key = this._hubCache.getNextSequence();\n            if (datalinkTransformItemsArray.controls.length === 0) {\n                datalinkTransformItem.position = 1;\n            } else {\n                datalinkTransformItem.position = Math.max.apply(Math, datalinkTransformItemsArray.controls.map(o => o.value.position)) + 1;\n            }\n            let form = this.hubFormsService.datalinkDatalinkTransformItemFormGroup(datalinkTransformForm, datalinkTransformItem);\n            datalinkTransformItemsArray.push(form);\n        } else {\n            // existing item? lookup previous item and copy the updated values across.\n            let currentIndex = datalinkTransformItemsArray.controls\n                .findIndex(c => c.value['key'] === datalinkTransformItem.key);\n            datalinkTransformItemsArray.removeAt(currentIndex);\n\n            let form = this.hubFormsService.datalinkDatalinkTransformItemFormGroup(datalinkTransformForm, datalinkTransformItem);\n            datalinkTransformItemsArray.push(form);\n        }\n\n        this.fixMappings(this.hubFormsService.currentForm);\n\n        this.logger.LogC(() => `insertDatalinkTransformItem finished`, eLogLevel.Trace);\n\n        return datalinkTransformItem;\n    }\n\n    deleteDatalinkTransformItem(datalinkTransformForm: FormGroup, datalinkTransformItemForm: FormGroup) {\n        this.logger.LogC(() => `deleteDatalinkTransformItem`, eLogLevel.Trace);\n\n        let datalinkTransformItems = <FormArray>datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let index = datalinkTransformItems.controls.indexOf(datalinkTransformItemForm);\n        datalinkTransformItems.removeAt(index);\n\n        this.fixMappings(this.hubFormsService.currentForm);\n    }\n\n    deleteDatalinkTarget(datalinkForm: FormGroup, datalinkTargetKey: Number) {\n        this.logger.LogC(() => `deleteDatalinkTarget`, eLogLevel.Trace);\n\n        let datalinkTargets = <FormArray>datalinkForm.controls['dexihDatalinkTargets'];\n        let index = datalinkTargets.controls.findIndex(c => c.value.key === datalinkTargetKey);\n        if (index >= 0) {\n            datalinkTargets.removeAt(index);\n        }\n    }\n\n    insertDatalinkTransform(position: number, transform: TransformReference): FormGroup {\n        this.logger.LogC(() => `insertDatalinkTransform`, eLogLevel.Trace);\n\n        let datalinkForm = this.hubFormsService.currentForm;\n        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n\n        let newDatalinkTransform = new DexihDatalinkTransform();\n\n        // use temporary negative keys for datalink transforms which have not been saved.\n        let minKey = -1;\n        datalinkTransforms.controls.forEach(dt => {\n            if (dt.value['key'] <= minKey) {\n                minKey = dt.value['key'] - 1;\n            }\n        });\n\n        this.logger.LogC(() => `insertDatalinkTransform key:${minKey}`, eLogLevel.Trace);\n\n        newDatalinkTransform.key = minKey;\n        newDatalinkTransform.transformType = transform.transformType;\n        newDatalinkTransform.transformAssemblyName = transform.transformAssemblyName;\n        newDatalinkTransform.transformClassName = transform.transformClassName;\n        // newDatalinkTransform.name = transform.name;\n        // newDatalinkTransform.description = transform.description;\n        newDatalinkTransform.dexihDatalinkTransformItems = new Array<DexihDatalinkTransformItem>();\n        newDatalinkTransform.isValid = true;\n\n        // default pass-through columns off for map, group, and row transforms.\n        switch (transform.transformType) {\n            case eTransformType.Group:\n            case eTransformType.Rows:\n            case eTransformType.Mapping:\n                newDatalinkTransform.passThroughColumns = false;\n                break;\n            default:\n                newDatalinkTransform.passThroughColumns = true;\n        }\n\n        if (transform.transformType === eTransformType.Join\n            || transform.transformType === eTransformType.Lookup || transform.transformType === eTransformType.Concatenate) {\n            newDatalinkTransform.joinDatalinkTable = new DexihDatalinkTable();\n            newDatalinkTransform.joinDatalinkTable.key = this._hubCache.getNextSequence();\n        }\n\n        if (transform.transformType === eTransformType.Series) {\n            let seriesItem = new DexihDatalinkTransformItem();\n            seriesItem.transformItemType = eTransformItemType.Series;\n            seriesItem.position = 0;\n            seriesItem.isValid = true;\n            newDatalinkTransform.dexihDatalinkTransformItems.push(seriesItem);\n        }\n\n        newDatalinkTransform.position = position;\n\n        let datalinkTransformForm = this.hubFormsService.datalinkTransformFormGroup(newDatalinkTransform);\n        datalinkTransforms.push(datalinkTransformForm);\n\n        this.resetDatalinkTransformPositions();\n\n        this.logger.LogC(() => `insertDatalinkTransform finished.`, eLogLevel.Trace);\n\n        return datalinkTransformForm;\n    }\n\n    deleteDatalinkTransform(datalinkTransform: DexihDatalinkTransform): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            this.authService.confirmDialog('Delete Transform',\n                `Are you sure you would like to remove the transform ${datalinkTransform.name}?`)\n                .then(confirm => {\n                    if (confirm) {\n                        let datalinkForm = this.hubFormsService.currentForm;\n                        let datalinkTransforms = <FormArray>datalinkForm.controls['dexihDatalinkTransforms'];\n                        let index = datalinkTransforms.controls\n                            .findIndex(c => c.value.key === datalinkTransform.key);\n                        datalinkTransforms.removeAt(index);\n                        this.resetDatalinkTransformPositions();\n                    }\n                    resolve(confirm);\n                }).catch(() => {\n                    resolve(false);\n                });\n        });\n    }\n\n    async resetDatalinkTransformPositions() {\n        const datalinkForm = this.hubFormsService.currentForm;\n        const datalinkTransforms = <FormArray>datalinkForm.controls.dexihDatalinkTransforms;\n\n        let userConfigTransforms = await this.hubService.GetUserConfigTransformReference();\n\n        let position = 10;\n        datalinkTransforms.controls.sort((a, b) => a.value.position - b.value.position).forEach(datalinkTransform => {\n            const dt = <FormGroup>datalinkTransform;\n\n            let transformReference = userConfigTransforms.find(e => e.transformClassName === datalinkTransform.value.transformClassName);\n\n            // if the transform is a validation/delta, then position at the end.\n            if (transformReference) {\n                dt.controls.position.setValue(position);\n                position += 10;\n            } else {\n                dt.controls.position.setValue(1000000);\n            }\n        });\n    }\n\n    importFunctionMappings(datalinkTransformKey: number, item: DexihDatalinkTransformItem, cancelToken: CancelToken):\n        Promise<string[]> {\n\n        let datalink = this.hubFormsService.getDatalinkValue();\n        const cache = this._hubCache;\n\n        return this.hubService.hubPostRemote<string[]>('/api/Hub/ImportFunctionMappings', {\n            hubKey: cache.hub.hubKey,\n            remoteAgentId: this.hubService.getCurrentRemoteAgentId(),\n            datalink: datalink,\n            datalinkTransformKey: datalinkTransformKey,\n            datalinkTransformItem: item\n        }, 'Importing function mappings...', cancelToken);\n    }\n\n    reBuildDatalinkTable(datalinkTable: DexihDatalinkTable, confirm = false) {\n        if (confirm) {\n            // tslint:disable-next-line:max-line-length\n            this.authService.confirmDialog('Rebuild Columns?', `This action will load the selected table columns, and replace or delete any existing columns.  This may require fixing some mappings.  Do you want to proceed?`)\n                .then((confirm2) => {\n                    if (confirm2) {\n                    this.doRebuildDatalinkTable(datalinkTable)\n                    }\n                }).catch();\n        } else {\n            this.doRebuildDatalinkTable(datalinkTable);\n        }\n    }\n\n    private doRebuildDatalinkTable(datalinkTable: DexihDatalinkTable) {\n\n        datalinkTable.dexihDatalinkColumns.forEach(datalinkColumn => datalinkColumn.isValid = false);\n\n        switch (datalinkTable.sourceType) {\n            case eSourceType.Table:\n                let sourceTable = this._hubCache.getTable(datalinkTable.sourceTableKey);\n                if (sourceTable) {\n                    datalinkTable.name = sourceTable.name;\n\n                    datalinkTable.dexihDatalinkColumns = this.mergeDatalinkColumns(\n                        datalinkTable.name, datalinkTable.key,\n                        sourceTable.dexihTableColumns, datalinkTable.dexihDatalinkColumns);\n\n                }\n                break;\n            case eSourceType.Datalink:\n                let datalink = this._hubCache.hub.dexihDatalinks.find(c => c.key === datalinkTable.sourceDatalinkKey);\n                if (datalink) {\n                    datalinkTable.name = datalink.name;\n\n                    let io = new InputOutputColumns();\n                    // const datalinkColumns = io.getInputColumns(this._hubCache, datalink, null, []);\n                    io.buildInputOutput(this._hubCache, datalink);\n\n                    let datalinkColumns: DexihDatalinkColumn[];\n\n                    if (datalink.dexihDatalinkTransforms.length === 0) {\n                        datalinkColumns = datalink.sourceDatalinkTable.dexihDatalinkColumns;\n                    } else {\n                        let transforms = datalink.dexihDatalinkTransforms.sort((a, b) => a.position - b.position);\n                        let transform = transforms[transforms.length - 1];\n                        datalinkColumns = transform['runTime'].outputColumns;\n                    }\n\n                    datalinkTable.dexihDatalinkColumns = this.mergeDatalinkColumns(\n                        datalinkTable.name, datalinkTable.key,\n                        datalinkColumns, datalinkTable.dexihDatalinkColumns);\n                }\n                break;\n            case eSourceType.Rows:\n                datalinkTable.name = 'Static Row Set';\n\n                let rowDatalinkColumn = datalinkTable.dexihDatalinkColumns.find(c => c.name === 'RowNumber');\n                if (!rowDatalinkColumn) {\n                    rowDatalinkColumn = new DexihDatalinkColumn();\n                    rowDatalinkColumn.key = this._hubCache.getNextSequence();\n                    rowDatalinkColumn.datalinkTableKey = datalinkTable.key;\n                    datalinkTable.dexihDatalinkColumns.push(rowDatalinkColumn);\n                }\n\n                rowDatalinkColumn.name = 'RowNumber';\n                rowDatalinkColumn.logicalName = rowDatalinkColumn.name;\n                rowDatalinkColumn.dataType = eTypeCode.Int32;\n                rowDatalinkColumn.isMandatory = true;\n                rowDatalinkColumn.isValid = true;\n                rowDatalinkColumn.description = 'The generated row number of the static row set';\n\n                break;\n        }\n    }\n\n    private mergeDatalinkColumns(groupName: string, datalinkTableKey: number,\n            newColumns: any, existingColumns: DexihDatalinkColumn[]): DexihDatalinkColumn[] {\n        newColumns.forEach(column => {\n            let datalinkColumn = existingColumns.find(c => c.name === column.name && c.columnGroup === groupName);\n            if (!datalinkColumn) {\n                datalinkColumn = existingColumns.find(c => c.name === column.name);\n            }\n            if (!datalinkColumn) {\n                datalinkColumn = new DexihDatalinkColumn();\n                datalinkColumn.key = this._hubCache.getNextSequence();\n                datalinkColumn.datalinkTableKey = datalinkTableKey;\n                existingColumns.push(datalinkColumn);\n            }\n\n            Object.keys(datalinkColumn).forEach(key => {\n                if (key === 'childColumns') {\n                    if (column[key] && column[key].length > 0) {\n                        datalinkColumn[key] = this.mergeDatalinkColumns(groupName, datalinkTableKey, column[key], datalinkColumn[key]);\n                    } else {\n                        datalinkColumn[key] = [];\n                    }\n                } else if (key !== 'key' && column[key]) {\n                    datalinkColumn[key] = column[key];\n                } else if (key === 'columnGroup') {\n                    if (groupName) {\n                        if (datalinkColumn[key] && datalinkColumn[key] !== groupName) {\n                            datalinkColumn[key] = groupName + '.' + datalinkColumn[key];\n                        } else {\n                            datalinkColumn[key] = groupName;\n                        }\n                    }\n                }\n            });\n        });\n\n        return existingColumns;\n    }\n\n}\n","<dexih-widget-section title='Properties' [showExpandButton]=\"true\">\n    <form *ngIf=\"datalinkForm\" [formGroup]=\"datalinkForm\">\n        <fieldset>\n            <section>\n                <form-select label=\"Datalink Type\" formControlName=\"datalinkType\" [items]=\"eDatalinkTypeItems\" itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-database\"\n                    note='Categorize the type of function this datalink is performing.' [enableFilter]=\"false\">\n                </form-select>\n            </section>\n\n            <section>\n                <form-input label=\"Datalink Name\" formControlName=\"name\" placeholder=\"Enter the datalink name.\" iconClass=\"fa fa-list\" [autocapitalize]=\"true\" [errors]=\"editDatalinkService.hubFormsService.formErrors.name\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\" placeholder=\"Enter the description.\"\n                    [errors]=\"editDatalinkService.hubFormsService.formErrors.description\">\n                </form-textarea>\n            </section>\n\n            <section>\n                <form-select label=\"Alerting Level\" formControlName=\"alertLevel\" [items]=\"eAlertLevelItems\"\n                    itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-bell\"\n                    [errors]=\"editDatalinkService.hubFormsService.formErrors.alertLevel\" note=\"When alerts should be sent.\"\n                    [enableFilter]=\"false\">\n                </form-select>\n            </section>\n            \n            <section>\n                <form-checkbox label=\"Datalink is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                </form-checkbox>\n            </section>\n\n        </fieldset>\n    </form>\n\n</dexih-widget-section> \n\n<dexih-widget-section title='Input Parameters' [showExpandButton]=\"true\">\n    <input-parameters [showEdit]=\"true\" [parameters]=\"datalinkForm.controls.parameters\" [formsService]=\"editDatalinkService.hubFormsService\"></input-parameters>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { eConnectionPurpose, eDatalinkTypeItems, eAlertLevelItems, eAlertLevel } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-properties-form',\n    templateUrl: './datalink-edit-properties.component.html'\n})\nexport class DatalinkEditPropertiesComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n\n    public eConnectionPurpose = eConnectionPurpose;\n    eDatalinkTypeItems = eDatalinkTypeItems.filter(c => c.key > 0);\n\n    public eAlertLevelItems = eAlertLevelItems;\n    public eAlertLevel = eAlertLevel;\n\n    constructor(\n        private hubService: HubService,\n        public editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkForm = result[3];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n}\n","<!--<button class=\"btn btn-primary\" [ngClass]=\"{disabled : savingDatalink || datalinkForm?.pristine }\" (click)=\"!savingDatalink && saveDatalink()\"><i *ngIf=\"savingDatalink\" class=\"fa fa-spin fa-cog\"></i> Save Changes</button>\n<button class=\"btn btn-warning\" [ngClass]=\"{disabled : savingDatalink}\" (click)=\"!savingDatalink && cancel()\">Cancel</button>-->\n<dexih-invalid-form-details class=\"mr-1\" [control]=\"datalinkForm\"></dexih-invalid-form-details>\n<dexih-button-splitdropdown *ngIf=\"hubCache.canWrite\" [disabled]=\"!editDatalinkService.hubFormsService.hasChanged\" buttonClass=\"btn-primary\" iconClass=\"fa fa-save\" text=\"Save\" (buttonClick)=\"saveDatalink(false)\" class=\"mr-1\">\n    <li><a class=\"dropdown-item\" (click)=\"saveDatalink(false)\" title=\"Save in the hub\"><i class=\"fa fa-cloud\"></i> Save</a></li>\n    <li><a class=\"dropdown-item\" (click)=\"editDatalinkService.hubFormsService.saveLocal()\" title=\"Export as a local file\"><i class=\"fa fa-floppy-o\"></i> Save as file</a></li>\n    <li><a class=\"dropdown-item\" (click)=\"saveDatalink(true)\" title=\"Save another version\"><i class=\"fa fa-plus-circle\"></i> Save As...</a></li>\n</dexih-button-splitdropdown>\n<dexih-button-dropdown class=\"mr-1\" *ngIf=\"hubCache.canWrite && datalinkForm?.controls.dexihDatalinkTargets.value.length > 0\" text=\"Actions\" iconClass=\"fa fa-bolt\" buttonClass=\"btn-primary\" [pullRight]=\"true\">\n    <a class=\"dropdown-item\" (click)=\"fixMappings()\" title=\"Attempt to fix mappings broken when removing/inserting transforms.\">Fix Mappings</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(false, false)\" title=\"Run datalink, truncating the target table for each.\">Run</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(true, true)\" title=\"Run datalink, truncating the target table for each.\">Run (with truncate)</a>\n    <a class=\"dropdown-item\" (click)=\"runDatalink(false, true)\" title=\"Run datalink, resetting the incremental (i.e. reload all source data rows) \">Run (reset incremental)</a>\n    <a class=\"dropdown-item\" (click)=\"preview()\" title=\"Preview the output of this datalink\">Preview Datalink</a>\n    <a class=\"dropdown-item\" (click)=\"download()\" title=\"Download the output from this datalink\">Download Datalink Data</a>\n</dexih-button-dropdown>\n<cancel-button [formsService]=\"editDatalinkService.hubFormsService\"></cancel-button>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { eUpdateStrategy, DownloadObject, eSourceType, eDownloadFormat, eDataObjectType } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'datalink-save-button',\n    templateUrl: './datalink-edit-save-button.component.html'\n})\n\nexport class DatalinkEditSaveButtonComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    datalinkForm: FormGroup;\n    \n\n    hubCache: HubCache;\n    eUpdateStrategy = eUpdateStrategy;\n\n    constructor(\n        public hubService: HubService,\n        public editDatalinkService: DatalinkEditService,\n        public authService: AuthService,\n        public router: Router,\n        public route: ActivatedRoute\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.datalinkForm = result[0];\n                this.hubCache = result[1];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'datalink save button');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    async saveDatalink(saveAs = false) {\n        this.editDatalinkService.savingDatalink.next(true);\n\n        if (this.datalinkForm.controls.dexihDatalinkTargets.dirty) {\n            let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n            let tables = targets.controls.map(c => {\n                let target = <FormGroup>c;\n                let table = target.controls.table;\n                if (table) {\n                    return table;\n                }\n            });\n\n            let tableNames = tables.filter(c => c.value.key > 0 && c.dirty).map(c => c.value.name).join(', ');\n\n            let doSave = async () => {\n                for (let t of targets.controls) {\n                    if (t.dirty) {\n                        let target = <FormGroup>t;\n                        let savedTable = await this.hubService.saveTables([target.controls.table.value]);\n                        target.setControl('table', this.editDatalinkService.hubFormsService.tableForm(savedTable[0]));\n                        target.controls.tableKey.setValue(savedTable[0].key);\n                    }\n                }\n\n                this.editDatalinkService.hubFormsService.save(false, saveAs);\n                this.editDatalinkService.savingDatalink.next(false);\n            }\n\n            // if no tables with key > 0 they are all new, so no need to prompt.\n            if (tableNames.length === 0) {\n                await doSave();\n            } else {\n            this.authService\n                .confirmDialog(`Save Target Tables?`, `The existing target table(s)\n                ${tableNames} have changed.\n                This is a shared object, and may impact other dependencies if changed.\n                Note, this will only save the metadata, use the 'Create Table' function to overwrite the physical table.`)\n                .then(async (confirm) => {\n                    if (confirm) {\n                        await doSave();\n                    }\n                }).catch(() => this.editDatalinkService.savingDatalink.next(false))\n            }\n        } else {\n            this.editDatalinkService.hubFormsService.save(false, saveAs);\n            this.editDatalinkService.savingDatalink.next(false);\n        }\n    }\n\n    preview() {\n        const transformsArray = <FormArray>this.datalinkForm.controls.dexihDatalinkTransforms;\n        let transforms = transformsArray.controls\n//            .filter(c => c.value.transform.allowUserConfig)\n            .sort((a, b) => b.value.position - a.value.position);\n\n        if (transforms.length > 0) {\n            this.router.navigate(['transforms/transform', transforms[0].value.key,\n            'preview-transform-data'], { relativeTo: this.route });\n        }\n    }\n\n    download() {\n        if (this.datalinkForm.dirty) {\n            this.authService.confirmDialog\n                ('Save Datalink',\n                    'The datalink must be saved before a data download task can be started.  Do you want to save the datalink?')\n                .then(saveDatalink => {\n                    if (saveDatalink) {\n                        this.saveDatalink();\n                        this.doDownload();\n                    }\n                })\n        } else {\n            this.doDownload();\n        }\n    }\n\n    doDownload() {\n        let downloadItems = new Array<DownloadObject>();\n        let downloadObject = new DownloadObject();\n        downloadObject.objectKey = this.datalinkForm.controls.key.value;\n        downloadObject.objectType = eDataObjectType.Datalink;\n        downloadItems.push(downloadObject);\n        this.hubService.downloadData(downloadItems, true, eDownloadFormat.Csv, this.cancelToken)\n    }\n\n    cancel() {\n        this.editDatalinkService.hubFormsService.cancel();\n    }\n\n    runDatalink(truncateTarget: boolean, resetIncremental: boolean) {\n        if (this.editDatalinkService.hubFormsService.hasChanged) {\n            this.authService.confirmDialog('Save Datalink', 'The datalink must be saved before running.  Would you like to save now?')\n                .then(confirm => {\n                    if (confirm) {\n                        this.saveDatalink();\n                        this.editDatalinkService.savingDatalink.toPromise().then(value => {\n                            if (value) {\n                                this.hubService\n                                    .runDatalinks([this.datalinkForm.controls.key.value], truncateTarget, resetIncremental\n                                        , null, null, null, this.cancelToken);\n                            }\n                        });\n                    }\n                });\n        } else {\n            this.hubService.runDatalinks([this.datalinkForm.controls.key.value], truncateTarget, resetIncremental,\n                null, null, null, this.cancelToken);\n        }\n    }\n\n    fixMappings() {\n        this.editDatalinkService.fixMappings(this.datalinkForm);\n    }\n}\n\n","<div class=\"container-fluid\" *ngIf=\"datalinkForm && !datalinkForm.pending\">\n\t<dexih-widget title=\"Edit Datalink\" iconClass=\"fa fa-lg fa-fw fa-exchange\" [showCloseButton]=\"true\"\n\t\t[padding]=\"false\" (close)=\"cancel()\">\n\t\t<ng-template #header>\n\n\t\t\t<div class=\"d-none d-xl-inline\">\n\t\t\t\t<ul class=\"nav nav-tabs card-header-tabs\">\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"properties\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\tclass=\"fa fa-cog\"></i>Properties</a></li>\n\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"source-table\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-o-right\"></i> Source</a></li>\n\t\t\t\t\t<ng-template [ngIf]=\"datalinkForm?.controls.sourceDatalinkTable.value\">\n\t\t\t\t\t\t<li class=\"nav-item\">\n\t\t\t\t\t\t\t<a class=\"nav-link\" routerLink=\"transforms\" routerLinkActive=\"active\">\n\t\t\t\t\t\t\t\t<i class=\"fa fa-share-alt\"></i>\n\t\t\t\t\t\t\t\tTransforms\n\t\t\t\t\t\t\t\t<dexih-invalid-form-icon [control]=\"datalinkForm.controls.dexihDatalinkTransforms\">\n\t\t\t\t\t\t\t\t</dexih-invalid-form-icon>\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li *ngIf=\"!datalinkForm.controls.isQuery.value\" class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t\t\trouterLink=\"validation\" routerLinkActive=\"active\"><i class=\"fa fa-check-square-o\"></i>\n\t\t\t\t\t\t\t\tValidation</a></li>\n\t\t\t\t\t\t<li *ngIf=\"!datalinkForm.controls.isQuery.value\" class=\"nav-item\"><a class=\"nav-link\"\n\t\t\t\t\t\t\t\trouterLink=\"profile-rules\" routerLinkActive=\"active\"><i class=\"fa fa-bug\"></i>\n\t\t\t\t\t\t\t\tProfiling</a></li>\n\t\t\t\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" routerLink=\"target\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-right\"></i> Target</a></li>\n\t\t\t\t\t</ng-template>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</ng-template>\n\n\t\t<ul class=\"list-group\">\n\t\t\t<li class=\"list-group-item rounded-0\">\n\t\t\t\t<div class=\"d-flex\">\n\t\t\t\t\t<div class=\"d-xl-none\">\n\t\t\t\t\t\t<dexih-button-dropdown buttonClass=\"btn btn-success\" text=\"Navigate\">\n\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"properties\"><i\n\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-cog\"></i>Properties</a>\n\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"source-table\"><i\n\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-o-right\"></i>Source</a>\n\t\t\t\t\t\t\t<ng-template [ngIf]=\"datalinkForm.controls.sourceDatalinkTable.value\">\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLinkActive=\"active\" routerLink=\"transforms\"><i\n\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-share-alt\"></i>Transforms</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" *ngIf=\"!datalinkForm.controls.isQuery.value\" routerLink=\"validation\"\n\t\t\t\t\t\t\t\t\t\trouterLinkActive=\"active\"><i class=\"fa fa-check-square-o\"></i>Validation</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" *ngIf=\"!datalinkForm.controls.isQuery.value\" routerLink=\"profile-rules\"\n\t\t\t\t\t\t\t\t\t\trouterLinkActive=\"active\"><i class=\"fa fa-bug\"></i>Profiling</a>\n\t\t\t\t\t\t\t\t<a class=\"dropdown-item\" routerLink=\"target\" routerLinkActive=\"active\"><i\n\t\t\t\t\t\t\t\t\t\t\tclass=\"fa fa-arrow-circle-right\"></i>Target</a>\n\t\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t\t</dexih-button-dropdown>\n\t\t\t\t\t</div>\n\t\t\t\t\t<datalink-status class=\"d-none d-xl-inline\" [datalinkKey]='datalinkForm?.controls.key.value'>\n\t\t\t\t\t</datalink-status>\n\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t<datalink-save-button></datalink-save-button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</li>\n\t\t\t<router-outlet></router-outlet>\n\t\t</ul>\n\n\t</dexih-widget>\n\n\t<dexih-help class=\"m-3\" *ngIf=\"help\" title=\"Datalinks\" path=\"/assets/help/reference/{{help}}\"></dexih-help>\n\n</div>","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationEnd, Params } from '@angular/router';\nimport { HubService } from '../../hub.service';\nimport { DatalinkEditService } from './datalink-edit.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { FormGroup, FormArray, FormControl } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../logging';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { DexihDatalinkTransform, eTransformWriterMethod, DexihDatalink, eDatalinkType,\n    eSourceType, eTransformType, DexihDatalinkTable } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-form',\n    templateUrl: './datalink-edit.component.html'\n})\nexport class DatalinkEditComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _datalinkFormSubscription: Subscription;\n    // private _datalinkTransformsSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public savingDatalink = false;\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public params: Params;\n\n    public logger = new LogFactory('datalink-edit.component');\n    public logCount = 0;\n\n    public help: string;\n\n    // private _datalinkTransforms = new BehaviorSubject<Array<DexihDatalinkTransform>>(null);\n    // datalinkTransforms: Observable<Array<DexihDatalinkTransform>> = this._datalinkTransforms.asObservable();\n    // updatingTransforms = false;\n\n    eTransformWriterMethod = eTransformWriterMethod;\n\n    private isLoaded = false;\n\n    showPage = false;\n    showPageMessage = 'Loading datalink...';\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        public editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    getHelp() {\n        let route = this.router.routerState.root.snapshot;\n        while (route.firstChild) { route = route.firstChild; }\n        this.help = route.data['help'];\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this.router.events.subscribe(event => {\n                if (event instanceof NavigationEnd) {\n                    this.getHelp();\n                }\n            });\n\n            this.getHelp();\n\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                this.params = result[1];\n                this.hubCache = result[2];\n\n                if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n                this.editDatalinkService.init(this.hubCache);\n\n                if (this.isLoaded && this.action === 'new') { return; }\n\n                if (this.isLoaded && this.editDatalinkService.hubFormsService.hasChanged) {\n                    this.authService.confirmDialog('Datalink synchronization warning',\n                    'The hub was disconnected, meaning the datalink could have been changed by another session.  Would you like to discard the current changes, and reload the latest version of the datalink?')\n                    .then(confirm => {\n                        if (confirm) {\n                            this.load();\n                        }\n                    }).catch(reason => {\n                        return;\n                    });\n                } else {\n                    this.load();\n                }\n            });\n\n            this.editDatalinkService.ngOnInit();\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n//        if (this._datalinkTransformsSubscription) { this._datalinkTransformsSubscription.unsubscribe(); }\n\n        // shut down service\n        this.editDatalinkService.ngOnDestroy();\n    }\n\n    private load() {\n        this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n        if (this.action === 'edit') {\n\n            // get the hub key from the route data, and update the service.\n            let datalinkKey: number = +this.params['datalinkKey'];\n            if (!datalinkKey) {\n                this.logger.LogC(() => `no datalink found.`, eLogLevel.Warning);\n\n                this.hubService.addHubErrorMessage('There was no datalink specified to edit.');\n                this.showPageMessage = 'Edit failed...';\n                this.editDatalinkService.hubFormsService.datalink(null);\n            } else {\n                let originalDatalink = this.hubCache.hub.dexihDatalinks.find(d => d.key === datalinkKey);\n\n                if (originalDatalink) {\n                    this.editDatalinkService.hubFormsService.datalink(originalDatalink);\n                    this.route.snapshot.data['pageTitle'] = 'Datalink (' + originalDatalink.name + ')';\n\n                } else {\n                    this.logger.LogC(() => `no datalink found. key: ${datalinkKey}`, eLogLevel.Warning);\n                    this.hubService.addHubErrorMessage('A datalink with the key ' +\n                        datalinkKey + ' could not be found in the repository.');\n                    this.showPageMessage = 'Edit failed...';\n                }\n            }\n\n        } else if (!this.isLoaded && this.action === 'new') {\n            let datalink = new DexihDatalink();\n            datalink.sourceDatalinkTable = new DexihDatalinkTable();\n            this.editDatalinkService.hubFormsService.datalink(datalink);\n            this.logger.LogC(() => `new datalink set.`, eLogLevel.Warning);\n        } else if (!this.isLoaded && this.action === 'copy') {\n            // get the hub key from the route data, and update the service.\n            let datalinkKey: number = +this.params['datalinkKey'];\n            if (!datalinkKey) {\n                this.logger.LogC(() => `no datalink found.`, eLogLevel.Warning);\n\n                this.hubService.addHubErrorMessage('There was no datalink specified to copy.');\n                this.showPageMessage = 'Copy failed...';\n                this.editDatalinkService.hubFormsService.datalink(null);\n            } else {\n                let originalDatalink = this.hubCache.hub.dexihDatalinks.find(d => d.key === datalinkKey);\n\n                if (originalDatalink) {\n                    let copyDatalink = this.hubCache.CopyDatalink(originalDatalink);\n                    this.editDatalinkService.hubFormsService.datalink(copyDatalink);\n                    this.editDatalinkService.hubFormsService.hasChanged = true;\n                    this.route.snapshot.data['pageTitle'] = 'Datalink (' + copyDatalink.name + ')';\n\n                } else {\n                    this.logger.LogC(() => `no datalink found. key: ${datalinkKey}`, eLogLevel.Warning);\n                    this.hubService.addHubErrorMessage('A datalink with the key ' +\n                        datalinkKey + ' could not be found in the repository.');\n                    this.showPageMessage = 'Copy failed...';\n                }\n            }\n        } else if (this.action === 'sourceTable') {\n            let datalink = new DexihDatalink();\n            datalink.datalinkType = eDatalinkType.Query;\n            datalink.sourceDatalinkTable = new DexihDatalinkTable();\n            datalink.sourceDatalinkTable.sourceType = eSourceType.Table;\n            datalink.sourceDatalinkTable.sourceTableKey = +this.params['sourceTableKey'];\n            this.editDatalinkService.reBuildDatalinkTable(datalink.sourceDatalinkTable);\n            datalink.name = 'Datalink query for ' + datalink.sourceDatalinkTable.name;\n\n            this.editDatalinkService.hubFormsService.datalink(datalink);\n            this.editDatalinkService.hubFormsService.currentForm.markAsDirty();\n            this.editDatalinkService.hubFormsService.hasChanged = true;\n\n            this.logger.LogC(() => `new source table datalink set.`, eLogLevel.Warning);\n        }\n\n        this.isLoaded = true;\n\n        // monitor for any changes to the datalink\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n        this._datalinkFormSubscription =\n            this.editDatalinkService.hubFormsService.getCurrentFormObservable().subscribe(datalinkForm => {\n                if (!datalinkForm) { return; }\n                this.datalinkForm = datalinkForm;\n\n                // let datalinkTransforms = <FormArray>this.datalinkForm.controls.dexihDatalinkTransforms;\n                // this.updateTransforms(datalinkTransforms.value);\n\n                // // monitor any add/remove transforms to update the tabs.\n                // if (this._datalinkTransformsSubscription) { this._datalinkTransformsSubscription.unsubscribe(); }\n                // this._datalinkTransformsSubscription = datalinkTransforms.valueChanges.subscribe(dt => {\n                //     if (!this.updatingTransforms) {\n                //         this.updateTransforms(dt);\n                //     }\n                // });\n\n                let key = datalinkForm.controls.key.value;\n                if (key) {\n                    if (history.pushState) {\n                        let newUrl = window.location.pathname.replace('/new', `/edit/${key}`)\n                        this.router.navigateByUrl(newUrl);\n                    }\n                }\n            });\n\n        this.showPage = true;\n        this.showPageMessage = '';\n    }\n\n    // updateTransforms(datalinkTransforms: Array<any>) {\n    //     this.updatingTransforms = true;\n    //     this.logger.LogC(() => `updateTransforms`, eLogLevel.Trace);\n\n    //     // update the transform names\n    //     if (datalinkTransforms) {\n    //         let transforms = datalinkTransforms\n    //             .filter(c => c.transformType !== eTransformType.Delta && c.transformType !== eTransformType.Validation);\n    //         this._datalinkTransforms.next(transforms.sort((a, b) => a.position - b.position));\n    //     } else {\n    //         this._datalinkTransforms.next(null);\n    //     }\n    //     this.updatingTransforms = true;\n    // }\n\n    public canDeactivate(): Promise<boolean> {\n        return new Promise<boolean>((resolve) => {\n            if (this.editDatalinkService.hubFormsService.hasChanged) {\n                this.authService.confirmDialog('Datalink changes have not been saved',\n                    'The datalink changes have not been saved.  Do you want to discard the changes and exit?')\n                    .then(confirm => {\n                        resolve(confirm);\n                    }).catch(reason => {\n                        resolve(false);\n                    });\n            } else {\n                resolve(true);\n            }\n        });\n    }\n\n    // @HostListener allows us to also guard against browser refresh, close, etc.\n    @HostListener('window:beforeunload', ['$event']) unloadNotification($event: any) {\n        if (this.editDatalinkService.hubFormsService.hasChanged) {\n            $event.returnValue = 'The datalink changes have not been saved.  Do you want to discard the changes and exit?';\n        }\n    }\n\n    saveDatalink() {\n        this.editDatalinkService.hubFormsService.save();\n    }\n\n    cancel() {\n        this.editDatalinkService.hubFormsService.cancel();\n    }\n\n}\n","<form *ngIf=\"datalinkTableForm\"  [formGroup]=\"datalinkTableForm\">\n    <fieldset>\n        <section >\n            <form-select label=\"Data Source Type\" formControlName=\"sourceType\" [items]=\"sourceTypes\" itemKey=\"key\" itemName=\"name\"\n                iconClass=\"fa fa-database\"  note='Specify the source type for this table' [enableFilter]=\"false\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Table\" >\n            <form-select label=\"Source Table\" formControlName=\"sourceTableKey\" [errors]=\"errors?.sourceTableKey\" [items]=\"connectionTables\" parentName=\"name\" childItems=\"dexihTables\" itemKey=\"key\" itemName=\"logicalName\"\n                note=\"Select the source table\" >\n                <table-edit-button [key]=\"datalinkTableForm.controls.sourceTableKey.value\"></table-edit-button>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Datalink\">\n            <form-select label=\"Source Datalink\" formControlName=\"sourceDatalinkKey\" [errors]=\"errors?.sourceDatalinkKey\" [items]=\"datalinks\" itemKey=\"key\" itemName=\"name\"\n                note='Select the source datalink'>\n                <datalink-edit-button [key]=\"datalinkTableForm.controls.sourceDatalinkKey.value\"></datalink-edit-button>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"datalinkTableForm.value.sourceType == eSourceType.Rows\">\n            <form-input label=\"Start At\" type=\"number\" formControlName=\"rowsStartAt\" placeholder=\"Enter start row number\" iconClass=\"fa fa-list\">\n            </form-input>\n\n            <form-input label=\"End At\" type=\"number\" formControlName=\"rowsEndAt\" placeholder=\"Enter end row number\" iconClass=\"fa fa-list\">\n            </form-input>\n\n            <form-input label=\"Increment By\" type=\"number\" formControlName=\"rowsIncrement\" placeholder=\"Enter increment value\" iconClass=\"fa fa-list\">\n            </form-input>\n        \n        </section>\n\n        <section >\n            <form-checkbox label=\"Disable query logic being pushed down to the database\" formControlName=\"disablePushDown\"></form-checkbox>\n            <form-checkbox *ngIf=\"isVersioned\" label=\"Disable source table versions\" formControlName=\"disableVersioning\"></form-checkbox>\n\n            <form-input label=\"Table Alias\" formControlName=\"name\" \n                note='An alias that can be used to describe the table instance (this is generally used to differentiate self-joined tables).'>\n            </form-input>\n        </section>\n\n        <dexih-button-refresh (click)=\"refreshColumns()\" tooltip=\"Refresh the columns from the source table.\" ></dexih-button-refresh>\n    </fieldset>\n</form>","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { HubCache, sourceTypes, ConnectionTables } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest, merge} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { eSourceType, DexihDatalink, DexihDatalinkTable } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datalink-table',\n    templateUrl: './datalink-table.component.html'\n})\n\nexport class DatalinkTableComponent implements OnInit, OnDestroy {\n    @Input() datalinkTableForm: FormGroup;\n\n    public errors: {};\n\n    private _subscription: Subscription;\n    private _datalinkTableSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public eSourceType = eSourceType;\n    public sourceTypes = sourceTypes;\n\n    public connectionTables: ConnectionTables[] = [];\n    public datalinks: DexihDatalink[] = [];\n\n    public isVersioned = false;\n\n    constructor(\n        private hubService: HubService,\n        public datalinkEditService: DatalinkEditService) {\n        }\n\n    ngOnInit() {\n        this.errors = this.datalinkEditService.hubFormsService.getFormErrorMessages(this.datalinkTableForm, true);\n\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.hubCache = result[0];\n\n                this.subscribeDatalinkChanges();\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.datalinkTableForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.datalinks = this.hubCache.hub.dexihDatalinks;\n                    this.updateIsVersioned();\n                }\n            });\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Selected datalink table');\n        }\n    }\n\n    updateIsVersioned() {\n        if (this.datalinkTableForm.controls.sourceType.value === eSourceType.Table) {\n            var table = this.hubCache.getTable(this.datalinkTableForm.controls.sourceTableKey.value);\n            if (table) {\n                this.isVersioned = table.isVersioned\n            }\n        }\n    }\n\n    subscribeDatalinkChanges() {\n        if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n        this._datalinkTableSubscription = merge(\n            this.datalinkTableForm.controls.sourceType.valueChanges,\n            this.datalinkTableForm.controls.sourceTableKey.valueChanges,\n            this.datalinkTableForm.controls.sourceDatalinkKey.valueChanges,\n        ).subscribe(() => {\n            this.errors = this.datalinkEditService.hubFormsService.getFormErrorMessages(this.datalinkTableForm, true);\n            this.refreshColumns();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n    }\n\n    refreshColumns() {\n        try {\n            // temporarily unsubscribe to avoid a recursive loop.\n            if (this._datalinkTableSubscription) { this._datalinkTableSubscription.unsubscribe(); }\n\n            let datalinkTable = <DexihDatalinkTable>this.datalinkTableForm.value;\n            datalinkTable.sourceType = this.datalinkTableForm.controls.sourceType.value;\n            datalinkTable.sourceTableKey = this.datalinkTableForm.controls.sourceTableKey.value;\n            datalinkTable.sourceDatalinkKey = this.datalinkTableForm.controls.sourceDatalinkKey.value;\n\n            this.datalinkEditService.reBuildDatalinkTable(datalinkTable);\n\n            this.datalinkEditService.fixMappings(this.datalinkEditService.hubFormsService.currentForm);\n\n            this.datalinkTableForm.controls.name.setValue(datalinkTable.name);\n            this.datalinkTableForm.controls.rowsEndAt.setValue(datalinkTable.rowsEndAt);\n            this.datalinkTableForm.controls.rowsStartAt.setValue(datalinkTable.rowsStartAt);\n            this.datalinkTableForm.controls.rowsIncrement.setValue(datalinkTable.rowsIncrement);\n            this.datalinkTableForm.controls.sourceType.setValue(datalinkTable.sourceType);\n\n            this.updateIsVersioned();\n\n            let tableColumnsForm = <FormArray>this.datalinkTableForm.controls.dexihDatalinkColumns;\n            while (tableColumnsForm.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n\n            datalinkTable.dexihDatalinkColumns.sort((a, b) => a.position - b.position).filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.datalinkEditService.hubFormsService.datalinkTableColumn(tableColumnsForm.value, column));\n            });\n\n            this.subscribeDatalinkChanges();\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Refresh datalink columns');\n        }\n    }\n\n\n}\n","<dexih-widget-section title='Source Type' [showExpandButton]=\"true\">\n    <ng-template #header>\n        <dexih-button-edit class=\"mr-1\"\n            *ngIf=\"datalinkForm.controls.sourceDatalinkTable.value.sourceType == eSourceType.Table && datalinkForm.controls.sourceDatalinkTable.value.sourceTableKey\"\n            [routerLink]=\"['table-edit', datalinkForm.controls.sourceDatalinkTable.value.sourceTableKey]\"> Table\n        </dexih-button-edit>\n        <dexih-button-edit class=\"mr-1\"\n            *ngIf=\"datalinkForm.controls.sourceDatalinkTable.value.sourceType == eSourceType.Datalink && datalinkForm.controls.sourceDatalinkTable.value.sourceDatalinkKey\"\n            [routerLink]=\"['../../edit', datalinkForm.controls.sourceDatalinkTable.value.sourceDatalinkKey]\"> Datalink\n        </dexih-button-edit>\n        <dexih-button-preview (click)=\"previewData()\"></dexih-button-preview>\n    </ng-template>\n\n    <datalink-table *ngIf=\"datalinkForm\" [datalinkTableForm]=\"datalinkForm.controls.sourceDatalinkTable\">\n    </datalink-table>\n</dexih-widget-section>\n\n<dexih-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        [columns]=\"columns\" [dataObservable]=\"tableData\" (rowClick)=\"editColumn($event)\">\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <dexih-button-new (click)=\"newColumn()\" title=\"Create a new column\"></dexih-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n            <dexih-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\"></dexih-button-edit>\n        </ng-template>\n\n    </dexih-table>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache, sourceTypes, eMappingStatus, impactMappingStatuses } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { Observable, Subscription, BehaviorSubject , combineLatest} from 'rxjs';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DexihDatalinkTable, eSourceType, DexihDatalinkColumn, eSecurityFlag, eDeltaType } from '../../../../shared/shared.models';\nimport { AuthService } from '../../../../+auth/auth.service';\n\n@Component({\n    selector: 'dexih-datalink-edit-source-table-form',\n    templateUrl: './datalink-edit-source-table.component.html'\n})\nexport class DatalinkEditSourceTableComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _sourceSubscription: Subscription;\n\n    public sourceTables: DexihDatalinkTable[];\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eMappingStatus = eMappingStatus;\n\n    public eSourceType = eSourceType;\n    public sourceTypes = sourceTypes;\n\n    columns = [\n        { name: 'position', title: '#', format: '' },\n        { name: 'columnStatus', title: 'Impact', format: 'Html' },\n        { name: 'columnGroup', title: 'Group', format: '' },\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'logicalName', title: 'Logical', format: '' },\n        { name: 'dataType', title: 'Data Type', format: '' },\n        { name: 'deltaType', title: 'Delta Type', format: 'Enum', enum: eDeltaType },\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean' },\n        { name: 'isIncrementalUpdate', title: 'Incremental?', format: 'Boolean' },\n        { name: 'securityFlag', title: 'Security Flag', format: 'Enum', enum: eSecurityFlag },\n        { name: 'isInput', title: 'Input?', format: 'Boolean' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                if (this.datalinkForm) {\n                    this.updateData();\n\n                    if (this._sourceSubscription) { this._sourceSubscription.unsubscribe(); }\n                    this._sourceSubscription = this.datalinkForm.controls.sourceDatalinkTable.valueChanges.subscribe(() => {\n                        this.updateData();\n                    });\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Source Table');\n        }\n\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._sourceSubscription) { this._sourceSubscription.unsubscribe(); }\n    }\n\n    previewData() {\n        let sourceDatalinkTable = <DexihDatalinkTable> this.datalinkForm.controls.sourceDatalinkTable.value;\n\n        switch (sourceDatalinkTable.sourceType) {\n            case eSourceType.Table:\n                let sourceTableKey = sourceDatalinkTable.sourceTableKey;\n                this.router.navigate(['preview-table-data', 'table', sourceTableKey], { relativeTo: this.route });\n                break;\n            case eSourceType.Datalink:\n                let datalinkKey = sourceDatalinkTable.sourceDatalinkKey;\n                this.router.navigate(['preview-table-data', 'datalink', datalinkKey], { relativeTo: this.route });\n                break;\n            default:\n                this.authService.informationDialog('Cannot Preview', 'Previews are only available for tables and datalinks.');\n                break;\n        }\n    }\n\n    columnStatus(column: DexihDatalinkColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.SourceTable,\n            eObjectUse.Source,\n            this.datalinkForm.value,\n            column,\n            null,\n            null,\n            null,\n            eMappingStatus.PassThroughMap,\n            this.hubCache\n        );\n        const lineage = columnUsage.createDatalinkImpact(true);\n        const mappingStatus = impactMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `${mappingStatus.name}<i class=\"float-right ${mappingStatus.statusClass}\"></i>`\n        }\n    }\n\n    updateData() {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let columnData = [];\n\n        let columnsArray = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        columnsArray.controls.filter(c => c.value.isValid)\n            .sort((a, b) => a.value.position - b.value.position)\n            .forEach(columnForm => {\n                let column = <DexihDatalinkColumn> columnForm.value;\n                let newColumn = {\n                    key: column.key,\n                    position: column.position,\n                    columnStatus: this.columnStatus(column),\n                    columnGroup: column.columnGroup,\n                    name: column.name,\n                    dataType: this.hubCache.dataTypeToString(column),\n                    deltaType: column.deltaType,\n                    allowDbNull: column.allowDbNull,\n                    logicalName: column.logicalName,\n                    isIncrementalUpdate: column.isIncrementalUpdate,\n                    securityFlag: column.securityFlag,\n                    isInput: column.isInput\n                };\n\n            columnData.push(newColumn);\n        });\n\n        this._tableData.next(columnData);\n    }\n\n    deleteSelected(columns: Array<DexihDatalinkColumn>) {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let columnsArray = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        columns.forEach(column => {\n            let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n            columnsArray.removeAt(index);\n        });\n\n        this.updateData();\n    }\n\n    newColumn() {\n        this.router.navigate(['newcolumn'], { relativeTo: this.route.parent });\n    }\n\n    editColumn(column: DexihDatalinkColumn) {\n        this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n    }\n\n    columnSortChange(items: Array<DexihDatalinkColumn>) {\n        let sourceDatalinkTable = <FormGroup>this.datalinkForm.controls.sourceDatalinkTable;\n        let existingItems = <FormArray>sourceDatalinkTable.controls.dexihDatalinkColumns;\n\n        let position = 1;\n        items.forEach(item => {\n            let column = <FormGroup>existingItems.controls.find(c => c.value.key === item.key);\n            if (column) {\n                column.controls.position.setValue(position++);\n            }\n        });\n\n        this.updateData();\n    }\n}\n","\n<dexih-widget-section title=\"Target Load Rules\" [showExpandButton]=\"true\">\n    <form *ngIf=\"datalinkForm\" [formGroup]=\"datalinkForm\">\n        <fieldset>\n            <form-checkbox label=\"Datalink is a query and does not populate target tables.\"\n                formControlName=\"isQuery\" [errors]=\"editDatalinkService.hubFormsService.formErrors.isQuery\">\n            </form-checkbox>\n\n            <span *ngIf=\"!datalinkForm?.controls.isQuery.value\">\n                <section>\n                    <form-select label=\"Load Strategy\" formControlName=\"loadStrategy\" [items]=\"loadStrategies\" itemKey=\"key\"\n                        itemName=\"description\" iconClass=\"fa fa-database\" note='Specify processing method for target table(s).'\n                        [errors]=\"editDatalinkService.hubFormsService.formErrors.loadStrategy\">\n                    </form-select>\n                </section>\n                    <section>\n                    <form-select label=\"Update Strategy\" formControlName=\"updateStrategy\" [items]=\"updateStrategies\"\n                        itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-database\" note='Specify how records should be inserted/updated in the target table.'\n                        [errors]=\"editDatalinkService.hubFormsService.formErrors.updateStrategy\">\n                    </form-select>\n                </section>\n\n                <section>\n                    <form-select label=\"Audit Connection\" formControlName=\"auditConnectionKey\" [items]=\"this.managedConnections\"\n                        itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [errors]=\"editDatalinkService.hubFormsService.formErrors.auditConnectionKey\"\n                        note='Specify the connection where audit data (such as job results) should be written to.'>\n                        <connection-edit-button [key]=\"datalinkForm.controls.auditConnectionKey.value\"></connection-edit-button>\n                    </form-select>\n                </section>\n\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Maximum Rows Per Commit\" type=\"number\" formControlName=\"rowsPerCommit\"\n                            placeholder=\"Enter maximum rows per commit\" iconClass=\"fa fa-list\" [errors]=\"editDatalinkService.hubFormsService.formErrors.rowsPerCommit\">\n                        </form-input>\n                    </section>\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Maximum Rows Per Progress Update\" type=\"number\" formControlName=\"rowsPerProgress\"\n                            placeholder=\"Enter maximum rows per progress update\" iconClass=\"fa fa-list\" [errors]=\"editDatalinkService.hubFormsService.formErrors.rowsPerProgress\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <div class=\"form-row mb-2\">\n                    <form-checkbox label=\"Add a default row to the target table.  Edit the 'Default Value' of the target columns determine the value to populate.\"\n                        formControlName=\"addDefaultRow\" [errors]=\"editDatalinkService.hubFormsService.formErrors.addDefaultRow\">\n                    </form-checkbox>\n                </div>\n            </span>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n\n<dexih-widget-section title=\"Tables\" [showExpandButton]=\"true\" [padding]=\"false\" *ngIf=\"!datalinkForm?.controls.isQuery.value\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" [enableSort]=\"false\"\n        [enableFilter]=\"false\" (onSortChanged)=\"targetSortChange($event)\" [columns]=\"targetTableColumns\" [data]=\"targets\"\n        (rowClick)=\"editTable($event)\">\n\n        <ng-template #actions let-items=\"items\">\n            <dexih-button-new class=\"mr-1\" (click)=\"addTable()\"></dexih-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n            <dexih-button-edit class=\"mr-1\" (click)=\"editTable(item)\"></dexih-button-edit>\n        </ng-template>\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete class=\"mr-1\" (click)=\"deleteTables(items)\"></dexih-button-delete>\n        </ng-template>\n\n    </dexih-table>\n</dexih-widget-section>\n\n<router-outlet></router-outlet>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { HubCache, eMappingStatus, updateStrategies, loadStrategies, ConnectionTables } from '../../../hub.models';\nimport { eDeltaType, eUpdateStrategy, eTransformWriterMethod,\n    DexihConnection, DexihDatalinkTarget } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-target-form',\n    templateUrl: './datalink-edit-target.component.html'\n})\nexport class DatalinkEditTargetComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n    private _loadStrategySubscription: Subscription;\n\n    public eMappingStatus = eMappingStatus;\n    public eDeltaType = eDeltaType;\n\n    public tableFormService: HubFormsService;\n\n    public eUpdateStrategy = eUpdateStrategy;\n    public updateStrategies = updateStrategies;\n\n    public eTransformWriterMethod = eTransformWriterMethod;\n    public loadStrategies = loadStrategies;\n\n    public managedConnections: DexihConnection[];\n    public connectionTables: ConnectionTables[];\n\n    public showTableProperties = false;\n\n    public targets: DexihDatalinkTarget[] = [];\n\n    public logger = new LogFactory('datalink-edit-target-table');\n\n    public targetTableColumns = [\n        { name: 'table.name', title: 'Name', format: '' },\n        { name: 'table.logicalName', title: 'Logical', format: '' },\n        { name: 'nodeDatalinkColumn.logicalName', title: 'Node', format: ''}\n    ];\n\n    constructor(\n        private hubService: HubService,\n        authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        fb: FormBuilder) {\n\n        this.tableFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `ngOnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.managedConnections = this.hubCache.getManagedConnections();\n                    this.logger.LogC(() => `ngOnInit - completed`, eLogLevel.Trace);\n                }\n\n                this.updateTargets();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Target Table');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._loadStrategySubscription) { this._loadStrategySubscription.unsubscribe(); }\n    }\n\n    private updateTargets() {\n        this.targets = this.datalinkForm.controls.dexihDatalinkTargets.value.sort((a, b) => a.position - b.position);\n    }\n\n    editTable(target: DexihDatalinkTarget) {\n        this.router.navigate(['table-edit', target.key], { relativeTo: this.route });\n    }\n\n    addTable() {\n        this.router.navigate(['table-new'], { relativeTo: this.route });\n    }\n\n    deleteTables(targets: DexihDatalinkTarget[]) {\n        targets.forEach(target => {\n            this.editDatalinkService.deleteDatalinkTarget(this.datalinkForm, target.key);\n            this.updateTargets();\n        });\n    }\n\n    targetSortChange(targets: DexihDatalinkTarget[]) {\n        let position = 1;\n        targets.forEach(target => {\n            target.position = position++;\n        });\n        this.updateTargets();\n    }\n\n}\n","<div class=\"list-group-item p-0 rounded-0\" dragZone zone=\"input-column\" [data]=\"column\" zone=\"input-column\" >\n    <div class=\"d-flex flex-row\">\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n\n        <a class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\" style=\"overflow:hidden; text-overflow :ellipsis;\" \n         [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\" >\n            {{column.logicalName}}\n        </a>\n        <i class=\"input-group-text rounded-0  border-0 border-l1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <input-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></input-column>\n</div>","import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus,\n    MappingStatusInfo, impactMappingStatuses, lineageMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, InputOutputColumns, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, eTypeCode } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'input-column',\n    templateUrl: './input-column.component.html'\n})\nexport class InputColumnComponent implements OnInit, OnDestroy {\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n    eTypeCode = eTypeCode;\n\n    mappingStatusInfoImpact: MappingStatusInfo;\n    mappingStatusInfoLineage: MappingStatusInfo;\n\n    childColumns: DexihDatalinkColumn[];\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.datalinkForm = result[1];\n\n                let datalinkTransform = this.datalinkTransformForm.value;\n\n                let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n                    eDatalinkObjectType.Transform,\n                    eObjectUse.Target,\n                    this.datalinkForm.value,\n                    this.column,\n                    null,\n                    datalinkTransform,\n                    null,\n                    eMappingStatus.NotMapped,\n                    this.hubCache\n                );\n\n                let mappingStatusImpact = columnUsage.createDatalinkImpact(false);\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === mappingStatusImpact);\n\n                let mappingStatusLineage = columnUsage.createDatalinkLineage(true);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === mappingStatusLineage);\n\n                let io = new InputOutputColumns();\n                if (io.findColumn(this.column,\n                    datalinkTransform.nodeDatalinkColumn ? datalinkTransform.nodeDatalinkColumn.key : null)) {\n                    this.childColumns = this.column.childColumns;\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Input Column');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n}\n","<div *ngIf=\"datalinkTransformForm\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <span *ngFor=\"let table of inputTables; let tableIndex = index\">\n        <dexih-widget-section *ngIf=\"table.dexihDatalinkColumns.length > 0\" [title]=\"table.name\" [padding]=\"false\" [showExpandButton]=\"true\">\n            <div class=\"list-group\">\n                <input-column\n                    *ngFor=\"let column of table.dexihDatalinkColumns | fieldSort : 'position' | isValidFilter \"\n                    [datalinkTransformForm]='datalinkTransformForm' [column]='column'>\n                </input-column>\n            </div>\n        </dexih-widget-section>\n    </span>\n    <dexih-widget-section *ngFor=\"let columnGroup of columnGroups\" [title]=\"columnGroup.group\" [padding]=\"false\"  [showExpandButton]=\"true\" >\n        <div *ngFor=\"let column of columnGroup.columns | fieldSort : 'position' | isValidFilter; let i = index\">\n            <input-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'>\n            </input-column>\n        </div>\n    </dexih-widget-section>\n</div>\n","import { Component, Input, OnInit, OnDestroy, OnChanges } from '@angular/core';\nimport { Subscription} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\n@Component({\n\n    selector: 'input-columns',\n    templateUrl: './input-columns.component.html'\n})\nexport class InputColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n\n    private _inputColumnsSubscribe: Subscription;\n    columns: Array<DexihDatalinkColumn> = [];\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    constructor(private editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        if (this._inputColumnsSubscribe) { this._inputColumnsSubscribe.unsubscribe(); }\n\n        this.columnGroups = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n\n        this._inputColumnsSubscribe =  this.datalinkTransformForm.controls.runTime.valueChanges.subscribe(() => {\n            this.columnGroups = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._inputColumnsSubscribe) { this._inputColumnsSubscribe.unsubscribe(); }\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + column.dataType\" (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\"\n    (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>\n<!-- <div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <output-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></output-column>\n</div> -->","import { Component, Input, Output, OnInit, OnChanges, EventEmitter, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses, impactMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DexihDatalinkColumn, DexihTable, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n\n    selector: 'output-column',\n    templateUrl: './output-column.component.html'\n})\nexport class OutputColumnComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputOutputDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>();\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n\n    public mappingStatusInfoLineage: MappingStatusInfo;\n    public mappingStatusInfoImpact: MappingStatusInfo;\n\n    public mappingStatusLineage: eMappingStatus;\n\n    childColumns: DexihDatalinkColumn[];\n\n    public logger = new LogFactory('output-column.component');\n    public logCount = 0;\n\n    public eTypeCode = eTypeCode;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n              this.hubCache = result[0];\n              this.datalinkForm = result[1];\n\n              this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n\n            this.childColumns = this.column.childColumns;\n\n              this.refreshStatus();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Output Column');\n        }\n    }\n\n    ngOnChanges() {\n        this.refreshStatus();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    refreshStatus() {\n        if (this.datalinkForm) {\n            let columnUsage = new ColumnUsageNode(\n                eDatalinkObjectType.Transform,\n                eObjectUse.Target,\n                this.datalinkForm.value,\n                this.column,\n                null,\n                this.datalinkTransformForm.value,\n                null,\n                eMappingStatus.NotMapped,\n                this.hubCache\n                );\n\n                this.mappingStatusLineage = columnUsage.createDatalinkLineage(false);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === this.mappingStatusLineage);\n\n                let mappingStatusImpact = columnUsage.createDatalinkImpact(true);\n\n                if (this.mappingStatusLineage === eMappingStatus.NotMapped && mappingStatusImpact !== eMappingStatus.AutoGenerate) {\n                    mappingStatusImpact = eMappingStatus.NotMapped;\n                }\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === mappingStatusImpact);\n        }\n    }\n\n\n  editColumn() {\n      if (this.column.key && (this.mappingStatusLineage === eMappingStatus.Mapped\n        || this.mappingStatusLineage === eMappingStatus.MappedToNothing)) {\n        this.router.navigate(['column', this.column.key], { relativeTo: this.route.parent });\n      } else {\n          this.authService.informationDialog('Can not edit column',\n          // tslint:disable-next-line:max-line-length\n          'This column is not created by the current transform (i.e. a pass-through or target column).  To edit a column first create a mapping.')\n      }\n    }\n}\n","<div *ngIf=\"datalinkTransformForm\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <li *ngIf=\"allowMappingOutputs\" class=\"list-group-item p-1 dexih-overflow b-0\" style=\"height: 40px;\" title=\"drop to create new mapping...\" dropZone (dropData)=\"newOutputDrop($event)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\">\n        &nbsp;(Drop&nbsp;Column)\n    </li>\n    <dexih-widget-section *ngFor=\"let columnGroup of columnGroups\" [title]=\"columnGroup.group\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <div *ngFor=\"let column of columnGroup.columns | fieldSort : 'position' | isValidFilter; let i = index\" dropZone (dropData)=\"newInputOutputDrop($event, column)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\" >\n            <output-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'></output-column>\n        </div>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'output-columns',\n    templateUrl: './output-columns.component.html'\n})\nexport class OutputColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public allowMappingOutputs = true;\n\n    @Output() public inputOutputDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>();\n\n    private _outputColumnsSubscribe: Subscription;\n    columns: Array<DexihDatalinkColumn> = [];\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    constructor(\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n        if (this._outputColumnsSubscribe) { this._outputColumnsSubscribe.unsubscribe(); }\n        this.refreshColumns(this.datalinkTransformForm.controls.runTime.value.transformColumns);\n        this._outputColumnsSubscribe = this.datalinkTransformForm.controls.runTime.valueChanges.subscribe(() => {\n            this.refreshColumns(this.datalinkTransformForm.controls.runTime.value.transformColumns);\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._outputColumnsSubscribe) { this._outputColumnsSubscribe.unsubscribe(); }\n    }\n\n    refreshColumns(columns: DexihDatalinkColumn[]) {\n        let previousGroup: string = null;\n\n        let columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n        let cols: Array<DexihDatalinkColumn> = null;\n\n        columns\n            .filter(c => c.isValid)\n            .sort((a, b) => a.position - b.position)\n            .forEach(column => {\n            let group = column.columnGroup ? column.columnGroup : '(un-grouped)';\n            if (group !== previousGroup) {\n                if (cols) {\n                    columnGroups.push({group: previousGroup, columns: cols});\n                }\n                previousGroup = group;\n                cols = [];\n            }\n            cols.push(column);\n        });\n\n        if (cols && cols.length > 0) {\n            columnGroups.push({group: previousGroup, columns: cols});\n        }\n\n        this.columnGroups = columnGroups;\n    }\n\n    // triggered when a source column is dropped onto the output column\n    newOutputDrop(inputColumn: DexihDatalinkColumn) {\n        let outputColumn = this.columns.find(c => c.name === inputColumn.name);\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n\n    newInputOutputDrop(inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn) {\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\" (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n    </div>\n</div>\n<div class=\"list-group-item p-0 rounded-0\" *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Mapped\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\"\n    (click)=\"editColumn()\">\n    <div class=\"d-flex flex-row\">\n\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n        <span class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\">\n            {{column.logicalName}}\n        </span>\n    </div>\n</div>\n<!-- <div *ngIf=\"childColumns?.length > 0\" class=\"p-2\">\n    <output-column *ngFor=\"let childColumn of childColumns\" [column]=\"childColumn\" [datalinkTransformForm]=\"datalinkTransformForm\"></output-column>\n</div> -->","import { Component, Input, Output, OnInit, OnChanges, EventEmitter, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses } from '../../../hub.models';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DexihTableColumn, DexihTable, DexihDatalinkColumn, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n\n    selector: 'target-column',\n    templateUrl: './target-column.component.html'\n})\nexport class TargetColumnComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public column: DexihTableColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputOutputDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn}>();\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private datalinkForm: FormGroup;\n\n    eMappingStatus = eMappingStatus;\n\n    eTypeCode = eTypeCode;\n\n    public mappingStatusInfoLineage: MappingStatusInfo;\n    public mappingStatusInfoImpact: MappingStatusInfo;\n\n    public mappingStatusLineage: eMappingStatus;\n\n    childColumns: DexihTableColumn[];\n\n    public logger = new LogFactory('output-column.component');\n    public logCount = 0;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n              this.hubCache = result[0];\n              this.datalinkForm = result[1];\n\n              this.logger.LogC(() => `Subscription count: ${this.logCount++}`, eLogLevel.Trace);\n\n\n            this.childColumns = this.column.childColumns;\n\n              this.refreshStatus();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Output Column');\n        }\n    }\n\n    ngOnChanges() {\n        this.refreshStatus();\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    refreshStatus() {\n        if (this.datalinkForm) {\n            let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, null, this.column, null, null, eMappingStatus.NotMapped, this.hubCache);\n            this.mappingStatusLineage = columnUsage.createDatalinkLineage(true);\n            this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === this.mappingStatusLineage);\n        }\n    }\n\n\n  editColumn() {\n      if (this.column.key && (this.mappingStatusLineage === eMappingStatus.Mapped\n        || this.mappingStatusLineage === eMappingStatus.MappedToNothing)) {\n        this.router.navigate(['column', this.column.key], { relativeTo: this.route.parent });\n      } else {\n          this.authService.informationDialog('Can not edit column',\n          // tslint:disable-next-line:max-line-length\n          'This column is not created by the current transform (i.e. a pass-through or target column).  To edit a column first create a mapping.')\n      }\n    }\n}\n","<div *ngIf=\"targets\" cdkDropList #cdkDropList=\"cdkDropList\">\n    <dexih-widget-section *ngFor=\"let target of targets\" [title]=\"'Target (' + target.table.name + ')'\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <div *ngFor=\"let column of target.table.dexihTableColumns | fieldSort : 'position' | isValidFilter; let i = index\" dropZone (dropData)=\"newInputOutputDrop($event, column)\" [zone]=\"allowMappingOutputs ? 'input-column' : ''\" dropAllowedClass=\"drop-zone-green\" >\n            <target-column [datalinkTransformForm]='datalinkTransformForm' [column]='column'></target-column>\n        </div>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop';\nimport { DexihTable, DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'target-columns',\n    templateUrl: './target-columns.component.html'\n})\nexport class TargetColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public targets: DexihTable[];\n    @Input() public allowMappingOutputs = true;\n\n    @Output() public inputOutputDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn }>();\n\n    private _outputColumnsSubscribe: Subscription;\n\n    constructor(\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    ngOnDestroy() {\n    }\n\n    newInputOutputDrop(inputColumn: DexihDatalinkColumn, outputColumn: DexihDatalinkColumn) {\n        this.inputOutputDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: outputColumn\n        });\n    }\n}\n","<div class=\"list-group-item p-0 rounded-0\">\n    <div class=\"d-flex flex-row\">\n        <i class=\"input-group-text rounded-0  border-0 border-r1\" [ngClass]=\"mappingStatusInfoLineage.statusClass\" [title]=\"mappingStatusInfoLineage.name\"></i>\n\n        <a *ngIf=\"mappingStatusInfoLineage.key != eMappingStatus.Joined\" class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\"\n            style=\"overflow:hidden; text-overflow :ellipsis;\" \n            [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\">\n            {{column.logicalName}}\n        </a>\n        <a *ngIf=\"mappingStatusInfoLineage.key == eMappingStatus.Joined\" class=\"flex-fill input-group-text ellipsis-overflow rounded-0 border-0\"\n            style=\"overflow:hidden; text-overflow :ellipsis;\" [title]=\"column.logicalName + ' ' + eTypeCode[column.dataType]\">\n            {{column.logicalName}}\n        </a>\n        <i class=\"input-group-text rounded-0  border-0 border-l1\" [ngClass]=\"mappingStatusInfoImpact.statusClass\" [title]=\"mappingStatusInfoImpact.name\"></i>\n    </div>\n</div>","import { Component, Input, Output, OnInit, OnDestroy, EventEmitter } from '@angular/core';\nimport { HubCache, eMappingStatus, MappingStatusInfo, lineageMappingStatuses, impactMappingStatuses } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, DexihTable, eTypeCode } from '../../../../shared/shared.models';\n\n\n@Component({\n    selector: 'join-column',\n    templateUrl: './join-column.component.html'\n})\nexport class JoinColumnComponent implements OnInit, OnDestroy {\n\n    @Input() public column: DexihDatalinkColumn = null;\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public datalinkForm: FormGroup;\n    @Input() public inputTables: Array<DexihTable> = null;\n    @Output() public inputJoinDrop: EventEmitter<{inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn}>\n            = new EventEmitter<{inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn}>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n\n    eMappingStatus = eMappingStatus;\n    eTypeCode = eTypeCode;\n\n    columnLineageStatusIcon: string;\n    columnLineageStatusColor: string;\n\n    public mappingStatusInfoImpact: MappingStatusInfo;\n    public mappingStatusInfoLineage: MappingStatusInfo;\n\n    constructor(private hubService: HubService) {\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.isLoaded()) {\n                this.hubCache = hubCache;\n\n                let columnUsage = new ColumnUsageNode(\n                    eDatalinkObjectType.Transform,\n                    eObjectUse.Target,\n                    this.datalinkForm.value,\n                    this.column,\n                    null,\n                    this.datalinkTransformForm.value,\n                    null,\n                    eMappingStatus.NotMapped,\n                    this.hubCache\n                    );\n                let lineageMappingStatus = columnUsage.createDatalinkLineage(false);\n                this.mappingStatusInfoLineage = lineageMappingStatuses.find(c => c.key === lineageMappingStatus);\n\n                let impactMappingStatus = columnUsage.createDatalinkImpact(false);\n                this.mappingStatusInfoImpact = impactMappingStatuses.find(c => c.key === impactMappingStatus);\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n}\n","<div *ngIf=\"joinColumns\">\n    <dexih-widget-section [title]=\"joinTable?.name + '(' + eTransformType[this.datalinkTransformForm.value.transformType] + ')'\" [padding]=\"false\" [showExpandButton]=\"true\">\n        <join-column *ngFor=\"let column of joinColumns | fieldSort : 'position' | isValidFilter\"\n            [datalinkForm]='datalinkForm' [datalinkTransformForm]='datalinkTransformForm' [column]='column' dropZone\n            (dropData)=\"newInputJoinDrop($event, column)\" zone=\"input-column\" dropAllowedClass=\"drop-zone-green\">\n        </join-column>\n    </dexih-widget-section>\n</div>","import { Component, Input, Output, OnInit, OnChanges, OnDestroy, EventEmitter } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\nimport { DexihDatalinkColumn, eTransformType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'join-columns',\n    templateUrl: './join-columns.component.html'\n})\nexport class JoinColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() public datalinkTransformForm: FormGroup;\n\n    @Output() public inputJoinDrop: EventEmitter<{ inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn }>\n        = new EventEmitter<{ inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn }>();\n\n    private _subscription: Subscription;\n    private _changesSubscription: Subscription;\n\n    public joinTable;\n\n    public eTransformType = eTransformType;\n\n    public datalinkForm: FormGroup;\n\n    public joinColumns: Array<DexihDatalinkColumn>;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n    ) {\n    }\n\n    ngOnInit() {\n        try {\n\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.datalinkForm = result[1];\n\n                if (this.datalinkForm) {\n                    this.updateTableData();\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n        }\n    }\n\n    ngOnChanges() {\n        this.updateTableData();\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n        this._changesSubscription = this.datalinkTransformForm.controls.joinDatalinkTable.valueChanges.subscribe(() => {\n            this.updateTableData();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    }\n\n    updateTableData() {\n        if (this.datalinkTransformForm && this.datalinkTransformForm.controls.joinDatalinkTable.value) {\n            this.joinTable = this.datalinkTransformForm.controls.joinDatalinkTable.value;\n            if (this.joinTable) {\n                this.joinColumns = new Array<DexihDatalinkColumn>();\n                this.joinTable.dexihDatalinkColumns.forEach(column => {\n                    this.joinColumns.push(column)\n                });\n            } else {\n                this.joinColumns = null;\n            }\n        } else {\n            this.joinColumns = null;\n        }\n    }\n\n    newInputJoinDrop(inputColumn: DexihDatalinkColumn, joinColumn: DexihDatalinkColumn) {\n        this.inputJoinDrop.emit({inputColumn, joinColumn});\n    }\n}\n","<div class=\"container\">\n    <div *ngIf=\"!outputParameters\" class=\"row justify-content-start\">\n        <div class=\"col-auto\">\n            <h5>{{label}}</h5>\n            <div *ngIf=\"error\" class=\"text-danger\">\n                <i class=\"fa fa-exclamation-circle text-danger\" ></i>\n                {{error}}\n            </div>\n        </div>\n        <div *ngIf=\"source\" class=\"col-auto\"><i *ngIf=\"!source.valid\"\n                class=\"fa fa-exclamation-circle text-danger\" [title]=\"source.error\"></i>{{source.text}}</div>\n        <div *ngIf=\"target\" class=\"col-auto\">\n            <i *ngIf=\"source && !compare\" class=\"fa fa-arrow-right mr-2\"></i>\n            <i *ngIf=\"!target.valid\" class=\"fa fa-exclamation-circle text-danger\" [title]=\"target.error\"></i>\n            <span class=\"mr-2\" *ngIf=\"compare\">{{compare}}</span>\n            {{target.text}}\n        </div>\n    </div>\n\n    <ng-template [ngIf]=\"outputParameters\">\n        <div class=\"row\">\n            <div class=\"col\">\n                <h5>{{label}}</h5>\n            </div>\n        </div>\n\n        <div *ngIf=\"source\"><i *ngIf=\"!source.valid\"\n            class=\"fa fa-exclamation-circle text-danger\" [title]=\"source.error\"></i>Source = {{source.text}}\n        </div>\n\n        <ng-template [ngIf]=\"inputParameters?.length > 0\">\n            <div class=\"row pt-2\">\n                <div class=\"col\">\n                    <h5>Inputs</h5>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Parameter</div>\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Column / Value</div>\n            </div>\n            <ng-template ngFor let-parameter [ngForOf]=\"inputParameters\">\n                <div *ngFor=\"let value of parameter.values; let i = index;\" class=\"row\">\n                    <div class=\"col border bg-secondary text-white text-truncate\">\n                        <div *ngIf=\"i == 0\">{{ parameter.name}}</div>\n                    </div>\n                    <div class=\"col border border text-white bg-secondary text-truncate\" [title]=\"value.error\">\n                        <i *ngIf=\"!value.valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{(parameter.values.length > 1 ? '[' + i + '] ' : '') + value.text}}\n                    </div>\n                </div>\n            </ng-template>\n        </ng-template>\n\n        <ng-template [ngIf]=\"mapParameters\">\n            <div *ngFor=\"let mapParameter of mapParameters\">\n                <div class=\"row pt-2\">\n                    <div class=\"col text-truncate\">\n                        <h5>{{mapParameter.name}}</h5>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <div *ngFor=\"let parameter of mapParameter.parameters\"\n                        class=\"col border bg-primary text-white font-weight-bold text-truncate\">{{parameter.name}}</div>\n                </div>\n\n                <div *ngFor=\"let pValues of mapParameter.parameters[0].values; let i = index;\" class=\"row\">\n                    <div *ngFor=\"let parameter of mapParameter.parameters\"\n                        class=\"col border bg-secondary text-white text-truncate\" [title]=\"parameter.values[i].error\">\n                        <i *ngIf=\"!parameter.values[i].valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{parameter.values[i].text}}\n                    </div>\n                </div>\n            </div>\n        </ng-template>\n        <ng-template [ngIf]=\"outputParameters?.length > 0\">\n            <div class=\"row  pt-2\">\n                <div class=\"col\">\n                    <h5>Outputs</h5>\n                </div>\n            </div>\n            <div class=\"row\">\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Parameter</div>\n                <div class=\"col border bg-primary text-white font-weight-bold text-truncate\">Column / Value</div>\n            </div>\n\n            <ng-template ngFor let-parameter [ngForOf]=\"outputParameters\">\n                <div *ngFor=\"let value of parameter.values; let i = index;\" class=\"row\">\n                    <div class=\"col border bg-secondary text-white text-truncate\">\n                        <div *ngIf=\"i == 0\">{{parameter.name}}</div>\n                    </div>\n                    <div class=\"col border border bg-secondary text-white text-truncate\" [title]=\"value.error\">\n                        <i *ngIf=\"!value.valid\" class=\"fa fa-exclamation-circle text-danger\" ></i>\n                        {{(parameter.values.length > 1 ? '[' + i + '] ' : '') + value.text}}\n                    </div>\n                </div>\n            </ng-template>\n        </ng-template>\n    </ng-template>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport {HubCache, transformItemTypes } from '../../../hub.models';\nimport { HubService } from '../../..';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { compare } from '../../../hub.query.models';\nimport { DexihDatalinkTransform, DexihDatalinkTransformItem, eTransformItemType, eCompare,\n    DexihDatalinkColumn, FunctionReference, eParameterDirection, eAggregate, eSortDirection, eTypeCode } from '../../../../shared/shared.models';\n\nexport class ValidValue {\n    public valid: boolean;\n    public text: string;\n    public error: string;\n}\n\nexport class ValidParameter {\n    public values: ValidValue[];\n    public name: string;\n}\n\nexport class ValidMapping {\n    public name: string;\n    public parameters: ValidParameter[];\n}\n\n@Component({\n    selector: 'mapping-item',\n    templateUrl: 'mapping-item.component.html'\n})\n\nexport class MappingItemComponent implements OnInit {\n    @Input() transform: DexihDatalinkTransform;\n    @Input() transformItem: DexihDatalinkTransformItem;\n    @Input() allowCondition: boolean;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n\n    public label: string;\n    public error: string;\n\n    public source: ValidValue;\n    public target: ValidValue;\n    public compare: string;\n    public inputParameters: ValidParameter[];\n    public outputParameters: ValidParameter[];\n\n    public mapParameters: ValidMapping[];\n\n    constructor(\n        private hubService: HubService) { }\n\n    ngOnInit() {\n        try {\n\n            if (this._subscription) { this._subscription.unsubscribe(); }\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                this.hubCache = result[0];\n                this.updateMapping();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings');\n        }\n    }\n\n    async updateMapping() {\n        let item = this.transformItem;\n        let itemType = transformItemTypes.find(c => c.key === item.transformItemType);\n\n        switch (item.transformItemType) {\n            case eTransformItemType.BuiltInFunction:\n                if (item.functionClassName) {\n                    let func = await this.hubService.GetFunctionReference(item);\n                    if (func) {\n                        this.label = func.name;\n                        this.addBuiltInFunctionParameters(func);\n                    } else {\n                        this.error = `Error, function ${item.functionClassName}.${item.functionMethodName} not found.`;\n                    }\n                } else if (item.customFunctionKey) {\n                    let func = this.hubCache.hub.dexihCustomFunctions.find(c => c.key === item.customFunctionKey);\n                    if (func) {\n                        this.label = func.name;\n                        this.addCustomFunctionParameters();\n                    } else {\n                        this.error = 'Error, function not found.';\n                    }\n                } else {\n                    this.error = 'Error, function not found';\n                }\n                break;\n            case eTransformItemType.CustomFunction:\n                this.addCustomFunctionParameters();\n                break;\n            case eTransformItemType.AggregatePair:\n                this.label = eAggregate[item.aggregate];\n                break;\n            case eTransformItemType.Sort:\n                this.label = eSortDirection[item.sortDirection];\n                break;\n            case eTransformItemType.UnGroup:\n                this.label = 'UnGroup'\n                this.addUnGroupParameters();\n                break;\n            default:\n                this.label = itemType.name;\n                break;\n        }\n\n        if (itemType.useSource) { this.source = this.columnOrValue(null, item.sourceDatalinkColumn, item.sourceValue); }\n        if (itemType.useTarget) { this.target = this.describeDatalinkColumn(null, item.targetDatalinkColumn); }\n        if (itemType.useJoin) { this.target = this.describeDatalinkColumn(null, item.joinDatalinkColumn); }\n        if (itemType.useFilter) { this.target = this.columnOrValue(null, item.filterDatalinkColumn, item.filterValue)};\n\n        if (itemType.useFilter || itemType.useJoin) {\n            let filterCompare = item.filterCompare;\n            if (filterCompare === null) { filterCompare = eCompare.IsEqual };\n            this.compare = compare.find(c => c.key === filterCompare).name;\n        } else {\n            this.compare = null;\n        }\n    }\n\n    private columnOrValue(expectedDataType: eTypeCode, column: DexihDatalinkColumn, value: string): ValidValue {\n        if (column) {\n            return this.describeDatalinkColumn(expectedDataType, column);\n        } else {\n            return {text: this.describeStaticValue(value), valid: true, error: ''};\n        }\n    }\n\n    // concatenates the arrays together.\n    // node: .concat will append null arrays, where this ignores null arrays.\n    private concat<T>(...args: T[][]): T[] {\n        let array: T[] = [];\n        args.forEach(arg => {\n            if ( arg ) {\n                array = array.concat(arg);\n            }\n        });\n        return array;\n    }\n\n    private addBuiltInFunctionParameters(func: FunctionReference) {\n        let functionInputs = this.concat(func.inputParameters, func.resultInputParameters);\n        let functionOutputs = this.concat(func.outputParameters, func.returnParameters, func.resultOutputParameters,\n            func.resultReturnParameters);\n\n        let inputParams = this.transformItem.dexihFunctionParameters\n            .filter(c =>\n                c.direction === eParameterDirection.Input ||\n                c.direction === eParameterDirection.ResultInput ||\n                c.direction === eParameterDirection.Join);\n\n        this.inputParameters = functionInputs.filter(c => c && !c.linkedName).map<ValidParameter>(param => {\n            let p = inputParams.find(c => c.name === param.parameterName);\n            if (p) {\n                if (p.rank === 0) {\n                    let value = this.columnOrValue(p.dataType, p.datalinkColumn, p.value);\n                    return {name: this.describeParameterName(p), values: [value] };\n                } else {\n                    let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                        return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                    });\n                    return {name: this.describeParameterName(p), values: values};\n                }\n            } else {\n                return {name: this.describeParameterName(p), values: [{valid: false, error: 'Not Mapped', text: ''}]  };\n            }\n        });\n\n        let outputParams = this.transformItem.dexihFunctionParameters\n            .filter(\n                c => HubCache.parameterIsOutput(c));\n\n        this.outputParameters = functionOutputs.filter(c => c &&  !c.linkedName).map<ValidParameter>(param => {\n            let p = outputParams.find(c => c.name === param.parameterName);\n            if (p) {\n                if (this.allowCondition &&\n                    (p.direction === eParameterDirection.ReturnValue || p.direction === eParameterDirection.ResultReturnValue)) {\n                    return null;\n                }\n                if (p.rank === 0 || p.datalinkColumn !== null) {\n                    let value = this.describeDatalinkColumn(p.dataType, p.datalinkColumn);\n                    return {name: this.describeParameterName(p), values: [value]};\n                } else {\n                    let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                        return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                    });\n                    return {name: this.describeParameterName(p), values: values};\n                }\n            } else {\n                // return {name: param.name, values: [{valid: false, text: 'Not mapped'}]  };\n                return null;\n            }\n        }).filter(c => c !== null);\n\n        let linkedNames = Array.from(new Set(this.concat(functionInputs, functionOutputs).map(c => c &&  c.linkedName).filter(c => c)));\n        this.mapParameters = linkedNames.map(name => {\n            let parameters: ValidParameter[] = functionInputs.filter(c => c.linkedName === name).map(param => {\n                let p = inputParams.find(c => c.name === param.parameterName);\n                let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                    return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                });\n                return {name: this.describeParameterName(param), values: values};\n            });\n\n            let parameters2: ValidParameter[] = functionOutputs.filter(c => c.linkedName === name).map(param => {\n                let p = outputParams.find(c => c.name === param.parameterName);\n                let values = p.arrayParameters.sort( (a, b) => a.position - b.position).map(ap => {\n                    return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                });\n                return {name: this.describeParameterName(param), values: values};\n            });\n\n            return {name: name, parameters: this.concat(parameters, parameters2)};\n        });\n    }\n\n    private addCustomFunctionParameters() {\n\n        let inputParams = this.transformItem.dexihFunctionParameters\n            .filter(c =>\n                c.direction === eParameterDirection.Input ||\n                c.direction === eParameterDirection.ResultInput ||\n                c.direction === eParameterDirection.Join);\n\n        this.inputParameters = inputParams.map<ValidParameter>(p => {\n            if (p.rank === 0) {\n                let value = this.columnOrValue(p.dataType, p.datalinkColumn, p.value);\n                return { name: this.describeParameterName(p), values: [value] };\n            } else {\n                let values = p.arrayParameters.sort((a, b) => a.position - b.position).map(ap => {\n                    return this.columnOrValue(ap.dataType, ap.datalinkColumn, ap.value);\n                });\n                return { name: this.describeParameterName(p), values: values };\n            }\n        });\n\n        let outputParams = this.transformItem.dexihFunctionParameters\n            .filter(c => HubCache.parameterIsOutput(c));\n\n        this.outputParameters = outputParams.map<ValidParameter>(p => {\n            if (p.rank === 0) {\n                let value = this.describeDatalinkColumn(p.dataType, p.datalinkColumn);\n                return { name: this.describeParameterName(p), values: [value] };\n            } else {\n                let values = p.arrayParameters.sort((a, b) => a.position - b.position).map(ap => {\n                    return this.describeDatalinkColumn(ap.dataType, ap.datalinkColumn);\n                });\n                return { name: this.describeParameterName(p), values: values };\n            }\n        });\n    }\n\n    private addUnGroupParameters() {\n\n        let parameters = this.transformItem.dexihFunctionParameters;\n\n        let runTime = this.transform['runTime'];\n        let inputColumns = runTime.inputColumns;\n\n        let sourceColumn = <DexihDatalinkColumn> inputColumns.find(c => c.key === this.transformItem.sourceDatalinkColumn.key);\n\n        if (sourceColumn) {\n            this.outputParameters = parameters.map<ValidParameter>(p => {\n                if (p.datalinkColumn) {\n                    let find = sourceColumn.childColumns.find(c => c.key === p.datalinkColumn.key);\n                    if (find) {\n                        return {name: this.describeParameterName(p), values: [{valid: true, error: '', text: p.datalinkColumn.name}]};\n                    }\n                    return {name: this.describeParameterName(p),\n                        values: [{valid: false, error: '(Invalid column) ', text: p.datalinkColumn.name}]};\n                } else {\n                    return {name: this.describeParameterName(p), values: [{valid: false, error: '(No column)', text: ''}]};\n                }\n            });\n        }\n    }\n\n    private describeParameterName(param): string {\n        return param.name + ' (' + eTypeCode[param.dataType] + ')';\n    }\n\n    private describeDatalinkColumn(expectedDataType: eTypeCode, value: DexihDatalinkColumn): ValidValue {\n        if (!value) {\n            return { error: '(not mapped)', text: '', valid: false };\n        }\n\n        let runTime = this.transform['runTime'];\n        let inputColumns = runTime.inputColumns;\n        let nodeDatalinkColumn = this.transform.nodeDatalinkColumn ? this.transform.nodeDatalinkColumn : null;\n        let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n\n        let returnValue: string = null;\n\n        let io = new InputOutputColumns();\n        let col = io.findValidColumn(value, nodeDatalinkColumnKey, inputColumns);\n        if (col) {\n            returnValue = (value.columnGroup ? ('(' + value.columnGroup + ')') : '') + value.logicalName;\n        }\n\n        if (!returnValue) {\n            runTime.transformColumns.forEach(column => {\n                if (!returnValue && column.key === value.key) {\n                    returnValue = value.logicalName;\n                }\n            });\n        }\n\n        if (!returnValue && this.transform.joinDatalinkTable) {\n            let joinTable = this.transform.joinDatalinkTable;\n            joinTable.dexihDatalinkColumns.forEach(column => {\n                if (!returnValue && column.key === value.key) {\n                    returnValue = '(' + joinTable.name + ') ' + value.logicalName;\n                }\n            });\n        }\n\n        if (returnValue) {\n            if (expectedDataType == null || value.dataType === expectedDataType) {\n                return { text: returnValue, valid: true, error: '' }\n            } else {\n                return { text: returnValue, error: '(inconsistent datatype ' + eTypeCode[value.dataType] + ')', valid: false }\n            }\n        } else {\n            return { text: value.logicalName, error: '(Invalid column) ', valid: false }\n        }\n    }\n\n    private describeStaticValue(value: string): string {\n        if (value === ' ') {\n            return '<space>';\n        }\n        if (!value) {\n            return '<null>';\n        }\n        return '\"' + value + '\"';\n    }\n}\n","<dexih-widget [title]=\"title\" [scrollable]=\"true\" [showExpandButton]=\"true\">\n\n    <dexih-table [enableMultiSelect]=\"true\" [enableManualSort]=\"true\" [columns]=\"columns\" [dataObservable]=\"tableData\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n        (rowClick)=\"editMapping($event)\" (onSortChanged)=\"datalinkItemSortChange($event)\"\n        tableClass=\"table table-striped table-hover m-0\" #mappingTable dropZone (dropData)=\"newOutputDrop($event)\"\n        zone=\"input-column\" dropAllowedClass=\"drop-zone-green\" actionHeading=\"Mappings\">\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-datalinkTransformItem=\"item\">\n            <dexih-button-edit class=\"mr-1 \" (click)=\"editMapping(datalinkTransformItem)\" title=\"Edit this mapping\">\n            </dexih-button-edit>\n        </ng-template>\n\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete class=\"mr-1 \" (click)=\"deleteSelected(items)\"\n                title=\"Delete selected mapping functions\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #rowAction let-item=\"item\">\n            <mapping-item (click)=\"editMapping(item)\" [transform]=\"datalinkTransformForm.value\"\n                [transformItem]=\"item.datalinkTransformItem\" [allowCondition]=\"allowCondition\"></mapping-item>\n        </ng-template>\n\n        <ng-template #actions let-items=\"items\">\n            <ng-template [ngIf]=\"allowMapping\">\n                <dexih-button-splitdropdown class=\"mr-1\" (buttonClick)=\"newMapping(eTransformItemType.ColumnPair)\"\n                    buttonClass=\"btn-primary\" iconClass=\"fa fa-map\"\n                    title=\"Create a new mapping, or drop a column to create new mapping.\" text='Mapping'>\n                    <li><a class=\"dropdown-item\"  title=\"Add all\" (click)=\"addAll()\">Add all input columns</a></li>\n                    <li *ngFor=\"let columnGroup of columnGroups\"><a class=\"dropdown-item\"  [title]=\"'Add all ' + columnGroup.group\" (click)=\"addGroup(columnGroup)\">Add all {{columnGroup.group}}</a></li>\n                </dexih-button-splitdropdown>\n            </ng-template>\n            <ng-template [ngIf]=\"allowCondition && !allowValidation\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.FilterPair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-filter\" title=\"Create a simple filter\">Filter\n                </dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowAggregate\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.AggregatePair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-cubes\" title=\"Create a simple aggregate\">\n                    Aggregate</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowStandard || allowAggregate || allowCondition || allowRow || allowValidation\">\n                <dexih-button [routerLink]=\"['standard-function-edit', functionType]\"\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-dollar\" title=\"Create a new standard function\">\n                    Standard</dexih-button>\n                <dexih-button [routerLink]=\"['custom-function-edit', functionType]\" buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-code\" title=\"Create a new custom function\">Custom</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowRow\">\n                <dexih-button routerLink='unGroup-edit' buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-map\"\n                    title=\"Un-Group a Node\">Un-Group</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowJoin\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.JoinPair}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-link\" title=\"Create a new join\">Join\n                </dexih-button>\n                <dexih-button [routerLink]=\"['standard-function-edit', functionType]\"\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-dollar\" title=\"Create a new standard filter\">\n                    Filter</dexih-button>\n                <dexih-button [routerLink]=\"['custom-function-edit', functionType]\" buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-code\" title=\"Create a new custom filter\">Custom Filter</dexih-button>\n\n                    <dexih-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-calendar\"\n                    title=\"Add a joins between the column and the valid from/to\" text='Valid From/To'>\n                    <li *ngFor=\"let column of inputDateColumns\"><a class=\"dropdown-item\"  [title]=\"column.name\" (click)=\"addValidFromTo(column)\">{{column.name}}</a></li>\n                </dexih-button-dropdown>\n            </ng-template>\n            <ng-template [ngIf]=\"allowSort\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.Sort}}' buttonClass=\"btn-primary mr-1 \"\n                    iconClass=\"fa fa-sort-alpha-asc\" title=\"New Sort\">Sort</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowGroup\">\n                <dexih-button routerLink='mapping-edit/{{eTransformItemType.Column}}'\n                    buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-list\" title=\"New Group\">Group</dexih-button>\n            </ng-template>\n            <ng-template [ngIf]=\"allowJoinNode\">\n                <dexih-button (click)=\"createJoinNode()\" buttonClass=\"btn-primary mr-1 \" iconClass=\"fa fa-list\"\n                    title=\"Join Node\">Node</dexih-button>\n            </ng-template>\n        </ng-template>\n    </dexih-table>\n</dexih-widget>","import { Component, Input, Output, ViewChild, OnInit, OnChanges, OnDestroy, EventEmitter, ElementRef } from '@angular/core';\nimport { Observable, BehaviorSubject, Subscription, combineLatest } from 'rxjs';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eTransformType, eTransformItemType, DexihDatalinkTransformItem,\n    DexihDatalinkTransform, DexihDatalinkColumn, eTypeCode, DexihDatalinkTable, eDeltaType, eCleanActionItems, eCompare } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'mapping',\n    templateUrl: './mapping.component.html'\n})\nexport class MappingComponent implements OnInit, OnDestroy, OnChanges {\n    @Input() public datalinkTransformForm: FormGroup;\n    @Input() public allowStandard = false;\n    @Input() public allowMapping = false;\n    @Input() public allowAggregate = false;\n    @Input() public allowRow = false;\n    @Input() public allowCondition = false;\n    @Input() public allowValidation = false;\n    @Input() public allowOutput = false;\n    @Input() public allowGroup = false;\n    @Input() public allowJoin = false;\n    @Input() public allowSort = false;\n    @Input() public allowSeries = false;\n    @Input() public allowJoinNode = false;\n    @Input() public title: string;\n\n    @Output() public addMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public removeMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public updateMapping: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public hasChanged: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public onColumnDrop: EventEmitter<any> = new EventEmitter<any>();\n\n    @ViewChild('mappingTable', { static: true }) public mappingTable: ElementRef;\n\n    private _subscription: Subscription;\n    private _changesSubscription: Subscription;\n\n    columns: Array<any>;\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    public functionType: eFunctionType;\n    public transformType: eTransformType;\n    public eTransformType = eTransformType;\n    public eTransformItemType = eTransformItemType;\n\n    columnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n    inputDateColumns: DexihDatalinkColumn[];\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private router: Router,\n        private route: ActivatedRoute\n    ) {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n    }\n\n    ngOnChanges() {\n        try {\n            // this.columns = [{ name: 'function', title: 'Mapping', format: 'Md', class: 'functionClass' }];\n            this.columns = [];\n\n            // if (!this.allowSort) {\n            //     this.columns.push({ name: 'function', title: 'Function Name', format: '', class: 'functionClass' });\n            // }\n\n            // this.columns.push({ name: 'input', title: 'Input(s)', format: 'Md', class: 'inputClass' });\n\n            // if (this.allowOutput || this.allowJoinNode) {\n            //     this.columns.push({ name: 'output', title: 'Output(s)', format: 'Md', class: 'outputClass' });\n            // }\n\n            // if (this.allowSort) {\n            //     this.columns.push({ name: 'sortDirection', title: 'Direction', format: '' });\n            // }\n\n            if (this._subscription) { this._subscription.unsubscribe(); }\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(() => {\n\n                this.functionType = this.editDatalinkService.getFunctionType(this.datalinkTransformForm.value);\n                this.transformType = this.datalinkTransformForm.value.transformType;\n\n                this.updateTableData();\n\n                if (this._changesSubscription) { this._changesSubscription.unsubscribe(); }\n                this._changesSubscription = this.datalinkTransformForm.valueChanges.subscribe(() => this.updateTableData());\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings');\n        }\n    }\n\n    updateTableData() {\n        try {\n            if (this.datalinkTransformForm) {\n                let runTime = this.datalinkTransformForm.controls['runTime'].value;\n                let inputColumns = <DexihDatalinkColumn[]> runTime.inputColumns;\n                this.inputDateColumns = inputColumns.filter(c => c.dataType === eTypeCode.DateTime || c.dataType === eTypeCode.Date);\n                this.columnGroups = this.editDatalinkService.getColumnGroups(inputColumns);\n\n                let data = [];\n                let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n                let filteredItems: Array<any> = [];\n\n                if (this.allowJoinNode) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.JoinNode));\n                }\n\n                if (this.allowGroup) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.Column));\n                }\n\n                if (this.allowStandard || this.allowJoin) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.BuiltInFunction\n                            || d.value.transformItemType === eTransformItemType.CustomFunction));\n                }\n\n                if (this.allowAggregate) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.AggregatePair));\n                }\n\n                if (this.allowMapping) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.ColumnPair));\n                }\n\n                if (this.allowCondition) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.FilterPair));\n                }\n\n                if (this.allowJoin) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.JoinPair));\n                }\n\n                if (this.allowRow) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.UnGroup));\n                }\n\n                if (this.allowSort) {\n                    filteredItems = filteredItems.concat(items.controls\n                        .filter(d => d.value.transformItemType === eTransformItemType.Sort));\n                }\n\n                filteredItems.sort((a, b) => a.value.position - b.value.position).forEach(item => {\n                    const transformItem: DexihDatalinkTransformItem = item.value;\n                    let functionItem = {\n                        datalinkTransformItem: transformItem,\n                        key: transformItem.key,\n                    }\n\n                    data.push(functionItem);\n                });\n\n                this._tableData.next(data);\n            }\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Mappings, update data');\n        }\n\n    }\n\n    private getItemFormGroup(datalinkTransformItemKey: number): FormGroup {\n        let items = <FormArray>this.datalinkTransformForm.controls['dexihDatalinkTransformItems'];\n        let item = <FormGroup>items.controls.find(c => c.value.key === datalinkTransformItemKey);\n        return item;\n    }\n\n    editMapping(item: DexihDatalinkTransformItem) {\n        let key = item.key;\n        let itemForm = this.getItemFormGroup(key);\n        let transformItemType = itemForm.value.transformItemType;\n\n        switch (transformItemType) {\n            case eTransformItemType.BuiltInFunction:\n                this.router.navigate(\n                    ['standard-function-edit', this.functionType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.CustomFunction:\n                this.router.navigate(\n                    ['custom-function-edit', this.functionType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.Column:\n            case eTransformItemType.JoinNode:\n            case eTransformItemType.GroupNode:\n            case eTransformItemType.ColumnPair:\n            case eTransformItemType.Sort:\n            case eTransformItemType.JoinPair:\n            case eTransformItemType.FilterPair:\n            case eTransformItemType.AggregatePair:\n            case eTransformItemType.Series:\n                this.router.navigate(['mapping-edit', transformItemType, key],\n                    { relativeTo: this.route.parent });\n                break;\n            case eTransformItemType.UnGroup:\n                this.router.navigate(['unGroup-edit', key], { relativeTo: this.route.parent });\n                break;\n}\n    }\n\n    deleteMapping(item: DexihDatalinkTransformItem) {\n        this.deleteSelected([item]);\n    }\n\n    deleteSelected(items: Array<DexihDatalinkTransformItem>) {\n        items.forEach(item => {\n            let key = item.key;\n            let itemForm = this.getItemFormGroup(key);\n            this.editDatalinkService.deleteDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        });\n    }\n\n    // if a sort event has triggered from the table, then reset the positions of the datalink transform items.\n    datalinkItemSortChange(items: Array<DexihDatalinkTransformItem>) {\n        items.forEach((item, index) => {\n            let existingItems = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            let datalinkTransformItem = <FormGroup>existingItems.controls\n                .find(c => c.value.key === item.key);\n            if (datalinkTransformItem) {\n                datalinkTransformItem.controls.position.setValue(index);\n            }\n        });\n    }\n\n    // triggered when a source column is dropped onto the output column\n    newOutputDrop(inputColumn: DexihDatalinkColumn) {\n        this.onColumnDrop.emit({\n            inputColumn: inputColumn,\n            outputColumn: null\n        });\n    }\n\n    createJoinNode() {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        if (items.controls.find(d => d.value.transformItemType === eTransformItemType.JoinNode)) {\n            this.authService.informationDialog('Can not add node',  'Only one join node can be added.');\n            return;\n        }\n\n        let joinTable = this.datalinkTransformForm.value.joinDatalinkTable;\n\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n        outputColumn.position = 0;\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        outputColumn.name = joinTable.name;\n        outputColumn.logicalName = joinTable.name;\n        let io = new InputOutputColumns();\n        let columns = joinTable.dexihDatalinkColumns.map((col, index) => {\n            let childColumn = io.copyDatalinkColumn(col, index, 'Join Node');\n            childColumn.key = this.hubService.getHubCache().getNextSequence();\n            childColumn.datalinkTableKey = null;\n            return childColumn;\n        });\n        outputColumn.childColumns = columns;\n        outputColumn.dataType = eTypeCode.Node;\n\n        item.position = -1;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.targetDatalinkColumn = outputColumn;\n        item.isValid = true;\n        item.transformItemType = eTransformItemType.JoinNode;\n\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    createGroupNode() {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        if (items.controls.find(d => d.value.transformItemType === eTransformItemType.GroupNode)) {\n            this.authService.informationDialog('Can not add node',  'Only one group node can be added.');\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n        outputColumn.position = 0;\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        outputColumn.name = 'Group';\n        outputColumn.logicalName = 'Group';\n        outputColumn.dataType = eTypeCode.Node;\n\n        item.position = -1;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.targetDatalinkColumn = outputColumn;\n        item.isValid = true;\n        item.transformItemType = eTransformItemType.GroupNode;\n\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    newMapping(itemType: eTransformItemType) {\n        this.router.navigate(['mapping-edit', itemType], { relativeTo: this.route });\n    }\n\n    addAll() {\n        let runTime = this.datalinkTransformForm.controls['runTime'].value;\n        let inputColumns = <DexihDatalinkColumn[]> runTime.inputColumns;\n\n        inputColumns.forEach(inputColumn => {\n            this.createMapping(inputColumn);\n        });\n    }\n\n    addGroup(group: {group: string, columns: Array<DexihDatalinkColumn>}) {\n        group.columns.forEach(inputColumn => {\n            this.createMapping(inputColumn);\n        });\n    }\n\n    private createMapping(inputColumn: DexihDatalinkColumn) {\n        let runTime = this.datalinkTransformForm.controls['runTime'].value;\n        let outputColumns = <DexihDatalinkColumn[]> runTime.outputColumns;\n\n        if ( outputColumns.findIndex(c => c.name === inputColumn.name) >= 0) {\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        let io = new InputOutputColumns();\n        let outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n        outputColumn.key = this.hubService.getHubCache().getNextSequence();\n        if (outputColumn.childColumns) {\n            outputColumn.childColumns.forEach(col => {\n                col.key = this.hubService.getHubCache().getNextSequence();\n            });\n        }\n        outputColumn.datalinkTableKey = null;\n        item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        item.sourceDatalinkColumn = inputColumn;\n        item.targetDatalinkColumn = outputColumn;\n        item.transformItemType = eTransformItemType.ColumnPair;\n        item.isValid = true;\n        let itemForm = this.editDatalinkService.hubFormsService\n            .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n    }\n\n    // joins the column to the valid from/to columns\n    addValidFromTo(column: DexihDatalinkColumn) {\n        let joinTable = <DexihDatalinkTable> this.datalinkTransformForm.value.joinDatalinkTable;\n        let validFrom = joinTable.dexihDatalinkColumns.find(c => c.deltaType === eDeltaType.ValidFromDate);\n        let validTo = joinTable.dexihDatalinkColumns.find(c => c.deltaType === eDeltaType.ValidToDate);\n        if ( !validFrom || !validTo ) {\n            this.authService.informationDialog('No valid from',  'The join table does not contain a columns with a valid from/to delta type.');\n            return;\n        }\n\n        let item = new DexihDatalinkTransformItem();\n        item.sourceDatalinkColumn = column;\n        item.joinDatalinkColumn = validFrom;\n        item.transformItemType = eTransformItemType.JoinPair;\n        item.filterCompare = eCompare.GreaterThanEqual;\n        let itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n\n        item = new DexihDatalinkTransformItem();\n        item.sourceDatalinkColumn = column;\n        item.joinDatalinkColumn = validTo;\n        item.transformItemType = eTransformItemType.JoinPair;\n        item.filterCompare = eCompare.LessThan;\n        itemForm = this.editDatalinkService.hubFormsService.datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n        this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n\n    }\n}\n","\n<dexih-widget-section title=\"Properties\" [showExpandButton]=\"true\" [isExpanded]=\"false\">\n<form *ngIf=\"datalinkTransformForm\"  [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <section>\n                <form-input label=\"Transform Name\" formControlName=\"name\" placeholder=\"Enter a name for the transform\" [autocapitalize]=\"true\" iconClass=\"fa fa-list\"\n                    [errors]=\"formErrors.name\">\n                </form-input>\n            </section>\n            <section>\n                <form-textarea  label=\"Description\" formControlName=\"description\" placeholder=\"Enter the description.\"\n                    [errors]=\"formErrors.description\">\n                </form-textarea>\n            </section>\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Aggregate || this.datalinkTransformForm.value.transformType == eTransformType.Series || this.datalinkTransformForm.value.transformType == eTransformType.Rows || this.datalinkTransformForm.value.transformType == eTransformType.Mapping\">\n                <section>\n                    <form-checkbox label=\"Allow unmapped input columns to pass through to the next transform.\" formControlName=\"passThroughColumns\">\n                    </form-checkbox>\n                </section>\n            </div>\n            \n            <section *ngIf=\"nodes?.length > 0\">\n                <form-select label=\"Node level\" formControlName=\"nodeDatalinkColumn\" [items]=\"nodes\" [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" node='Specify the node where the transform should be applied to.' [allowNullSelect]=\"true\" selectNullMessage='Use top level'>\n                </form-select>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"number\" formControlName=\"maxInputRows\" label=\"Maximum number of rows to input into the transform (0 = unlimited)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"number\" formControlName=\"maxOutputRows\" label=\"Maximum number of rows to output into the transform (0 = unlimited)\"></form-input>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && (this.datalinkTransformForm.value.transformType == eTransformType.Join || this.datalinkTransformForm.value.transformType == eTransformType.Lookup)\" title=\"Join Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <datalink-table [datalinkTableForm]=\"datalinkTransformForm.controls.joinDatalinkTable\"></datalink-table>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select [label]=\"'Strategy when ' + eTransformType[this.datalinkTransformForm.value.transformType] + ' produces duplicate matches'\" formControlName=\"joinDuplicateStrategy\" [items]=\"eDuplicateStrategyItems\"\n                        itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section class=\"form-group col-md-6\">\n                    <form-select [label]=\"'Strategy when ' + eTransformType[this.datalinkTransformForm.value.transformType] + ' produces no match '\" formControlName=\"joinNotFoundStrategy\" [items]=\"eJoinNotFoundStrategyItems\"\n                        itemKey=\"key\" itemName=\"description\">\n                    </form-select>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.datalinkTransformForm.value.transformType == eTransformType.Concatenate\" title=\"Concatenate Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <datalink-table [datalinkTableForm]=\"datalinkTransformForm.controls.joinDatalinkTable\"></datalink-table>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.datalinkTransformForm.value.transformType == eTransformType.Series\" title=\"Series Settings\" [showExpandButton]=\"true\">\n    <form [formGroup]=\"seriesForm\">\n        <fieldset>\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Series Grain\" formControlName=\"seriesGrain\" [items]=\"seriesGrains\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-select label=\"Input Column\" formControlName=\"sourceDatalinkColumn\" [items]=\"inputColumns\" [(textValue)]=\"sourceValue\"\n                    [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" [errors]=\"sourceErrors\">\n                    </form-select>\n                </section>\n            </div>\n\n            <form-checkbox label=\"Fill empty series values\" formControlName=\"seriesFill\"></form-checkbox>\n\n            <div class=\"form-row\" *ngIf=\"seriesForm.controls.seriesFill.value && seriesForm.controls.seriesGrain.value !== eSeriesGrain.Number\">\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"date\" formControlName=\"seriesStart\" label=\"Series Start Date (empty to use first value)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input type=\"date\" formControlName=\"seriesFinish\" label=\"Series Finish Date (empty to use last value)\"></form-input>\n                </section>\n            </div>\n\n            <div class=\"form-row\" *ngIf=\"seriesForm.controls.seriesFill.value && seriesForm.controls.seriesGrain.value === eSeriesGrain.Number\">\n                <section class=\"form-group col-md-6\">\n                    <form-input formControlName=\"seriesStart\" label=\"Series Start Number (empty to use first value)\"></form-input>\n                </section>\n                <section class=\"form-group col-md-6\">\n                    <form-input formControlName=\"seriesFinish\" label=\"Series Finish Number (empty to use last value)\"></form-input>\n                </section>\n            </div>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"datalinkTransformForm && this.nodeType\" title=\"Group Node\" [showExpandButton]=\"true\">\n    <form>\n        <fieldset>\n            <form-checkbox label=\"Group rows under a node\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"allowNode\" (ngModelChange)=\"toggleNode($event)\"></form-checkbox>\n            <section *ngIf=\"allowNode\" class=\"form-group col-md-6\">\n                <form-input [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"nodeName\" (ngModelChange)=\"updateNode($event)\" label=\"Name of the node\"></form-input>\n            </section>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<div class=\"list-group-item p-1\">\n\n<div *ngIf=\"datalinkTransformForm\" class=\"d-flex\" cdkDropListGroup>\n        <dexih-widget class=\"d-none d-lg-inline\" title=\"Inputs\" height=\"80vh\" style=\"width:300px\" [scrollable]=\"true\">\n            <input-columns [datalinkTransformForm]='datalinkTransformForm'></input-columns>\n\n            <div class=\"mt-1\"  *ngIf=\"datalinkTransformForm.controls.joinDatalinkTable.value\">\n                <join-columns [datalinkTransformForm]='datalinkTransformForm' (inputJoinDrop)=\"newDragDropJoin($event)\"></join-columns>\n            </div>\n        </dexih-widget>\n\n        <div class=\"w-100 mr-1 ml-1\">\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Join || this.datalinkTransformForm.value.transformType == eTransformType.Lookup\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowJoin]=\"true\" title=\"{{eTransformType[this.datalinkTransformForm.value.transformType]}} Table\"  >\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Mapping\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mapping Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Sort\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowSort]=\"true\" title=\"Sort Columns\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.Sort, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Group || this.datalinkTransformForm.value.transformType == eTransformType.Aggregate  || this.datalinkTransformForm.value.transformType == eTransformType.Series  || this.datalinkTransformForm.value.transformType == eTransformType.Rows\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" title=\"Group Columns\"  [allowGroup]=\"true\" [allowSeries]=\"this.datalinkTransformForm.value.transformType == eTransformType.Series\"\n                    (onColumnDrop)=\"newDragDropMapping(eTransformItemType.Column, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Group\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowOutput]=\"true\" title=\"Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Series\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowSeries]=\"true\" [allowOutput]=\"true\" title=\"Series/Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mappings\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Aggregate\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowAggregate]=\"true\" [allowOutput]=\"true\" title=\"Aggregate Functions\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.AggregatePair, $event)\">\n                </mapping>\n\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowMapping]=\"true\" [allowOutput]=\"true\" title=\"Mappings\" (onColumnDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\">\n                </mapping>\n\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Filter\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowStandard]=\"true\" [allowCondition]=\"true\" [allowOutput]=\"false\" title=\"Filters\" >\n                </mapping>\n            </div>\n\n            <div *ngIf=\"this.datalinkTransformForm.value.transformType == eTransformType.Rows\">\n                <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowRow]=\"true\" [allowStandard]=\"true\" [allowJoinNode]=\"false\" [allowOutput]=\"true\" [allowCondition]=\"true\" title=\"Row Functions\">\n                </mapping>\n            </div>\n        </div>\n\n        <dexih-widget class=\"d-none d-lg-inline\" [title]=\"'Outputs' + (datalinkTransformForm.controls.nodeDatalinkColumn?.value ? '(@' + datalinkTransformForm.controls.nodeDatalinkColumn.value.name + ')' : '')\"  height=\"80vh\" style=\"width:300px\"  [scrollable]=\"true\">\n            <output-columns [datalinkTransformForm]='datalinkTransformForm' [allowMappingOutputs]=\"allowMappingOutputs\" (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></output-columns>\n            <target-columns [datalinkTransformForm]='datalinkTransformForm' [targets]=\"datalinkForm.controls.dexihDatalinkTargets.value\" [allowMappingOutputs]=\"allowMappingOutputs\" (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></target-columns>\n        </dexih-widget>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { seriesGrains } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eTransformType, eTransformItemType, DexihDatalinkColumn, DexihDatalinkTransform,\n    eTypeCode, DexihDatalinkTransformItem, eAggregate, eSortDirection, eJoinNotFoundStrategyItems,\n    eDuplicateStrategyItems, eSeriesGrain } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-transform-form',\n    templateUrl: './datalink-edit-transform.component.html',\n})\nexport class DatalinkEditTransformComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n    public seriesForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _datalinkFormSubscription: Subscription;\n    private _transformsArraySubscription: Subscription;\n\n    public action: string; // new or edit\n    public pageTitle = 'Transform';\n    public message: string;\n    public datalinkTransformKey: number;\n\n    public showName = false;\n    public showDescription = false;\n\n    eTransformType = eTransformType;\n    eTransformItemType = eTransformItemType;\n    eDuplicateStrategyItems = eDuplicateStrategyItems;\n    eJoinNotFoundStrategyItems = eJoinNotFoundStrategyItems;\n\n    public allowMappingOutputs: boolean;\n    inputColumns: Array<DexihDatalinkColumn>;\n\n    eSeriesGrain = eSeriesGrain;\n    seriesGrains = seriesGrains;\n\n    public allowNode = false;\n    public nodeName = '';\n    public nodeType: eTransformItemType;\n\n    public logger = new LogFactory('datalink-edit-transform');\n\n    public nodes = [];\n\n    public formErrors = {};\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkTransformKey = + result[1]['datalinkTransformKey'];\n                this.datalinkForm = result[2];\n\n                if (this.datalinkForm) {\n\n                    let transformsArray = (<FormArray>this.datalinkForm.controls.dexihDatalinkTransforms);\n\n                    if (this._transformsArraySubscription) { this._transformsArraySubscription.unsubscribe(); }\n                    this._transformsArraySubscription = transformsArray.valueChanges.subscribe(transforms => {\n                        let tmpDatalinkTransformForm = transforms\n                            .find(c => c.datalinkTransformKey === this.datalinkTransformKey);\n\n                        if (!tmpDatalinkTransformForm) {\n                            this.router.navigate(['transforms'], { relativeTo: this.route.parent.parent.parent });\n                        }\n                    });\n\n                    this.datalinkTransformForm = <FormGroup>transformsArray.controls\n                        .find(c => c.value.key === this.datalinkTransformKey);\n\n                    // if the transform isn't found, this is probably due to a save/reload which changes the keys.\n                    // navigate up one level when this happens.\n                    if (!this.datalinkTransformForm) {\n                        this.authService.navigateUp();\n                        return;\n                    }\n\n                    let datalinkTransform = <DexihDatalinkTransform> this.datalinkTransformForm.value;\n\n                    let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n\n                    if (datalinkTransform.transformType === eTransformType.Series) {\n                        this.seriesForm = <FormGroup>items.controls\n                            .filter(d => d.value.transformItemType === eTransformItemType.Series)[0];\n                    }\n\n                    if (datalinkTransform.transformType === eTransformType.Aggregate) {\n                        this.nodeType = eTransformItemType.GroupNode;\n                    }\n\n                    if (datalinkTransform.transformType === eTransformType.Lookup\n                        || datalinkTransform.transformType === eTransformType.Join) {\n                        this.nodeType = eTransformItemType.JoinNode;\n                    }\n\n                    if (this.nodeType) {\n                        let node = datalinkTransform.dexihDatalinkTransformItems\n                        .find(d => d.transformItemType === this.nodeType);\n\n                        if (node) {\n                            this.allowNode = true;\n                            this.nodeName = node.targetDatalinkColumn.name;\n                        } else {\n                            this.allowNode = false;\n                        }\n                    }\n\n                    this.inputColumns = datalinkTransform['runTime'].inputColumns;\n\n                    this.nodes = [];\n                    this.addNodeColumns(this.inputColumns, '');\n\n                    let transformType = datalinkTransform.transformType;\n                    this.allowMappingOutputs =\n                        // transformType === eTransformType.Group ||\n                        transformType === eTransformType.Series ||\n                        // transformType === eTransformType.Aggregate ||\n                        transformType === eTransformType.Rows ||\n                        transformType === eTransformType.Mapping ||\n                        transformType === eTransformType.Validation;\n\n                    if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n                    this._datalinkFormSubscription = this.datalinkForm.valueChanges.subscribe(value => {\n                        this.formErrors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.datalinkForm, true);\n                    });\n\n                    if (!this.datalinkTransformForm) {\n                        this.router.navigate(['properties'], { relativeTo: this.route.parent.parent.parent });\n                    }\n\n                    this.logger.LogC(() => `datalink form is loaded`, eLogLevel.Trace);\n                }\n            });\n\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Transform');\n        }\n    }\n\n    private addNodeColumns(columns: DexihDatalinkColumn[], path: string) {\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                let name = path ? (path + '.' + col.logicalName) : col.logicalName;\n                this.nodes.push({key: col.key, name: name});\n\n                if (col.childColumns && col.childColumns.length > 0) {\n                    this.addNodeColumns(col.childColumns, name);\n                }\n            });\n        }\n    }\n\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformsArraySubscription) { this._transformsArraySubscription.unsubscribe(); }\n        if (this._datalinkFormSubscription) { this._datalinkFormSubscription.unsubscribe(); }\n    }\n\n    deleteTransform() {\n        this.logger.LogC(() => `deleteTransform`, eLogLevel.Trace);\n        this.editDatalinkService.deleteDatalinkTransform(this.datalinkTransformForm.value);\n        this.router.navigate(['properties'], { relativeTo: this.route.parent.parent });\n    }\n\n    previewData() {\n        this.router.navigate(['preview-transform-data'], { relativeTo: this.route.parent });\n    }\n\n    toggleNode(allowNode: boolean) {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        let nodeItem = <FormGroup> items.controls.find(d => d.value.transformItemType === this.nodeType);\n        if (allowNode) {\n            if (!this.nodeName) {\n                this.nodeName = eTransformItemType[this.nodeType];\n            }\n\n            if (nodeItem) {\n                this.authService.informationDialog('Can not add node',  'Only one node can be added per transform.');\n                return;\n            }\n\n            let item = new DexihDatalinkTransformItem();\n            let outputColumn: DexihDatalinkColumn = new DexihDatalinkColumn();\n            outputColumn.position = 0;\n            outputColumn.key = this.hubService.getHubCache().getNextSequence();\n            outputColumn.name = this.nodeName;\n            outputColumn.logicalName = this.nodeName;\n            outputColumn.dataType = eTypeCode.Node;\n\n            item.position = -1;\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.targetDatalinkColumn = outputColumn;\n            item.isValid = true;\n            item.transformItemType = this.nodeType;\n\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        } else {\n            this.editDatalinkService.deleteDatalinkTransformItem(this.datalinkTransformForm, nodeItem);\n        }\n    }\n\n    updateNode(name: string) {\n        let items = <FormArray>this.datalinkTransformForm.controls.dexihDatalinkTransformItems;\n        let nodeItem = <FormGroup> items.controls.find(d => d.value.transformItemType === this.nodeType);\n        if (nodeItem) {\n            let column = <DexihDatalinkColumn> nodeItem.controls.targetDatalinkColumn.value;\n            if (column) {\n                column.name = name;\n                column.logicalName = name;\n                nodeItem.controls.targetDatalinkColumn.setValue(column);\n            }\n        }\n    }\n\n    newDragDropMapping(itemType: eTransformItemType, $event) {\n        let item = new DexihDatalinkTransformItem();\n        let outputColumn: DexihDatalinkColumn = $event.outputColumn;\n        let inputColumn: DexihDatalinkColumn = $event.inputColumn;\n        let io = new InputOutputColumns();\n\n\n        switch (itemType) {\n            case eTransformItemType.ColumnPair:\n                if (!outputColumn) {\n                    outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n                }\n\n                outputColumn.key = this.hubService.getHubCache().getNextSequence();\n                if (outputColumn.childColumns) {\n                    outputColumn.childColumns.forEach(col => {\n                        col.key = this.hubService.getHubCache().getNextSequence();\n                    });\n                }\n                outputColumn.datalinkTableKey = null;\n                break;\n            case eTransformItemType.Sort:\n                item.sortDirection = eSortDirection.Ascending;\n                break;\n            case eTransformItemType.AggregatePair:\n                if (!outputColumn) {\n                    outputColumn = io.copyDatalinkColumn(inputColumn, 0, 'mapping');\n                }\n\n                outputColumn.key = this.hubService.getHubCache().getNextSequence();\n                if (outputColumn.childColumns) {\n                    outputColumn.childColumns.forEach(col => {\n                        col.key = this.hubService.getHubCache().getNextSequence();\n                    });\n                }\n                outputColumn.datalinkTableKey = null;\n                // outputColumn.name = 'Sum ' + outputColumn.name;\n                item.aggregate = eAggregate.Sum;\n                break;\n        }\n\n        if (itemType) {\n\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.sourceDatalinkColumn = inputColumn;\n            item.targetDatalinkColumn = outputColumn;\n            item.isValid = true;\n\n            item.transformItemType = itemType;\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        }\n    }\n\n    newDragDropJoin($event) {\n        let transformType = this.datalinkTransformForm.value.transformType;\n\n        if (transformType === eTransformType.Join\n            || transformType === eTransformType.Lookup) {\n            let joinColumn: DexihDatalinkColumn = $event.joinColumn;\n            let inputColumn: DexihDatalinkColumn = $event.inputColumn;\n            let item = new DexihDatalinkTransformItem();\n            item.transformItemType = eTransformItemType.JoinPair;\n            item.datalinkTransformKey = this.datalinkTransformForm.value.key;\n            item.sourceDatalinkColumn = inputColumn;\n            item.joinDatalinkColumn = joinColumn;\n            item.isValid = true;\n            let itemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, item);\n\n            this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, itemForm);\n        }\n    }\n}\n","<dexih-widget-section title=\"Profile Rules\" [showExpandButton]=\"true\">\n        <form *ngIf=\"datalinkForm\"  [formGroup]=\"datalinkForm\" >\n    <fieldset>\n        <section>\n            <form-input label=\"Profile Table Name\" formControlName=\"profileTableName\" placeholder=\"Enter the profile table name.\" [autocapitalize]=\"true\" iconClass=\"fa fa-list\" \n            note=\"Specify the table name in the 'Audit Connection' to send the profile results to.  If this table does not exist, it will be created on first run.\">\n            </form-input>\n        </section>\n    </fieldset>\n</form>\n\n<dexih-table \n    [enableMultiSelect]=\"true\" \n    [enableManualSort]=\"false\"\n    [enableFilter]=\"false\"\n    [columns]=\"columns\" \n    [dataObservable]=\"tableData\" \n    [(selectedItems)]=\"selectedProfileRules\" \n    (onSelectedChange)=\"hasChanged($event)\"\n    keyColumn=\"functionMethodName\">\n\n    <ng-template #rowAction select=\"rowAction\" let-item=\"item\">\n        <form-checkbox label=\"Capture Detailed Distribution\" [(ngModel)]=\"item.detailedResults\" name=\"detailedResults\" (change)=\"updateProfileRule(item)\" ></form-checkbox>\n    </ng-template>\n</dexih-table>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DexihDatalinkProfile, eFunctionType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'profile-rules',\n    templateUrl: './profile-rules.component.html'\n})\n\n\nexport class DatalinkEditProfileRulesComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private hubCache: HubCache;\n\n    private _subscription: Subscription;\n\n    selectedProfileRules: Array<DexihDatalinkProfile> = new Array<DexihDatalinkProfile>();\n\n    columns = [\n        { name: 'name', title: 'Profile Name', format: '' },\n        { name: 'description', title: 'Description', format: '' }\n    ];\n\n    private _tableData = new BehaviorSubject<Array<DexihDatalinkProfile>>(null);\n    tableData: Observable<Array<DexihDatalinkProfile>> = this._tableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(async result => {\n                this.hubCache = result[0];\n                this.datalinkForm = result[1];\n\n                if (this.datalinkForm) {\n                    // load the cache first\n                    if (this.hubCache.isLoaded()) {\n                        this.selectedProfileRules = this.datalinkForm.value.dexihDatalinkProfiles;\n                        let profileRules = (await this.hubService.GetFunctionsByType(eFunctionType.Profile))\n                            .map(profile => {\n\n                                let profileRuleForm = this.selectedProfileRules.find(c =>\n                                    c.functionAssemblyName === profile.functionAssemblyName\n                                    && c.functionClassName === profile.functionClassName\n                                    && c.functionMethodName === profile.functionMethodName);\n\n                                return <DexihDatalinkProfile> {\n                                    functionAssemblyName: profile.functionAssemblyName,\n                                    functionClassName: profile.functionClassName,\n                                    functionMethodName: profile.functionMethodName,\n                                    detailedResults: profileRuleForm ? profileRuleForm.detailedResults : false\n                                }\n                        });\n                        this._tableData.next(profileRules);\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n        }\n\n    }\n\n    updateProfileRules() {\n        if (this.datalinkForm) {\n            let profiles = <FormArray>this.datalinkForm.controls.dexihDatalinkProfiles;\n\n            // reset existing profiles.\n            profiles.controls.forEach(profile => {\n                let profileFormGroup = <FormGroup>profile;\n                profileFormGroup.controls.isValid.setValue(false);\n            });\n\n            // add the selected profiles, with isValid = true\n            this.selectedProfileRules.forEach(profile => {\n                let profileRuleForm = <FormGroup>profiles.controls.find(c => c.value.functionAssemblyName === profile.functionAssemblyName\n                    && c.value.functionClassName === profile.functionClassName\n                    && c.value.functionMethodName === profile.functionMethodName);\n\n                if (!profileRuleForm) {\n                    let profileRule = new DexihDatalinkProfile();\n                    profileRule.key = this.hubCache.getNextSequence();\n                    profileRule.datalinkKey = this.datalinkForm.value.key;\n                    profileRule.functionAssemblyName = profile.functionAssemblyName;\n                    profileRule.functionClassName = profile.functionClassName;\n                    profileRule.functionMethodName = profile.functionMethodName;\n                    profileRule.detailedResults = profile.detailedResults;\n                    profileRule.isValid = true;\n                    profileRuleForm = this.editDatalinkService.hubFormsService.datalinkProfileFormGroup(profileRule);\n                    profiles.push(profileRuleForm);\n                } else {\n                    profileRuleForm.controls.isValid.setValue(true);\n                }\n            });\n\n            for (let i = profiles.controls.length - 1; i >= 0; i--) {\n                if (!profiles.controls[i].value.isValid) {\n                    profiles.removeAt(i);\n                }\n            }\n        }\n    }\n\n    updateProfileRule(profile: DexihDatalinkProfile) {\n        let profiles = <FormArray>this.datalinkForm.controls.dexihDatalinkProfiles;\n\n        let profileRuleForm = <FormGroup>profiles.controls.find(c => c.value.functionAssemblyName === profile.functionAssemblyName\n            && c.value.functionClassName === profile.functionClassName\n            && c.value.functionMethodName === profile.functionMethodName);\n\n        profileRuleForm.controls.detailedResults.setValue(profile.detailedResults);\n        this.editDatalinkService.hubFormsService.hasChanged = true;\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.updateProfileRules();\n    }\n\n    hasChanged(items) {\n        if (items) {\n            this.selectedProfileRules = items;\n        }\n        this.updateProfileRules();\n        this.editDatalinkService.hubFormsService.hasChanged = true;\n    }\n\n}\n","<dexih-widget-section title='Validation' [showExpandButton]=\"true\">\n<div *ngIf=\"!datalinkTransformForm\">\n    <h4>Target column validation is not currently enabled. </h4>\n    <dexih-button *ngIf=\"!datalinkTransformForm\" (click)=\"enableValidation()\" buttonClass=\"btn btn-success\" iconClass=\"fa fa-check\"  [autoCompact]=\"false\"\n        title=\"Enable the validation on the target table.\">Enable Validation</dexih-button>\n</div>\n\n<div *ngIf=\"datalinkTransformForm\">\n\n    <form *ngIf=\"datalinkTransformForm\" [formGroup]=\"datalinkTransformForm\">\n        <fieldset>\n            <section>\n                <dexih-button (click)=\"disableValidation()\" buttonClass=\"btn btn-success\" iconClass=\"fa fa-check\" [autoCompact]=\"false\"\n                    title=\"Enable the validation on the target table.\">Disable Validation</dexih-button>\n            </section>\n            <section>\n                <form-textarea label=\"Description\" formControlName=\"description\" placeholder=\"Enter the description.\">\n                </form-textarea>\n            </section>\n        </fieldset>\n    </form>\n</div>\n</dexih-widget-section>\n\n<div class=\"list-group-item p-1\">\n\n    <div *ngIf=\"datalinkTransformForm\" class=\"d-flex\">\n        <div class=\"mr-1 d-none d-md-inline\">\n            <div>\n                <div class=\"alert alert-primary mb-1\">\n                    <h4>Inputs</h4>\n                </div>\n                <div>\n                    <input-columns [datalinkTransformForm]='datalinkTransformForm'></input-columns>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"w-100\">\n            <mapping [datalinkTransformForm]=\"datalinkTransformForm\" [allowCondition]=\"true\" [allowOutput]=\"true\"\n               [allowStandard]=\"true\" [allowValidation]=\"true\" title=\"Validation\">\n            </mapping>\n        </div>\n\n        <div class=\"ml-1 d-none d-md-inline\">\n            <div class=\"alert alert-primary mb-1\">\n                <h4>Outputs\n                    <div class=\"float-right\">\n                    </div>\n                </h4>\n            </div>\n            <output-columns [datalinkTransformForm]='datalinkTransformForm' [allowMappingOutputs]=\"allowMappingOutputs\"\n                (inputOutputDrop)=\"newDragDropMapping(eTransformItemType.ColumnPair, $event)\"></output-columns>\n        </div>\n\n    </div>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubCache } from '../../../hub.models';\nimport { DexihTable, DexihTableColumn, eTransformType, RemoteLibraries } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-validation-form',\n    templateUrl: './datalink-edit-validation.component.html',\n})\nexport class DatalinkEditValidationComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private _subscription: Subscription;\n\n    private hubCache: HubCache;\n    private remoteLibraries: RemoteLibraries;\n    public action: string; // new or edit\n    public pageTitle = 'Validation';\n    public message: string;\n\n    public showName = false;\n    public showDescription = false;\n\n    public inputColumns: Array<DexihTable>;\n    public outputColumns: Array<DexihTableColumn>;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.hubCache = result[1];\n                this.datalinkForm = result[2];\n                this.remoteLibraries = result[3];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n                }\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Validation');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    enableValidation() {\n        let transform = this.remoteLibraries.transforms.find(c => c.transformType === eTransformType.Validation);\n        this.datalinkTransformForm = this.editDatalinkService.insertDatalinkTransform(1, transform);\n    }\n\n    disableValidation() {\n        this.editDatalinkService.deleteDatalinkTransform(this.datalinkTransformForm.value);\n        this.datalinkTransformForm = null;\n    }\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'dexih-datalink-run-plan',\n    templateUrl: './datalink-run-plan.component.html'\n})\nexport class DatalinkRunPlanComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n\n    public allowSave = false;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkForm = result[3];\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Run Plan');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n}\n","<div class=\"no-padding\">\n    <div class=\"widget-body\">\n\n        <div section class=\"widget-body-toolbar\">\n\n            <div class=\"form-row\">\n                <div class=\"col-sm-6\">\n                    <h4>Run Plan</h4>\n                </div>\n                <div class=\"col-sm-6 text-right\">\n                </div>\n            </div>\n        </div>\n\n        NOT COMPLETED\n\n    </div>\n</div>","    <section>\n        <div class=\"input-group d-flex\">\n            <form *ngFor=\"let inputParameterForm of inputParameterForms; let i = index;\" [formGroup]=\"inputParameterForm\" class=\"flex-fill\">\n                <div class=\"input-group\">\n                    <div *ngIf=\"!allowNameSelect\" class=\"input-group-prepend\">\n                        <div class=\"input-group-text\">\n                            {{inputParameterForm.value.runTime?.functionParameter?.name + \"(\" + eTypeCode[type.dataType] + \")\"}} {{rank > 0 ? \"[]\" : \"\"}}\n                        </div>\n                    </div>\n\n                    <div *ngIf=\"allowNameSelect == true\" class=\"form-control p-0\">\n                        <form-input [border]=\"false\" formControlName=\"name\" type=\"text\"\n                            placeholder=\"Enter a name for the parameter\">\n                        </form-input>\n                    </div>\n\n                    <div *ngIf=\"!inputParameterForm.value.runTime?.functionParameter?.isLabel\" class=\"form-control p-0\">\n                        <form-select formControlName=\"datalinkColumn\" [border]=\"false\"\n                            [items]=\"inputColumnGroups\" parentName=\"group\" childItems=\"columns\" itemKey=\"key\" itemName=\"logicalName\" [(textValue)]=\"inputs[i].staticValue\"\n                            [enableKeySelect]=\"false\" [enableTextEntry]=\"rank === 0\" [enableTextEntryMatch]=\"false\" [setTextEntryToValue]=\"false\"\n                            (textValueChange)=\"updateStatic($event, i)\"\n                            [textEntryNote]=\"rank > 0 ? 'Select an array type source (otherwise select add to build an array)' : 'Select a column or enter a static value.'\" \n                            [textEntryItems]=\"inputs[i].textItems\" textEntryItemsTitle=\"Variables\"\n                            [errors]=\"errors[i].datalinkColumn\"\n                            >\n                        </form-select>\n                    </div>\n\n                    <div *ngIf=\"inputParameterForm.value.runTime?.functionParameter?.isLabel\" class=\"form-control p-0\">\n                        <form-input [border]=\"false\" [(ngModel)]=\"inputs[i].staticValue\" [ngModelOptions]=\"{standalone: true}\"\n                            type=\"text\" placeholder=\"Enter a static value.\">\n                        </form-input>\n                    </div>\n\n                    <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == true\" class=\"input-group-text\">\n                        {{\"(\" + eTypeCode[type.dataType] + \")\"}}\n                    </div>\n\n                    <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control p-0\">\n                        <form-select [border]=\"false\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                            itemName=\"name\" >\n                        </form-select>\n                    </div>\n                    <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control\">\n                        <form-checkbox label=\"Allow Null\" [border]=\"false\" formControlName=\"allowNull\"></form-checkbox>\n                    </div>\n\n                </div>\n            </form>\n\n            <form *ngFor=\"let outputParameterForm of outputParameterForms; let i = index;\" [formGroup]=\"outputParameterForm\" class=\"ml-1  flex-fill\">\n                <!-- <form-select class=\"flex-grow-1\" [border]=\"false\" class=\"form-control p-0\"\n                    formControlName=\"datalinkColumn\" [items]=\"outputColumns\" itemName=\"logicalName\" itemKey=\"key\"\n                    [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" textEntryNote=\"Enter a value to add a new column\"\n                    (textValueChange)=\"updateNewColumn($event, i)\">\n                </form-select> -->\n                <form-select class=\"flex-grow-1\" [border]=\"false\" class=\"form-control p-0\" \n                    formControlName=\"datalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\" itemKey=\"key\"\n                    itemName=\"logicalName\" [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n                    textEntryNote=\"Enter new column name, or select existing\"\n                    (textValueChange)=\"updateNewColumn($event, i)\">\n                </form-select>\n            </form>\n\n            <div *ngIf=\"allowAdd && allowRemove\" class=\"input-group-append flex-shrink-1 ml-1 \">\n                <button *ngIf=\"allowAdd\" class=\"btn btn-light\" type=\"button\" (click)=\"add()\" [disabled]=\"!allowAdd\" value=\"Add\">\n                    <i class=\"fa fa-plus-square-o\"></i>\n                </button>\n                <button *ngIf=\"allowRemove\" class=\"btn btn-light\" type=\"button\" (click)=\"remove()\" [disabled]=\"!allowRemove\" value=\"Remove\">\n                    <i class=\"fa fa-minus-square-o\"></i>\n                </button>\n            </div>\n        </div>\n        <small *ngIf=\"!allowAdd && inputParameterForms[0].value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n            <markdown [data]=\"inputParameterForms[0].value.runTime.functionParameter.description\"></markdown>\n        </small>\n    </section>\n","import { Component, Input, Output, OnInit, OnDestroy, EventEmitter, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { TypeCodes, eBasicType, TypeFunctions } from '../../../hub.remote.models';\nimport { HubService } from '../../../hub.service';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { DexihDatalinkColumn, DexihTableColumn, DexihFunctionParameter, eTypeCode, DexihTable, DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\nexport class InputValues {\n    public staticValue: string;\n    public textItems: string[];\n    public name: string;\n    public inputParameterSubscription: Subscription;\n    public datalinkColumnSubscription: Subscription;\n}\n\n@Component({\n\n    selector: 'input-parameter',\n    templateUrl: './input-parameter.component.html'\n})\nexport class InputParameterComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input() public allowDataTypeSelect = false;\n    @Input() public allowNameSelect = false;\n    @Input() public allowAdd = false;\n    @Input() public allowRemove = false;\n    @Input() public inputParameterForms: FormGroup[] = [];\n    @Input() public inputColumns: Array<DexihDatalinkColumn> = null;\n    @Input() public updateParameterName = false;\n    @Input() public rank = 0;\n    @Input() public nodeDatalinkColumnKey = null;\n\n    @Input() public outputParameterForms: FormGroup[] = null;\n    @Input() public outputColumns: Array<DexihTableColumn> = null;\n    @Input() public datalinkTargets: Array<DexihDatalinkTarget> = null;\n    @Input() public variables = [];\n\n    @Output() public addParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n    @Output() public removeParameter: EventEmitter<FormGroup> = new EventEmitter<FormGroup>();\n\n    private type: TypeFunctions;\n    eBasicType = eBasicType;\n    typeCodes = TypeCodes;\n    eTypeCode = eTypeCode;\n\n    public columns: Array<DexihTableColumn>;\n    inputColumnGroups: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n\n    outputTables: Array<DexihTable>;\n\n    public inputs: InputValues[] = [];\n\n    ignoreChanges = false;\n\n    newColumn: DexihDatalinkColumn;\n\n    public errors;\n\n    constructor(public hubService: HubService, public editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        this.inputs = this.inputParameterForms.map(param => new InputValues());\n        this.errors = this.inputParameterForms.map(a => this.editDatalinkService.hubFormsService.getFormErrorMessages(a, true));\n\n        let io = new InputOutputColumns();\n        if (this.nodeDatalinkColumnKey) {\n            this.inputColumns = io.getAvailableColumns(this.inputColumns, this.nodeDatalinkColumnKey, 0);\n        }\n\n        if (this.rank > 0 && this.inputColumns) {\n            let tables = [];\n            this.inputColumns = this.inputColumns.filter(c => c.rank > 0);\n        }\n\n        if (this.inputColumns) {\n            this.inputColumnGroups = this.editDatalinkService.getColumnGroups(this.inputColumns);\n        } else {\n            this.inputColumnGroups = [];\n        }\n\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let inputParameter: DexihFunctionParameter = this.inputParameterForms[i].value;\n\n            if (inputParameter.datalinkColumn || inputParameter.value === null || inputParameter.value === undefined) {\n                this.inputs[i].staticValue = '';\n            } else {\n                this.inputs[i].staticValue = inputParameter.value;\n            }\n\n            this.inputs[i].textItems = [];\n\n            if (inputParameter.dataType === eTypeCode.Boolean) {\n                this.inputs[i].textItems = this.inputs[i].textItems.concat(['true', 'false' ]);\n                this.inputs[i].staticValue = this.inputs[i].staticValue.toString();\n            }\n\n            if (inputParameter['runTime'] && inputParameter['runTime'].functionParameter.listOfValues) {\n                this.inputs[i].textItems = this.inputs[i].textItems.concat(inputParameter['runTime'].functionParameter.listOfValues);\n            }\n\n            this.inputs[i].textItems = this.inputs[i].textItems.concat(this.variables);\n        }\n\n        this.updateItems();\n\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let runTime = this.inputParameterForms[i].value.runTime;\n            if (!runTime || !runTime.functionParameter || !runTime.functionParameter.listOfValues) {\n                this.inputs[i].inputParameterSubscription = this.inputParameterForms[i].valueChanges.subscribe(() => {\n                    if (!this.ignoreChanges) {\n                        this.updateItems();\n                        this.ignoreChanges = true;\n                        if (this.inputParameterForms[i].controls.datalinkColumn.value) {\n                            this.inputParameterForms[i].controls.value.setValue(null);\n                        } else {\n                            this.inputParameterForms[i].controls.value.setValue(this.inputs[i].staticValue);\n                        }\n                        this.ignoreChanges = false;\n                    }\n                    this.errors[i] = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.inputParameterForms[i], true);\n                });\n            }\n\n            if (this.updateParameterName) {\n                this.inputs[i].datalinkColumnSubscription\n                    = this.inputParameterForms[i].controls.datalinkColumn.valueChanges.subscribe(value => {\n                    if (value) {\n                        this.inputParameterForms[i].controls.dataType.setValue(value.dataType);\n                        this.inputParameterForms[i].controls.name.setValue(value.name);\n                    } else {\n                        this.inputParameterForms[i].controls.dataType.setValue(eTypeCode.String);\n                        this.inputParameterForms[i].controls.name.setValue('');\n                    }\n                    this.errors[i] = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.inputParameterForms[i], true);\n                });\n            }\n        }\n    }\n\n    updateStatic(event: any, i: number) {\n        this.inputParameterForms[i].controls.value.setValue(event);\n    }\n\n    ngOnDestroy() {\n        if (this.inputs) {\n            this.inputs.forEach(input => {\n                if (input.datalinkColumnSubscription) { input.datalinkColumnSubscription.unsubscribe(); }\n                if (input.inputParameterSubscription) { input.inputParameterSubscription.unsubscribe(); }\n            });\n        }\n    }\n\n    ngOnChanges() {\n        let table = new DexihTable();\n        table.name = 'Output Columns';\n        table.dexihTableColumns = this.outputColumns;\n\n        this.outputTables = [table];\n\n        if (this.datalinkTargets) {\n            this.datalinkTargets.forEach(target => {\n                this.outputTables.push(target['table']);\n            });\n        }\n    }\n\n    updateItems() {\n        for ( let i = 0; i < this.inputParameterForms.length; i++) {\n            let inputParameter: DexihFunctionParameter = this.inputParameterForms[i].value;\n            this.type = new TypeFunctions(inputParameter.dataType, null, null, null);\n\n            if (!this.allowDataTypeSelect && !this.allowNameSelect) {\n                this.inputs[i].name = inputParameter.name + '(' + this.type.dataType + ')' + (this.rank > 0 ? '[]' : '')\n            } else {\n                this.inputs[i].name = inputParameter.name\n            }\n        }\n    }\n\n    add() {\n        this.addParameter.emit(this.inputParameterForms[0]);\n    }\n\n    remove() {\n        this.removeParameter.emit(this.inputParameterForms[0]);\n    }\n\n    updateNewColumn(value: string, i: number) {\n        let current = this.outputParameterForms[i].controls.targetDatalinkColumn.value;\n        if (value && (!current || value !== current.name) ) {\n            if (!this.newColumn) {\n                this.newColumn = new DexihDatalinkColumn();\n                this.newColumn.position = 1000 - this.newColumn.key;\n                this.newColumn.key = this.hubService.getHubCache().getNextSequence();\n            }\n\n            this.newColumn.dataType = this.outputParameterForms[i].controls.dataType.value;\n            this.newColumn.name = value;\n            this.newColumn.logicalName = value;\n\n            this.outputParameterForms[i].controls.datalinkColumn.setValue(this.newColumn);\n\n            this.updateItems();\n        }\n    }\n\n}\n","<form [formGroup]=\"outputParameterForm\" class=\"mb-1\">\n    <section>\n        <div class=\"input-group\">\n\n            <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == false\" class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{outputParameterForm.value.runTime?.functionParameter?.name + \"(\" + eTypeCode[type.dataType] + \")\"}}\n                    {{rank > 0 ? \"[]\" : \"\"}}\n                </div>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == true && allowNameSelect == false\" class=\"input-group-prepend\">\n                <div class=\"input-group-text\">\n                    {{outputParameterForm.value.runTime?.functionParameter?.name }}\n                </div>\n            </div>\n\n            <div *ngIf=\"allowNameSelect\" class=\"form-control p-0\">\n                <form-input formControlName=\"name\" [border]=\"false\" type=\"text\" name=\"name\"\n                    placeholder=\"Enter a name for the parameter\">\n                </form-input>\n                <span class=\"input-group-btn\" style=\"width:0px;\"></span>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == false && allowNameSelect == true\" class=\"input-group-text\">\n                {{\"(\" + eTypeCode[type.dataType] + \")\"}}\n            </div>\n\n            <div class=\"form-control p-0\">\n                <form-select [border]=\"false\" formControlName=\"datalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\" itemKey=\"key\"\n                    itemName=\"logicalName\" [enableKeySelect]=\"false\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n                    textEntryNote=\"Enter new column name, or select existing\"\n                    (textValueChange)=\"updateNewColumn($event)\"\n                    [errors]=\"errors.datalinkColumn\">\n                </form-select>\n            </div>\n\n            <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control p-0\">\n                <form-select formControlName=\"dataType\" [border]=\"false\" [items]=\"typeCodes\" itemKey=\"key\"\n                    itemName=\"name\">\n                </form-select>\n            </div>\n            <div *ngIf=\"allowDataTypeSelect == true\" class=\"form-control\">\n                <form-checkbox label=\"Allow Null\" [border]=\"false\" formControlName=\"allowNull\"></form-checkbox>\n            </div>\n\n            <div class=\"input-group-append\">\n                <button *ngIf=\"outputParameterForm.controls.datalinkColumn?.value && outputParameterForm.controls.dataType.value !== outputParameterForm.controls.datalinkColumn?.value?.dataType\" class=\"btn btn-danger\" type=\"button\" (click)=\"fixDataType()\" title=\"fix target column datatype\">\n                    <i class=\"fa fa-medkit\"></i>\n                </button>\n                <button class=\"btn btn-light\" type=\"button\" (click)=\"add()\" [disabled]=\"!allowAdd\" value=\"Add\">\n                    <i class=\"fa fa-plus-square-o\"></i>\n                </button>\n                <button class=\"btn btn-light\" type=\"button\" (click)=\"remove()\" [disabled]=\"!allowRemove\" value=\"Remove\">\n                    <i class=\"fa fa-minus-square-o\"></i>\n                </button>\n            </div>\n        </div>\n\n        <small *ngIf=\"outputParameterForm.value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n            <markdown [data]=\"outputParameterForm.value.runTime.functionParameter.description\"></markdown>\n        </small>\n\n    </section>\n</form>","import { Component, Input, Output, ViewChild, OnInit, OnDestroy, EventEmitter, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { TypeFunctions, TypeCodes, eBasicType } from '../../../hub.remote.models';\nimport { DexihTableColumn, DexihDatalinkColumn, eTypeCode, DexihDatalinkTarget, DexihDatalinkTable, DexihTable } from '../../../../shared/shared.models';\nimport { DatalinkEditService } from '../datalink-edit.service';\n\n@Component({\n\n    selector: 'output-parameter',\n    templateUrl: './output-parameter.component.html'\n})\nexport class OutputParameterComponent implements OnInit, OnChanges, OnDestroy {\n\n    @Input() public allowDataTypeSelect = false;\n    @Input() public allowNameSelect = false;\n    @Input() public allowAdd = false;\n    @Input() public allowRemove = false;\n    @Input() public outputParameterForm: FormGroup = null;\n    @Input() public outputColumns: Array<DexihTableColumn> = null;\n    @Input() public datalinkTargets: Array<DexihDatalinkTarget> = null;\n    @Input() public updateParameterName = false;\n    @Input() public rank = 0;\n\n    @Output() public addParameter: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public removeParameter: EventEmitter<any> = new EventEmitter<any>();\n    @Output() public hasChanged: EventEmitter<any> = new EventEmitter<any>();\n\n    private _datalinkColumnSubscription: Subscription;\n    private _parameterSubscription: Subscription;\n    private _dataTypeSubscription: Subscription;\n\n    newColumn: DexihDatalinkColumn;\n    tmpColumnKey: number;\n\n    outputTables: Array<DexihTable>;\n\n    type: TypeFunctions;\n    eBasicType = eBasicType;\n    eTypeCode = eTypeCode;\n\n    typeCodes = TypeCodes;\n\n    public errors;\n\n    ignoreChanges = false;\n\n    constructor(public hubService: HubService, public editDatalinkService: DatalinkEditService) {\n    }\n\n    ngOnInit() {\n        this.updateItems();\n        this.errors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.outputParameterForm, true);\n\n        if (this.updateParameterName) {\n            this._datalinkColumnSubscription = this.outputParameterForm.controls.datalinkColumn.valueChanges.subscribe(value => {\n                this.outputParameterForm.controls.dataType.setValue(value.dataType);\n                this.outputParameterForm.controls.name.setValue(value.name);\n            });\n        }\n        this._parameterSubscription = this.outputParameterForm.valueChanges.subscribe(param => {\n            this.errors = this.editDatalinkService.hubFormsService.getFormErrorMessages(this.outputParameterForm, true);\n            this.updateItems();\n        });\n\n        this._dataTypeSubscription = this.outputParameterForm.controls.dataType.valueChanges.subscribe(dataType => {\n            if (this.newColumn) {\n                this.newColumn.dataType = dataType;\n            }\n        });\n    }\n\n    ngOnChanges() {\n        let table = new DexihTable();\n        table.name = 'Output Columns';\n        table.dexihTableColumns = this.outputColumns;\n\n        this.outputTables = [table];\n\n        if (this.datalinkTargets) {\n            this.datalinkTargets.forEach(target => {\n                this.outputTables.push(target['table']);\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._datalinkColumnSubscription) { this._datalinkColumnSubscription.unsubscribe(); }\n        if (this._parameterSubscription) { this._parameterSubscription.unsubscribe(); }\n        if (this._dataTypeSubscription) { this._dataTypeSubscription.unsubscribe(); }\n    }\n\n    updateItems() {\n        this.type = new TypeFunctions(this.outputParameterForm.value.dataType, null, null, null);\n    }\n\n    add() {\n        this.addParameter.emit(this.outputParameterForm);\n    }\n\n    remove() {\n        this.removeParameter.emit(this.outputParameterForm);\n    }\n\n    fixDataType() {\n        const column = this.outputParameterForm.controls.datalinkColumn.value;\n        column.dataType = this.outputParameterForm.controls.dataType.value;\n    }\n\n    updateNewColumn(value: string) {\n        let current = this.outputParameterForm.controls.datalinkColumn.value;\n        if (value && (!current || current.name !== value)) {\n            if (!this.newColumn) {\n                this.newColumn = new DexihDatalinkColumn();\n                this.newColumn.key = this.hubService.getHubCache().getNextSequence();\n                this.newColumn.position = 1000 - this.newColumn.key;\n            }\n\n            this.newColumn.dataType = this.outputParameterForm.controls.dataType.value;\n            this.newColumn.allowDbNull = true;\n            this.newColumn.name = value;\n            this.newColumn.logicalName = value;\n            this.newColumn.rank = this.rank;\n            this.newColumn.columnGroup = 'mapping';\n\n            this.outputParameterForm.controls.datalinkColumn.setValue(this.newColumn);\n\n            this.updateItems();\n        }\n    }\n}\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section  title=\"Edit Function\" [showExpandButton]=\"false\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\" (click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\"\n\t\t\tclass=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"datalinkTransformForm\" [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\n\t\t\t\t<section *ngIf=\"hubCache?.hub.dexihCustomFunctions.length > 0\">\n\t\t\t\t\t<form-checkbox label=\"Use a custom function\" [(ngModel)]=\"useCustomFunction\" [ngModelOptions]=\"{standalone: true}\">\n\t\t\t\t\t</form-checkbox>\n\t\t\t\t</section>\n\n\t\t\t\t<ng-template [ngIf]=\"useCustomFunction\">\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 499, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Select a hub function\" formControlName=\"customFunctionKey\" [items]=\"customFunctions\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" itemTitle=\"description\">\n\t\t\t\t\t\t \t<customFunction-edit-button [key]=\"newDatalinkTransformItemForm.controls.customFunctionKey.value\"></customFunction-edit-button>\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</ng-template>\n\n\t\t\t\t<ng-template [ngIf]=\"!useCustomFunction\">\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 500, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Category\" [items]=\"functionCategories\" [allowNullSelect]=\"true\" selectNullMessage=\"(All functions)\"\n\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"functionCategory\" (ngModelChange)=\"updateCategory($event)\" [sortItems]=\"true\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section [ngStyle]=\"{'z-index': 499, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Select a standard function\" (ngModelChange)=\"selectFunction($event, true)\" [(ngModel)]=\"selectedFunction\"\n\t\t\t\t\t\t [ngModelOptions]=\"{standalone: true}\" [items]=\"filteredFunctions\" [enableKeySelect]=\"false\" itemKey=\"name\" itemName=\"name\" itemTitle=\"description\" [note]=\"selectedFunction?.description\"\n\t\t\t\t\t\t [sortItems]=\"true\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</ng-template>\n\t\t\t\t<div *ngIf=\"selectedFunction || selectedCustomFunction\" class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"transformFunctionType != eFunctionType.Validate && transformFunctionType != eFunctionType.condition\"\n\t\t\t\t\t class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 405, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when null\" formControlName=\"onNull\" [items]=\"eErrorActionItems\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 404, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when error\" formControlName=\"onError\" [items]=\"eErrorActionItems\" itemKey=\"key\" itemName=\"name\"\n\t\t\t\t\t\t iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t\n\t\t\t\t\t<div *ngIf=\"transformFunctionType == eFunctionType.Validate\" class=\"col-xs-12 col-sm-6 col-md-3\" [ngStyle]=\"{'z-index': 402, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when false\" formControlName=\"invalidAction\" [items]=\"eInvalidActionItems\" itemKey=\"key\"\n\t\t\t\t\t\t itemName=\"name\" [enableFilter]=\"false\" iconClass=\"fa fa-database\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<section *ngIf=\"(selectedFunction?.returnType == 'Boolean') || (selectedCustomFunction && selectedCustomFunction?.returnType == 'Boolean')\" class=\"col-xs-12 col-sm-6 col-md-4\">\n\t\t\t\t\t\t<form-checkbox label=\"Return 'NOT' result\" formControlName=\"notCondition\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\n\t\t\t\t\t<section *ngIf=\"selectedFunction?.genericType !== eGenericType.None\" class=\"col-xs-12 col-sm-6 col-md-3\">\n\t\t\t\t\t\t<form-select label=\"Data Type\" formControlName=\"genericTypeCode\" [items]=\"typeCodes\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section  class=\"col-xs-12 col-sm-6 col-md-3\">\n\t\t\t\t\t\t<form-select label=\"Cache Options\" formControlName=\"functionCaching\" [items]=\"functionCache\" itemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"(selectedFunction || selectedCustomFunction) && inputParameterControls.length > 0\" class=\"mt-1\">\n\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let inputParameter of inputParameterControls; let i = index\" [ngStyle]=\"{'z-index': 300-i, 'position': 'relative'}\" class=\"mb-1\">\n\t\t\t\t\t\t<div *ngIf=\"inputParameter.value.rank > 0 && !inputParameter.value.runTime.functionParameter.linkedName\">\n\t\t\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t\t\tArray - {{inputParameter.value.name}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t\t\t<dexih-button *ngIf=\"selectedFunction.importMethodName\" iconClass=\"fa fa-download\" text=\"Import Mappings\" (click)=\"importMappings(inputParameter)\"\n\t\t\t\t\t\t\t\t\t title=\"Attempt to import the mappings from the source data\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\" text=\"Add Parameter\" (click)=\"addParameter(inputParameter, eParameterDirection.Input)\" title=\"Add a parameter to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-columns\" text=\"Add All Inputs\" (click)=\"addAllColumns(inputParameter)\" title=\"Add all the input columns to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\" text=\"Clear\" (click)=\"clearArray(inputParameter)\"></dexih-button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<input-parameter *ngIf=\"inputParameter.controls.arrayParameters.controls.length === 0\" [inputParameterForms]=\"[inputParameter]\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t [inputColumns]=\"inputColumns\" [allowAdd]=\"false\" [allowRemove]=\"false\" [updateParameterName]=\"false\" [rank]=\"inputParameter.value.rank\"\n\t\t\t\t\t\t\t [variables]=\"variables\">\n\t\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t\t\t<div *ngFor=\"let arrayParameter of inputParameter.controls.arrayParameters.controls; let j = index, let last = last\" class=\"pl-2 mb-1\"\n\t\t\t\t\t\t\t [ngStyle]=\"{'z-index': 300-j, 'position': 'relative'}\">\n\t\t\t\t\t\t\t\t<input-parameter [inputParameterForms]=\"[arrayParameter]\" [inputColumns]=\"inputColumns\" [allowAdd]=\"true\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t\t [allowRemove]=\"true\" [updateParameterName]=\"false\" (addParameter)=\"addParameter(inputParameter, eParameterDirection.Input, j)\"\n\t\t\t\t\t\t\t\t (removeParameter)=\"removeParameter(inputParameter, j)\" [variables]=\"variables\">\n\t\t\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t\t\t\t<small *ngIf=\"last && arrayParameter.value.runTime?.functionParameter?.description\" class=\"form-text text-muted\">\n\t\t\t\t\t\t\t\t\t<markdown [data]=\"arrayParameter.value.runTime.functionParameter.description\"></markdown>\n\t\t\t\t\t\t\t\t</small>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<input-parameter *ngIf=\"inputParameter.value.rank == 0 && !inputParameter.value.runTime.functionParameter.linkedName\" [inputParameterForms]=\"[inputParameter]\" [inputColumns]=\"inputColumns\" [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t [allowAdd]=\"false\" [allowRemove]=\"false\" [updateParameterName]=\"false\" [variables]=\"variables\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<!-- When linked array, then place parameters side/side -->\n\t\t\t\t<div *ngFor=\"let arrayParameter of arrayParameters\" class=\"mt-1\">\n\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t{{arrayParameter.name}}\n\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t<dexih-button *ngIf=\"selectedFunction.importMethodName\" iconClass=\"fa fa-download\" text=\"Import Mappings\" (click)=\"importInputOutputMappings(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Attempt to import the mappings from the source data\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\" text=\"Add Mapping\" (click)=\"addInputOutputParameter(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Add a parameter to the array\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-columns\" text=\"Add All Inputs\" (click)=\"addAllInputOutputColumns(arrayParameter)\"\n\t\t\t\t\t\t\t title=\"Add all the input columns to the array\" class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\" text=\"Clear\" (click)=\"clearInputOutputArray(arrayParameter)\"></dexih-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let parameterItem of arrayParameter.parameterItems; let j = index\" class=\"pl-2\"\n\t\t\t\t\t [ngStyle]=\"{'z-index': 200-j, 'position': 'relative'}\">\n\t\t\t\t\t\t<input-parameter \n\t\t\t\t\t\t [inputParameterForms]=\"parameterItem.inputItems\" \n\t\t\t\t\t\t [outputParameterForms]=\"parameterItem.outputItems\" \n\t\t\t\t\t\t [nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t [inputColumns]=\"inputColumns\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"true\" [allowRemove]=\"true\"\n\t\t\t\t\t\t [updateParameterName]=\"false\" (addParameter)=\"addInputOutputParameter(arrayParameter, j)\"\n\t\t\t\t\t\t (removeParameter)=\"removeInputOutputParameter(arrayParameter, j)\"\n\t\t\t\t\t\t [variables]=\"variables\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div *ngIf=\"(selectedFunction || selectedCustomFunction) && allowOutput\" class=\"mt-1\">\n\t\t\t\t\t<label class=\"d-flex flex-row\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\tOutput Parameters\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t<dexih-button text=\"Auto Map\" buttonClass=\"btn-sm btn-outline-primary\" (click)=\"autoMap(outputParameter)\"></dexih-button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</label>\n\t\t\t\t\t<div *ngFor=\"let outputParameter of outputParameterControls; let i = index\" [ngStyle]=\"{'z-index': 100-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<div *ngIf=\"outputParameter.value.rank > 0 && !outputParameter.value.runTime.functionParameter.linkedName\">\n\t\t\t\t\t\t\t<div class=\"d-flex flex-row mb-1\">\n\t\t\t\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t\t\t\tArray - {{outputParameter.value.name}}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"ml-auto\">\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-plus\"  text=\"Add Parameter\" (click)=\"addParameter(outputParameter, eParameterDirection.Output)\" title=\"Add a parameter to the array\"\n\t\t\t\t\t\t\t\t\t class=\"mr-1\"></dexih-button>\n\t\t\t\t\t\t\t\t\t<dexih-button iconClass=\"fa fa-eraser\"  text=\"Clear\" (click)=\"clearArray(outputParameter)\"></dexih-button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<output-parameter *ngIf=\"outputParameter.controls.arrayParameters.controls.length === 0\" [outputParameterForm]=\"outputParameter\"\n\t\t\t\t\t\t\t [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"false\" [allowRemove]=\"false\" [rank]=\"outputParameter.value.rank\">\n\t\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t\t\t<div *ngFor=\"let arrayParameter of outputParameter.controls.arrayParameters.controls; let j = index\" class=\"pl-2\"\n\t\t\t\t\t\t\t [ngStyle]=\"{'z-index': 200-j, 'position': 'relative'}\">\n\t\t\t\t\t\t\t\t<output-parameter [outputParameterForm]=\"arrayParameter\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" [allowAdd]=\"true\"\n\t\t\t\t\t\t\t\t [allowRemove]=\"true\" (addParameter)=\"addParameter(outputParameter, eParameterDirection.Output, j)\"\n\t\t\t\t\t\t\t\t (removeParameter)=\"removeParameter(outputParameter, j)\">\n\t\t\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<output-parameter *ngIf=\"outputParameter.value.rank == 0\" [outputParameterForm]=\"outputParameter\" [outputColumns]=\"outputColumns\" [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t [allowAdd]=\"false\" [allowRemove]=\"false\">\n\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, InvalidActions, FunctionCache} from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { FunctionParameter, eFunctionType, eParameterDirection, eGenericType, DexihDatalinkColumn, FunctionReference,\n  DexihCustomFunction, eTransformType, DexihDatalinkTable, DexihDatalinkTransformItem, eTransformItemType,\n  DexihFunctionParameter, eTypeCode, DexihCustomFunctionParameter,\n  DexihFunctionArrayParameter, RemoteLibraries, eInvalidActionItems, eErrorActionItems, DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\nexport class ArrayParameter {\n  public name: string;\n  public functionParameter: FunctionParameter;\n\n  public inputParameterForms: FormGroup[] = [];\n  public outputParameterForms: FormGroup[] = [];\n\n  public parameterItems: ArrayParameterItem[] = [];\n\n  public resetItems() {\n    let inputArray = <FormArray>this.inputParameterForms[0].controls.arrayParameters;\n    for (let i = 0; i < inputArray.controls.length; i++) {\n      let item = new ArrayParameterItem();\n      this.inputParameterForms.forEach(inputParameterForm => {\n        let array = <FormArray>inputParameterForm.controls.arrayParameters;\n        item.inputItems.push(<FormGroup>array.controls[i]);\n      });\n      this.outputParameterForms.forEach(outputParameterForm => {\n        let array = <FormArray>outputParameterForm.controls.arrayParameters;\n        item.outputItems.push(<FormGroup>array.controls[i]);\n      });\n\n      this.parameterItems.push(item);\n    }\n  }\n}\n\nexport class ArrayParameterItem {\n  public inputItems: FormGroup[] = [];\n  public outputItems: FormGroup[] = [];\n}\n\n\n@Component({\n\n  selector: 'dexih-function-edit',\n  templateUrl: './standard-function-edit.component.html'\n})\nexport class StandardFunctionEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n  public remoteLibraries: RemoteLibraries;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  typeCodes = TypeCodes;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _returnParameterSubscription: Subscription;\n  private _functionSubscription: Subscription;\n  private _saveSubscription: Subscription;\n\n  private cancelToken: CancelToken = new CancelToken();\n\n  transformFunctionType: eFunctionType;\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  // returnParameterForm: FormGroup;\n  resultReturnParameterForm: FormGroup;\n\n  useCustomFunction: boolean;\n\n  invalidActions = InvalidActions;\n  functionCache = FunctionCache;\n  eGenericType = eGenericType;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n\n  functionCategory: string;\n  functionCategories: Array<string>;\n  functions: Array<FunctionReference>;\n  filteredFunctions: Array<FunctionReference>;\n  selectedFunction: FunctionReference;\n  customFunctions: Array<DexihCustomFunction>;\n  selectedCustomFunction: DexihCustomFunction;\n\n  variables = [];\n\n  allowOutput = false;\n  allowReturn = true;\n\n  inputParameterControls: Array<FormGroup>;\n  outputParameterControls: Array<FormGroup>;\n\n  arrayParameters: ArrayParameter[] = [];\n\n  eInvalidActionItems = eInvalidActionItems.filter(c => c.key > 0);\n  eErrorActionItems = eErrorActionItems.filter(c => c.key > 0);\n\n  logger = new LogFactory('standard-function-edit');\n\n  isJoin = false;\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.hubService.getRemoteLibrariesObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        this.remoteLibraries = result[3]\n        this.datalinkForm = result[4];\n\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        if (this.hubCache && this.hubCache.isLoaded() && this.datalinkForm\n          && this.remoteLibraries && this.remoteLibraries.functions.length > 0) {\n\n          this.transformFunctionType = +params['functionType'];\n          if (this.transformFunctionType === eFunctionType.Validate) {\n            this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n            this.datalinkTransformKey = this.datalinkTransformForm.value.key;\n          } else {\n            this.datalinkTransformKey = +params['datalinkTransformKey'];\n            this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n          }\n\n          this.variables = this.editDatalinkService.getVariables();\n\n          this.useCustomFunction = this.datalinkTransformForm.controls.customFunctionKey ? true : false;\n          this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n\n          this.isJoin = this.datalinkTransformForm.value.transformType === eTransformType.Join ||\n            this.datalinkTransformForm.value.transformType === eTransformType.Lookup;\n\n          // if this is a join transform, then the use the join columns for the input.\n          if (this.isJoin) {\n            const table = <DexihDatalinkTable>this.datalinkTransformForm.controls.joinDatalinkTable.value;\n            if (!table) {\n              this.hubService.addHubErrorMessage('The join table could not be found.');\n              this.authService.navigateUp();\n              return;\n            }\n\n            this.inputColumns = table.dexihDatalinkColumns;\n          } else {\n            let nodeDatalinkColumn = <DexihDatalinkColumn> this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n            let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n            let io = new InputOutputColumns();\n            if (nodeDatalinkColumnKey) {\n              let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n            } else {\n              this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            }\n          }\n\n          this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n            if (!this.datalinkTransformItemForm) {\n              this.authService.navigateUp();\n              return;\n            }\n\n            // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n            if (this.datalinkTransformItemForm.controls.customFunctionKey.value) {\n                this.selectCustomFunction(this.datalinkTransformItemForm.value.customFunctionKey, false);\n            } else {\n            let selectedFunction = this.remoteLibraries.functions.find(c =>\n              c.functionClassName === this.datalinkTransformItemForm.value.functionClassName &&\n              c.functionMethodName === this.datalinkTransformItemForm.value.functionMethodName &&\n              c.functionAssemblyName === this.datalinkTransformItemForm.value.functionAssemblyName\n            );\n\n            // this.selectedFunction = selectedFunction;\n              this.selectFunction(selectedFunction, false);\n            // this.refreshParameters();\n            }\n\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.BuiltInFunction;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          switch (this.transformFunctionType) {\n            case eFunctionType.Condition:\n            case eFunctionType.JoinCondition:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Condition);\n              this.allowOutput = false;\n              break;\n            case eFunctionType.Validate:\n              this.functions = this.remoteLibraries.functions\n                .filter(c => c.functionType === eFunctionType.Condition || c.functionType === eFunctionType.Validate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Map:\n              this.functions = this.remoteLibraries.functions\n                .filter(c => c.functionType === eFunctionType.Condition ||\n                  c.functionType === eFunctionType.Validate ||\n                  c.functionType === eFunctionType.Map);\n\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Aggregate:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Aggregate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Series:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Series ||\n                c.functionType === eFunctionType.Aggregate);\n              this.allowOutput = true;\n              break;\n            case eFunctionType.Rows:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Rows);\n              this.allowOutput = true;\n              this.allowReturn = false;\n              break;\n            case eFunctionType.Profile:\n              this.functions = this.remoteLibraries.functions.filter(c => c.functionType === eFunctionType.Profile);\n              this.allowOutput = false;\n              break;\n            default:\n              this.functions = null;\n          }\n\n          this.functionCategories = Array.from(new Set(this.functions.map(c => c.category)));\n          this.filteredFunctions = this.functions;\n          this.customFunctions = this.hubCache.hub.dexihCustomFunctions;\n          if (this.datalinkTransformItemForm && this.datalinkTransformItemForm.value.customFunctionKey) {\n            this.useCustomFunction = true;\n            this.selectedCustomFunction = this.hubCache.hub.dexihCustomFunctions\n              .find(c => c.key === this.datalinkTransformItemForm.value.customFunctionKey);\n          }\n\n          if (this._functionSubscription) { this._functionSubscription.unsubscribe(); }\n          this._functionSubscription = this.newDatalinkTransformItemForm.controls.customFunctionKey.valueChanges\n            .subscribe(customFunctionKey => {\n              this.selectCustomFunction(customFunctionKey, false);\n            });\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Standard Function Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n    if (this._functionSubscription) { this._functionSubscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  updateCategory(value) {\n    if (value) {\n      this.filteredFunctions = this.functions.filter(c => c.category === value);\n    } else {\n      this.filteredFunctions = this.functions;\n    }\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('The function has changed',\n          'The function has changed.  Do you want to discard the changes and continue?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private parametersArray() {\n    return <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n  }\n\n  refreshParameters() {\n    let parametersArray = this.parametersArray();\n\n    // convoluted sort below allows sorting by the direction then the position\n    this.inputParameterControls = <FormGroup[]>parametersArray.controls\n      .sort((a, b) => a.value.position - b.value.position)\n      .filter(c => (c.value.direction === eParameterDirection.Input || c.value.direction === eParameterDirection.ResultInput\n        || c.value.direction === eParameterDirection.Join));\n\n    // convoluted sort below allows sorting by the direction then the position\n    this.outputParameterControls = <FormGroup[]>parametersArray.controls\n      .sort((a, b) => a.value.position - b.value.position)\n      .filter(c => HubCache.parameterIsOutput(c.value));\n\n    // don't include return value (which will determine pass/fail) for validation transforms.\n    if (this.transformFunctionType === eFunctionType.Validate) {\n      this.outputParameterControls = this.outputParameterControls.filter(c => c.value.direction !== eParameterDirection.ReturnValue);\n    }\n\n    this.arrayParameters = [];\n\n    if (this.selectedFunction) {\n\n      this.selectedFunction.inputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, true);\n      });\n\n      this.selectedFunction.outputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n      this.selectedFunction.resultInputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, true);\n      });\n\n      this.selectedFunction.resultOutputParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n      this.selectedFunction.resultReturnParameters?.filter(c => c.linkedName).forEach(parameter => {\n        this.addArrayParameter(parameter, false);\n      });\n\n    }\n\n    this.arrayParameters.forEach(arrayParameter => arrayParameter.resetItems());\n  }\n\n  private addArrayParameter(parameter: FunctionParameter, isInput: boolean) {\n    let arrayParameter = this.arrayParameters.find(c => c.name === parameter.linkedName);\n    if (!arrayParameter) {\n      arrayParameter = new ArrayParameter();\n      arrayParameter.name = parameter.linkedName;\n      arrayParameter.functionParameter = parameter;\n      this.arrayParameters.push(arrayParameter);\n    }\n\n    if (isInput) {\n      let controls = this.inputParameterControls.find(c => c.controls.name.value === parameter.name);\n      arrayParameter.inputParameterForms.push(controls);\n    } else {\n      let controls = this.outputParameterControls.find(c => c.controls.name.value === parameter.name);\n      arrayParameter.outputParameterForms.push(controls);\n    }\n\n  }\n\n  // when a new standard function is selected\n  // reset all the parameters\n  selectFunction(value: FunctionReference, markAsDirty: boolean) {\n    this.selectedFunction = value;\n\n    if (value === null || value === undefined) { return; }\n\n    this.newDatalinkTransformItemForm.controls.functionAssemblyName.setValue(this.selectedFunction.functionAssemblyName);\n    this.newDatalinkTransformItemForm.controls.functionClassName.setValue(this.selectedFunction.functionClassName);\n    this.newDatalinkTransformItemForm.controls.functionMethodName.setValue(this.selectedFunction.functionMethodName);\n    this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(null);\n\n    if (!this.newDatalinkTransformItemForm.controls.genericTypeCode.value) {\n      if (this.selectedFunction.genericTypeDefault) {\n        this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(this.selectedFunction.genericTypeDefault);\n      } else {\n        if (this.selectedFunction.genericType === eGenericType.Numeric) {\n          this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(eTypeCode.Decimal);\n        } else {\n          this.newDatalinkTransformItemForm.controls.genericTypeCode.setValue(eTypeCode.String);\n        }\n      }\n    }\n\n    switch (this.selectedFunction.genericType) {\n      case eGenericType.All:\n        this.typeCodes = TypeCodes;\n        break;\n      case eGenericType.Numeric:\n        this.typeCodes = TypeCodes.filter(c => c.isNumeric);\n        break;\n      case eGenericType.String:\n        this.typeCodes = TypeCodes.filter(c => c.isString);\n        break;\n      case eGenericType.None:\n        this.typeCodes = [];\n    }\n\n    if (this.selectedFunction) {\n      let parameters = this.parametersArray();\n      let existingParameters: any[] = [];\n\n      while (parameters.length) {\n        existingParameters.push(parameters.value[0])\n        parameters.removeAt(0);\n      }\n\n      if (this.selectedFunction.inputParameters) {\n        this.selectedFunction.inputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            parameters.push(\n                this.newParameter(existingParameters, param, index, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input,\n                    this.selectedFunction.genericTypeDefault));\n          }\n        });\n      }\n\n      if (this.selectedFunction.outputParameters) {\n        this.selectedFunction.outputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            if (param) {\n              parameters.push(this.newParameter(existingParameters, param, index + 100, eParameterDirection.Output,\n                this.selectedFunction.genericTypeDefault));\n            }\n          }\n        });\n      }\n\n      if (this.selectedFunction.resultInputParameters) {\n        this.selectedFunction.resultInputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            parameters.push(\n                this.newParameter(existingParameters, param, index + 200, eParameterDirection.ResultInput,\n                  this.selectedFunction.genericTypeDefault));\n          }\n        });\n      }\n\n      if (this.selectedFunction.resultOutputParameters) {\n        this.selectedFunction.resultOutputParameters.forEach((param: FunctionParameter, index: number) => {\n          if (param) {\n            if (param) {\n              parameters.push(\n                  this.newParameter(existingParameters, param, index + 300, eParameterDirection.ResultOutput,\n                    this.selectedFunction.genericTypeDefault));\n            }\n          }\n        });\n      }\n\n      if (this.selectedFunction.returnParameters) {\n        if (this.allowReturn && this.selectedFunction.returnParameters.length > 0) {\n          this.selectedFunction.returnParameters.forEach((parameter: FunctionParameter, index: number) => {\n            parameters.push(this.newParameter(existingParameters, parameter, index + 400,\n              eParameterDirection.ReturnValue, this.selectedFunction.genericTypeDefault ));\n          });\n        }\n      }\n\n      if (this.selectedFunction.resultReturnParameters) {\n        if (this.allowReturn && this.selectedFunction.resultReturnParameters.length > 0) {\n            this.selectedFunction.resultReturnParameters.forEach(parameter => {\n            parameters.push(this.newParameter(existingParameters, parameter, 0,\n                eParameterDirection.ResultReturnValue, this.selectedFunction.genericTypeDefault));\n          });\n        }\n      }\n\n      this.refreshParameters();\n\n      if (markAsDirty) {\n        this.newDatalinkTransformItemForm.markAsDirty();\n      }\n    } else {\n      this.selectedFunction = null;\n    }\n  }\n\n  private newParameter(existingParameters: DexihFunctionParameter[],\n    param: any, index: number, direction: eParameterDirection, genericTypeDefault: eTypeCode): FormGroup {\n\n    let existingValue = existingParameters.find(c => c.name === param.parameterName)\n\n    let newParameter = new DexihFunctionParameter();\n    // newParameter.datalinkTransformItemKey = this.datalinkTransformItemKey;\n    newParameter.name = param.parameterName;\n    newParameter.rank = param.rank;\n    newParameter.direction = direction;\n    newParameter.isGeneric = param.isGeneric;\n    newParameter.position = index;\n    newParameter.key = this.hubCache.getNextSequence();\n    newParameter['runTime'] = {functionParameter: param};\n\n    if (existingValue) {\n      newParameter.key = existingValue.key;\n      newParameter.datalinkColumn = existingValue.datalinkColumn;\n      newParameter.value = existingValue.value;\n      newParameter.dataType = param.isGeneric ? existingValue.dataType : param.dataType;\n      existingValue.arrayParameters.forEach(p => {\n        p['runTime'] = {functionParameter: param};\n      });\n      newParameter.arrayParameters = existingValue.arrayParameters;\n    } else {\n      newParameter.value = param.defaultValue;\n      newParameter.dataType = param.isGeneric ? genericTypeDefault : param.dataType;\n    }\n\n    newParameter.isValid = true;\n\n    let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionParametersFormGroup(newParameter);\n    return newParameterForm;\n  }\n\n  // when a new standard function is selected\n  // reset all the parameters\n  selectCustomFunction(customFunctionKey: number, markAsDirty: boolean) {\n    this.selectedCustomFunction = this.hubCache.hub.dexihCustomFunctions.find(c => c.key === customFunctionKey);\n\n    if (this.selectedCustomFunction) {\n      let parameters = this.parametersArray();\n      let existingParameters: any[] = [];\n\n      while (parameters.length) {\n        existingParameters.push(parameters.value[0]);\n        parameters.removeAt(0);\n      }\n\n      this.selectedCustomFunction.dexihCustomFunctionParameters\n        .filter(c => (c.direction === eParameterDirection.Input || c.direction === eParameterDirection.Join)  && c.isValid)\n        .forEach((param: DexihCustomFunctionParameter, index: number) => {\n          if (param) {\n            let newParameterForm =\n              this.newParameter(existingParameters, param, index, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input,\n                this.selectedCustomFunction.genericTypeDefault);\n            parameters.push(newParameterForm);\n          }\n        });\n\n      this.selectedCustomFunction.dexihCustomFunctionParameters.filter(c => c.direction === eParameterDirection.Output && c.isValid)\n        .forEach((param: DexihCustomFunctionParameter, index: number) => {\n          if (param) {\n            let newParameterForm =\n              this.newParameter(existingParameters, param, index, eParameterDirection.Output,\n                this.selectedCustomFunction.genericTypeDefault);\n            parameters.push(newParameterForm);\n          }\n        });\n\n        let returnParameter = new DexihFunctionParameter();\n        returnParameter.dataType = this.selectedCustomFunction.returnType;\n        returnParameter.name = 'Return';\n        returnParameter.direction = eParameterDirection.Output;\n        returnParameter.rank = 0;\n        returnParameter.position = -1;\n        returnParameter.isValid = true;\n        let newParameterForm2 = this.newParameter(existingParameters, returnParameter, 0, eParameterDirection.ReturnValue,\n          this.selectedCustomFunction.genericTypeDefault);\n        parameters.push(newParameterForm2);\n\n      this.refreshParameters();\n\n      if (markAsDirty) {\n        this.newDatalinkTransformItemForm.markAsDirty();\n      }\n    }\n  }\n\n  private createArrayParameter(parentParameter: DexihFunctionArrayParameter,\n    direction: eParameterDirection, position: number = null, genericTypeDefault: eTypeCode):\n    DexihFunctionArrayParameter {\n    let param = parentParameter['runTime'].functionParameter;\n    let newParameter = new DexihFunctionArrayParameter();\n    newParameter.isGeneric = param.isGeneric;\n    newParameter.dataType = param.isGeneric ? genericTypeDefault : parentParameter.dataType;\n    newParameter.position = position ? position + 1 : 10000000;\n    newParameter.name = param.name;\n    newParameter.direction = direction;\n    newParameter.rank = 0;\n    newParameter.key = this.hubCache.getNextSequence();\n    newParameter.datalinkColumn = null;\n    newParameter.isValid = true;\n    newParameter['runTime'] = {functionParameter: param};\n\n    return newParameter;\n  }\n\n  addParameter(parentParameterForm: FormGroup, direction: eParameterDirection, position: number = null): FormGroup {\n    if (direction === eParameterDirection.Input && this.isJoin) { direction = eParameterDirection.Join; }\n    let parentParameter = parentParameterForm.value;\n    let newParameter = this.createArrayParameter(parentParameter, direction, 0,\n      this.newDatalinkTransformItemForm.controls.genericTypeCode.value);\n    let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionArrayParametersFormGroup(newParameter);\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    if (position !== null) {\n      arrayForm.insert(position + 1, newParameterForm);\n    } else {\n      arrayForm.push(newParameterForm);\n    }\n\n    // reset the positions\n    arrayForm.controls.forEach((p, index) => {\n      (<FormGroup>p).controls.position.setValue(index * 10);\n    });\n\n    this.refreshParameters()\n    return newParameterForm;\n  }\n\n  addInputOutputParameter(arrayParameter: ArrayParameter, position: number = null) {\n    let item = new ArrayParameterItem();\n\n    arrayParameter.inputParameterForms.forEach(parameterForm => {\n      let parameter = this.addParameter(parameterForm, this.isJoin ? eParameterDirection.Join : eParameterDirection.Input, position);\n      item.inputItems.push(parameter);\n    });\n\n    arrayParameter.outputParameterForms.forEach(parameterForm => {\n      let parameter = this.addParameter(parameterForm, eParameterDirection.Output, position);\n      item.outputItems.push(parameter);\n    });\n\n    if (position !== null) {\n      arrayParameter.parameterItems.splice(position, 0, item);\n    } else {\n      arrayParameter.parameterItems.push(item);\n    }\n  }\n\n  removeParameter(parentParameterForm: FormGroup, position: number) {\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    if (position > -1) {\n      arrayForm.removeAt(position);\n      this.newDatalinkTransformItemForm.markAsDirty();\n      this.refreshParameters();\n    }\n  }\n\n  removeInputOutputParameter(arrayParameter: ArrayParameter, position: number = null) {\n\n    arrayParameter.inputParameterForms.forEach(parameterForm => {\n      this.removeParameter(parameterForm, position);\n    });\n\n    arrayParameter.outputParameterForms.forEach(parameterForm => {\n      this.removeParameter(parameterForm, position);\n    });\n\n    if (position !== null) {\n      arrayParameter.parameterItems.splice(position, 1);\n    } else {\n      arrayParameter.parameterItems.splice(arrayParameter.parameterItems.length - 1, 1);\n    }\n  }\n\n  addAllColumns(parentParameterForm: FormGroup) {\n    this.clearArray(parentParameterForm);\n\n    let isLabel = parentParameterForm.value.runTime.functionParameter.isLabel;\n    let parentParameter = parentParameterForm.value;\n    let arrayForm = <FormArray>parentParameterForm.controls.arrayParameters;\n    let position = 1;\n    this.inputColumns.forEach(column => {\n      let newParameter = this.createArrayParameter(parentParameter,\n        this.isJoin ? eParameterDirection.Join : eParameterDirection.Input, position++, this.selectedFunction.genericTypeDefault);\n        if (isLabel) {\n          newParameter.value = column.name;\n        } else {\n          newParameter.datalinkColumn = column;\n        }\n\n      let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionArrayParametersFormGroup(newParameter);\n      arrayForm.push(newParameterForm);\n    });\n    this.refreshParameters();\n  }\n\n  addAllInputOutputColumns(arrayParameter: ArrayParameter) {\n    // add the first parameter\n    this.addAllColumns(arrayParameter.inputParameterForms[0]);\n    let inputArrayForm = <FormArray>arrayParameter.inputParameterForms[0].controls.arrayParameters;\n\n    if (arrayParameter.inputParameterForms.length > 1) {\n      this.clearArray(arrayParameter.inputParameterForms[1]);\n      for (let i = 0; i < inputArrayForm.length; i++) {\n        let parameter = this.addParameter(arrayParameter.inputParameterForms[1],\n          this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n\n        // if the first parameter is a label, then map the matching column to the second input parameter\n        if (arrayParameter.inputParameterForms[0].value.runTime.functionParameter.isLabel) {\n          parameter.controls.datalinkColumn.setValue(this.inputColumns[i]);\n        }\n      }\n\n      // add any other parameters with default values.\n      for (let i = 2; i < arrayParameter.inputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.inputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n          let parameter = this.addParameter(arrayParameter.inputParameterForms[i],\n            this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n            parameter.controls.value.setValue(arrayParameter.inputParameterForms[i].value.runTime.functionParameter.defaultValue);\n        }\n      }\n    }\n\n    // add any output columns of the same length.\n    if (arrayParameter.outputParameterForms.length > 0) {\n      for (let i = 0; i < arrayParameter.outputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.outputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n        }\n      }\n    }\n\n    arrayParameter.resetItems();\n  }\n\n  clearArray(parameterForm: FormGroup) {\n    let arrayForm = <FormArray>parameterForm.controls.arrayParameters;\n    for (let i = arrayForm.controls.length - 1; i >= 0; i--) {\n      arrayForm.removeAt(i);\n    }\n    this.refreshParameters();\n  }\n\n  clearInputOutputArray(arrayParameter: ArrayParameter) {\n    arrayParameter.inputParameterForms.forEach(form => {\n      this.clearArray(form);\n    });\n\n    arrayParameter.outputParameterForms.forEach(form => {\n      this.clearArray(form);\n    });\n  }\n\n\n  async importInputOutputMappings(arrayParameter: ArrayParameter) {\n    let result = await this.editDatalinkService\n      .importFunctionMappings(this.datalinkTransformKey, this.newDatalinkTransformItemForm.value, this.cancelToken);\n\n      if (result === null) { return; }\n\n      let inputArrayForm = <FormArray>arrayParameter.inputParameterForms[0].controls.arrayParameters;\n\n      this.clearArray(arrayParameter.inputParameterForms[0]);\n      for (let i = 0; i < result.length; i++) {\n        let parameter = this.addParameter(arrayParameter.inputParameterForms[0],\n          this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n\n          parameter.controls.value.setValue(result[i]);\n\n        // // if the first parameter is a label, then map the matching column to the second input parameter\n        // if (arrayParameter.inputParameterForms[0].value.runTime.functionParameter.isLabel) {\n        //   parameter.controls.datalinkColumn.setValue(this.inputColumns[i]);\n        // }\n      }\n\n      // add any other parameters with default values.\n      for (let i = 1; i < arrayParameter.inputParameterForms.length; i++) {\n        this.clearArray(arrayParameter.inputParameterForms[i]);\n        for (let j = 0; j < inputArrayForm.length; j++) {\n          let parameter = this.addParameter(arrayParameter.inputParameterForms[i],\n            this.isJoin ? eParameterDirection.Join : eParameterDirection.Input);\n            parameter.controls.value.setValue(arrayParameter.inputParameterForms[i].value.runTime.functionParameter.defaultValue);\n        }\n      }\n\n      // add any output columns of the same length.\n      if (arrayParameter.outputParameterForms.length > 0) {\n        for (let i = 0; i < arrayParameter.outputParameterForms.length; i++) {\n          this.clearArray(arrayParameter.outputParameterForms[i]);\n          for (let j = 0; j < inputArrayForm.length; j++) {\n          }\n        }\n      }\n\n      arrayParameter.resetItems();\n  }\n\n  autoMap() {\n    this.outputParameterControls.forEach(param => {\n      let newColumn = new DexihDatalinkColumn();\n      newColumn.key = this.hubService.getHubCache().getNextSequence();\n      newColumn.position = 1000 - newColumn.key;\n\n      let paramValue = <DexihFunctionParameter> param.value;\n\n      newColumn.dataType = paramValue.dataType;\n      newColumn.allowDbNull = true;\n      newColumn.name = paramValue['runTime'].functionParameter.name;\n      newColumn.logicalName = paramValue['runTime'].functionParameter.name;\n      newColumn.rank = paramValue.rank;\n\n      param.controls.datalinkColumn.setValue(newColumn);\n      this.newDatalinkTransformItemForm.markAsDirty();\n    })\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n}\n\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section *ngIf=\"datalinkTransformForm\" title=\"Edit Custom Function\" [showExpandButton]=\"true\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-validate class=\"mr-1\" (click)=\"test()\" text=\"Syntax Check\"></dexih-button-validate>\n\t\t\t<dexih-button-download class=\"mr-1\" (click)=\"downloadCode()\" text=\"Download Code\"></dexih-button-download>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\"\n\t\t\t\t(click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\n\t\t<form *ngIf=\"newDatalinkTransformItemForm\" [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"functionType != eFunctionType.Validate && functionType != eFunctionType.condition\"\n\t\t\t\t\t\tclass=\"col col-xs-4\" [ngStyle]=\"{'z-index': 305, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when null\" formControlName=\"onNull\" [items]=\"eErrorActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section class=\"col col-xs-4\" [ngStyle]=\"{'z-index': 304, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when error\" formControlName=\"onError\" [items]=\"eErrorActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"selectedFunction && selectedFunction?.returnType == 'Boolean'\" class=\"col col-xs-4\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 303, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-checkbox label=\"Return 'NOT' result\" formControlName=\"notCondition\">\n\t\t\t\t\t\t</form-checkbox>\n\t\t\t\t\t</section>\n\t\t\t\t\t<div *ngIf=\"functionType == eFunctionType.Validate\" class=\"col col-xs-4\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 302, 'position': 'relative'}\">\n\t\t\t\t\t\t<form-select label=\"Action when false\" formControlName=\"invalidAction\" [items]=\"eInvalidActionItems\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\" [enableFilter]=\"false\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<div class=\"label\">\n\t\t\t\t\t\tInput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"inputParameters.length === 0\" class=\"mb-1\">\n\t\t\t\t\t\t<dexih-button (click)=\"addParameter(null, eParameterDirection.Input)\"\n\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\" title=\"Click to add a parameter\">Add Parameter\n\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let inputParameter of inputParameters; let i = index\" class=\"pl-2\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<input-parameter [allowNameSelect]=\"true\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[inputParameterForms]=\"[inputParameter]\" [inputColumns]=\"inputColumns\"\n\t\t\t\t\t\t\t[nodeDatalinkColumnKey]=\"datalinkTransformForm.controls.nodeDatalinkColumn.value?.key\"\n\t\t\t\t\t\t\t(hasChanged)=\"parameterHasChanged($event)\" [updateParameterName]=\"true\"\n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Input)\"\n\t\t\t\t\t\t\t(removeParameter)=\"removeParameter($event)\" [allowAdd]=\"true\" [allowRemove]=\"true\">\n\t\t\t\t\t\t</input-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div *ngIf=\"functionType != eFunctionType.Condition && functionType != eFunctionType.JoinCondition\">\n\t\t\t\t\t<div class=\"label mb-1\">\n\t\t\t\t\t\tOutput Parameters\n\t\t\t\t\t</div>\n\t\t\t\t\t<div [ngStyle]=\"{'z-index': 101, 'position': 'relative'}\">\n\t\t\t\t\t\t<output-parameter [allowNameSelect]=\"false\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[outputParameterForm]=\"returnParameterForm\" [outputColumns]=\"outputColumns\"  [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Output)\"></output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngIf=\"outputParameters.length === 0\">\n\t\t\t\t\t\t<dexih-button (click)=\"addParameter(null, eParameterDirection.Output)\"\n\t\t\t\t\t\t\ticonClass=\"fa fa-plus-square-o\" title=\"Click to add a parameter\">Add Parameter\n\t\t\t\t\t\t</dexih-button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div *ngFor=\"let parameter of outputParameters; let i = index\"\n\t\t\t\t\t\t[ngStyle]=\"{'z-index': 100-i, 'position': 'relative'}\">\n\t\t\t\t\t\t<output-parameter [allowNameSelect]=\"true\" [allowDataTypeSelect]=\"true\"\n\t\t\t\t\t\t\t[outputParameterForm]=\"parameter\" [outputColumns]=\"outputColumns\"  [datalinkTargets]=\"datalinkTargets\" \n\t\t\t\t\t\t\t[updateParameterName]=\"true\"\n\t\t\t\t\t\t\t(addParameter)=\"addParameter($event, eParameterDirection.Output)\"\n\t\t\t\t\t\t\t(removeParameter)=\"removeParameter($event)\" [allowAdd]=\"true\" [allowRemove]=\"true\">\n\t\t\t\t\t\t</output-parameter>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\tFunction Code\n\t\t\t\t<textarea class='form-control' rows=\"20\" width=\"100%\" spellcheck=\"false\"\n\t\t\t\t\tformControlName=\"functionCode\"></textarea>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n\n\n\n\t<dexih-widget-section *ngIf=\"datalinkTransformForm && newDatalinkTransformItemForm\" title=\"Test Function\"\n\t\t[showExpandButton]=\"true\">\n\t\t<ng-template #header>\n\t\t\t<button class=\"btn btn-success mr-1\" (click)=\"test()\">Syntax Check</button>\n\t\t\t<button class=\"btn btn-success mr-1\" (click)=\"test(inputParameterValues)\">Run</button>\n\t\t\t<button class=\"btn btn-success\" (click)=\"downloadCode(inputParameterValues)\">Download Code</button>\n\t\t</ng-template>\n\n\t\t<form>\n\t\t\t<div class=\"label\">\n\t\t\t\tInput Parameters\n\t\t\t</div>\n\t\t\t<div *ngFor=\"let inputParameter of inputParameters; let i = index\"\n\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t<form-input [label]=\"inputParameter.controls.name.value\" [(ngModel)]=\"inputParameterValues[i]\"\n\t\t\t\t\t[name]=\"'inputParameterValues' + i\" type=\"text\" placeholder=\"Enter a test value for the parameter\">\n\t\t\t\t</form-input>\n\t\t\t</div>\n\t\t\t<form-input label=\"Return Value\" [disabled]=\"true\" [(ngModel)]=\"returnParameterValue\"\n\t\t\t\tname=\"returnParameterValue\" type=\"text\"></form-input>\n\t\t\t<div class=\"label\" *ngIf=\"outputParameters.length > 0\">\n\t\t\t\tOutputs Parameters\n\t\t\t</div>\n\t\t\t<div *ngFor=\"let outputParameter of outputParameters; let i = index\"\n\t\t\t\t[ngStyle]=\"{'z-index': 200-i, 'position': 'relative'}\">\n\t\t\t\t<form-input [disabled]=\"true\" [label]=\"outputParameter.controls.name.value\"\n\t\t\t\t\t[(ngModel)]=\"outputParameterValues[i]\" [name]=\"'outputParameterValues' + i\" type=\"text\">\n\t\t\t\t</form-input>\n\t\t\t</div>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubCache, InvalidActions } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription ,  Observable, combineLatest} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eParameterDirection, DexihDatalinkColumn, DexihDatalinkTransformItem,\n  eTransformItemType, eTypeCode, DexihFunctionParameter, eErrorActionItems, eInvalidActionItems, FunctionParameter,\n  DexihDatalinkTarget } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n  selector: 'dexih-custom-function-edit',\n  templateUrl: './custom-function-edit.component.html'\n})\nexport class CustomFunctionEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n\n  public pageTitle: string;\n\n  public cancelToken: CancelToken = new CancelToken();\n\n  private _subscription: Subscription;\n  private _returnParameterSubscription: Subscription;\n  private _parametersSubscription: Subscription;\n  private _saveSubscription: Subscription;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  functionType: eFunctionType;\n\n  eInvalidActionItems = eInvalidActionItems.filter(c => c.key > 0);\n  eErrorActionItems = eErrorActionItems.filter(c => c.key > 0);\n\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  returnParameterForm: FormGroup;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  parameters: FormArray;\n  inputParameters: AbstractControl[] = [];\n  outputParameters: AbstractControl[] = [];\n\n  inputParameterValues = [];\n  outputParameterValues = [];\n  returnParameterValue;\n\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n          this.route.data,\n          this.route.params,\n          this.hubService.getHubCacheObservable(),\n          this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n          this.hubService.getRemoteLibrariesObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        this.hubCache = result[2];\n        this.datalinkForm = result[3];\n\n        this.functionType = result[1]['functionType'];\n        if (this.functionType === eFunctionType.Validate) {\n          this.datalinkTransformForm = this.editDatalinkService.getValidationTransform();\n          this.datalinkTransformKey = this.datalinkTransformForm.value.key;\n        } else {\n          this.datalinkTransformKey = +result[1]['datalinkTransformKey'];\n          this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n        }\n\n        this.datalinkTransformItemKey = +result[1]['datalinkTransformItemKey'];\n\n        if (this.datalinkTransformForm) {\n          // // if this is a join transform, then the use the join columns for the input.\n          // if (this.datalinkTransformForm.value.transformType === eTransformType.Join ||\n          //   this.datalinkTransformForm.value.transformType === eTransformType.Lookup ) {\n          //   const table = this.datalinkTransformForm.controls.joinDatalinkTable.value;\n          //   if (!table) {\n          //     this.hubService.addHubErrorMessage('The join table could not be found.');\n          //     this.authService.navigateUp();\n          //   }\n          //   table.name = '(Joined) ' + table.name;\n          //   this.sourceTables = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          //   this.sourceTables.unshift(table);\n          // }  else {\n          //   this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          // }\n          // this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n\n          let nodeDatalinkColumn = <DexihDatalinkColumn> this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n          let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n          let io = new InputOutputColumns();\n          if (nodeDatalinkColumnKey) {\n            let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n          } else {\n            this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n          }\n\n          this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n              // create a copy of the form item to allow for cancel.\n              this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n                .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n            if (!this.newDatalinkTransformItemForm) {\n                this.authService.navigateUp();\n                return;\n            }\n          } else {\n\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.CustomFunction;\n\n            let returnParameter = new DexihFunctionParameter();\n\n            if (this.functionType === eFunctionType.Condition\n              || this.functionType === eFunctionType.JoinCondition || this.functionType === eFunctionType.Validate) {\n                returnParameter.dataType = eTypeCode.Boolean;\n            } else {\n              returnParameter.dataType = eTypeCode.String;\n            }\n            returnParameter.name = 'Return';\n            returnParameter.direction = eParameterDirection.ReturnValue;\n            returnParameter.rank = 0;\n            returnParameter.position = -1;\n            returnParameter.datalinkColumn = null;\n            returnParameter.isValid = true;\n\n            let funcParam = new FunctionParameter();\n            funcParam.name = 'Return';\n            returnParameter['runTime'] = {functionParameter: funcParam};\n\n            newItem.dexihFunctionParameters = new Array<DexihFunctionParameter>();\n            newItem.dexihFunctionParameters.push(returnParameter);\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          // this.returnParameterForm = this.editDatalinkService.hubFormsService\n          //   .datalinkFunctionParametersFormGroup(returnParameter);\n\n          // if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n          // this._returnParameterSubscription = this.returnParameterForm.valueChanges.subscribe(parameter => {\n          //   this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(parameter.datalinkColumn);\n          //   this.newDatalinkTransformItemForm.controls.returnType.setValue(parameter.dataType);\n          //   this.newDatalinkTransformItemForm.markAsDirty();\n          // });\n\n          this.parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n\n          this.setParameters(this.parameters.controls);\n\n          if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n          this._parametersSubscription = this.parameters.valueChanges.subscribe(p => {\n            this.setParameters(p);\n          });\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._returnParameterSubscription) { this._returnParameterSubscription.unsubscribe(); }\n    if (this._parametersSubscription) { this._parametersSubscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    this.cancelToken.cancel();\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('Function has changed',\n        'The function has changed.  Would you like to discard the changes and return to the previous screen?'\n        ).then(confirm => {\n          resolve(confirm);\n        }).catch(reason => {\n          resolve(false);\n        });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  private setParameters(p: AbstractControl[]) {\n      this.inputParameters = this.parameters.controls.sort((a, b) => a.value.position - b.value.position)\n      .filter(c => c.value.direction === eParameterDirection.Input);\n\n      this.inputParameterValues = new Array(this.inputParameters.length);\n\n    this.outputParameters = this.parameters.controls.sort((a, b) => a.value.position - b.value.position)\n      .filter(c => c.value.direction === eParameterDirection.Output);\n\n      this.outputParameterValues = new Array(this.inputParameters.length);\n\n      this.returnParameterForm = <FormGroup> this.parameters.controls.find(c => c.value.direction === eParameterDirection.ReturnValue);\n    }\n\n  private parametersArray() {\n    return <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n  }\n\n  addParameter(parameter: FormGroup, direction: eParameterDirection) {\n    try {\n      let newParameter = new DexihFunctionParameter();\n      if (parameter) {\n        let oldParameter = parameter.value;\n        newParameter.dataType = oldParameter.dataType;\n        newParameter.name = oldParameter.name;\n        newParameter.position = oldParameter.position + 1;\n      }\n\n      newParameter.name = '';\n      newParameter.datalinkColumn = null;\n      newParameter.value = null;\n      newParameter.dataType = eTypeCode.String;\n      newParameter.direction = direction;\n      newParameter.rank = 0;\n      newParameter.isValid = true;\n\n      let parameters = this.parametersArray();\n      let newParameterForm = this.editDatalinkService.hubFormsService\n        .datalinkFunctionParametersFormGroup(newParameter);\n      parameters.push(newParameterForm);\n\n      // reset the positions\n      parameters.controls.sort((a, b) => a.value.position - b.value.position).forEach((p, index) => {\n        (<FormGroup>p).controls.position.setValue(index * 10);\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, add parameter');\n    }\n\n  }\n\n  removeParameter(parameter: FormGroup) {\n    try {\n      let inputParameters = this.parametersArray();\n      let index: number = inputParameters.controls.indexOf(parameter);\n      if (index > -1) {\n        inputParameters.removeAt(index);\n      }\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, remove parameter');\n    }\n  }\n\n  newDefaultParameter(): DexihFunctionParameter {\n    try {\n      let parameter = new DexihFunctionParameter();\n      parameter.datalinkTransformItemKey = this.newDatalinkTransformItemForm.value.key;\n      parameter.dataType = eTypeCode.String;\n      parameter.rank = 0;\n      parameter.isValid = true;\n      return parameter;\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Custom Function, default parameter');\n    }\n\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n  downloadCode(parameters = null) {\n    this.hubService.downloadCustomFunction(this.newDatalinkTransformItemForm.value, parameters).catch(reason => {});\n  }\n\n  test(parameters = null) {\n    this.hubService.testCustomFunction(this.newDatalinkTransformItemForm.value, parameters, this.cancelToken).then(result => {\n      this.hubService.addHubSuccessMessage('The function has successfully compiled.');\n\n      if (result && result.length > 0) {\n        result.forEach((value, index) => {\n          if (index === 0) {\n            this.returnParameterValue = value;\n          } else {\n            this.outputParameterValues[index - 1] = value;\n          }\n        });\n      } else {\n        this.returnParameterValue = null;\n        this.outputParameterValues.forEach(c => c = null );\n      }\n    }).catch(reason => {\n      this.returnParameterValue = null;\n      this.outputParameterValues.forEach(c => c = null );\n      this.hubService.addHubMessage(reason);\n    });\n  }\n}\n\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<dexih-widget-section [title]=\"pageTitle\" [showExpandButton]=\"false\">\n\t\t<ng-template #header>\n\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\"\n\t\t\t\t(click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t</ng-template>\n\t\t<form [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<div class=\"form-row\">\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.AggregatePair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Aggregate\" formControlName=\"aggregate\" [items]=\"eAggregateItems\" itemKey=\"key\"\n\t\t\t\t\t\t\titemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section *ngIf=\"showInput\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Input Column\" formControlName=\"sourceDatalinkColumn\" [items]=\"inputColumns\"\n\t\t\t\t\t\t\tparentName=\"group\" childItems=\"columns\"\n\t\t\t\t\t\t\t[(textValue)]=\"sourceValue\" (textValueChange)=\"updateSourceValue($event)\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\"\n\t\t\t\t\t\t\t[enableTextEntry]=\"true\" [enableTextEntryMatch]=\"false\" itemName=\"logicalName\" itemKey=\"key\"\n\t\t\t\t\t\t\t[errors]=\"sourceErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.FilterPair || transformItemType == eTransformItemType.JoinPair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Compare\" formControlName=\"filterCompare\" [items]=\"compare\" itemKey=\"key\"\n\t\t\t\t\t\t\titemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.FilterPair && newDatalinkTransformItemForm.controls.filterCompare.value != eCompare.IsNotNull && newDatalinkTransformItemForm.controls.filterCompare.value != eCompare.IsNull\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select\n\t\t\t\t\t\t\tlabel=\"Compare Column/Value\" formControlName=\"filterDatalinkColumn\"  [items]=\"inputColumns\"\n\t\t\t\t\t\t\tparentName=\"group\" childItems=\"columns\"\n\t\t\t\t\t\t\t[enableTextEntry]=\"true\" [(textValue)]=\"filterValue\"\n\t\t\t\t\t\t\t(textValueChange)=\"updateFilterValue($event)\" [enableTextEntryMatch]=\"false\" [enableKeySelect]=\"false\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"logicalName\" [errors]=\"filterValueErrors\"\n\t\t\t\t\t\t\t[textEntryItems]=\"variables\" textEntryItemsTitle=\"Variables\" [setTextEntryToValue]=\"false\"\n\t\t\t\t\t\t\tnote=\"Note: For static date values use format YYYY-MM-DD (e.g. 2018-01-30)\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"showOutput\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Output Column\" formControlName=\"targetDatalinkColumn\" [items]=\"outputTables\" parentName=\"name\" childItems=\"dexihTableColumns\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"logicalName\" note=\"Enter new column, or select existing\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\" (textValueChange)=\"updateNewColumn($event)\" [enableTextEntry]=\"true\" [setTextEntryToValue]=\"false\"\n\t\t\t\t\t\t\ttextEntryNote=\"Enter new column name, or select existing\" [errors]=\"targetErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.Sort\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Direction\" formControlName=\"sortDirection\" [items]=\"sortDirections\"\n\t\t\t\t\t\t\titemKey=\"key\" itemName=\"name\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"transformItemType == eTransformItemType.JoinPair\" class=\"form-group col-md-4\">\n\t\t\t\t\t\t<form-select label=\"Join Column\" formControlName=\"joinDatalinkColumn\" [items]=\"joinColumns\"\n\t\t\t\t\t\t\t[enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"logicalName\" note=\"Select a join column\"\n\t\t\t\t\t\t\ttextEntryNote=\"Enter a value to add a new column\" [errors]=\"joinErrors\">\n\t\t\t\t\t\t</form-select>\n\t\t\t\t\t</section>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</dexih-widget-section>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, sortDirections } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup } from '@angular/forms';\nimport { compare } from '../../../hub.query.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eTransformItemType, DexihDatalinkColumn, eAggregate, eCompare, \n  DexihDatalinkTransformItem, eTypeCode, DexihDatalinkTarget, DexihTable, DexihTableColumn, eAggregateItems } from '../../../../shared/shared.models';\n\n@Component({\n  selector: 'mapping-edit',\n  templateUrl: './mapping-edit.component.html'\n})\nexport class MappingEditComponent implements OnInit, OnDestroy {\n  // public hubCache: HubCache;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _formChangesObserve: Subscription;\n  private _saveSubscription: Subscription;\n\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  public hubCache: HubCache;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n  transformItemType: eTransformItemType;\n  eTransformItemType = eTransformItemType;\n\n  variables: string[];\n\n  newDatalinkTransformItemForm: FormGroup;\n  newColumn: DexihDatalinkColumn;\n  filterValue: any;\n  sourceValue: any;\n\n  inputColumns: Array<{group: string, columns: Array<DexihDatalinkColumn>}> = [];\n  outputColumns: Array<DexihDatalinkColumn>;\n  joinColumns: Array<DexihDatalinkColumn>;\n  datalinkTargets: Array<DexihDatalinkTarget>;\n  outputTables: Array<DexihTable>;\n  showInput = true;\n  showOutput = true;\n\n  eAggregate = eAggregate;\n  eAggregateItems = eAggregateItems.filter(c => c.key > 0);\n  compare = compare;\n  eCompare = eCompare;\n\n  sourceErrors: string;\n  targetErrors: string;\n  joinErrors: string;\n\n  sortDirections = sortDirections;\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n        this.hubService.getRemoteLibrariesObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        let datalinkForm = result[3];\n\n        if (!this.hubCache.isLoaded()) { return; }\n\n        this.datalinkForm = datalinkForm;\n\n        this.variables = this.editDatalinkService.getVariables();\n\n        this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n        this.datalinkTransformKey = +params['datalinkTransformKey'];\n        this.transformItemType = +params['type'];\n\n        if (this.datalinkForm) {\n          this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n          switch (this.transformItemType) {\n              case eTransformItemType.JoinPair:\n                this.showInput = true;\n                this.showOutput = false;\n                this.pageTitle = 'Edit Join';\n                break;\n              case eTransformItemType.Column:\n              this.showInput = true;\n              this.showOutput = false;\n              this.pageTitle = 'Edit Group';\n                break;\n              case eTransformItemType.JoinNode:\n              this.showInput = false;\n              this.showOutput = true;\n                this.pageTitle = 'Edit Join Node';\n                break;\n              case eTransformItemType.GroupNode:\n              this.showInput = false;\n              this.showOutput = true;\n                this.pageTitle = 'Edit Group Node';\n                break;\n              case eTransformItemType.Sort:\n              this.showInput = true;\n              this.showOutput = false;\n                this.pageTitle = 'Edit Sort';\n                break;\n              case eTransformItemType.FilterPair:\n              this.showInput = true;\n              this.showOutput = false;\n                this.pageTitle = 'Edit Condition';\n                break;\n              case eTransformItemType.AggregatePair:\n                this.pageTitle = 'Edit Aggregate';\n                this.showInput = true;\n                this.showOutput = true;\n                break;\n              default:\n                this.pageTitle = 'Edit Mapping';\n                this.showInput = true;\n                this.showOutput = true;\n          }\n\n          let nodeDatalinkColumn = this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n          let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n          let io = new InputOutputColumns();\n          if (nodeDatalinkColumnKey) {\n            let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n            let nodeColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n            this.inputColumns = this.editDatalinkService.getColumnGroups(nodeColumns);\n            this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          } else {\n            this.inputColumns = this.editDatalinkService.getColumnGroups(this.datalinkTransformForm.controls.runTime.value.inputColumns);\n            this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          }\n          if (this.datalinkTransformForm.value.joinDatalinkTable) {\n            this.joinColumns = this.datalinkTransformForm.value.joinDatalinkTable.dexihDatalinkColumns;\n          }\n\n          this.datalinkTargets = this.datalinkForm.controls.dexihDatalinkTargets.value;\n          let table = new DexihTable() \n          table.name = \"Output Columns\";\n          table.dexihTableColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n          this.outputTables = [table];\n\n          if(this.datalinkTargets) {\n              this.datalinkTargets.forEach(target => {\n                  this.outputTables.push(target['table']);\n              });\n          }\n\n\n          if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n              this.filterValue = this.datalinkTransformItemForm.controls.filterValue.value;\n              this.sourceValue = this.datalinkTransformItemForm.controls.sourceValue.value;\n\n              // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = this.transformItemType;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          this.getErrors();\n          if (this._formChangesObserve) { this._formChangesObserve.unsubscribe(); }\n          this._formChangesObserve = this.newDatalinkTransformItemForm.statusChanges.subscribe(() => {\n            this.getErrors();\n          })\n        }\n\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n        this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n            if(value) {\n                this.apply();\n            }\n        });\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Edit Mapping Function');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._formChangesObserve) { this._formChangesObserve.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  getErrors() {\n    this.targetErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.targetDatalinkColumn);\n    this.sourceErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn);\n    this.joinErrors = this.editDatalinkService.hubFormsService.getErrorMessage(\n      this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn);\n  }\n\n  apply() {\n    // this.datalinkTransformItemForm.setValue(this.newDatalinkTransformItemForm.value);\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n  }\n\n  updateNewColumn(value: string) {\n    let current = this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.value;\n    if (value && (!current || current.name !== value )) {\n      let key: number;\n      if (this.newColumn) {\n        key = this.newColumn.key;\n      } else {\n        key = this.hubService.getHubCache().getNextSequence();\n      }\n\n      let sourceColumn = <DexihDatalinkColumn>this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn.value;\n\n      if (sourceColumn) {\n        let io = new InputOutputColumns();\n        this.newColumn = io.copyDatalinkColumn(sourceColumn, 1000 - key, 'mapping');\n      } else {\n        this.newColumn = new DexihDatalinkColumn();\n        this.newColumn.position = 1000 - key;\n\n        if (this.transformItemType === eTransformItemType.JoinNode) {\n          this.newColumn.dataType = eTypeCode.Node;\n          this.newColumn.childColumns = this.joinColumns;\n        } else {\n          this.newColumn.dataType = eTypeCode.String;\n        }\n      }\n\n      this.newColumn.name = value;\n      this.newColumn.logicalName = value;\n      this.newColumn.columnGroup = 'mapping';\n      this.newColumn.key = key;\n\n      this.newDatalinkTransformItemForm.controls.targetDatalinkColumn.setValue(this.newColumn);\n    }\n  }\n\n  updateFilterValue(value: string) {\n      this.newDatalinkTransformItemForm.controls.filterValue.setValue(value);\n  }\n\n  updateSourceValue(value: string) {\n    this.newDatalinkTransformItemForm.controls.sourceValue.setValue(value);\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, combineLatest} from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable()\nexport class DatalinkEditGuard implements CanDeactivate<CanComponentDeactivate> {\n\n  canDeactivate(component: CanComponentDeactivate) {\n    return component && component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n","<dexih-widget-section title=\"Preview Transform Data\" [showExpandButton]=\"true\" [padding]=\"false\">\n    <ng-template #header>\n        <dexih-button-close (click)=\"close()\"></dexih-button-close>\n    </ng-template>\n    <preview-data [datalink]='datalinkForm?.value' [datalinkTransformKey]=\"datalinkTransformKey\" [viewSource]='eDataObjectType.Datalink'></preview-data>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormGroup } from '@angular/forms';\nimport { eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'datalink-preview-data',\n    templateUrl: './preview-data.component.html'\n})\nexport class PreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    public error: string;\n\n    datalinkTransformKey: number;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.hubService.getRemoteAgentObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[4];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                // load the cache first\n                if (this.hubCache.isLoaded()) {\n                    // get the hub key from the route data, and update the service.\n                    this.datalinkTransformKey = + params['datalinkTransformKey'];\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Preview Transform Data');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n}\n","<dexih-widget-section [title]=\"'Preview ' + name\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #header>\n        <dexih-button-close (click)=\"close()\"></dexih-button-close>\n    </ng-template>\n    <preview-data *ngIf=\"tableKey\" [key]='tableKey' [viewSource]='eDataObjectType.Table'></preview-data>\n    <preview-data *ngIf=\"datalinkKey\" [key]='datalinkKey' [viewSource]='eDataObjectType.Datalink'></preview-data>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { FormGroup } from '@angular/forms';\nimport { eDataObjectType, DexihTable } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'datalink-preview-table',\n    templateUrl: './preview-table.component.html'\n})\nexport class PreviewTableComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public datalinkForm: FormGroup;\n    public datalinkTransformForm: FormGroup;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    public error: string;\n\n    tableKey: number;\n    datalinkKey: number;\n    \n    name: string;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                // load the cache first\n                if (this.hubCache.isLoaded()) {\n                    // get the hub key from the route data, and update the service.\n                    if (params['tableKey']) {\n                        this.tableKey = +params['tableKey'];\n                        let table = this.hubCache.getTable(this.tableKey);\n                        if (table) {\n                            this.name = table.name;\n                        }\n                    } else {\n                        this.datalinkKey = +params['datalinkKey'];\n                        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key == this.datalinkKey);\n                        if (datalink) {\n                            this.name = datalink.name;\n                        }\n                    }\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Preview Table Data');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n}\n","<div>\n\t<div class=\"widget-body-toolbar\">\n\t\t<div class=\"form-row\">\n\t\t\t<div class=\"col-sm-6\">\n\t\t\t\t<h5>Transform Output Columns</h5>\n\t\t\t</div>\n\t\t\t<div class=\"col-sm-6 text-right\">\n                <dexih-button-close (click)=\"close()\"></dexih-button-close>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n    <dexih-table \n        [enableMultiSelect]=\"true\"\n        [enableManualSort]=\"true\"\n        (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\"\n        [columns]=\"columns\"\n        [dataObservable]=\"columnData\"\n        >\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\"></dexih-button-delete>\n            </ng-template>\n\n            <ng-template #selectedItemAction select=\"selectedItemAction\" let-column=\"item\">\n                <dexih-button-edit (click)=\"editColumn(column)\" title=\"Edit the column\"></dexih-button-edit>\n            </ng-template>\n\n            <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n                <dexih-button-new (click)=\"deleteSelected(items)\" title=\"Create a new column\"></dexih-button-new>\n            </ng-template>\n\n    </dexih-table>\n</div>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { AuthService} from '../../../../+auth/auth.service';\nimport { Observable, Subscription, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'transform-table-edit-form',\n    templateUrl: './transform-table-edit.component.html',\n})\nexport class TransformTableEditComponent implements OnInit, OnDestroy {\n\n    private _subscription: Subscription;\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    datalinkTransformKey: number;\n    datalinkTransformForm: FormGroup;\n    transformTableForm: FormGroup;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { control: 'name', title: 'Column Name', format: '', tooltip: 'description'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'logicalName', title: 'Logical Name', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                let params = result[1];\n                this.hubCache = result[2];\n\n                this.datalinkTransformKey = +params['datalinkTransformKey'];\n                this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n                this.transformTableForm = <FormGroup>this.datalinkTransformForm.controls.transformTable\n                this.updateColumnData();\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Transform Table Edit');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        let tableData = [];\n\n        let tableColumns = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n        tableColumns.controls\n        .filter(c => c.value.isValid)\n        .sort((a, b) => a.value.position - b.value.position)\n        .forEach(column => {\n            const columnForm = <FormGroup>column;\n            tableData.push({\n                key: column.value.key,\n                position: column.value.position,\n                name: columnForm.controls.name,\n                description: column.value.description,\n                dataType: column.value.dataType,\n                allowDbNull: column.value.allowDbNull,\n                logicalName: column.value.logicalName,\n                updateDate: column.value.updateDate,\n            });\n        });\n        this._columnData.next(tableData);\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      const columnsArray = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let columnIndex = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        if (columnIndex >= 0) {\n            columnsArray.removeAt(columnIndex);\n        }\n        this.updateColumnData();\n    });\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.transformTableForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n\n  close() {\n      this.authService.navigateUp();\n  }\n\n}\n","<dexih-widget-section title='Transforms' [padding]=\"false\">\n    <div *ngIf=\"datalinkTransforms\" class=\"bg-light pt-1 pb-1 d-flex ≈\">\n        <ul class=\"transform-container\">\n            <li class=\"d-flex align-items-stretch p-0 m-3\" *ngIf=\"datalinkTransforms.length === 0\">\n                <a [routerLink]=\"['new', 1]\" class=\"btn btn-outline-success\" title=\"Insert a transform before this\">\n                    <div class=\"d-block\">\n                        Add Transform\n                    </div>\n                    <i class=\"fa fa-4x fa-plus\"></i>\n                </a>\n                \n            </li>\n\n            <div class=\"d-flex m-3 \" *ngFor=\"let datalinkTransform of datalinkTransforms; last as isLast\">\n                <li  class=\"d-flex align-items-stretch p-0\">\n                    <a [routerLink]=\"['new', datalinkTransform.transform.value.position-1]\" class=\"insert-before btn btn-sm btn-primary\"\n                        title=\"Insert a transform before this\"><i class=\"fa fa-plus\"></i></a>\n                \n                    <a [routerLink]=\"['new', datalinkTransform.transform.value.position+1]\" class=\"insert-after btn btn-sm btn-primary\"\n                        title=\"Insert a transform after this\"><i class=\"fa fa-plus\"></i></a>\n\n                        <a class=\"delete btn btn-sm btn-danger  mr-1\" href=\"javascript:void(0)\"\n                        (click)=\"deleteTransform(datalinkTransform.transform.value)\"\n                        title=\"Delete this transform\"><i class=\"fa fa-remove\"></i></a>\n\n\n                    <a [routerLink]=\"['transform', datalinkTransform.transform.value.key]\" routerLinkActive=\"btn-outline-success\" class=\"btn btn-outline-primary\" style=\"width:100%\"\n                        [title]=\"'Select the ' + datalinkTransform.transform.value.name + ' transform.'\">\n                        <div class=\"d-block\">\n                        {{datalinkTransform.name}}\n                        <div>\n                        <span class=\"fa-4x\" [ngClass]=\"datalinkTransform.icon\"></span>\n                        <dexih-invalid-form-icon [control]=\"datalinkTransform.transform\">\n                        </dexih-invalid-form-icon>\n                    </div>\n                    </div>\n                    </a>\n\n                </li>\n\n                \n                <div class=\"arrow bg-primary\">\n                    <a class=\"preview btn btn-sm btn-primary  mr-1\"\n                        [routerLink]=\"['transform', datalinkTransform.transform.value.key, 'preview-transform-data']\"\n                        title=\"Preview transform data\"><i class=\"fa fa-search\"></i></a>\n\n                    <div *ngIf=\"!isLast\" class=\"arrow-head\">\n\n                    </div>\n                </div>\n            </div>\n        </ul>\n    </div>\n</dexih-widget-section>\n<router-outlet></router-outlet>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, AbstractControl } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { transformTypes } from '../../../hub.remote.models';\nimport { HubCache } from '../../../hub.models';\nimport { DexihDatalinkTransform, eTransformType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'dexih-datalink-edit-transforms-form',\n    templateUrl: './datalink-edit-transforms.component.html',\n    styleUrls: ['./transforms.scss']\n})\nexport class DatalinkEditTransformsComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n\n    private _subscription: Subscription;\n    private _transformsChange: Subscription;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle = 'Transform';\n    public message: string;\n\n    public datalinkTransforms: {transform: AbstractControl, name: string, icon: string, invalid: boolean}[] = null;\n\n    public logger = new LogFactory('datalink-edit-transforms');\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router\n    ) { }\n\n    ngOnInit() {\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                this.action = result[0]['action'];\n                this.pageTitle = result[0]['pageTitle'];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    let datalinkTransformKey = + params['datalinkTransformKey'];\n\n                    this.logger.LogC(() => `loading transform with key ${datalinkTransformKey}`, eLogLevel.Trace);\n\n                    // this.datalinkForm.updateValueAndValidity({emitEvent: true, onlySelf: true});\n\n                    this.refreshTransforms();\n\n                    if (this._transformsChange) { this._transformsChange.unsubscribe(); }\n                    this._transformsChange = this.datalinkForm.controls.dexihDatalinkTransforms.valueChanges\n                        .subscribe(() => this.refreshTransforms());\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Edit Transform');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._transformsChange) { this._transformsChange.unsubscribe(); }\n    }\n\n    refreshTransforms() {\n        this.logger.LogC(() => `refreshing transforms list`, eLogLevel.Trace);\n\n        const transformsArray = <FormArray> this.datalinkForm.controls.dexihDatalinkTransforms;\n        const transforms =  transformsArray.controls\n            .filter(c => c.value.transformType !== eTransformType.Validation &&\n                c.value.transformType !== eTransformType.Profile)\n            .sort((a, b) => a.value.position - b.value.position);\n\n        const datalinkTransforms = transforms.map(transform => {\n            const type = transformTypes.find(c => c.key === transform.value.transformType);\n            let icon = '';\n            if (type) {\n                icon = type.icon\n            }\n            const name = this.hubCache.getTransformName(transform.value);\n            return {transform: transform, icon: icon, name: name, invalid: transform.invalid};\n        });\n\n        this.datalinkTransforms = datalinkTransforms;\n    }\n\n    deleteTransform(datalinkTransform: DexihDatalinkTransform) {\n        this.logger.LogC(() => `deleteTransform`, eLogLevel.Trace);\n        this.editDatalinkService.deleteDatalinkTransform(datalinkTransform).then(() => {\n            this.refreshTransforms();\n        });\n    }\n\n    previewData(datalinkTransform: DexihDatalinkTransform) {\n        this.router.navigate(['transform', datalinkTransform.key, 'preview-transform-data'], { relativeTo: this.route });\n    }\n}\n","<dexih-widget-section title='Select a Transform' [padding]=\"true\">\n    <div class=\"d-flex flex-wrap justify-content-around\">\n            <a *ngFor=\"let transform of transforms\" (click)=\"insert(transform.transformReference)\" href=\"javascript:void(0)\" \n            class=\"btn btn-outline-primary p-0 m-3\" style=\"width:400px\">\n                <div class=\"d-flex\">\n                    <div class=\"border-right border-primary p-3\" style=\"min-width:140px\">\n                        <div class=\"d-block\">\n                            {{transform.transformReference.name}}\n                        </div>\n                        <i class=\"fa fa-4x\" [ngClass]=\"transform.icon\"></i>\n                    </div>\n                    <div class=\"p-3 text-left\">\n                        {{transform.transformReference.description}}\n                    </div>\n                </div>\n            </a>\n    </div>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { TransformReference, transformTypes } from '../../../hub.remote.models';\n\n\n@Component({\n    selector: 'datalink-edit-new-transform',\n    templateUrl: './datalink-edit-new-transform.component.html'\n})\n\nexport class DatalinkEditNewTransformComponent implements OnInit, OnDestroy {\n\n    private _subscription: Subscription;\n\n    public transforms: Array<{transformReference: TransformReference, icon: string}>;\n    public position: number;\n\n    constructor(\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        private authService: AuthService,\n        private route: ActivatedRoute,\n        private router: Router\n\n    ) { }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(async result => {\n                this.transforms = [];\n                let userConfigTransforms = await this.hubService.GetUserConfigTransformReference();\n\n                userConfigTransforms.forEach(transform => {\n                    let transformType = transformTypes.find(c => c.key === transform.transformType);\n\n                    let icon = '';\n                    if (transformType) {\n                        icon = transformType.icon;\n                    }\n\n                    this.transforms.push({transformReference: transform, icon: icon })\n                })\n\n                this.position = + result[1]['position'];\n\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'New Transform');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n\n    insert(transform: TransformReference) {\n        let newDatalinkTransformForm = this.editDatalinkService.insertDatalinkTransform(this.position, transform);\n        this.router.navigate(['transform', newDatalinkTransformForm.value.key], { relativeTo: this.route.parent });\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<div *ngIf=\"columnFormService?.currentForm\">\n    <div class=\"list-group-item list-group-item-info rounded-0\">\n        <div class=\"d-flex flex-row\">\n            <h5>Edit Column </h5>\n            <div class=\"ml-auto\">\n                <dexih-invalid-form-details (click)=\"columnFormService.showErrors()\"\n                    [control]=\"columnFormService.currentForm\" class=\"mr-1\"></dexih-invalid-form-details>\n                <dexih-button-apply [disabled]=\"columnFormService.currentForm.pristine\"\n                    (click)=\"!columnFormService.currentForm.pristine && applyExit()\" class=\"mr-1\"></dexih-button-apply>\n                <dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n            </div>\n        </div>\n    </div>\n\n\n    <div class=\"container  mt-3 mb-3\">\n        <column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"true\"></column-edit-base>\n    </div>\n\n    <table-edit-columns *ngIf=\"columnFormService.currentForm.controls.dataType.value === eTypeCode.Node\"\n        [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n</div>","import { Component, OnInit, OnChanges, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache, deltaTypes, securityFlags, } from '../../../hub.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription ,  combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { eTypeCode, eParameterDirection, DexihDatalinkColumn } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datalink-column-edit',\n    templateUrl: './datalink-column-edit.component.html',\n})\nexport class DatalinkColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    private _subscription: Subscription;\n    private _saveSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public datalinkColumnKey: number;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private sourceDatalinkTableForm: FormGroup;\n\n    eTypeCode = eTypeCode;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    public columnFormService: HubFormsService;\n    private originalColumnForm: FormGroup;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        private editDatalinkService: DatalinkEditService,\n        fb: FormBuilder,\n        private route: ActivatedRoute,\n    ) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n            ).subscribe(result => {\n                this.pageTitle = result[0]['pageTitle'];\n                this.datalinkColumnKey = + result[0]['datalinkColumnKey'];\n                this.hubCache = result[1];\n\n                this.sourceDatalinkTableForm = <FormGroup>this.editDatalinkService.hubFormsService.currentForm\n                .controls.sourceDatalinkTable;\n\n                this.initializeForm();\n            });\n\n            if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n            this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n                if(value) {\n                    this.applyExit();\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink column edit');\n        }\n    }\n\n    ngOnChanges() {\n        if (this.hubCache) {\n            this.initializeForm();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    }\n\n    // searches the datalink and transforms for a column\n    findColumn(): FormGroup {\n        // look for column in source table\n        let columnsArray = <FormArray>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns;\n        let column = <FormGroup> columnsArray.controls.find(c => c.value.key === this.datalinkColumnKey);\n        if (column) { return column; }\n\n        // look for column as transform outputs\n        let transformForms = <FormArray>this.editDatalinkService.hubFormsService.currentForm\n            .controls.dexihDatalinkTransforms;\n\n        transformForms.controls.forEach(t => {\n            let datalinkTransformForm = <FormGroup>t\n            let items = <FormArray>datalinkTransformForm.controls.dexihDatalinkTransformItems;\n            items.controls.forEach(i => {\n                if (!column) {\n                    let itemForm = <FormGroup>i;\n                    if (itemForm.controls.targetDatalinkColumn.value &&\n                        itemForm.controls.targetDatalinkColumn.value.key === this.datalinkColumnKey) {\n                        column = <FormGroup> itemForm.controls.targetDatalinkColumn;\n                    }\n\n                    if (!column) {\n                        columnsArray = <FormArray> itemForm.controls.dexihFunctionParameters;\n                        let parameter = <FormGroup> columnsArray.controls.find(c =>\n                            HubCache.parameterIsOutput(c.value) &&\n                            c.value.datalinkColumn &&\n                            c.value.datalinkColumn.key === this.datalinkColumnKey\n                        );\n                        if (parameter) {\n                            column = <FormGroup> parameter.controls.datalinkColumn;\n                        }\n                        if (!column) {\n                            columnsArray.controls.forEach(c => {\n                                let arrayParameters = <FormArray> (<FormGroup> c).controls.arrayParameters;\n                                if (arrayParameters) {\n                                    parameter = <FormGroup> arrayParameters.controls.find(p =>\n                                        HubCache.parameterIsOutput(p.value) &&\n                                        p.value.datalinkColumn &&\n                                        p.value.datalinkColumn.key === this.datalinkColumnKey\n                                    );\n                                    if (parameter) {\n                                        column = <FormGroup> parameter.controls.datalinkColumn;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        });\n\n        return column;\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n\n        if (this.datalinkColumnKey) {\n            this.originalColumnForm = this.findColumn();\n            if (!this.originalColumnForm) {\n                this.authService.informationDialog('Cannot Edit', 'The selected column could not be edited.').then(() => {\n                    this.authService.navigateUp();\n                });\n\n                return;\n            }\n            columnForm = this.columnFormService.datalinkTableColumn(null, this.originalColumnForm.value);\n        } else {\n            let column = new DexihDatalinkColumn();\n            column.key = this.hubCache.getNextSequence();\n            column.datalinkTableKey = this.sourceDatalinkTableForm.controls.key.value;\n            let columnsArray = <DexihDatalinkColumn[]>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns.value;\n            let maxPos = 1;\n            columnsArray.forEach(col => {\n                if (col.position > maxPos) { maxPos = col.position; }\n            })\n            column.position = maxPos + 1;\n            columnForm = this.columnFormService.datalinkTableColumn(columnsArray, column);\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.authService.navigateUp();\n    }\n\n    applyExit() {\n        const columnForm = this.columnFormService.currentForm;\n\n        // if no originalColumn, then add it to the source columns.\n        if (!this.originalColumnForm) {\n            let columnsArray = <FormArray>this.sourceDatalinkTableForm.controls.dexihDatalinkColumns;\n            columnsArray.push(columnForm);\n        } else {\n            this.originalColumnForm.setValue(columnForm.value);\n        }\n\n        this.sourceDatalinkTableForm.markAsDirty();\n        this.authService.navigateUp();\n    }\n}\n","<div *ngIf=\"newDatalinkTransformItemForm && inputColumns && outputColumns\">\n\n\t<div class=\"list-group-item list-group-item-info rounded-0\">\n\t\t<div class=\"d-flex flex-row\">\n\t\t\t<h5>Un-Group Column Node</h5>\n\t\t\t<div class=\"ml-auto\">\n\t\t\t\t<dexih-button-apply [disabled]=\"newDatalinkTransformItemForm.pristine\" (click)=\"!newDatalinkTransformItemForm.pristine && applyExit()\"\n\t\t\t\t class=\"mr-1\"></dexih-button-apply>\n\t\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n\t<div class=\"container  mt-3 mb-3\" *ngIf=\"datalinkTransformForm\">\n\n\t\t<form [formGroup]=\"newDatalinkTransformItemForm\">\n\t\t\t<fieldset>\n\t\t\t\t<section class=\"col col-xs-12\">\n\t\t\t\t\t<form-select label=\"Column Node\" \n\t\t\t\t\t\tformControlName=\"sourceDatalinkColumn\" \n\t\t\t\t\t\t[items]=\"inputColumns\" \n\t\t\t\t\t\t[(textValue)]=\"sourceValue\"\n\t\t\t\t\t\t[enableTextEntry]=\"true\"\n\t\t\t\t\t\t[enableTextEntryMatch]=\"false\"\n\t\t\t\t\t\t[enableKeySelect]=\"false\"\n\t\t\t\t\t\titemKey=\"key\"\n\t\t\t\t\t\titemName=\"logicalName\"\n\t\t\t\t\t\t[errors]=\"sourceErrors\"\n\t\t\t\t\t\t>\n\t\t\t\t\t</form-select>\n\t\t\t\t</section>\n\n\t\t\t\t<div class=\"mt-1\">\n\n\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col border bg-primary text-white font-weight-bold text-truncate\">UnGroup Column</div>\n\t\t\t\t\t\t</div>\n\t\t\t\n\t\t\t\t\t\t<div *ngFor=\"let parameter of newDatalinkTransformItemForm.controls.dexihFunctionParameters.controls; let i = index;\" class=\"row\">\n\t\t\t\t\t\t\t<div class=\"col border bg-secondary text-white text-truncate\">\n\t\t\t\t\t\t\t\t<div>{{parameter.controls.name.value}}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</form>\n\t</div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubCache } from '../../../hub.models';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { InputOutputColumns } from '../../../hub.lineage.models';\nimport { eFunctionType, eParameterDirection, DexihDatalinkColumn, DexihDatalinkTransformItem, eTransformItemType, DexihFunctionParameter, FunctionParameter, eTypeCode } from '../../../../shared/shared.models';\n\n@Component({\n\n  selector: 'dexih-unGroup-edit',\n  templateUrl: './unGroup-edit.component.html'\n})\nexport class UnGroupEditComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n\n  eFunctionType = eFunctionType;\n  eParameterDirection = eParameterDirection;\n  typeCodes = TypeCodes;\n\n  public pageTitle: string;\n\n  private _subscription: Subscription;\n  private _nodeSubscription: Subscription;\n\n  transformFunctionType: eFunctionType;\n  datalinkTransformItemKey: number;\n  datalinkKey: number;\n  datalinkTransformKey: number;\n\n  datalinkForm: FormGroup;\n  datalinkTransformForm: FormGroup;\n  datalinkTransformItemForm: FormGroup;\n\n  newDatalinkTransformItemForm: FormGroup;\n\n  inputColumns: Array<DexihDatalinkColumn>;\n  outputColumns: Array<DexihDatalinkColumn>;\n\n  variables = [];\n\n  allowOutput = false;\n  allowReturn = true;\n\n  logger = new LogFactory('unGroup-edit');\n\n  constructor(\n    private hubService: HubService,\n    private authService: AuthService,\n    private editDatalinkService: DatalinkEditService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(),\n        this.editDatalinkService.hubFormsService.getCurrentFormObservable()\n      ).subscribe(result => {\n        this.pageTitle = result[0]['pageTitle'];\n        let params = result[1];\n        this.hubCache = result[2];\n        this.datalinkForm = result[3];\n\n        this.logger.LogC(() => `OnInit`, eLogLevel.Trace);\n\n        if (this.hubCache && this.hubCache.isLoaded() && this.datalinkForm) {\n            this.datalinkTransformKey = +params['datalinkTransformKey'];\n            this.datalinkTransformItemKey = +params['datalinkTransformItemKey'];\n            this.datalinkTransformForm = this.editDatalinkService.getDatalinkTransform(this.datalinkTransformKey);\n\n            this.variables = this.editDatalinkService.getVariables();\n\n            let nodeDatalinkColumn = this.datalinkTransformForm.controls.nodeDatalinkColumn.value;\n            let nodeDatalinkColumnKey = nodeDatalinkColumn ? nodeDatalinkColumn.key : null;\n            let io = new InputOutputColumns();\n            if (nodeDatalinkColumnKey) {\n              let inputColumns = <DexihDatalinkColumn[]> this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.inputColumns = io.getAvailableColumns(inputColumns, nodeDatalinkColumnKey, 0);\n              this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n            } else {\n              this.inputColumns = this.datalinkTransformForm.controls.runTime.value.inputColumns;\n              this.outputColumns = this.datalinkTransformForm.controls.runTime.value.transformColumns;\n            }\n\n            this.inputColumns = this.inputColumns.filter(c => c.dataType === eTypeCode.Node);\n\n            if (this.datalinkTransformItemKey) {\n            this.datalinkTransformItemForm = this.editDatalinkService\n              .getDatalinkTransformItem(this.datalinkTransformForm, this.datalinkTransformItemKey);\n\n            if (!this.datalinkTransformItemForm) {\n              this.authService.navigateUp();\n              return;\n            }\n\n            // create a copy of the form item to allow for cancel.\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, this.datalinkTransformItemForm.value);\n\n              let parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n              parameters.controls.forEach((control: FormGroup) => {\n                let runTime = {};\n                runTime['functionParameter'] = new FunctionParameter();\n                if (control.value.datalinkColumn) {\n                  runTime['functionParameter'].name = control.value.datalinkColumn.name;\n                }\n                control.controls['runTime'].setValue(runTime);\n              });\n\n          } else {\n            let newItem = new DexihDatalinkTransformItem();\n            newItem.datalinkTransformKey = this.datalinkTransformKey;\n            newItem.transformItemType = eTransformItemType.UnGroup;\n            this.datalinkTransformItemKey = 0;\n\n            this.newDatalinkTransformItemForm = this.editDatalinkService.hubFormsService\n              .datalinkDatalinkTransformItemFormGroup(this.datalinkTransformForm, newItem);\n          }\n\n          if (this._nodeSubscription) { this._nodeSubscription.unsubscribe(); }\n          this._nodeSubscription = this.newDatalinkTransformItemForm.controls.sourceDatalinkColumn.valueChanges\n            .subscribe(sourceDatalinkColumn => {\n              let parameters = <FormArray>this.newDatalinkTransformItemForm.controls.dexihFunctionParameters;\n              // clear previous parameters\n              while (parameters.length) {\n                parameters.removeAt(0);\n              }\n              let column = <DexihDatalinkColumn> sourceDatalinkColumn;\n              // add a paramter for each childColumn\n              if (column.childColumns && column.childColumns.length > 0) {\n                column.childColumns.forEach((childColumn, index) => {\n                  let outputColumn = io.copyDatalinkColumn(childColumn, 0, 'un-group')\n                  let newParameter = new DexihFunctionParameter();\n                  newParameter.datalinkTransformItemKey = this.datalinkTransformItemKey;\n                  newParameter.name = childColumn.name;\n                  newParameter.rank = childColumn.rank;\n                  newParameter.direction = eParameterDirection.Output;\n                  newParameter.dataType = childColumn.dataType;\n                  newParameter.position = index;\n                  newParameter.key = this.hubCache.getNextSequence();\n                  newParameter.datalinkColumn = outputColumn\n                  newParameter.isValid = true;\n                  newParameter['runTime'] = {};\n                  newParameter['runTime'].functionParameter = new FunctionParameter();\n                  newParameter['runTime'].functionParameter.name = childColumn.name;\n\n                  let newParameterForm = this.editDatalinkService.hubFormsService.datalinkFunctionParametersFormGroup(newParameter);\n                  parameters.push(newParameterForm);\n                });\n              }\n            });\n        }\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'UnGroup Node Edit');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._nodeSubscription) { this._nodeSubscription.unsubscribe(); }\n  }\n\n  canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>(resolve => {\n      if (this.newDatalinkTransformItemForm && !this.newDatalinkTransformItemForm.pristine) {\n        this.authService.confirmDialog('The function has changed',\n          'The function has changed.  Do you want to discard the changes and continue?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  apply() {\n    this.editDatalinkService.insertDatalinkTransformItem(this.datalinkTransformForm, this.newDatalinkTransformItemForm);\n    this.newDatalinkTransformItemForm.markAsPristine();\n  }\n\n  applyExit() {\n    this.apply();\n    this.authService.navigateUp();\n  }\n\n}\n\n","<div *ngIf=\"!showColumn\">\n\n<dexih-widget-section title=\"Edit Target Table\" [showExpandButton]=\"true\">\n    <ng-template #header>\n        <dexih-button-preview class=\"mr-1\" (click)=\"previewData()\"></dexih-button-preview>\n        <dexih-button class=\"mr-1\" (click)=\"importTable()\" buttonClass=\"btn-primary\" iconClass=\"fa fa-refresh\" title=\"Re-import table from connection.\">\n            Re-Import\n        </dexih-button>\n        <dexih-button (click)=\"createTable()\" class=\"mr-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-bullseye\" title=\"Drop & re-create the table on the connection.  Warning: This remove all data from the table!\">\n            Drop & Create\n        </dexih-button>\n\n        <dexih-button-apply class=\"mr-1\" (click)=\"apply()\" [disabled]=\"!this.targetTableForm?.dirty\"></dexih-button-apply>\n        <cancel-button [formsService]=\"tableFormService\"></cancel-button>\n    </ng-template>\n\n    <form *ngIf=\"targetTableForm\"  [formGroup]=\"targetTableForm\">\n        <fieldset>\n            <section>\n                <form-checkbox label=\"Create a new table\" [ngModelOptions]=\"{standalone: true}\" [(ngModel)]=\"newTable\" (ngModelChange)=\"toggleNewTable($event)\"></form-checkbox>\n            </section>\n            <section *ngIf=\"!newTable\">\n                <form-select label=\"Target Table\" formControlName=\"tableKey\" [items]=\"connectionTables\" parentName=\"name\" childItems=\"dexihTables\"\n                    itemKey=\"key\" itemName=\"logicalName\" note='Select the target table'>\n                </form-select>\n            </section>\n            <section *ngIf=\"nodes?.length > 0\">\n                <form-select label=\"Node level\" formControlName=\"nodeDatalinkColumn\" [items]=\"nodes\" [enableKeySelect]=\"false\" itemKey=\"key\" itemName=\"name\" node='Specify the node where the transform should be applied to.' [allowNullSelect]=\"true\" selectNullMessage='Use top level'>\n                </form-select>\n            </section>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-table-edit-properties *ngIf=\"tableFormService.currentForm.value\" [formsService]=\"tableFormService\" [isExpanded]=\"newTable\"></dexih-table-edit-properties>\n\n<ng-template [ngIf]=\"targetTableForm?.controls.table.value\">\n        <dexih-widget-section title=\"Columns\" [showExpandButton]=\"true\" [padding]=\"false\">\n        <dexih-table [enableMultiSelect]=\"true\"\n            [enableManualSort]=\"true\" [enableSort]=\"false\" [enableFilter]=\"false\" (onSortChanged)=\"columnSortChange($event)\" [columns]=\"columns\"\n            [dataObservable]=\"tableData\" (rowClick)=\"editColumn($event)\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\">\n    \n            <ng-template #actions let-items=\"items\">\n                <dexih-button-splitdropdown text=\"Add Column\" title=\"Create a new column\" iconClass=\"fa fa-plus-square\" buttonClass=\"btn-primary\"\n                    (buttonClick)=\"newColumn(null)\">\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.AutoIncrement)\">Add Auto Incrementing Key Column</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.ValidFromDate)\">Add Valid from Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.ValidToDate)\">Add Valid to Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.IsCurrentField)\">Add Is Current Column</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.CreateAuditKey)\">Add Create Audit Key</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.UpdateAuditKey)\">Add Update Audit Key</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.CreateDate)\">Add Create Date</a>\n                    </li>\n                    <li>\n                        <a class=\"dropdown-item\" (click)=\"newColumn(eDeltaType.UpdateDate)\">Add Update Date</a>\n                    </li>\n                </dexih-button-splitdropdown>\n\n                <column-edit-bulk *ngIf=\"showBulkEdit && items.length > 0\" [columns]=\"items\" [columnsFormArray]=\"targetTableForm.controls.table.controls.dexihTableColumns\" (updated)=\"updateData()\" ></column-edit-bulk>\n                <dexih-button iconClass=\"fa fa-retweet\" class=\"ml-1\" (click)=\"resetColumns()\">Reset All Columns</dexih-button>\n                <dexih-button-preview class=\"ml-1\" (click)=\"previewData()\"></dexih-button-preview>\n                <dexih-button class=\"ml-1\" (click)=\"importTable()\" buttonClass=\"btn-primary\" iconClass=\"fa fa-refresh\" title=\"Re-import table from connection.\">\n                    Re-Import\n                </dexih-button>\n                <dexih-button (click)=\"createTable()\" class=\"ml-1\" buttonClass=\"btn-primary\" iconClass=\"fa fa-bullseye\" title=\"Drop & re-create the table on the connection.  Warning: This remove all data from the table!\">\n                    Drop & Create\n                </dexih-button>\n            </ng-template>\n    \n            <ng-template #selectedItemAction select=\"selectedItemAction\" let-column=\"item\">\n                <dexih-button-edit (click)=\"editColumn(column)\" class=\"ml-1\"></dexih-button-edit>\n            </ng-template>\n    \n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button-delete (click)=\"deleteColumns(items)\" class=\"ml-1\"></dexih-button-delete>\n                <dexih-button iconClass=\"fa fa-th-list\" class=\"ml-1\" (click)=\"showBulkEdit=!showBulkEdit\">{{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </dexih-button>\n            </ng-template>\n    \n    \n        </dexih-table>\n        </dexih-widget-section>\n\n        <dexih-widget-section title=\"Unused Columns\" [showExpandButton]=\"true\" [padding]=\"false\">\n        <dexih-table [enableMultiSelect]=\"true\"\n            sortColumn=\"position\" [enableFilter]=\"false\" [columns]=\"columns\" [dataObservable]=\"missingColumnsData\"\n            [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\">\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <dexih-button (click)=\"addMissing(items)\" buttonClass=\"btn-primary\" iconClass=\"fa fa-plus-square\" title=\"Add selected outputs to the target table\">Add To Table</dexih-button>\n            </ng-template>\n    \n        </dexih-table>\n        </dexih-widget-section>\n    </ng-template>\n</div>\n\n<div *ngIf=\"showColumn\">\n    <column-edit [columnKey]=\"columnKey\" [tableForm]=\"this.targetTableForm.controls.table\" [deltaType]='deltaType' (isUpdated)=\"columnUpdated()\"></column-edit>\n</div>\n","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { InputOutputColumns, eObjectUse, ColumnUsageNode, eDatalinkObjectType } from '../../../hub.lineage.models';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { DatalinkEditService } from '../datalink-edit.service';\nimport { Observable, Subscription, BehaviorSubject , combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { LogFactory, eLogLevel } from '../../../../../logging';\nimport { HubCache, eMappingStatus, updateStrategies, loadStrategies, ConnectionTables, lineageMappingStatuses, deltaTypes } from '../../../hub.models';\nimport { eDeltaType, eUpdateStrategy, eTransformWriterMethod, DexihConnection,\n    DexihDatalinkColumn, DexihDatalinkTarget, DexihTable, DexihTableColumn, DexihDatalinkTable, eTypeCode, eSecurityFlag } from '../../../../shared/shared.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-datalink-edit-target-table',\n    templateUrl: './datalink-edit-target-table.component.html'\n})\nexport class DatalinkEditTargetTableComponent implements OnInit, OnDestroy {\n    public datalinkForm: FormGroup;\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    private _subscription: Subscription;\n    private _loadStrategySubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n    private _saveSubscription: Subscription;\n\n    private cancelToken: CancelToken = new CancelToken();\n\n    public eMappingStatus = eMappingStatus;\n    public eDeltaType = eDeltaType;\n\n    public tableFormService: HubFormsService;\n\n    public eUpdateStrategy = eUpdateStrategy;\n    public updateStrategies = updateStrategies;\n\n    public eTransformWriterMethod = eTransformWriterMethod;\n    public loadStrategies = loadStrategies;\n\n    public managedConnections: DexihConnection[];\n    public connectionTables: ConnectionTables[];\n\n    public showTableProperties = false;\n    public showColumn = false;\n\n    private ignoreUpdateTable = false;\n\n    public nodes = [];\n\n    public newTable = false;\n\n    public inputColumns: DexihDatalinkColumn[];\n\n    public targetKey: number;\n    public targetTableForm: FormGroup;\n\n    public columnKey: number;\n    public deltaType: eDeltaType;\n\n    public showBulkEdit = false;\n\n    private canExit = false;\n\n    public logger = new LogFactory('datalink-edit-target-table');\n\n    columns = [\n        { name: 'position', title: '#', format: '' },\n        { name: 'columnStatus', title: 'Lineage', format: 'Html' },\n        { name: 'name', title: 'Name', format: '' },\n        { name: 'logicalName', title: 'Logical', format: '' },\n        { name: 'dataType', title: 'Data Type', format: '' },\n        { name: 'deltaType', title: 'Delta Type', format: '' },\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean' },\n        { name: 'defaultValue', title: 'Default Value', format: '' },\n        { name: 'securityFlag', title: 'Security Flag', format: 'Enum', enum: eSecurityFlag },\n        { name: 'columnValidation', title: 'Validation', format: '', class: 'columnValidationClass', tooltip: 'columnValidationTooltip' }\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n    private _missingColumnsData = new BehaviorSubject<Array<any>>(null);\n    missingColumnsData: Observable<Array<any>> = this._missingColumnsData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private editDatalinkService: DatalinkEditService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private fb: FormBuilder) {\n\n        this.tableFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this.logger.LogC(() => `ngOnInit`, eLogLevel.Trace);\n\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.editDatalinkService.hubFormsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.datalinkForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                const ioColumns = new InputOutputColumns();\n                this.inputColumns = ioColumns.getDatalinkOutputColumns(this.datalinkForm.value);\n\n                if (this.action === 'edit') {\n                    this.targetKey = +params['targetKey'];\n                    let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n\n                    // create a copy of the target form.\n                    let originalTargetTableForm = <FormGroup> targets.controls.find(c => c.value.key === this.targetKey);\n\n                    if (originalTargetTableForm && originalTargetTableForm.controls.key.value <= 0) {\n                        this.newTable = true;\n                    }\n\n                    // if the table is not found, then navigate back to the parent.\n                    if (originalTargetTableForm === undefined) {\n                        this.canExit = true;\n                        this.authService.navigateUp();\n                        return;\n                    }\n\n                    this.targetTableForm = this.editDatalinkService.hubFormsService\n                        .datalinkTargetFormGroup(originalTargetTableForm.value, originalTargetTableForm.controls.table.value);\n\n                } else if (this.action === 'new') {\n                    let target = new DexihDatalinkTarget();\n                    target.key = this.hubCache.getNextSequence();\n                    this.targetTableForm = this.editDatalinkService.hubFormsService.datalinkTargetFormGroup(target);\n\n                } else {\n                    this.hubService.addHubErrorMessage('Invalid action ' + this.action);\n                }\n\n                if (this.hubCache.isLoaded() && this.datalinkForm) {\n                    this.connectionTables = this.hubCache.getConnectionTables();\n                    this.managedConnections = this.hubCache.getManagedConnections();\n\n                    this.updateData();\n                    this.resetSubscription();\n\n\n                    this.logger.LogC(() => `ngOnInit - completed`, eLogLevel.Trace);\n                }\n\n                if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n                this._saveSubscription = this.editDatalinkService.savingDatalink.subscribe(value => {\n                    if(value) {\n                        this.apply();\n                    }\n                });\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Edit Target Table');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._loadStrategySubscription) { this._loadStrategySubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this._saveSubscription) { this._saveSubscription.unsubscribe(); }\n    }\n\n    canDeactivate(): Promise<boolean> {\n        return new Promise<boolean>(resolve => {\n          if (!this.canExit && this.targetTableForm?.dirty) {\n            this.authService.confirmDialog('Target Table Changed',\n            'The table has changed.  Would you like to discard the changes and return to the previous screen?  Otherwise, use the apply button to save the changes.'\n            ).then(confirm => {\n              resolve(confirm);\n            }).catch(reason => {\n              resolve(false);\n            });\n          } else {\n            resolve(true);\n          }\n        });\n      }\n\n    resetSubscription() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        this._tableFormSubscription = this.targetTableForm.controls.tableKey.valueChanges.subscribe(() => {\n            this.updateData();\n        });\n    }\n\n    previewData() {\n        this.router.navigate(['preview-table-data', this.targetTableForm.controls.tableKey.value], { relativeTo: this.route });\n    }\n\n    columnStatus(table: DexihTable, column: DexihTableColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, null, column, null, null, eMappingStatus.NotMapped, this.hubCache);\n        const lineage = columnUsage.createDatalinkLineage(true);\n        const mappingStatus = lineageMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `<i class=\"${mappingStatus.statusClass}\"></i>&nbsp;${mappingStatus.name}`\n        }\n    }\n\n    datalinkColumnStatus(table: DexihDatalinkTable, column: DexihDatalinkColumn): string {\n        let columnUsage: ColumnUsageNode = new ColumnUsageNode(\n            eDatalinkObjectType.TargetTable, eObjectUse.Target,\n            this.datalinkForm.value, column, null, null, null, eMappingStatus.NotMapped, this.hubCache);\n        const lineage = columnUsage.createDatalinkLineage(true);\n        const mappingStatus = lineageMappingStatuses.find(c => c.key === lineage);\n        if (mappingStatus) {\n            return `<i class=\"${mappingStatus.statusClass}\"></i>&nbsp;${mappingStatus.name}`\n        }\n    }\n\n    private addNodeColumns(columns: DexihDatalinkColumn[], path: string) {\n        if (!path) {\n            this.nodes = [];\n        }\n        if (columns) {\n            columns.filter(c => c.dataType === eTypeCode.Node && c.isValid).forEach(col => {\n                let name = path ? (path + '.' + col.logicalName) : col.logicalName;\n                this.nodes.push({key: col.key, name: name});\n\n                if (col.childColumns && col.childColumns.length > 0) {\n                    this.addNodeColumns(col.childColumns, name);\n                }\n            });\n        }\n    }\n\n    updateData() {\n        if (this.ignoreUpdateTable) {\n            return;\n        }\n\n        this.logger.LogC(() => `updateData started`, eLogLevel.Trace);\n        this.showBulkEdit = false;\n\n        let validation = this.editDatalinkService.getValidationTransform()\n\n        this.tableFormService.startForm(<FormGroup>this.targetTableForm.controls.table)\n        if (this.targetTableForm.controls.table) {\n\n            if (!this.targetTableForm.controls.table.value) {\n                this.logger.LogC(() => `updateData no targetTable specified.`, eLogLevel.Trace);\n                this._tableData.next(null);\n            } else {\n                const table = this.targetTableForm.controls.table.value;\n                this.logger.LogC(() => `updateData targetTable ${table.name}`, eLogLevel.Trace);\n\n                let columnData = [];\n                table.dexihTableColumns\n                    .filter(c => c.isValid)\n                    .sort((a, b) => a.position - b.position)\n                    .forEach(column => {\n                        let deltaType = deltaTypes.find(c => c.key === column.deltaType);\n                        let newColumn = {\n                            key: column.key,\n                            position: column.position,\n                            columnStatus: this.columnStatus(table, column),\n                            name: column.name,\n                            dataType: this.hubCache.dataTypeToString(column),\n                            deltaType: deltaType ? deltaType.name : 'Not specified',\n                            allowDbNull: column.allowDbNull,\n                            logicalName: column.logicalName,\n                            isIncrementalUpdate: column.isIncrementalUpdate,\n                            securityFlag: column.securityFlag,\n                            defaultValue: column.defaultValue,\n                            columnValidation: this.hubCache.getColumnValidation(column.columnValidationKey).name,\n                            columnValidationClass: column.columnValidationKey && !validation ? 'dexih-error-icon' : '',\n                            columnValidationTooltip: column.columnValidationKey && !validation ?\n                                'Enabled the validation transform for this to function' : '',\n                        };\n\n                        columnData.push(newColumn);\n                    });\n\n                this._tableData.next(columnData);\n\n                let validColumns = this.validColumns();\n\n                if (validColumns) {\n                    this.addNodeColumns(validColumns, '');\n\n                    let missingColumnData = [];\n                    let position = 0;\n                    validColumns.forEach(column => {\n                        if (table.dexihTableColumns.findIndex(c => c.name === column.name) < 0 &&\n                            missingColumnData.findIndex(c => c.name === column.name) < 0) {\n                            let deltaType = deltaTypes.find(c => c.key === column.deltaType);\n                            let newColumn = {\n                                key: column.key,\n                                position: column.position + position,\n                                columnStatus: this.datalinkColumnStatus(table, column),\n                                name: column.name,\n                                dataType: this.hubCache\n                                    .dataTypeToString(column),\n                                deltaType: deltaType ? deltaType.name : 'Not specified',\n                                allowDbNull: column.allowDbNull,\n                                logicalName: column.logicalName,\n                                isIncrementalUpdate: column.isIncrementalUpdate,\n                                securityFlag: column.securityFlag,\n                                defaultValue: column.defaultValue,\n                                columnValidation: '',\n                            };\n                            missingColumnData.push(newColumn);\n                        }\n                        position += 1000;\n                    });\n                    this._missingColumnsData.next(missingColumnData);\n                }\n\n                this.logger.LogC(() => `updateData columns loaded`, eLogLevel.Trace);\n            }\n        } else {\n            this._tableData.next(null);\n        }\n    }\n\n    validColumns(): DexihDatalinkColumn[] {\n        let validColumns = this.inputColumns;\n\n        if (this.targetTableForm.controls.nodeDatalinkColumn && this.targetTableForm.controls.nodeDatalinkColumn.value) {\n            let io = new InputOutputColumns();\n            validColumns =  io.validColumns(this.targetTableForm.controls.nodeDatalinkColumn.value.key,\n                    this.inputColumns);\n        }\n\n        return validColumns;\n    }\n\n    addMissing(items: Array<DexihDatalinkColumn>) {\n        this.logger.LogC(() => `addMissing started`, eLogLevel.Trace);\n\n        const tableForm = <FormGroup>this.targetTableForm.controls.table;\n\n        // const ioColumns = new InputOutputColumns();\n        // const outputColumns = ioColumns.getDatalinkOutputColumns(this.datalinkForm.value);\n\n        const outputColumns = this.validColumns();\n\n        if (tableForm && outputColumns) {\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            items.forEach(item => {\n                let missingColumn: DexihDatalinkColumn = null;\n                outputColumns.forEach(column => {\n                    if (!missingColumn && item.key === column.key) {\n                        missingColumn = column;\n                    }\n                });\n                if (missingColumn) {\n                    const newColumn = new DexihTableColumn();\n\n                    Object.assign(newColumn, missingColumn);\n\n                    this.resetColumnKeys(newColumn);\n                    let positions = tableColumns.controls.map<number>(c => <number>c.value.position);\n                    let position = positions.length === 0 ? 0 : Math.max(...positions) + 1; // add the the last position\n                    newColumn.position = position;\n                    const columnForm = this.editDatalinkService.hubFormsService.tableColumn(tableColumns.value, newColumn);\n                    tableColumns.push(columnForm);\n                    tableForm.markAsDirty();\n                    this.targetTableForm.markAsDirty();\n                }\n            });\n            this.updateData();\n        }\n        this.logger.LogC(() => `addMissing completed`, eLogLevel.Trace);\n    }\n\n    resetColumnKeys(column: DexihTableColumn) {\n        column.key = this.hubCache.getNextSequence();\n\n        if (column.childColumns) {\n            column.childColumns.forEach(childColumn => this.resetColumnKeys(childColumn));\n        }\n    }\n\n    toggleNewTable() {\n        this.logger.LogC(() => `newTable started`, eLogLevel.Trace);\n\n        if (this.newTable) {\n            const newTable = new DexihTable();\n            this.targetTableForm.setControl('table', this.editDatalinkService.hubFormsService.tableForm(newTable));\n            this.targetTableForm.controls.tableKey.setValue(0);\n            this.resetSubscription();\n            this.addMissing(this._missingColumnsData.value);\n\n            this.showTableProperties = true;\n        }\n\n        this.logger.LogC(() => `newTable completed`, eLogLevel.Trace);\n    }\n\n    editColumn(column: DexihTableColumn) {\n        this.columnKey = column.key;\n        this.showColumn = true;\n    }\n\n    newColumn(deltaType: eDeltaType) {\n        if (deltaType !== null) {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            let newColumn = this.hubCache.newColumn(tableForm.value, deltaType);\n            if (newColumn === null) {\n                this.authService.informationDialog('Invalid column.', `The column ${deltaType} could not be added as it already exists.`);\n                return;\n            }\n            const columnForm = this.editDatalinkService.hubFormsService.tableColumn(tableColumns.value, newColumn);\n            tableColumns.push(columnForm);\n            tableForm.markAsDirty();\n            this.targetTableForm.markAsDirty();\n        } else {\n            this.columnKey = null;\n            this.deltaType = deltaType;\n            this.showColumn = true;\n        }\n    }\n\n    async resetColumns() {\n        let confirm = await this.authService.confirmDialog('Warning reset columns',\n            'This will remove and reload all the columns in this table using the last mapped outputs.  Continue?')\n\n        if (confirm) {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n\n            while (tableColumns.length !== 0) {\n                tableColumns.removeAt(0)\n              }\n            }\n\n            this.addMissing(this.validColumns());\n    }\n\n    deleteColumns(columns: Array<DexihTableColumn>) {\n        columns.forEach(column => {\n            const tableForm = <FormGroup>this.targetTableForm.controls.table;\n            const tableColumns = <FormArray>tableForm.controls.dexihTableColumns;\n            const index = tableColumns.controls.findIndex(c => c.value.key === column.key);\n            if (index >= 0) {\n                tableColumns.removeAt(index);\n                tableForm.markAsDirty();\n            }\n        });\n\n        this.updateData();\n    }\n\n    importTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        const connection = this.hubCache.getConnection(table.connectionKey)\n        this.hubService.importTables([table], false, this.cancelToken)\n            .then(tables => {\n                if (!tables || tables.length === 0) { return; }\n                const returnTable: any = tables[0];\n                returnTable.useLogical =\n                    this.hubCache.defaultTableLogicalName(returnTable.schema, returnTable.name) !== returnTable.logicalName;\n                let tableForm = this.editDatalinkService.hubFormsService.tableForm(returnTable);\n                this.targetTableForm.controls.tableKey.setValue(returnTable.key);\n                this.targetTableForm.setControl('table', tableForm);\n            }).catch(reason => {\n                // this.hubService.addHubErrorMessage(reason);\n            });\n    }\n\n    createTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        const connection = this.hubCache.getConnection(table.connectionKey)\n        this.hubService.createTables([table], this.cancelToken)\n            .then(tables => {\n                this.hubService.addHubSuccessMessage('The table was created successfully.');\n                // this.targetTableForm.controls.table.setValue(returnTable);\n            }).catch(reason => {\n                // this.hubService.addHubErrorMessage(reason);\n            });\n    }\n\n    columnSortChange(items: Array<DexihTableColumn>) {\n        this.logger.LogC(() => `columns sort change - started `, eLogLevel.Trace);\n        this.tableFormService.IgnoreFormChange = true;\n        this.editDatalinkService.hubFormsService.IgnoreFormChange = true;\n        this.ignoreUpdateTable = true;\n        const tableForm = <FormGroup>this.targetTableForm.controls.table;\n        let columnsArray = <FormArray>tableForm.controls.dexihTableColumns;\n        let position = 1;\n        items.forEach(c => {\n            let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n            column.controls.position.setValue(position++);\n        });\n\n        tableForm.markAsDirty();\n        this.editDatalinkService.hubFormsService.IgnoreFormChange = false;\n        this.tableFormService.IgnoreFormChange = false;\n        this.ignoreUpdateTable = false;\n        this.updateData();\n        this.logger.LogC(() => `columns sort change - finished `, eLogLevel.Trace);\n    }\n\n    columnUpdated() {\n        this.showColumn = false;\n        this.updateData();\n    }\n\n    saveTable() {\n        const table: DexihTable = this.targetTableForm.controls.table.value;\n        this.hubService.saveTables([table]).then(savedTables => {\n            let savedTable = savedTables[0];\n            this.targetTableForm.setControl('table', this.editDatalinkService.hubFormsService.tableForm(savedTable));\n            this.targetTableForm.controls.tableKey.setValue(savedTable.key);\n            this.resetSubscription();\n            this.editDatalinkService.hubFormsService.save(false);\n        });\n    }\n\n    apply() {\n        if (this.targetTableForm.dirty) {\n            let targets = <FormArray>this.datalinkForm.controls.dexihDatalinkTargets;\n            let index = targets.length;\n            if (this.action === 'edit') {\n                index = targets.controls.findIndex(c => c.value.key === this.targetKey);\n                targets.removeAt(index);\n            }\n            targets.insert(index, this.targetTableForm);\n            targets.markAsDirty();\n            this.canExit = true;\n            this.authService.navigateUp();\n        }\n    }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { DatalinkEditPropertiesComponent } from './properties/datalink-edit-properties.component';\nimport { DatalinkEditComponent } from './datalink-edit.component';\nimport { DatalinkEditSourceTableComponent } from './source-table/datalink-edit-source-table.component';\nimport { DatalinkEditTargetComponent } from './target/datalink-edit-target.component';\nimport { DatalinkEditTransformComponent } from './transform/datalink-edit-transform.component';\nimport { DatalinkEditProfileRulesComponent } from './profile-rules/profile-rules.component';\nimport { DatalinkEditValidationComponent } from './validation/datalink-edit-validation.component';\nimport { DatalinkRunPlanComponent } from './run-plan/datalink-run-plan.component';\n\nimport { StandardFunctionEditComponent }  from './standard-function-edit';\nimport { CustomFunctionEditComponent }  from './custom-function-edit';\nimport { MappingEditComponent } from './mapping-edit';\nimport { DatalinkEditGuard } from './datalink-edit-guard';\nimport { PreviewDataComponent } from './preview-data';\nimport { PreviewTableComponent} from './preview-table';\nimport { TransformTableEditComponent } from './transform-table-edit/transform-table-edit.component';\nimport { DatalinkEditTransformsComponent } from './transforms/datalink-edit-transforms.component';\nimport { DatalinkEditNewTransformComponent } from './new-transform/datalink-edit-new-transform.component';\nimport { TargetTableColumnComponent } from './target-table-column/target-table-column.component';\nimport { DatalinkColumnEditComponent } from './datalink-column-edit/datalink-column-edit.component'\nimport { ResultsIndexComponent, ResultsViewComponent } from '../../results';\nimport { UnGroupEditComponent } from './unGroup-edit';\nimport { DatalinkEditTargetTableComponent } from './target/datalink-edit-target-table.component';\n\nexport const standardFunctionRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n    {path: ':functionType', canDeactivate: [DatalinkEditGuard],\n        component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n    {path: ':functionType/:datalinkTransformItemKey',\n        canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent, data: { pageTitle: 'Standard Function' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const customFunctionRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent, data: { pageTitle: 'Custom Function' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const mappingEditRoutes: Routes = [\n    {path: '', canDeactivate: [DatalinkEditGuard], component: MappingEditComponent, data: { pageTitle: 'Mapping' }},\n//    {path: 'edit-column/:columnKey', component: TableColumnEditComponent, data: { pageTitle: 'Edit Column', action: 'edit'}}\n]\n\nexport const datalinkEditRoutes: Routes = [\n    { path: '', redirectTo: 'properties'},\n\n    { path: 'properties', component: DatalinkEditPropertiesComponent, data: { pageTitle: 'Properties', help: 'datalink.md' } },\n\n    { path: 'source-table', data: { pageTitle: 'Source Table' }, children: [\n        { path: '', pathMatch: 'full', component: DatalinkEditSourceTableComponent},\n        { path: 'preview-table-data/table/:tableKey', component: PreviewTableComponent,\n            data: { pageTitle: 'Preview Table', action: 'preview'} },\n        { path: 'preview-table-data/datalink/:datalinkKey', component: PreviewTableComponent,\n            data: { pageTitle: 'Preview Datalink', action: 'preview'} },\n        { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'Edit Column', action: 'edit'} },\n        { path: 'newcolumn', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'New Column', action: 'new'} },\n        { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n                loadChildren: () => import('../../table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n    ] },\n\n    { path: 'target', data: { breadCrumb: true, pageTitle: 'Targets' }, children: [\n        { path: '', pathMatch: 'full', component: DatalinkEditTargetComponent},\n        { path: 'table-edit/:targetKey', data: { pageTitle: 'Edit Target Table', action: 'edit'}, children: [\n            { path: '', pathMatch: 'full', canDeactivate: [DatalinkEditGuard], component: DatalinkEditTargetTableComponent },\n            { path: 'preview-table-data/:tableKey', component: PreviewTableComponent,\n                data: { pageTitle: 'Preview Table', action: 'preview'} },\n            ]},\n        { path: 'table-new', data: { pageTitle: 'New Target Table', action: 'new'}, children: [\n            { path: '', pathMatch: 'full', canDeactivate: [DatalinkEditGuard], component: DatalinkEditTargetTableComponent },\n            { path: 'preview-table-data/:tableKey', component: PreviewTableComponent,\n                data: { pageTitle: 'Preview Table', action: 'preview'} },\n            ]},\n    ] },\n\n    { path: 'transforms', component: DatalinkEditTransformsComponent, data: { pageTitle: 'Transforms' }, children: [\n        { path: 'new/:position', component: DatalinkEditNewTransformComponent, data: {pageTitle: 'New Transform'}},\n        { path: 'transform/:datalinkTransformKey', data: { pageTitle: 'Transform' } , children: [\n            { path: '', pathMatch: 'full', component: DatalinkEditTransformComponent },\n            { path: 'table-edit/:tableKey', data: { pageTitle: 'Edit Table', action: 'edit'},\n                    loadChildren: () => import('../../table/table-edit/table-edit.module').then(m => m.TableEditModule)},\n            { path: 'standard-function-edit', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'standard-function-edit/:functionType', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'standard-function-edit/:functionType/:datalinkTransformItemKey', data: { pageTitle: 'Standard Function' },\n                canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n            { path: 'custom-function-edit', data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'custom-function-edit/:functionType', data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'custom-function-edit/:functionType/:datalinkTransformItemKey',\n                data: { pageTitle: 'Custom Function', help: 'function.md' },\n                canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n            { path: 'mapping-edit/:type', data: { pageTitle: 'Mapping Edit' },\n                component: MappingEditComponent },\n            { path: 'mapping-edit/:type/:datalinkTransformItemKey', data: { pageTitle: 'Mapping Edit' },\n                component: MappingEditComponent },\n            { path: 'unGroup-edit', data: { pageTitle: 'Un-Group Edit' },\n                component: UnGroupEditComponent },\n            { path: 'unGroup-edit/:datalinkTransformItemKey', data: { pageTitle: 'Un-Group Edit' },\n                component: UnGroupEditComponent },\n            { path: 'preview-transform-data', data: { pageTitle: 'Preview Data' },\n                component: PreviewDataComponent },\n            { path: 'transform-table-edit', data: { pageTitle: 'Transform Table Edit' },\n                component: TransformTableEditComponent },\n            { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n                data: { pageTitle: 'Edit Column', action: 'edit'} },\n        ] },\n\n    ] },\n\n    { path: 'validation', data: { pageTitle: 'Validation' }, children: [\n        {path: '', pathMatch: 'full', component: DatalinkEditValidationComponent, data: { pageTitle: 'Validation' } },\n        { path: 'standard-function-edit', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'standard-function-edit/:functionType', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'standard-function-edit/:functionType/:datalinkTransformItemKey', data: { pageTitle: 'Standard Function' },\n            canDeactivate: [DatalinkEditGuard], component: StandardFunctionEditComponent },\n        { path: 'custom-function-edit', data: { pageTitle: 'Custom Function' },\n            canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n        { path: 'custom-function-edit/:functionType', data: { pageTitle: 'Custom Function' },\n            canDeactivate: [DatalinkEditGuard], component: CustomFunctionEditComponent },\n        { path: 'column/:datalinkColumnKey', component: DatalinkColumnEditComponent,\n            data: { pageTitle: 'Edit Column', action: 'edit'} },\n    ]},\n    { path: 'profile-rules', component: DatalinkEditProfileRulesComponent, data: { pageTitle: 'Profile Rules' } },\n    { path: 'run-plan', component: DatalinkRunPlanComponent, data: { pageTitle: 'Run Plan' } },\n    { path: 'result-view/:auditConnectionKey/:auditKey', component: ResultsViewComponent, data: { pageTitle: 'Detailed Result' } }\n];\n\nexport const routes: Routes = [\n        { path: 'new', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'new', navigateSkip: true, pageTitle: 'New Datalink' }, children: datalinkEditRoutes},\n        { path: 'edit/:datalinkKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'edit', navigateSkip: true, pageTitle: 'Edit Datalink' }, children: datalinkEditRoutes},\n        { path: 'copy/:datalinkKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'copy', navigateSkip: true, pageTitle: 'Copy Datalink' }, children: datalinkEditRoutes},\n        { path: 'sourceTable/:sourceTableKey', component: DatalinkEditComponent, canDeactivate: [DatalinkEditGuard],\n            data: { action: 'sourceTable', navigateSkip: true, pageTitle: 'Edit Datalink' }, children: datalinkEditRoutes}\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routing } from './datalink-edit.routing';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DatalinkEditService } from './datalink-edit.service';\nimport { HubFormsService } from '../../hub.forms.service';\n\nimport { DatalinkEditComponent } from './datalink-edit.component';\nimport { DatalinkEditPropertiesComponent } from './properties/datalink-edit-properties.component';\nimport { DatalinkEditSourceTableComponent } from './source-table/datalink-edit-source-table.component';\nimport { DatalinkEditTargetTableComponent } from './target/datalink-edit-target-table.component';\nimport { DatalinkEditTargetComponent } from './target/datalink-edit-target.component';\nimport { DatalinkEditTransformComponent } from './transform/datalink-edit-transform.component';\nimport { DatalinkEditValidationComponent } from './validation/datalink-edit-validation.component';\nimport { DatalinkEditProfileRulesComponent } from './profile-rules/profile-rules.component';\nimport { DatalinkEditSaveButtonComponent } from './save-button/datalink-edit-save-button.component';\nimport { DatalinkRunPlanComponent } from './run-plan/datalink-run-plan.component';\nimport { DatalinkEditNewTransformComponent } from './new-transform/datalink-edit-new-transform.component';\nimport { StandardFunctionEditComponent }  from './standard-function-edit';\nimport { CustomFunctionEditComponent } from './custom-function-edit';\nimport { UnGroupEditComponent } from './unGroup-edit';\nimport { OutputColumnComponent, OutputColumnsComponent } from './output-columns';\nimport { JoinColumnComponent, JoinColumnsComponent } from './join-columns';\nimport { InputColumnsComponent, InputColumnComponent } from './input-columns';\nimport { MappingEditComponent } from './mapping-edit';\nimport { MappingComponent, MappingItemComponent } from './mapping';\nimport { PreviewDataComponent } from './preview-data';\nimport { PreviewTableComponent} from './preview-table';\nimport { DatalinkEditGuard } from './datalink-edit-guard';\nimport { TransformTableEditComponent } from './transform-table-edit/transform-table-edit.component';\nimport { DatalinkEditTransformsComponent } from './transforms/datalink-edit-transforms.component';\nimport { HubSharedModule } from '../../hub.shared.module';\nimport { TargetTableColumnComponent } from './target-table-column/target-table-column.component';\nimport { TableSharedModule } from '../../table/table.shared.module';\nimport { DatalinkTableComponent } from './datalink-table/datalink-table.component'\nimport { DatalinkColumnEditComponent } from './datalink-column-edit/datalink-column-edit.component'\nimport { ResultsViewModule } from '../../results/results-view/results-view.module';\nimport { InputParameterComponent, OutputParameterComponent} from './parameters'\nimport { TargetColumnsComponent, TargetColumnComponent} from './target-columns';\nimport { DatalinkPreviewDataComponent } from '../datalink-preview-data';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        Routing,\n        HubSharedModule,\n        TableSharedModule,\n        ResultsViewModule\n    ],\n    declarations: [\n        DatalinkEditComponent,\n        DatalinkEditPropertiesComponent,\n        DatalinkEditSourceTableComponent,\n        DatalinkEditTargetTableComponent,\n        DatalinkEditTargetComponent,\n        DatalinkEditTransformComponent,\n        DatalinkEditValidationComponent,\n        DatalinkEditProfileRulesComponent,\n        DatalinkRunPlanComponent,\n        StandardFunctionEditComponent,\n        CustomFunctionEditComponent,\n        OutputColumnComponent, OutputColumnsComponent,\n        JoinColumnComponent, JoinColumnsComponent,\n        InputColumnsComponent, InputColumnComponent,\n        TargetColumnsComponent, TargetColumnComponent,\n        MappingEditComponent,\n        MappingComponent, MappingItemComponent,\n        PreviewDataComponent,\n        PreviewTableComponent,\n        // DatalinkPreviewDataComponent,\n        TransformTableEditComponent,\n        DatalinkEditTransformsComponent,\n        DatalinkEditSaveButtonComponent,\n        DatalinkEditNewTransformComponent,\n        TargetTableColumnComponent,\n        DatalinkTableComponent,\n        DatalinkColumnEditComponent,\n        InputParameterComponent, OutputParameterComponent,\n        UnGroupEditComponent\n    ],\n    providers: [ DatalinkEditService, HubFormsService, DatalinkEditGuard ],\n    exports: []\n})\nexport class DatalinkEditModule {\n\n    static forRoot(): ModuleWithProviders<DatalinkEditModule> {\n        return {\n            ngModule: DatalinkEditModule,\n            providers: [ DatalinkEditService, HubFormsService ]\n        };\n    }\n}\n"]}