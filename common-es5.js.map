{"version":3,"sources":["webpack:///src/app/shared/index.ts","webpack:///src/app/shared/forms/forms.service.ts"],"names":["FormsService","fb","_currentFormObservable","formErrors","hasChanged","formSaving","showAllErrors","validationMessages","validationFieldMessages","clearFormSubscriptions","_valueChangesSubscription","unsubscribe","_changesSubscription1","_changesSubscription2","_changesSubscription3","_changesSubscription4","_changesSubscription5","item","template","newForm","group","addMissing","startForm","form","itemTemplate","keys","Object","existingKeys","controls","forEach","key","findIndex","c","control","setValue","addControl","currentForm","next","valueChanges","pipe","subscribe","data","onValueChanged","asObservable","field","get","dirty","valid","messages","errors","message","minlength","actualLength","requiredLength","maxlength","value","maxvalue","requiredValue","minvalue"],"mappings":"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","file":"common-es5.js","sourcesContent":["export {SharedModule} from './shared.module';\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, FormArray, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\nimport { Subscription, BehaviorSubject, Observable, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Injectable()\nexport class FormsService implements OnDestroy {\n  private _valueChangesSubscription: Subscription;\n\n  private _changesSubscription1: Subscription;\n  private _changesSubscription2: Subscription;\n  private _changesSubscription3: Subscription;\n  private _changesSubscription4: Subscription;\n  private _changesSubscription5: Subscription;\n\n  public currentForm: FormGroup;\n  private _currentFormObservable = new BehaviorSubject<FormGroup>(null);\n  public formErrors: any = {};\n  public hasChanged = false;\n  public formSaving = false;\n  public showAllErrors = false;\n\n  private saveMethod: string;\n\n  validationMessages = {\n    'required': 'A value is required.',\n    'duplicateName': 'The value is already being used.'\n  };\n\n  validationFieldMessages = {\n\n  };\n\n  constructor(\n    private fb: FormBuilder,\n  ) {\n  }\n\n  ngOnDestroy() {\n    this.clearFormSubscriptions();\n  }\n\n  public clearFormSubscriptions() {\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n    if (this._changesSubscription1) { this._changesSubscription1.unsubscribe(); }\n    if (this._changesSubscription2) { this._changesSubscription2.unsubscribe(); }\n    if (this._changesSubscription3) { this._changesSubscription3.unsubscribe(); }\n    if (this._changesSubscription4) { this._changesSubscription4.unsubscribe(); }\n    if (this._changesSubscription5) { this._changesSubscription5.unsubscribe(); }\n  }\n\n  public createDefault(item: any, template: any) {\n    const newForm = this.fb.group({ });\n    this.addMissing(item, newForm, template);\n    this.startForm(newForm);\n  }\n\n  public addMissing(item: any, form: FormGroup, itemTemplate: any) {\n    let keys = Object.keys(itemTemplate);\n    let existingKeys = Object.keys(form.controls);\n    keys.forEach(key => {\n      if (existingKeys.findIndex(c => c === key) >= 0) {\n        // skip items already added.\n      } else {\n        let control = new FormControl(key);\n        control.setValue(item[key]);\n        form.addControl(key, control);\n      }\n    });\n  }\n\n  public startForm(form: FormGroup) {\n    this.currentForm = form;\n    this._currentFormObservable.next(form);\n\n    if (this._valueChangesSubscription) { this._valueChangesSubscription.unsubscribe(); }\n\n    // when a value changes, update the errors.\n    this._valueChangesSubscription = this.currentForm.valueChanges\n        .pipe(debounceTime(500))\n        .subscribe(data => {\n          this.onValueChanged(data);\n        });\n\n    this.onValueChanged(); // (re)set validation messages now\n\n    this.hasChanged = false;\n  }\n\n  public getCurrentFormObservable(): Observable<FormGroup> {\n    return this._currentFormObservable.asObservable();\n  }\n\n  private onValueChanged(data?: any) {\n    if (!this.currentForm) { return; }\n    const form = this.currentForm;\n\n    this.hasChanged = true;\n\n      for (const field of Object.keys(this.currentForm.controls)) {\n        // clear previous error message (if any)\n        this.formErrors[field] = '';\n        const control = form.get(field);\n\n        // if the control is dirty or flag is set to show all errors.\n        if (control && (control.dirty || this.showAllErrors)) {\n          if (!control.valid) {\n            const messages = this.validationFieldMessages[field];\n            if (control.errors) {\n            for (const key of Object.keys(control.errors)) {\n              if (messages && messages[key]) {\n                this.formErrors[field] += messages[key] + ' ';\n              } else if (this.validationMessages[key]) {\n                this.formErrors[field] += this.validationMessages[key] + ' ';\n              } else {\n                let message: string;\n\n                switch (key) {\n                  case 'minlength':\n                    message = 'Value is ' +\n                      control.errors.minlength.actualLength +\n                      ' charaters long, required minimum length is '\n                      + control.errors.minlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxlength':\n                    message = 'Value is ' +\n                      control.errors.maxlength.actualLength +\n                      ' charaters long, required maximum length is '\n                      + control.errors.maxlength.requiredLength + ' characters.';\n                    break;\n                  case 'maxvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required maximum is '\n                      + control.errors.maxvalue.requiredValue + '.';\n                    break;\n                  case 'minvalue':\n                    message = 'Value is ' +\n                      control.value +\n                      ' required minimum is '\n                      + control.errors.minvalue.requiredValue + '.';\n                    break;\n                  case 'email':\n                    message = 'Value is not a valid email address.';\n                    break;\n                  case 'passwordMatch':\n                    message = 'The passwords do not match.';\n                    break;\n                  case 'pattern':\n                    message = 'Passwords must have one upper, lower, number, and symbol.';\n                    break;\n                  default:\n                    message = 'Field error: ' + key;\n                }\n                this.formErrors[field] += message + ' ';\n              }\n            }\n          } else {\n            // this.formErrors[field] = 'Invalid value';\n          }\n          }\n        }\n      }\n  }\n\n  public showErrors() {\n    this.showAllErrors = true;\n    this.onValueChanged();\n  }\n\n}\n"]}