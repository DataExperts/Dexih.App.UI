{"version":3,"sources":["webpack:///src/app/+public/public.component.ts","webpack:///src/app/+public/public.component.html","webpack:///src/app/+public/public.module.ts","webpack:///src/app/+public/public.routing.ts","webpack:///src/app/+public/public.service.ts"],"names":["PublicComponent","route","logoUrl","embedded","_subscription","queryParams","subscribe","p","unsubscribe","selector","templateUrl","PublicModule","ngModule","providers","imports","declarations","exports","routes","path","component","children","redirectTo","data","pageTitle","Routing","forChild","PublicService","authService","logger","_hubMessages","asObservable","value","message","addUpdateNotification","messages","getHubMessages","push","next","newMessage","addHubMessage","error","context","stack","searchString","hubKeys","maxResults","reload","sharedItemsIndex","post","Promise","resolve","sharedItems","zipFiles","downloadFormat","cancelToken","reject","flags","i","length","hubKey","forEach","then","activeAgent","postRemote","clientId","getWebSocketConnectionId","filter","c","remoteAgentId","instanceId","task","addUpdateTask","reason","LogC","Error","objectKey","objectType","inputColumns","selectQuery","parameters","result","columns","constructDataTableColumns","parameterName","resetCache","dashboardKey","dashboard"],"mappings":"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","file":"11-es5.js","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription} from 'rxjs';\nimport { logoUrl } from '../+auth/auth.models';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n    selector: 'dexih-public',\n    templateUrl: './public.component.html'\n})\nexport class PublicComponent implements OnInit, OnDestroy {\n    _subscription: Subscription;\n\n    logoUrl = logoUrl;\n    embedded = false;\n\n    constructor(private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this._subscription = this.route.queryParams.subscribe(p => {\n            if (p['embed'] === 'true') {\n                this.embedded = true;\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n}\n","<div *ngIf=\"!embedded\" id=\"content\">\n    <nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n        <div id=\"logo-group\">\n            <span id=\"logo\">\n                <img [src]='logoUrl' alt=\"Data Experts Group\"> </span>\n        </div>\n    \n        <div class=\"collapse navbar-collapse mr-sm-2\">\n        </div>\n        <form class=\"form-inline\">\n            <div>\n                <span class=\"d-none d-md-inline text-white m-1\" >\n                    Need an account?\n                </span>\n                <a routerLink=\"/auth/register\" class=\"btn btn-success mr-1\">Sign Up</a>\n            </div>\n    \n            <div>\n                <span class=\"d-none d-md-inline text-white m-1\" >\n                    Already Registered?\n                </span>\n                <a routerLink=\"/auth/login\" class=\"btn btn-success mr-1\">Sign In</a>\n            </div>\n    \n            <a routerLink=\"/auth/help\" class=\"d-none d-md-inline btn btn-secondary text-white mr-1\">Help</a>\n    \n            <dexih-button-dropdown [pullRight]=\"true\" [hideCarrot]=\"true\" buttonClass=\"btn-primary\" iconClass=\"fa fa-navicon\">\n                <a class=\"dropdown-item\" routerLink=\"/auth/register\">Sign Up</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/login\">Sign In</a>\n                <div class=\"dropdown-divider\"></div>\t\n                <a class=\"dropdown-item\" routerLink=\"/auth/forgot-password\">Forgot password</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/verifyemail\">Verify password</a>\n                <div class=\"dropdown-divider\"></div>\t\n                <a class=\"dropdown-item\" routerLink=\"/auth/privacy\">Privacy Policy</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/terms\">Terms and Conditions</a>\n                <a class=\"dropdown-item\" routerLink=\"/auth/help\">Help</a>\n            </dexih-button-dropdown>\n        </form>\n    </nav>\n    \n    <dexih-ribbon></dexih-ribbon>\n\n    <router-outlet></router-outlet>\n</div>\n\n<router-outlet *ngIf=\"embedded\"></router-outlet>\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { Routing } from './public.routing';\nimport { SharedModule } from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { PublicService } from './public.service';\nimport { PublicComponent } from './public.component';\nimport { RibbonModule } from '../shared/layout/ribbon';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        Routing,\n        ReactiveFormsModule,\n        RibbonModule\n    ],\n    declarations: [\n        PublicComponent,\n    ],\n    providers: [PublicService],\n    exports: []\n})\nexport class PublicModule {\n\n    static forRoot(): ModuleWithProviders<PublicModule> {\n        return {\n            ngModule: PublicModule,\n            providers: [PublicService]\n        };\n    }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { PublicComponent } from './public.component';\nimport { SharedDataComponent, PreviewComponent, PreviewDashboardComponent } from '../shared/ui/sharedData';\n\n// insert the \"hubs\" routes once for the base, and once under the summary section to ensure the\n// breadcrumbs are accurate.\nexport const routes: Routes = [\n    {\n        path: '',\n        component: PublicComponent,\n        children: [\n            { path: '', redirectTo: 'index' },\n            { path: 'index', data: { pageTitle: 'Shared Data' }, children : [\n                { path: '', component: SharedDataComponent, data: { pageTitle: 'Shared Data' } },\n                { path: 'preview/:hubKey/:objectType/:objectKey', component: PreviewComponent, data: { pageTitle: 'Preview' } },\n                { path: 'previewDashboard/:hubKey/:dashboardKey', component: PreviewDashboardComponent, data: { pageTitle: 'Preview Dashboard' } },\n            ] },\n        ]\n    }\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { Message, CancelToken } from '../+auth/auth.models';\nimport { eLogLevel, LogFactory } from '../../logging';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { AuthService } from '../+auth/auth.service';\nimport { BehaviorSubject, Observable} from 'rxjs';\nimport { eDownloadFormat, DexihActiveAgent, InputColumn, SelectQuery,\n    SharedData, eDataObjectType, DexihDashboard, InputParameterBase, ManagedTask, ListOfValuesItem } from '../shared/shared.models';\nimport { PreviewResults } from '../+hub/hub.models';\n\n@Injectable()\nexport class PublicService implements OnDestroy {\n\n    private logger = new LogFactory('public.service');\n    private _hubMessages = new BehaviorSubject<Array<Message>>([]);\n\n\n    private sharedItemsIndex: SharedData[];\n\n    constructor(\n        private authService: AuthService\n        ) {\n    }\n\n    ngOnDestroy() {\n    }\n\n    getHubMessagesObservable(): Observable<Array<Message>> {\n        return this._hubMessages.asObservable();\n    }\n\n    getHubMessages(): Array<Message> {\n        return this._hubMessages.value;\n    }\n\n    addHubMessage(message: Message) {\n        this.authService.addUpdateNotification(message, false);\n        let messages = this.getHubMessages();\n        messages.push(message);\n        this._hubMessages.next(messages);\n    }\n\n    addHubErrorMessage(message: string) {\n        let newMessage = new Message(false, message, null, null);\n        this.addHubMessage(newMessage);\n    }\n\n    addHubClientErrorMessage(error: Error, context: string) {\n        let message = context + '.  The following error occurred on the client: ' + error.message;\n        let newMessage = new Message(false, message, error.stack, null);\n        this.addHubMessage(newMessage);\n    }\n\n    addHubSuccessMessage(message: string) {\n        let newMessage = new Message(true, message, null, null);\n        this.addHubMessage(newMessage);\n    }\n\n    // gets all shared data items\n    getSharedDataIndex(searchString: string, hubKeys: number[], maxResults: number, reload: boolean): Promise<SharedData[]> {\n        if (reload || !this.sharedItemsIndex) {\n            return this.authService.post<SharedData[]>('/api/SharedData/SharedDataIndex', {\n                searchString, hubKeys, maxResults\n            }, 'Getting shared data index...');\n        } else {\n            Promise.resolve(this.sharedItemsIndex);\n        }\n    }\n\n    downloadData(sharedItems: Array<SharedData>, zipFiles: boolean, downloadFormat: eDownloadFormat, cancelToken: CancelToken):\n        Promise<boolean> {\n        return new Promise<boolean>((resolve, reject) => {\n\n            // get distinct list of hubKeys\n            let flags = [], hubKeys = []\n            for (let i = 0; i < sharedItems.length; i++) {\n                if (flags[sharedItems[i].hubKey]) { continue };\n                flags[sharedItems[i].hubKey] = true;\n                hubKeys.push(sharedItems[i].hubKey);\n            }\n\n            hubKeys.forEach(hubKey => {\n                this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey}, 'Getting active remote agent...')\n                .then(activeAgent => {\n\n                    this.authService.postRemote<ManagedTask>('/api/SharedData/DownloadData', {\n                        hubKey: hubKey,\n                        clientId: this.authService.getWebSocketConnectionId(),\n                        downloadFormat: downloadFormat,\n                        zipFiles: zipFiles,\n                        sharedItems: sharedItems.filter(c => c.hubKey === hubKey),\n                        remoteAgentId: activeAgent.instanceId,\n                    }, activeAgent, 'Downloading data...', cancelToken)\n                        .then(task => {\n                        this.authService.addUpdateTask(task);\n                        resolve(true);\n                    }).catch(reason => {\n                        this.logger.LogC(() => `downloadData, error: ${reason.message}.`, eLogLevel.Error);\n                        reject(reason);\n                    });\n                });\n            });\n        });\n    }\n\n    // starts a preview, and returns the url to get the download stream.\n    previewData(hubKey: number, objectKey: number, objectType: eDataObjectType,\n        inputColumns: InputColumn[], selectQuery: SelectQuery, parameters: InputParameterBase[], cancelToken: CancelToken):\n        Promise<PreviewResults> {\n\n        return new Promise<PreviewResults>((resolve, reject) => {\n            this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey }, 'Getting active remote agent...')\n            .then(activeAgent => {\n                this.authService.postRemote<PreviewResults>('/api/SharedData/PreviewData', {\n                    hubKey: hubKey,\n                    objectType: objectType,\n                    objectKey: objectKey,\n                    selectQuery: selectQuery,\n                    remoteAgentId: activeAgent.instanceId,\n                    inputColumns: inputColumns,\n                    parameters: parameters\n                }, activeAgent, 'Previewing data...', cancelToken).then(result => {\n                    result.columns = this.authService.constructDataTableColumns(result.columns);\n                    resolve(result);\n                }).catch(reason => {\n                    reject(reason);\n                })\n            }).catch(reason => {\n                reject(reason);\n            });\n        });\n    }\n\n      // starts a preview, and returns the url to get the download stream.\n      previewListOfValues(hubKey: number, objectKey: number, objectType: eDataObjectType, parameterName,\n        resetCache: boolean, cancelToken: CancelToken):\n        Promise<ListOfValuesItem[]> {\n\n        return new Promise<ListOfValuesItem[]>((resolve, reject) => {\n            this.authService.post<DexihActiveAgent>('/api/SharedData/GetActiveAgent', { hubKey: hubKey }, 'Getting active remote agent...')\n            .then(activeAgent => {\n                this.authService.postRemote<ListOfValuesItem[]>('/api/SharedData/PreviewListOfValues', {\n                    hubKey: hubKey,\n                    objectType: objectType,\n                    objectKey: objectKey,\n                    parameterName: parameterName,\n                    resetCache: resetCache,\n                    remoteAgentId: activeAgent.instanceId,\n                }, activeAgent, 'Previewing list of values...', cancelToken).then(result => {\n                    resolve(result);\n                }).catch(reason => {\n                    reject(reason);\n                })\n            }).catch(reason => {\n                reject(reason);\n            });\n        });\n    }\n\n    getDashboard(hubKey: number, dashboardKey: number): Promise<DexihDashboard> {\n\n        return new Promise<DexihDashboard>((resolve, reject) => {\n            this.authService.post<DexihDashboard>('/api/SharedData/PreviewDashboard', {\n                hubKey: hubKey,\n                dashboardKey: dashboardKey,\n            }, 'Getting dashboard download locations...').then(dashboard => {\n                resolve(dashboard);\n            }).catch(reason => reject(reason));\n        });\n    }\n\n\n\n}\n\n\n\n\n"]}