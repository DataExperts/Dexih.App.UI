{"version":3,"sources":["webpack:///src/app/+auth/auth.component.ts","webpack:///src/app/+auth/auth.routing.ts","webpack:///src/app/+auth/locked/locked.component.ts","webpack:///src/app/+auth/locked/locked.component.html","webpack:///src/app/+auth/notInvited/notInvited.component.ts","webpack:///src/app/+auth/notInvited/notInvited.component.html","webpack:///src/app/+auth/login/login.component.html","webpack:///src/app/+auth/login/login.component.ts","webpack:///src/app/+auth/forgot/forgot.component.ts","webpack:///src/app/+auth/forgot/forgot.component.html","webpack:///src/app/+auth/register/register.component.html","webpack:///src/app/+auth/register/register.component.ts","webpack:///src/app/+auth/terms/terms.component.ts","webpack:///src/app/+auth/terms/terms.component.html","webpack:///src/app/+auth/help/help.component.ts","webpack:///src/app/+auth/help/help.component.html","webpack:///src/app/+auth/verifyemail/verifyemail.component.ts","webpack:///src/app/+auth/verifyemail/verifyemail.component.html","webpack:///src/app/+auth/welcome/welcome.component.ts","webpack:///src/app/+auth/welcome/welcome.component.html","webpack:///src/app/+auth/auth.module.ts","webpack:///src/app/+auth/header/header.component.ts","webpack:///src/app/+auth/header/header.component.html"],"names":["AuthComponent","authService","initialize","selector","template","routes","path","component","children","redirectTo","pathMatch","Routing","forChild","LockedComponent","route","logoUrl","_queryParamSubscription","queryParams","subscribe","email","unsubscribe","alert","templateUrl","styleUrls","NotInvitedComponent","router","params","LoginComponent","externalLogin","loginType","Dexih","eLoginProvider","logger","user","getCookie","Google","enableGoogle","Microsoft","enableMicrosoft","enablePassword","login","then","result","doLogin","reason","message","googleLogin","microsoftLogin","setCookie","toString","googleEnable","microsoftEnable","forceLogin","googleSignOut","microsoftSignOut","emailConfirmed","redirectUrl","navigate","navigateByUrl","relativeTo","parent","ForgotComponent","formsService","userService","fb","codeSent","verificationCode","registerForm","group","required","minLength","maxLength","pattern","validator","passwordsMatch","startForm","currentForm","password","controls","passwordConfirm","value","setErrors","updateValueAndValidity","valid","forgotPassword","showAllErrors","resetPassword","providers","RegisterComponent","passwordValidators","code","disabled","requiredTrue","googleMessage","microsoftMessage","enable","provider","setValue","resetMessage","providerKey","authenticationToken","setValidators","setExternalLogin","disable","firstName","lastName","refreshLogin","register","getRawValue","isInvited","googleSignIn","microsoftSignIn","termsAccepted","terms","window","open","TermsComponent","showDialog","emit","printContents","popupWin","document","getElementById","innerHTML","write","close","HelpComponent","http","location","_subscription","getData","url","prepareExternalUrl","get","responseType","matches","RegExp","data","replace","match","event","element","target","link","getAttribute","endsWith","startsWith","substr","preventDefault","parentElement","getRoute","VerifyEmailComponent","resendingCode","submittingVerification","submitVerification","confirmEmail","successMessage","resendConfirmationEmail","resendVerification","WelcomeComponent","AuthModule","ngModule","imports","declarations","HeaderComponent","showSignUp","showSignIn"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaA,a;AAEX,+BAAYC,WAAZ,EAAsC;AAAA;;AACpCA,qBAAW,CAACC,UAAZ;AACD;;;;qCAEU,CACV;;;;;;;yBAPUF,a,EAAa,0H;AAAA,O;;;cAAbA,a;AAAa,iC;AAAA,gB;AAAA,e;AAAA;AAAA;AAFb;;;;;;;;;wEAEAA,a,EAAa;gBAJzB,uDAIyB;iBAJf;AACTG,oBAAQ,EAAE,UADD;AAETC,oBAAQ,EAAE;AAFD,W;AAIe,U;;;;;;;;;;;;;;;;;;;;;;ACP1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAWO,UAAMC,MAAM,GAAW,CAC5B;AAAEC,YAAI,EAAE,EAAR;AAAYC,iBAAS,EAAE,6DAAvB;AAAsCC,gBAAQ,EAAE,CAC9C;AAAEF,cAAI,EAAE,OAAR;AAAiBC,mBAAS,EAAE;AAA5B,SAD8C,EAE9C;AAAED,cAAI,EAAE,UAAR;AAAoBC,mBAAS,EAAE;AAA/B,SAF8C,EAG9C;AAAED,cAAI,EAAE,OAAR;AAAiBC,mBAAS,EAAE;AAA5B,SAH8C,EAI9C;AAAED,cAAI,EAAE,SAAR;AAAmBG,oBAAU,EAAE,kCAA/B;AAAmEC,mBAAS,EAAE;AAA9E,SAJ8C,EAK9C;AAAEJ,cAAI,EAAE,aAAR;AAAuBG,oBAAU,EAAE,oBAAnC;AAAyDC,mBAAS,EAAE;AAApE,SAL8C,EAM9C;AAAEJ,cAAI,EAAE,iBAAR;AAA2BC,mBAAS,EAAE;AAAtC,SAN8C,EAO9C;AAAED,cAAI,EAAE,QAAR;AAAkBC,mBAAS,EAAE;AAA7B,SAP8C,EAQ9C;AAAED,cAAI,EAAE,YAAR;AAAsBC,mBAAS,EAAE;AAAjC,SAR8C,EAS9C;AAAED,cAAI,EAAE,aAAR;AAAuBC,mBAAS,EAAE;AAAlC,SAT8C,EAU9C;AAAED,cAAI,EAAE,MAAR;AAAgBC,mBAAS,EAAE;AAA3B,SAV8C;AAAhD,OAD4B,CAAvB;;AAeA,UAAMI,OAAO,GAAG,6DAAaC,QAAb,CAAsBP,MAAtB,CAAhB;;;;;;;;;;;;;;;;;AC1BP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAUaQ,e;AAMX,iCAAoBC,KAApB,EAA2C;AAAA;;AAAvB,eAAAA,KAAA,GAAAA,KAAA;AAHpB,eAAAC,OAAA,GAAU,oDAAV;AAG8C;;;;qCAEnC;AAAA;;AACP,iBAAKC,uBAAL,GAA+B,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAACD,WAAD,EAAiB;AAC/E,mBAAI,CAACE,KAAL,GAAaF,WAAW,CAAC,OAAD,CAAxB;AACD,aAF8B,CAA/B;AAGH;;;wCAEa;AACZ,gBAAI,KAAKD,uBAAT,EAAkC;AAAE,mBAAKA,uBAAL,CAA6BI,WAA7B;AAA6C;AAClF;;;mCAEQ;AACPC,iBAAK,CAAC,iCAAD,CAAL;AACD;;;;;;;yBApBUR,e,EAAe,+H;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA,iB;AAAA,e;AAAA,wL;AAAA;AAAA;ACV5B;;AAEA;;AACE;;AACE;;AACE;;AACF;;AAEA;;AACE;;AAGA;;AACE;;AAAsE;;AAAa;;AACrF;;AAEF;;AACF;;AACF;;;;AAlBa;;AAKP;;AAAA;;;;;;;;;wEDKOA,e,EAAe;gBAL3B,uDAK2B;iBALjB;AACTV,oBAAQ,EAAE,YADD;AAETmB,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAKiB,U;;;;;;;;;;;;;;;;;;;;;;AEV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAWaC,mB;AAMX,qCAAoBC,MAApB,EAA4CX,KAA5C,EAAmE;AAAA;;AAA/C,eAAAW,MAAA,GAAAA,MAAA;AAAwB,eAAAX,KAAA,GAAAA,KAAA;AAH5C,eAAAC,OAAA,GAAU,oDAAV;AAGsE;;;;qCAE3D;AAAA;;AACP,iBAAKC,uBAAL,GAA+B,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAACQ,MAAD,EAAY;AAC1E,oBAAI,CAACP,KAAL,GAAaO,MAAM,CAAC,OAAD,CAAnB;AACD,aAF8B,CAA/B;AAGH;;;wCAEa;AACZ,gBAAI,KAAKV,uBAAT,EAAkC;AAAE,mBAAKA,uBAAL,CAA6BI,WAA7B;AAA6C;AAClF;;;;;;;yBAhBUI,mB,EAAmB,uH,EAAA,+H;AAAA,O;;;cAAnBA,mB;AAAmB,uC;AAAA,iB;AAAA,e;AAAA,0Y;AAAA;AAAA;ACXhC;;AAEA;;AAEM;;AACE;;AACE;;AACF;;AAEA;;AACE;;AAAG;;AAAuE;;AAC1E;;AACE;;AAAuB;;AAA6B;;AAAU;;AAChE;;AAEA;;AACE;;AAA+J;;AAA8C;;AAA4B;;AAAI;;AAC/O;;AAGA;;AACE;;AAAoE;;AAAkB;;AACtF;;AAA+E;;AAAa;;AAC9F;;AACF;;AACF;;AACF;;AAEJ;;;;AA5Ba;;AAUA;;AAAA;;;;;;;;;wEDCAA,mB,EAAmB;gBAN/B,uDAM+B;iBANrB;AACTrB,oBAAQ,EAAE,gBADD;AAETmB,uBAAW,EAAE,6BAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAMqB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AED3B;;AACC;;AACC;;AACD;;AACD;;;;;;AAFE;;AAAA;;;;;;;;AASF;;AACC;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAE7B;;AACA;;AACC;;AAAsC;;AAAgB;;AACvD;;AACD;;;;;;AAN8B;;AAAA;;;;;;;;AAchC;;AACC;;AAAsB;AAAA;;AAAA;;AAAA;AAAA,aAA0B,OAA1B,EAA0B;AAAA;;AAAA;;AAAA;AAAA,WAA1B;;AAA2E;;AAChG;;AACD;;AACD;;;;;;;;AAKC;;AAA8B;AAAA;;AAAA;;AAAA,uCAAqB,IAArB;AAAyB,WAAzB;;AAAwD;;AAErF;;AACD;;;;;;;;AACA;;AAA8B;AAAA;;AAAA;;AAAA;AAAA;;AAAqD;;AAElF;;AACD;;;;;;;;AAXD;;AACC;;AAAsB;AAAA;;AAAA;;AAAA;AAAA,aAA0B,OAA1B,EAA0B;AAAA;;AAAA;;AAAA;AAAA,WAA1B;;AAA0E;;AAC/F;;AACD;;AACA;;AAIA;;AAID;;;;;;AARU;;AAAA;;AAIA;;AAAA;;;;;;;;AAST;;AAA8B;AAAA;;AAAA;;AAAA,0CAAwB,IAAxB;AAA4B,WAA5B;;AACA;;AAC7B;;AACD;;;;;;;;AACA;;AAA8B;AAAA;;AAAA;;AAAA;AAAA;;AAAyD;;AAEtF;;AACD;;;;;;;;AAXD;;AACC;;AAAsB;AAAA;;AAAA;;AAAA;AAAA,aAA0B,OAA1B,EAA0B;AAAA;;AAAA;;AAAA;AAAA,WAA1B;;AAA2E;;AAChG;;AACD;;AACA;;AAIA;;AAID;;;;;;AARU;;AAAA;;AAIA;;AAAA;;;;;;;;AAYV;;AACC;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACP;;AAA6B;;AAAqB;;AACpD;;;;;;;;AAEA;;AACC;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACP;;AAA4B;;AAAkB;;AAChD;;;;;;;;AAEA;;AACC;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACP;;AAA6B;;AAAqB;;AACpD;;;;UC1EUI,c;AAYT,gCACYF,MADZ,EAEYX,KAFZ,EAGYb,WAHZ,EAGoC;AAAA;;AAFxB,eAAAwB,MAAA,GAAAA,MAAA;AACA,eAAAX,KAAA,GAAAA,KAAA;AACA,eAAAb,WAAA,GAAAA,WAAA;AAdZ,eAAAc,OAAA,GAAU,oDAAV;AAGA,eAAAa,aAAA,GAA+B,IAA/B;AAIO,eAAAC,SAAA,GAAY,qEAAeC,KAA3B;AACA,eAAAC,cAAA,GAAiB,oEAAjB;AACA,eAAAC,MAAA,GAAS,IAAI,mDAAJ,CAAe,iBAAf,CAAT;AAMF;;;;qCAEM;AACP,iBAAKC,IAAL,GAAY,IAAI,iDAAJ,CAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,KAArB,CAAZ,CADO,CAGP;;AAEA,gBAAIJ,SAAS,GAAG,CAAC,kEAAUK,SAAV,CAAoB,WAApB,CAAjB;;AACA,oBAAQL,SAAR;AACI,mBAAK,qEAAeM,MAApB;AACI,qBAAKC,YAAL;AACA;;AACJ,mBAAK,qEAAeC,SAApB;AACI,qBAAKC,eAAL;AACA;;AACJ;AACI,qBAAKC,cAAL;AARR;AAUH;;;wCAEa,CAEb;;;kCAEO;AAAA;;AACJ,oBAAQ,KAAKV,SAAb;AACI,mBAAK,qEAAeC,KAApB;AACI,qBAAK7B,WAAL,CAAiBuC,KAAjB,CAAuB,KAAKP,IAA5B,EAAkCQ,IAAlC,CACI,UAAAC,MAAM,EAAI;AACN,wBAAI,CAACC,OAAL,CAAaD,MAAb;AACH,iBAHL,WAIQ,UAAAE,MAAM,EAAI;AACN,wBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,iBANT;AAQA;;AACJ,mBAAK,qEAAeV,MAApB;AACI,qBAAKW,WAAL,CAAiB,KAAjB;AACA;;AACJ,mBAAK,qEAAeT,SAApB;AACI,qBAAKU,cAAL,CAAoB,KAApB;AACA;AAhBR;AAkBH;;;2CAEgB;AACb,8EAAUC,SAAV,CAAoB,WAApB,EAAiC,qEAAelB,KAAf,CAAqBmB,QAArB,EAAjC;;AACA,iBAAKhB,IAAL,CAAUd,KAAV,GAAkB,EAAlB;AACA,iBAAK0B,OAAL,GAAe,EAAf;AACA,iBAAKhB,SAAL,GAAiB,qEAAeC,KAAhC;AACH;;;yCAEc;AAAA;;AACX,iBAAKG,IAAL,CAAUd,KAAV,GAAkB,EAAlB;AACA,iBAAK0B,OAAL,GAAe,EAAf;;AACA,8EAAUG,SAAV,CAAoB,WAApB,EAAiC,qEAAeb,MAAf,CAAsBc,QAAtB,EAAjC;;AACA,iBAAKpB,SAAL,GAAiB,qEAAeM,MAAhC;AACA,iBAAKlC,WAAL,CAAiBiD,YAAjB,GAAgCT,IAAhC,CACI,UAAAb,aAAa,EAAI;AACb,oBAAI,CAACA,aAAL,GAAqBA,aAArB;;AACA,kBAAIA,aAAJ,EAAmB;AACf,sBAAI,CAACK,IAAL,CAAUd,KAAV,GAAkBS,aAAa,CAACT,KAAhC;AACH,eAFD,MAEO;AACH,sBAAI,CAACc,IAAL,CAAUd,KAAV,GAAkB,2BAAlB;AACH;AACJ,aARL,WASQ,UAAAyB,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,aAXT;AAYH;;;4CAEiB;AAAA;;AACd,iBAAKZ,IAAL,CAAUd,KAAV,GAAkB,EAAlB;AACA,iBAAK0B,OAAL,GAAe,EAAf;AACA,iBAAKhB,SAAL,GAAiB,qEAAeQ,SAAhC;;AACA,8EAAUW,SAAV,CAAoB,WAApB,EAAiC,qEAAeX,SAAf,CAAyBY,QAAzB,EAAjC;;AACA,iBAAKhD,WAAL,CAAiBkD,eAAjB,GAAmCV,IAAnC,CACI,UAAAb,aAAa,EAAI;AACb,oBAAI,CAACA,aAAL,GAAqBA,aAArB;;AACA,kBAAIA,aAAJ,EAAmB;AACf,sBAAI,CAACK,IAAL,CAAUd,KAAV,GAAkBS,aAAa,CAACT,KAAhC;AACH,eAFD,MAEO;AACH,sBAAI,CAACc,IAAL,CAAUd,KAAV,GAAkB,8BAAlB;AACH;AACJ,aARL,WASQ,UAAAyB,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,aAXT;AAYH;;;sCAEWO,U,EAAqB;AAAA;;AAC7B,iBAAKnD,WAAL,CAAiB6C,WAAjB,CAA6BM,UAA7B,EAAyCX,IAAzC,CACI,UAAAC,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,CAAaD,MAAb;AACH,aAHL,WAIQ,UAAAE,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,aANT;AAOH;;;yCAEoB;;;;;;;AACjB,6BAAM,KAAK5C,WAAL,CAAiBoD,aAAjB,EAAN;;;;;;;;;AACH;;;yCAEcD,U,EAAqB;AAAA;;AAChC,iBAAKnD,WAAL,CAAiB8C,cAAjB,CAAgCK,UAAhC,EAA4CX,IAA5C,CACI,UAAAC,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,CAAaD,MAAb;AACH,aAHL,WAIQ,UAAAE,MAAM,EAAI;AACN,oBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,aANT;AAOH;;;4CAEuB;;;;;;;AACpB,6BAAM,KAAK5C,WAAL,CAAiBqD,gBAAjB,EAAN;;;;;;;;;AACH;;;kCAEOrB,I,EAAY;AAChB,gBAAIA,IAAJ,EAAU;AACN,kBAAIA,IAAI,CAACsB,cAAT,EAAyB;AACrB,oBAAI,CAAC,KAAKtD,WAAL,CAAiBuD,WAAtB,EAAmC;AAC/B,uBAAK/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACH,iBAFD,MAEO;AACH,uBAAKhC,MAAL,CAAYiC,aAAZ,CAA0B,KAAKzD,WAAL,CAAiBuD,WAA3C;AACH;AACJ,eAND,MAMO;AACH,qBAAK/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAsC;AAAExC,6BAAW,EAAE;AAAEE,yBAAK,EAAEc,IAAI,CAACd;AAAd,mBAAf;AAAsCwC,4BAAU,EAAE,KAAK7C,KAAL,CAAW8C;AAA7D,iBAAtC;AACH;AACJ,aAVD,MAUO;AACH,mBAAKf,OAAL,GAAe,0CAAf;AACH;AACJ;;;;;;;yBApJQlB,c,EAAc,uH,EAAA,+H,EAAA,0H;AAAA,O;;;cAAdA,c;AAAc,kC;AAAA,iB;AAAA,gB;AAAA,umD;AAAA;AAAA;ADb3B;;AAEA;;AACC;;AACC;;AACC;;AACC;;AACD;;AACA;;AACC;;AACC;;AAMA;;AACC;;AAAyE;AAAA;AAAA;;AAEzE;;AACD;;AACA;;AASA;;AACC;;AAAsC;AAAA;AAAA;;AAA8C;;AACrF;;AAED;;AACD;;AACA;;AAKA;;AAaA;;AAaD;;AACD;;AACA;;AACC;;AACC;;AACD;;AACA;;AACC;;AAKA;;AAKA;;AAKA;;AACC;;AACC;;AAAkC;;AAAuB;;AAC3D;;AACD;;AACD;;AAED;;;;AAhGa;;AAUE;;AAAA;;AAOG;;AAAA,4HAA8C,SAA9C,EAA8C,cAA9C;;AAIH;;AAAA;;AAU6B;;AAAA;;AAKnC;;AAAA;;AAKA;;AAAA;;AAaA;;AAAA;;AAoBA;;AAAA;;AAKA;;AAAA;;AAKA;;AAAA;;;;;;;;;wECvEIA,c,EAAc;gBAL1B,uDAK0B;iBALhB;AACPxB,oBAAQ,EAAE,WADH;AAEPmB,uBAAW,EAAE,wBAFN;AAGPC,qBAAS,EAAE,CAAC,wBAAD;AAHJ,W;AAKgB,U;;;;;;;;;;;;;;;;;;;;;;;;;;ACb3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACmCQ;;AACE;;AACE;;AACF;;AACF;;;;;;AAEA;;AACE;;AACE;;AACF;;AACF;;;;;;AAEA;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;;;AA7CR;;AACE;;AACE;;AACF;;AAEA;;AACE;;AACE;;AACE;;AACF;;AACF;;AAEA;;AAEE;;AACE;;AAEA;;AACE;;AAA4B;;AAAyB;;AACvD;;AACF;;AAEF;;AACF;;AACA;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AAA8B;;AAChC;;AACF;;AAEA;;AACE;;AAMA;;AAMA;;AAKF;;AAEA;;AACE;;AACF;;AAEA;;AACE;;AACE;;AACE;;AAEF;;AAEA;;AACE;;AAEF;;AAEA;;AACE;;AAGF;;AACF;;AACF;;AACA;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AAA8B;;AAChC;;AACF;;AACF;;;;;;AA9EuC;;AAe8C;;AAAA;;AAgBvE;;AAAA;;AAMA;;AAAA;;AAMA;;AAAA;;AAc0F;;AAAA;;AAKsB;;AAAA;;AAMpH;;AAAA;;;;UD1DDsC,e;AAUX,iCACYpC,MADZ,EAEYX,KAFZ,EAGWgD,YAHX,EAIYC,WAJZ,EAKYC,EALZ,EAK6B;AAAA;;AAJjB,eAAAvC,MAAA,GAAAA,MAAA;AACA,eAAAX,KAAA,GAAAA,KAAA;AACD,eAAAgD,YAAA,GAAAA,YAAA;AACC,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAC,EAAA,GAAAA,EAAA;AAXV,eAAAjD,OAAA,GAAU,oDAAV;AAIF,eAAAkD,QAAA,GAAW,KAAX;AAQC;;;;qCAEU;AAAA;;AACT,iBAAKjD,uBAAL,GAA+B,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAACQ,MAAD,EAAY;AACxE,kBAAIP,KAAK,GAAGO,MAAM,CAAC,OAAD,CAAlB;AACA,kBAAIwC,gBAAgB,GAAGxC,MAAM,CAAC,MAAD,CAA7B;;AAEA,kBAAMyC,YAAY,GAAG,MAAI,CAACH,EAAL,CAAQI,KAAR,CAAc;AAC/B,yBAAS,CAACjD,KAAD,EAAQ,CACf,0DAAWkD,QADI,EAEf,0DAAWlD,KAFI,CAAR,CADsB;AAK/B,oCAAoB,CAAC+C,gBAAD,EAAmB,CACnC,0DAAWG,QADwB,CAAnB,CALW;AAQ/B,4BAAY,CAAC,EAAD,EAAK,CACf,0DAAWA,QADI,EAEf,0DAAWC,SAAX,CAAqB,CAArB,CAFe,EAGf,0DAAWC,SAAX,CAAqB,EAArB,CAHe,EAIf,0DAAWC,OAAX,CAAmB,2DAAnB,CAJe,CAAL,CARmB;AAe/B,mCAAmB,CAAC,EAAD,EAAK,CACtB,0DAAWH,QADW,CAAL;AAfY,eAAd,EAkBhB;AAAEI,yBAAS,EAAE,MAAI,CAACC,cAAL;AAAb,eAlBgB,CAArB;;AAoBE,oBAAI,CAACZ,YAAL,CAAkBa,SAAlB,CAA4BR,YAA5B;;AAEF,kBAAIhD,KAAK,IAAI+C,gBAAb,EAA+B;AAC3B,sBAAI,CAACD,QAAL,GAAgB,IAAhB;AACH;AACJ,aA7B8B,CAA/B;AA8BD;;;wCAEa;AACV,gBAAI,KAAKjD,uBAAT,EAAkC;AAAE,mBAAKA,uBAAL,CAA6BI,WAA7B;AAA6C;AACpF;;;2CAEa;AAAA;;AACZ,mBAAO,UAACgD,KAAD,EAA8C;AACnD,kBAAI,MAAI,CAACN,YAAL,CAAkBc,WAAtB,EAAmC;AACjC,oBAAMC,QAAQ,GAAGT,KAAK,CAACU,QAAN,CAAe,UAAf,CAAjB;AACA,oBAAMC,eAAe,GAAGX,KAAK,CAACU,QAAN,CAAe,iBAAf,CAAxB;;AAEA,oBAAID,QAAQ,CAACG,KAAT,KAAmBD,eAAe,CAACC,KAAvC,EAA8C;AAC5CD,iCAAe,CAACE,SAAhB,CAA0B;AAAC,qCAAiB;AAAlB,mBAA1B;AACD;;AACD;AACD;AACF,aAVD;AAWD;;;8CAEmB;AAAA;;AAClB,iBAAKnB,YAAL,CAAkBc,WAAlB,CAA8BM,sBAA9B;;AAEA,gBAAI,KAAKpB,YAAL,CAAkBc,WAAlB,CAA8BO,KAAlC,EAAyC;AACvC,kBAAIhE,KAAK,GAAG,KAAK2C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C6D,KAAzD;AACA,mBAAKjB,WAAL,CAAiBqB,cAAjB,CAAgCjE,KAAhC,EAAuCsB,IAAvC,CAA4C,UAAAC,MAAM,EAAI;AAClD,uBAAI,CAACuB,QAAL,GAAgB,IAAhB;AACA,uBAAI,CAACpB,OAAL,GAAe,+DAAf;AACH,eAHD,WAGS,UAAAD,MAAM,EAAI;AACjB,uBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACD,eALD;AAMD,aARD,MAQO;AACL,mBAAKiB,YAAL,CAAkBuB,aAAlB,GAAkC,IAAlC;AACD;AACF;;;gDAEuB;AAAA;;AACpB,gBAAIlE,KAAK,GAAG,KAAK2C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C6D,KAAzD;AACA,gBAAId,gBAAgB,GAAG,KAAKJ,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCZ,gBAAvC,CAAwDc,KAA/E;AACA,gBAAIH,QAAQ,GAAG,KAAKf,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCD,QAAvC,CAAgDG,KAA/D;AACA,gBAAID,eAAe,GAAG,KAAKjB,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCC,eAAvC,CAAuDC,KAA7E;;AAEA,gBAAIH,QAAQ,KAAKE,eAAjB,EAAkC;AAChC,mBAAKlC,OAAL,GAAe,6BAAf;AACA;AACH;;AAEC,iBAAKkB,WAAL,CAAiBuB,aAAjB,CAA+BnE,KAA/B,EAAsC+C,gBAAtC,EAAwDW,QAAxD,EAAkEpC,IAAlE,CACA,UAAAC,MAAM,EAAI;AACN,kBAAIA,MAAJ,EAAY;AACR,oBAAI,CAAC,OAAI,CAACqB,WAAL,CAAiBP,WAAtB,EAAmC;AAC/B,yBAAI,CAAC/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACH,iBAFD,MAEO;AACL,yBAAI,CAAChC,MAAL,CAAYiC,aAAZ,CAA0B,OAAI,CAACK,WAAL,CAAiBP,WAA3C;AACD;AACJ,eAND,MAMO;AACL,uBAAI,CAACX,OAAL,GAAe,4DAAf;AACD;AACJ,aAXD,WAYA,UAAAD,MAAM,EAAI;AACN,qBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACH,aAdD;AAgBH;;;;;;;yBAhHUgB,e,EAAe,uH,EAAA,+H,EAAA,yI,EAAA,0H,EAAA,2H;AAAA,O;;;cAAfA,e;AAAe,mC;AAAA,oFAFf,CAAC,wEAAD,CAEe,E;AAFD,gB;AAAA,e;AAAA,+3B;AAAA;AAAA;ACZ3B;;AAEA;;AACE;;AACE;;AA+EF;;AACF;;;;AApFa;;AAIF;;AAAA;;;;;;;;;wEDUEA,e,EAAe;gBAN3B,uDAM2B;iBANjB;AACT1D,oBAAQ,EAAE,YADD;AAETmB,uBAAW,EAAE,yBAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD,CAHF;AAITgE,qBAAS,EAAE,CAAC,wEAAD;AAJF,W;AAMiB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AETtB;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;AACA;;AACE;;AACF;;;;;;;;AAYQ;;AAAmD;AAAA;;AAAA;;AAAA,uCAAqB,IAArB;AAAyB,WAAzB;;AACjD;;AAAC;;AAA6B;;AAChC;;;;;;;;AAEA;;AAAsD;AAAA;;AAAA;;AAAA,0CAAwB,IAAxB;AAA4B,WAA5B;;AACpD;;AAAC;;AAA8B;;AACjC;;;;;;AAKJ;;AACE;;AAEF;;;;;;AAFwH;;AAAA;;;;;;AAKtH;;;;;;AACyB;;;;;;AA0B3B;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;;;AAIJ;;AACE;;AACE;;AAEA;;AAAoF;AAAA;;AAAA;;AAAA,uCAAqB,IAArB;AAAyB,WAAzB;;AAA4B;;AAClH;;AACF;;;;;;AAJI;;AAAA;;;;;;;;AAMJ;;AACI;;AACE;;AAEA;;AAA2F;AAAA;;AAAA;;AAAA,0CAAwB,IAAxB;AAA4B,WAA5B;;AAA+B;;AAC5H;;AACF;;;;;;AAJI;;AAAA;;;;;;;;;;;;;;AAjFZ;;AACE;;AAGA;;AAGA;;AAGA;;AAEE;;AAEE;;AACE;;AAEF;;AAEA;;AACE;;AACE;;AAIA;;AAIF;;AACF;;AAEA;;AAKA;;AACE;;AAGF;;AACF;;AAEA;;AACE;;AACE;;AACE;;AAEF;;AACA;;AACE;;AAEF;;AACF;;AAEA;;AACE;;AACA;;AACE;;AACA;;AAA6B;AAAA;;AAAA;;AAAA;AAAA;;AAAuB;;AAAqB;;AAAK;;AAAE;;AAA8F;;AAAe;;AAC/L;;AAEF;;AAEA;;AAMA;;AAQA;;AAOF;;AAEF;;AACA;;AAEE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AACF;;AAIF;;AACF;;;;;;AAlGuC;;AAC/B;;AAAA;;AAGA;;AAAA;;AAGA;;AAAA;;AAQgK;;AAAA;;AAK/C;;AAAA;;AACtG;;AAAA;;AAIA;;AAAA;;AAOH;;AAAA;;AAMK;;AAAA;;AASyE;;AAAA,uHAA4C,gBAA5C,EAA4C,IAA5C;;AAIH;;AAAA,sHAA2C,gBAA3C,EAA2C,IAA3C;;AAO5C;;AAAA;;AAEsE;;AAAA;;AAKrG;;AAAA;;AAMA;;AAAA;;AAQA;;AAAA;;;;;;;;AA0BZ;;AACE;;AAAS;AAAA;;AAAA;;AAAA;AAAA;;AACP;;AAA6B;;AAAqB;;AACtD;;;;;;;;AAEA;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AAA4B;;AAAkB;;AAClD;;;;;;;;AACA;;AACE;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AAA6B;;AAAqB;;AACtD;;;;UCzGKC,iB;AAqBX,mCACU/D,MADV,EAEUX,KAFV,EAGUb,WAHV,EAIS6D,YAJT,EAKUE,EALV,EAK2B;AAAA;;AAJjB,eAAAvC,MAAA,GAAAA,MAAA;AACA,eAAAX,KAAA,GAAAA,KAAA;AACA,eAAAb,WAAA,GAAAA,WAAA;AACD,eAAA6D,YAAA,GAAAA,YAAA;AACC,eAAAE,EAAA,GAAAA,EAAA;AAvBV,eAAAjD,OAAA,GAAU,oDAAV;AAOO,eAAAc,SAAA,GAAY,qEAAeC,KAA3B;AACP,eAAAC,cAAA,GAAiB,oEAAjB;AAEA,eAAA0D,kBAAA,GAAqB,CACnB,0DAAWpB,QADQ,EAEnB,0DAAWC,SAAX,CAAqB,CAArB,CAFmB,EAGnB,0DAAWC,SAAX,CAAqB,EAArB,CAHmB,EAInB,0DAAWC,OAAX,CAAmB,2DAAnB,CAJmB,EAKnB,KAAKE,cAAL,EALmB,CAArB;AAcC;;;;qCAGU;AAAA;;AACT,iBAAK1D,uBAAL,GAA+B,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAAAQ,MAAM,EAAI;AACxE,kBAAMP,KAAK,GAAGO,MAAM,CAAC,OAAD,CAApB;AACA,kBAAMgE,IAAI,GAAGhE,MAAM,CAAC,MAAD,CAAnB;;AAEA,kBAAMyC,YAAY,GAAG,OAAI,CAACH,EAAL,CAAQI,KAAR,CAAc;AACjC,4BAAY,CAAC;AAAEY,uBAAK,EAAE,EAAT;AAAaW,0BAAQ,EAAE;AAAvB,iBAAD,EAAgC,EAAhC,CADqB;AAEjC,4BAAY,CAAC,EAAD,EAAK,CACf,0DAAWtB,QADI,CAAL,CAFqB;AAKjC,yBAAS,CAAClD,KAAD,EAAQ,CACf,0DAAWkD,QADI,EAEf,0DAAWlD,KAFI,CAAR,CALwB;AASjC,4BAAY,CAAC,EAAD,EAAK,OAAI,CAACsE,kBAAV,CATqB;AAUjC,mCAAmB,CAAC,EAAD,EAAK,EAAL,CAVc;AAYjC,6BAAa,CAAC,EAAD,EAAK,EAAL,CAZoB;AAajC,4BAAY,CAAC,EAAD,EAAK,EAAL,CAbqB;AAcjC,yBAAS,CAAC,KAAD,EAAQ,CACf,0DAAWG,YADI,CAAR,CAdwB;AAiBjC,gCAAgB,CAAC,KAAD,EAAQ,EAAR,CAjBiB;AAkBjC,wBAAQ,CAACF,IAAD,EAAO,EAAP,CAlByB;AAmBjC,+BAAe,CAACA,IAAD,EAAO,EAAP,CAnBkB;AAoBjC,uCAAuB,CAACA,IAAD,EAAO,EAAP;AApBU,eAAd,EAqBlB;AAAEjB,yBAAS,EAAE,OAAI,CAACC,cAAL;AAAb,eArBkB,CAArB;;AAwBA,qBAAI,CAACZ,YAAL,CAAkBa,SAAlB,CAA4BR,YAA5B;;AAEA,kBAAItC,SAAS,GAAG,CAAC,kEAAUK,SAAV,CAAoB,WAApB,CAAjB;;AACA,sBAAQL,SAAR;AACE,qBAAK,qEAAeM,MAApB;AACE,yBAAI,CAACC,YAAL;;AACA;;AACF,qBAAK,qEAAeC,SAApB;AACE,yBAAI,CAACC,eAAL;;AACA;;AACF;AACE,yBAAI,CAACC,cAAL;;AARJ;AAWD,aA1C8B,CAA/B;AA4CD;;;wCAEa;AACZ,gBAAI,KAAKvB,uBAAT,EAAkC;AAAE,mBAAKA,uBAAL,CAA6BI,WAA7B;AAA6C;AAClF;;;yCAEc;AACb,iBAAKyB,OAAL,GAAe,EAAf;AACA,iBAAKgD,aAAL,GAAqB,EAArB;AACA,iBAAKC,gBAAL,GAAwB,EAAxB;AACD;;;2CAEgB;AACf,iBAAKhC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C4E,MAA7C;AACA,iBAAKjC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCkB,QAAvC,CAAgDC,QAAhD,CAAyD,qEAAenE,KAAxE;;AACA,8EAAUkB,SAAV,CAAoB,WAApB,EAAiC,qEAAelB,KAAf,CAAqBmB,QAArB,EAAjC;;AACA,iBAAKiD,YAAL;AACA,iBAAKrE,SAAL,GAAiB,qEAAeC,KAAhC;AACA,iBAAKgC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCqB,WAAvC,CAAmDF,QAAnD,CAA4D,IAA5D;AACA,iBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCsB,mBAAvC,CAA2DH,QAA3D,CAAoE,IAApE;AACA,iBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCD,QAAvC,CAAgDwB,aAAhD,CAA8D,KAAKZ,kBAAnE;AACD;;;yCAEc;AAAA;;AACb,iBAAK3B,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C8E,QAA7C,CAAsD,EAAtD;AACA,iBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCkB,QAAvC,CAAgDC,QAAhD,CAAyD,qEAAe9D,MAAxE,EAFa,CAGb;;AACA,8EAAUa,SAAV,CAAoB,WAApB,EAAiC,qEAAeb,MAAf,CAAsBc,QAAtB,EAAjC;;AACA,iBAAKiD,YAAL;AACA,iBAAKrE,SAAL,GAAiB,qEAAeM,MAAhC;AACA,iBAAKlC,WAAL,CAAiBiD,YAAjB,GAAgCT,IAAhC,CACE,UAAAb,aAAa,EAAI;AACf,qBAAI,CAAC0E,gBAAL,CAAsB1E,aAAtB;AACD,aAHH,WAII,UAAAgB,MAAM,EAAI;AACR,qBAAI,CAACiD,aAAL,GAAqBjD,MAAM,CAACC,OAA5B;AACD,aANL;AAOD;;;4CAEiB;AAAA;;AAChB,iBAAKiB,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C8E,QAA7C,CAAsD,EAAtD;AACA,iBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCkB,QAAvC,CAAgDC,QAAhD,CAAyD,qEAAe5D,SAAxE,EAFgB,CAGhB;;AACA,iBAAKR,SAAL,GAAiB,qEAAeQ,SAAhC;;AACA,8EAAUW,SAAV,CAAoB,WAApB,EAAiC,qEAAeX,SAAf,CAAyBY,QAAzB,EAAjC;;AACA,iBAAKiD,YAAL;AACA,iBAAKjG,WAAL,CAAiBkD,eAAjB,GAAmCV,IAAnC,CACE,UAAAb,aAAa,EAAI;AACf,qBAAI,CAAC0E,gBAAL,CAAsB1E,aAAtB;AACD,aAHH,WAII,UAAAgB,MAAM,EAAI;AACR,qBAAI,CAACkD,gBAAL,GAAwBlD,MAAM,CAACC,OAA/B;AACD,aANL;AAOD;;;2CAEgBjB,a,EAA8B;AAC7C,iBAAKkC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6CoF,OAA7C;;AAEA,gBAAI3E,aAAJ,EAAmB;AACjB,mBAAKkC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C8E,QAA7C,CAAsDrE,aAAa,CAACT,KAApE;AACA,mBAAK2C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCD,QAAvC,CAAgDwB,aAAhD,CAA8D,EAA9D;AACA,mBAAKvC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCD,QAAvC,CAAgDI,SAAhD,CAA0D,IAA1D;AACA,mBAAKnB,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCC,eAAvC,CAAuDsB,aAAvD,CAAqE,EAArE;AACA,mBAAKvC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCC,eAAvC,CAAuDE,SAAvD,CAAiE,IAAjE;AACA,mBAAKnB,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCqB,WAAvC,CAAmDF,QAAnD,CAA4DrE,aAAa,CAACuE,WAA1E;AACA,mBAAKrC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCsB,mBAAvC,CAA2DH,QAA3D,CAAoErE,aAAa,CAACwE,mBAAlF;;AACA,kBAAIxE,aAAa,CAAC4E,SAAlB,EAA6B;AAAE,qBAAK1C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC0B,SAAvC,CAAiDP,QAAjD,CAA0DrE,aAAa,CAAC4E,SAAxE;AAAqF;;AACpH,kBAAI5E,aAAa,CAAC6E,QAAlB,EAA4B;AAAE,qBAAK3C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC2B,QAAvC,CAAgDR,QAAhD,CAAyDrE,aAAa,CAAC6E,QAAvE;AAAmF;AAClH,aAVD,MAUO;AACL,mBAAK3C,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC3D,KAAvC,CAA6C8E,QAA7C,CAAsD,IAAtD;AACA,mBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCqB,WAAvC,CAAmDF,QAAnD,CAA4D,IAA5D;AACA,mBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCsB,mBAAvC,CAA2DH,QAA3D,CAAoE,IAApE;AACD;;AACD,iBAAKnC,YAAL,CAAkBc,WAAlB,CAA8BM,sBAA9B;AACD;;;2CAEa;AAAA;;AACZ,mBAAO,YAA8B;AACnC,kBAAI,OAAI,CAACpB,YAAL,CAAkBc,WAAlB,IAAiC,OAAI,CAAC/C,SAAL,KAAmB,qEAAeC,KAAvE,EAA8E;AAC5E,oBAAM+C,QAAQ,GAAG,OAAI,CAACf,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC,UAAvC,CAAjB;AACA,oBAAMC,eAAe,GAAG,OAAI,CAACjB,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuC,iBAAvC,CAAxB;;AAEA,oBAAID,QAAQ,CAACG,KAAT,KAAmBD,eAAe,CAACC,KAAvC,EAA8C;AAC5CD,iCAAe,CAACE,SAAhB,CAA0B;AAAE,qCAAiB;AAAnB,mBAA1B;AACD;;AACD;AACD;AACF,aAVD;AAWD;;;yCAEoB;;;;;;qCACX,KAAKpD,S;wDACN,qEAAeM,M,wBAGf,qEAAeE,S;;;;AAFlB,2BAAKS,WAAL,CAAiB,KAAjB;;;;;AAGA,6BAAM,KAAKC,cAAL,CAAoB,KAApB,CAAN;;;;;;;;;;;;AAGL;;;qCAEgB;;;;;;;;;AACf,6BAAM,KAAK2D,YAAL,EAAN;;;AAEA,2BAAK5C,YAAL,CAAkBc,WAAlB,CAA8BM,sBAA9B;;AAEA,0BAAI,KAAKpB,YAAL,CAAkBc,WAAlB,CAA8BO,KAAlC,EAAyC;AACvC,6BAAKlF,WAAL,CAAiB0G,QAAjB,CAA0B,KAAK7C,YAAL,CAAkBc,WAAlB,CAA8BgC,WAA9B,EAA1B,EAAuEnE,IAAvE,CACE,UAAOC,MAAP;AAAA,iCAAkB,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACXA,MADW;AAAA;AAAA;AAAA;;AAETT,wCAFS,GAEIS,MAFJ;;AAAA,yCAGTT,IAAI,CAACsB,cAHI;AAAA;AAAA;AAAA;;AAAA,yCAIPtB,IAAI,CAAC4E,SAJE;AAAA;AAAA;AAAA;;AAAA,mDAKD,KAAKhF,SALJ;AAAA,sEAMF,qEAAeM,MANb,wBASF,qEAAeE,SATb;AAAA;;AAAA;AAAA;AAOL,2CAAM,KAAKpC,WAAL,CAAiB6C,WAAjB,CAA6B,KAA7B,CAAN;;AAPK;AAAA;;AAAA;AAAA;AAUL,2CAAM,KAAK7C,WAAL,CAAiB8C,cAAjB,CAAgC,KAAhC,CAAN;;AAVK;AAAA;;AAAA;AAcT,wCAAI,CAAC,KAAK9C,WAAL,CAAiBuD,WAAtB,EAAmC;AACjC,2CAAK/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,GAAD,CAArB;AACD,qCAFD,MAEO;AACL,2CAAKhC,MAAL,CAAYiC,aAAZ,CAA0B,KAAKzD,WAAL,CAAiBuD,WAA3C;AACD;;AAlBQ;AAAA;;AAAA;AAoBT,yCAAK/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,YAAD,CAArB,EAAqC;AAAExC,iDAAW,EAAE;AAAEE,6CAAK,EAAEc,IAAI,CAACd;AAAd,uCAAf;AAAsCwC,gDAAU,EAAE,KAAK7C,KAAL,CAAW8C;AAA7D,qCAArC;;AApBS;AAAA;AAAA;;AAAA;AAuBX,yCAAKnC,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,aAAD,CAArB,EAAsC;AAAExC,iDAAW,EAAE;AAAEE,6CAAK,EAAEc,IAAI,CAACd;AAAd,uCAAf;AAAsCwC,gDAAU,EAAE,KAAK7C,KAAL,CAAW8C;AAA7D,qCAAtC;;AAvBW;AAAA;AAAA;;AAAA;AA0Bb,yCAAKf,OAAL,GAAe,0DAAf;;AA1Ba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAjB;AAAA,yBADF,WA8BI,UAAAD,MAAM,EAAI;AACR,iCAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACD,yBAhCL;AAkCD,uBAnCD,MAmCO;AACL,6BAAKiB,YAAL,CAAkBuB,aAAlB,GAAkC,IAAlC;AACD;;;;;;;;;AACF;;;sCAEWjC,U,EAAqB;AAAA;;AAC/B,iBAAKnD,WAAL,CAAiB6G,YAAjB,CAA8B1D,UAA9B,EAA0CX,IAA1C,CACE,UAAAC,MAAM,EAAI;AACR,qBAAI,CAAC4D,gBAAL,CAAsB5D,MAAtB;AACD,aAHH,WAII,UAAAE,MAAM,EAAI;AACR,qBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACD,aANL;AAOD;;;yCAEcO,U,EAAqB;AAAA;;AAClC,iBAAKnD,WAAL,CAAiB8G,eAAjB,CAAiC3D,UAAjC,EAA6CX,IAA7C,CAAkD,UAAAb,aAAa,EAAI;AACjE,qBAAI,CAAC0E,gBAAL,CAAsB1E,aAAtB;AACD,aAFD,WAGE,UAAAgB,MAAM,EAAI;AACR,qBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACD,aALH;AAMD;;;wCAEamE,c,EAAwB;AACpC,iBAAKlD,YAAL,CAAkBc,WAAlB,CAA8BE,QAA9B,CAAuCmC,KAAvC,CAA6ChB,QAA7C,CAAsDe,cAAtD;AACD;;;sCAEW;AACVE,kBAAM,CAACC,IAAP,CAAY,aAAZ;AACD;;;;;;;yBAtPU3B,iB,EAAiB,uH,EAAA,+H,EAAA,0H,EAAA,yI,EAAA,2H;AAAA,O;;;cAAjBA,iB;AAAiB,qC;AAAA,oFAFjB,CAAC,wEAAD,CAEiB,E;AAFH,iB;AAAA,e;AAAA,gyE;AAAA;AAAA;ADd3B;;AAEA;;AACE;;AACE;;AAmGF;;AACA;;AACI;;AACE;;AACF;;AACA;;AACE;;AAKA;;AAIA;;AAIF;;AACF;;AACJ;;;;AA5Ha;;AAIF;;AAAA;;AAyGG;;AAAA;;AAKA;;AAAA;;AAIA;;AAAA;;;;;;;;;wECtGDA,iB,EAAiB;gBAN7B,uDAM6B;iBANnB;AACTrF,oBAAQ,EAAE,cADD;AAETmB,uBAAW,EAAE,2BAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD,CAHF;AAITgE,qBAAS,EAAE,CAAC,wEAAD;AAJF,W;AAMmB,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChB9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACKM;;AAAQ;AAAA;;AAAA;;AAAA;AAAA;;AACN;;AAA4B;;AAC9B;;;;UDAO6B,c;AALb;AAAA;;AAMY,eAAAJ,aAAA,GAAgB,IAAI,0DAAJ,EAAhB;AAEV,eAAAK,UAAA,GAAa,KAAb;AA8BD;;;;qCA5BY;AACT,iBAAKL,aAAL,CAAmBM,IAAnB,CAAwB,KAAxB;AACD;;;uCAES;AACR,gBAAIC,aAAJ,EAAmBC,QAAnB;AACAD,yBAAa,GAAGE,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtD;AACAH,oBAAQ,GAAGN,MAAM,CAACC,IAAP,CAAY,EAAZ,EAAgB,QAAhB,EAA0B,qCAA1B,CAAX;AACAK,oBAAQ,CAACC,QAAT,CAAkBN,IAAlB;AACAK,oBAAQ,CAACC,QAAT,CAAkBG,KAAlB,uOAQ+CL,aAR/C;AAWAC,oBAAQ,CAACC,QAAT,CAAkBI,KAAlB;AACH;;;wCAEe;AACZ,iBAAKb,aAAL,CAAmBM,IAAnB,CAAwB,IAAxB;AACA,iBAAKD,UAAL,GAAkB,KAAlB;AACD;;;;;;;yBA/BUD,c;AAAc,O;;;cAAdA,c;AAAc,8B;AAAA;AAAA;AAAA,S;AAAA,kB;AAAA,e;AAAA,iY;AAAA;AAAA;ACP3B;;AAEA;;AACE;;AACE;;AAMA;;AACE;;AAAI;;AAAqC;;AACzC;;AAAI;;AAAY;;AAEhB;;AAAG;;AAGyC;;AAE5C;;AAAI;;AAA2B;;AAC/B;;AAAG;;AAC8G;;AAEjH;;AAAG;;AAC6E;;AAEhF;;AAAG;;AAAa;;AAChB;;AACE;;AAAI;;AAAkF;;AACtF;;AAAI;;AAAoD;;AACxD;;AAAI;;AAA6C;;AACjD;;AAAI;;AAAkG;;AACtG;;AAAI;;AAAyH;;AAC/H;;AACA;;AAAG;;AAAuH;;AAE1H;;AAAI;;AAAc;;AAElB;;AAAG;;AAEqE;;AAExE;;AAAG;;AAEiB;;AAEpB;;AAAG;;AAC8G;;AAEjH;;AAAG;;AAAwF;;AAE3F;;AAAG;;AAAuH;;AAE1H;;AAAI;;AAAiB;;AAErB;;AAAG;;AAC8F;;AAEjG;;AAAG;;AACiG;;AAEpG;;AAAG;;AAA6H;;AAEhI;;AAAI;;AAAY;;AAEhB;;AAAG;;AAEO;;AAEV;;AAAG;;AAEmB;;AAEtB;;AAAG;;AAC4C;;AAE/C;;AAAG;;AACuD;;AAE1D;;AAAG;;AAEQ;;AAEX;;AAAI;;AAAa;;AAEjB;;AAAG;;AAEQ;;AAEX;;AAAG;;AAAyG;;AAC5G;;AACE;;AAAI;;AAAkE;;AACtE;;AAAI;;AAA8E;;AACpF;;AACA;;AAAG;;AACwF;;AAE3F;;AAAI;;AAAwB;;AAE5B;;AAAG;;AAC4E;;AAC/E;;AACE;;AAAI;;AAA+E;;AACnF;;AAAI;;AAAmD;;AACvD;;AAAI;;AAC2E;;AACjF;;AACA;;AAAG;;AAAiH;;AAEpH;;AAAI;;AAAU;;AAEd;;AAAG;;AAEG;;AACN;;AACE;;AAAI;;AAAiE;;AACrE;;AAAI;;AAA2E;;AAC/E;;AAAI;;AACiC;;AACvC;;AACA;;AAAI;;AAAc;;AAElB;;AAAG;;AACc;;AAEjB;;AAAG;;AAAuE;;AAE1E;;AAAI;;AAAa;;AAEjB;;AAAG;;AAEyF;;AAE5F;;AAAG;;AAEyD;;AAE5D;;AAAI;;AAAwB;;AAE5B;;AAAG;;AAC4E;;AAE/E;;AAAI;;AAAS;;AAEb;;AAAG;;AAI+F;;AAElG;;AAAI;;AAAsC;;AAE1C;;AAAG;;AAIwF;;AAE3F;;AAAI;;AAAS;;AAEb;;AAAG;;AAEoF;;AAEvF;;AAAI;;AAAU;;AAEd;;AAAG;;AAC0E;;AAE7E;;AAAG;;AAA0H;;AAE7H;;AAAI;;AAAY;;AAEhB;;AAAG;;AAGqC;;AAExC;;AAAI;;AAAgB;;AAEpB;;AAAG;;AAEQ;;AAEX;;AAAI;;AAAoB;;AAExB;;AAAG;;AAC4F;;AAE/F;;AAAI;;AAAgC;;AAEpC;;AAAG;;AAED;;AAA2D;;AAAoB;;AAAI;;AAAmD;;AAExI;;AAAI;;AAA0B;;AAE9B;;AAAG;;AAAoE;;AAEvE;;AAAG;;AAA4E;;AACjF;;AACA;;AACJ;;;;AA1Ma;;AAGmE;;AAAA;;;;;;;;;wEDInEA,c,EAAc;gBAL1B,uDAK0B;iBALhB;AACTjH,oBAAQ,EAAE,OADD;AAETmB,uBAAW,EAAE,wBAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAKgB,U;AACfyF,uBAAa;kBAAtB;AAAsB;;;;;;;;;;;;;;;;;;;AERzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACKM;;;;UDQOc,a;AAOX,+BACUrG,MADV,EAEUX,KAFV,EAGUiH,IAHV,EAIUC,QAJV,EAI4B;AAAA;;AAHlB,eAAAvG,MAAA,GAAAA,MAAA;AACA,eAAAX,KAAA,GAAAA,KAAA;AACA,eAAAiH,IAAA,GAAAA,IAAA;AACA,eAAAC,QAAA,GAAAA,QAAA;AANV,eAAAjH,OAAA,GAAU,oDAAV;AAOG;;;;qCAEM;AAAA;;AACT,iBAAKkH,aAAL,GAAqB,KAAKnH,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAAAQ,MAAM,EAAI;AAC5D,kBAAIpB,IAAI,GAAGoB,MAAM,CAAC,MAAD,CAAjB;;AACA,kBAAIpB,IAAJ,EAAU;AACN,uBAAI,CAACA,IAAL,GAAY,kBAAkBA,IAA9B;AACH,eAFD,MAEO;AACH,uBAAI,CAACA,IAAL,GAAY,uCAAZ;AACH;;AAED,qBAAI,CAAC4H,OAAL,CAAa,OAAI,CAAC5H,IAAlB;AACH,aAToB,CAArB;AAUD;;;kCAEOA,I,EAAM;AAAA;;AACZ,gBAAIA,IAAJ,EAAU;AACR,kBAAM6H,GAAG,GAAG,KAAKH,QAAL,CAAcI,kBAAd,CAAiC,KAAK9H,IAAtC,CAAZ;AAEA,mBAAKyH,IAAL,CAAUM,GAAV,CAAcF,GAAd,EAAmB;AAAEG,4BAAY,EAAE;AAAhB,eAAnB,EAA6CpH,SAA7C,CAAuD,UAAAwB,MAAM,EAAI;AAE7D,oBAAI6F,OAAO,GAAG,IAAIC,MAAJ,CAAW,uBAAX,EAAoC,IAApC,CAAd;AACA,uBAAI,CAACC,IAAL,GAAY/F,MAAM,CAACgG,OAAP,CAAeH,OAAf,EAAwB,UAAAI,KAAK,EAAI;AACzC,0BAAQA,KAAR;AACI,yBAAK,YAAL;AACI,6BAAO,OAAI,CAACX,QAAL,CAAcI,kBAAd,CAAiC,IAAjC,CAAP;AAFR;AAIH,iBALW,CAAZ;AAMH,eATD;AAUH;AACA;;;uCAEW;AACR,gBAAIb,aAAJ,EAAmBC,QAAnB;AACAD,yBAAa,GAAGE,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArD;AACAH,oBAAQ,GAAGN,MAAM,CAACC,IAAP,CAAY,EAAZ,EAAgB,QAAhB,EAA0B,qCAA1B,CAAX;AACAK,oBAAQ,CAACC,QAAT,CAAkBN,IAAlB;AACAK,oBAAQ,CAACC,QAAT,CAAkBG,KAAlB,iaAQ+CL,aAR/C;AAWAC,oBAAQ,CAACC,QAAT,CAAkBI,KAAlB;AACH;;;mCAEQe,K,EAAO;AACd,gBAAIC,OAAO,GAAGD,KAAK,CAACE,MAApB;;AACA,mBAAOD,OAAP,EAAgB;AACZ,kBAAIE,IAAI,GAAWF,OAAO,CAACG,YAAR,CAAqB,MAArB,CAAnB;;AAEA,kBAAID,IAAJ,EAAU;AACN,oBAAIA,IAAI,CAACE,QAAL,CAAc,KAAd,KAAwB,CAACF,IAAI,CAACG,UAAL,CAAgB,MAAhB,CAA7B,EAAsD;AACpD,uBAAKzH,MAAL,CAAYgC,QAAZ,CAAqB,EAArB,EAAyB;AAAEE,8BAAU,EAAE,KAAK7C,KAAnB;AAA0BG,+BAAW,EAAE;AAAC,8BAAQ8H;AAAT;AAAvC,mBAAzB;AACD,iBAFD,MAEO,IAAIA,IAAI,CAACG,UAAL,CAAgB,QAAhB,CAAJ,EAA+B,CACpC;AACD,iBAFM,MAEA,IAAIH,IAAI,CAACG,UAAL,CAAgB,eAAhB,CAAJ,EAAsC;AACzC,sBAAIpI,KAAK,GAAGiI,IAAI,CAACI,MAAL,CAAY,EAAZ,CAAZ;AACA,uBAAK1H,MAAL,CAAYgC,QAAZ,CAAqB,CAAC3C,KAAD,CAArB;AACH,iBAHM,MAGA,IAAIiI,IAAI,CAACG,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AAC7B,uBAAKzH,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,GAAD,EAAMsF,IAAN,CAArB;AACH,iBAFM,MAEA;AACH7B,wBAAM,CAACC,IAAP,CAAY4B,IAAZ;AACH;;AACDH,qBAAK,CAACQ,cAAN;AACH;;AAEDP,qBAAO,GAAGA,OAAO,CAACQ,aAAlB;AACH;AACF;;;;;;;yBAtFYvB,a,EAAa,uH,EAAA,+H,EAAA,gI,EAAA,yH;AAAA,O;;;cAAbA,a;AAAa,6B;AAAA,gB;AAAA,e;AAAA,2O;AAAA;AAAA;ACb1B;;AAEA;;AACE;;AACE;;AAIA;;AACE;;AAAwB;AAAA,qBAAS,IAAAwB,QAAA,QAAT;AAAyB,aAAzB;;AAA2B;;AACrD;;AACF;;AACF;;;;AAZa;;AAGmD;;AAAA;;AAMhD;;AAAA;;;;;;;;;wEDIHxB,a,EAAa;gBALzB,uDAKyB;iBALf;AACT3H,oBAAQ,EAAE,MADD;AAETmB,uBAAW,EAAE,uBAFJ;AAGTC,qBAAS,EAAE,CAAC,uBAAD;AAHF,W;AAKe,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEb1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC+BQ;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;AAIJ;;AACE;;AACE;;AACF;;AACF;;;;;;AAFI;;AAAA;;;;;;AAQJ;;;;;;AAEA;;;;;;AACA;;;;;;;;;;UDvCKgI,oB;AAcT,sCACY9H,MADZ,EAEYX,KAFZ,EAGYiD,WAHZ,EAGsC;AAAA;;AAF1B,eAAAtC,MAAA,GAAAA,MAAA;AACA,eAAAX,KAAA,GAAAA,KAAA;AACA,eAAAiD,WAAA,GAAAA,WAAA;AAdZ,eAAAhD,OAAA,GAAU,oDAAV;AAQA,eAAAyI,aAAA,GAAgB,KAAhB;AACA,eAAAC,sBAAA,GAAyB,KAAzB;AAMC;;;;qCAEQ;AAAA;;AACT,iBAAKzI,uBAAL,GAA+B,KAAKF,KAAL,CAAWG,WAAX,CAAuBC,SAAvB,CAAiC,UAACQ,MAAD,EAAY;AACtE,qBAAI,CAACP,KAAL,GAAaO,MAAM,CAAC,OAAD,CAAnB;AACA,qBAAI,CAACwC,gBAAL,GAAwBxC,MAAM,CAAC,MAAD,CAA9B;;AAEA,kBAAI,OAAI,CAACP,KAAL,IAAc,OAAI,CAAC+C,gBAAvB,EAAyC;AACrC,uBAAI,CAACwF,kBAAL;AACH;AACF,aAP0B,CAA/B;AAQD;;;wCAEa;AACZ,gBAAI,KAAK1I,uBAAT,EAAkC;AAAE,mBAAKA,uBAAL,CAA6BI,WAA7B;AAA6C;AAClF;;;+CAEoB;AAAA;;AACnB,iBAAKqI,sBAAL,GAA8B,IAA9B;AACA,iBAAK1F,WAAL,CAAiB4F,YAAjB,CAA8B,KAAKxI,KAAnC,EAA0C,KAAK+C,gBAA/C,EAAiEzB,IAAjE,CACI,UAAAC,MAAM,EAAI;AACN,kBAAIA,MAAJ,EAAY;AACR,oBAAIT,IAAI,GAASS,MAAjB;;AACA,oBAAIT,IAAI,CAAC4E,SAAT,EAAoB;AAChB,sBAAI,CAAC,OAAI,CAAC9C,WAAL,CAAiBP,WAAtB,EAAmC;AAC/B,2BAAI,CAAC/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,GAAD,CAArB;;AACA;AACH,mBAHD,MAGO;AACL,2BAAI,CAAChC,MAAL,CAAYiC,aAAZ,CAA0B,OAAI,CAACK,WAAL,CAAiBP,WAA3C;;AACA;AACD;AACJ,iBARD,MAQO;AACH,yBAAI,CAAC/B,MAAL,CAAYgC,QAAZ,CAAqB,CAAC,YAAD,CAArB,EAAqC;AAAExC,+BAAW,EAAE;AAAEE,2BAAK,EAAEc,IAAI,CAACd;AAAd,qBAAf;AAAqCwC,8BAAU,EAAE,OAAI,CAAC7C,KAAL,CAAW8C;AAA5D,mBAArC;;AACA;AACH;AACJ,eAdD,MAcO;AACL,uBAAI,CAAC6F,sBAAL,GAA8B,KAA9B;AACD;;AAED,qBAAI,CAAC5G,OAAL,GAAe,2DAAf;AACA,qBAAI,CAAC+G,cAAL,GAAsB,EAAtB;AAEH,aAvBL,WAwBI,UAAAhH,MAAM,EAAI;AACR,qBAAI,CAAC6G,sBAAL,GAA8B,KAA9B;AACE,qBAAI,CAAC5G,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACA,qBAAI,CAAC+G,cAAL,GAAsB,EAAtB;AACH,aA5BL;AA8BD;;;+CAEoB;AAAA;;AACnB,iBAAKJ,aAAL,GAAqB,IAArB;AACE,iBAAKzF,WAAL,CAAiB8F,uBAAjB,CAAyC,KAAK1I,KAA9C,EAAqDsB,IAArD,CAA2D,YAAM;AAC7D,qBAAI,CAACI,OAAL,GAAe,EAAf;AACA,qBAAI,CAAC+G,cAAL,GAAsB,4DAAtB;AACA,qBAAI,CAACJ,aAAL,GAAqB,KAArB;AACD,aAJH,WAKE,UAAA5G,MAAM,EAAI;AACN,qBAAI,CAACC,OAAL,GAAeD,MAAM,CAACC,OAAtB;AACA,qBAAI,CAAC+G,cAAL,GAAsB,EAAtB;AACA,qBAAI,CAACJ,aAAL,GAAqB,KAArB;AACH,aATH;AAWH;;;;;;;yBAlFUD,oB,EAAoB,uH,EAAA,+H,EAAA,0H;AAAA,O;;;cAApBA,oB;AAAoB,wC;AAAA,iB;AAAA,gB;AAAA,44B;AAAA;AAAA;ACXjC;;AAEA;;AACE;;AACA;;AACE;;AACE;;AACF;;AACA;;AAEE;;AACE;;AACE;;AACF;;AACF;;AAEA;;AAEE;;AACE;;AAA2B;AAAA;AAAA;;AAE3B;;AACF;;AAEA;;AACE;;AAAyC;AAAA;AAAA;;AAEzC;;AACF;;AAGA;;AAMA;;AAMF;;AACF;;AACA;;AACE;;AAA0F;AAAA,2CAA2B,IAAAO,kBAAA,EAA3B;AAA+C,aAA/C;;AACxF;;AAA2D;;AAAY;;AACzE;;AAAgC;AAAA,qBAAS,IAAAJ,kBAAA,EAAT;AAA6B,aAA7B;;AAC9B;;AACA;;AAAqE;;AAAO;;AAChF;;AACF;;AACF;;AACA;;;;AAtDa;;AAmBwB;;AAAA;;AAMc;;AAAA,sGAA8B,YAA9B,EAA8B,IAA9B,EAA8B,aAA9B,EAA8B,KAA9B;;AAMjC;;AAAA;;AAMA;;AAAA;;AASuC;;AAAA;;AAC7C;;AAAA;;AAEA;;AAAA;;AACA;;AAAA;;;;;;;;;wEDvCCH,oB,EAAoB;gBALhC,uDAKgC;iBALtB;AACTpJ,oBAAQ,EAAE,iBADD;AAETmB,uBAAW,EAAE,8BAFJ;AAGTC,qBAAS,EAAE,CAAC,wBAAD;AAHF,W;AAKsB,U;;;;;;;;;;;;;;;;;;;;;;;;;;AEXjC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQawI,gB;AACT,oCAAc;AAAA;AAAG;;;;qCAEN,CAAG;;;;;;;yBAHLA,gB;AAAgB,O;;;cAAhBA,gB;AAAgB,gC;AAAA,iB;AAAA,e;AAAA,sR;AAAA;AAAA;ACR7B;;AACI;;AACI;;AACJ;;AAEA;;AACA;;AAAI;;AAA4B;;AAEhC;;AACI;;AAAqE;;AAAkB;;AACvF;;AAAoF;;AAAa;;AACrG;;AAEA;;AACI;;AAAI;;AAA4C;;AAChD;;AACI;;AACJ;;AACJ;;AAEA;;AACI;;AAAK;;AAA4B;;AACjC;;AACI;;AACJ;;AACJ;;AACJ;;AACA;;;;;;;;wEDnBaA,gB,EAAgB;gBAN5B,uDAM4B;iBANlB;AACP5J,oBAAQ,EAAE,WADH;AAEPmB,uBAAW,EAAE,0BAFN;AAGPC,qBAAS,EAAE,CAAC,0BAAD;AAHJ,W;AAMkB,U;;;;;;;;;;;;;;;;;;;;AER7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAuCayI,U;;;;;;;oCACG;AACZ,mBAAO;AACLC,sBAAQ,EAAED,UADL;AAELzE,uBAAS,EAAE,CAAC,0DAAD;AAFN,aAAP;AAID;;;;;;;cANUyE;;;;2BAAAA,U;AAAU,S;AAAA,kBAnBZ,CACP,kEADO,EAEP,qDAFO,EAGP,kEAHO,CAmBY;;;;4HAAVA,U,EAAU;AAAA,yBAbjB,qEAaiB,EAZjB,wEAYiB,EAXjB,oFAWiB,EAVjB,8EAUiB,EATjB,wEASiB,EARjB,uFAQiB,EAPjB,8DAOiB,EANjB,sEAMiB,EALjB,4EAKiB,EAJjB,mEAIiB,EAHjB,yEAGiB;AAHF,oBAfjB,kEAeiB,EAfL,6DAeK,EAbjB,kEAaiB;AAGE,S;AAhBA,O;;;;;wEAgBVA,U,EAAU;gBApBtB,sDAoBsB;iBApBb;AACRE,mBAAO,EAAE,CACP,kEADO,EAEP,qDAFO,EAGP,kEAHO,CADD;AAMRC,wBAAY,EAAE,CACV,qEADU,EAEV,wEAFU,EAGV,oFAHU,EAIV,8EAJU,EAKV,wEALU,EAMV,uFANU,EAOV,8DAPU,EAQV,sEARU,EASV,4EATU,EAUV,mEAVU,EAWV,yEAXU;AANN,W;AAoBa,U;;;;;;;;;;;;;;;;;;ACvCvB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACSE;;AACC;;AACC;;AACD;;AACA;;AAA4D;;AAAO;;AACpE;;;;;;AAEA;;AACC;;AACC;;AACD;;AACA;;AAAyD;;AAAO;;AACjE;;;;;;;;;;UDbWC,e,GALb;AAAA;;AAMa,aAAAC,UAAA,GAAa,KAAb;AACA,aAAAC,UAAA,GAAa,KAAb;AAET,aAAAvJ,OAAA,GAAU,oDAAV;AACH,O;;;yBALYqJ,e;AAAe,O;;;cAAfA,e;AAAe,oC;AAAA;AAAA;AAAA;AAAA,S;AAAA,iB;AAAA,e;AAAA,mnC;AAAA;AAAA;ACR5B;;AACC;;AACC;;AACC;;AAA+C;;AACjD;;AAEA;;AAEA;;AACC;;AAOA;;AAOA;;AAAwF;;AAAI;;AAE5F;;AACC;;AAAqD;;AAAO;;AAC5D;;AAAkD;;AAAO;;AACzD;;AACA;;AAA4D;;AAAe;;AAC3E;;AAAwD;;AAAe;;AACvE;;AACA;;AAA8C;;AAAgB;;AAC9D;;AACA;;AAAiG;;AAAc;;AAC/G;;AAAkD;;AAAoB;;AACtE;;AAAiD;;AAAI;;AACrD;;AACA;;AAA4D;;AAAuB;;AACpF;;AACD;;AACD;;;;AAtCQ;;AAAA;;AAMA;;AAAA;;AAOA;;AAAA;;AASa;;AAAA,wFAAkB,YAAlB,EAAkB,IAAlB;;AAS+B;;AAAA;;;;;;;;;wED1BvCA,e,EAAe;gBAL3B,uDAK2B;iBALjB;AACPjK,oBAAQ,EAAE,aADH;AAEPmB,uBAAW,EAAE,yBAFN;AAGPC,qBAAS,EAAE,CAAC,wBAAD;AAHJ,W;AAKiB,U;AACf8I,oBAAU;kBAAlB;AAAkB,Y;AACVC,oBAAU;kBAAlB;AAAkB","file":"9-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './auth.service';\n\n@Component({\n  selector: 'app-auth',\n  template: '<router-outlet></router-outlet>',\n})\nexport class AuthComponent implements OnInit {\n\n  constructor(authService: AuthService) {\n    authService.initialize();\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Routes, RouterModule} from '@angular/router';\nimport {LoginComponent} from './login/login.component';\nimport {RegisterComponent} from './register/register.component';\nimport {ForgotComponent} from './forgot/forgot.component';\nimport {LockedComponent} from './locked/locked.component';\nimport { VerifyEmailComponent } from './verifyemail/verifyemail.component';\nimport { TermsComponent } from './terms/terms.component';\nimport { NotInvitedComponent } from './notInvited/notInvited.component';\nimport { HelpComponent} from './help/help.component'\nimport { AuthComponent } from './auth.component';\n\nexport const routes: Routes = [\n  { path: '', component: AuthComponent, children: [\n    { path: 'login', component: LoginComponent },\n    { path: 'register', component: RegisterComponent },\n    { path: 'terms', component: TermsComponent },\n    { path: 'privacy', redirectTo: '/help?path=policies%2Fprivacy.md', pathMatch: 'full'},\n    { path: 'unsubscribe', redirectTo: '/hubs/index/manage', pathMatch: 'full' },\n    { path: 'forgot-password', component: ForgotComponent },\n    { path: 'locked', component: LockedComponent },\n    { path: 'notInvited', component: NotInvitedComponent },\n    { path: 'verifyemail', component: VerifyEmailComponent  },\n    { path: 'help', component: HelpComponent  },\n  ]}\n];\n\nexport const Routing = RouterModule.forChild(routes);\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {logoUrl} from '../auth.models';\nimport { Subscription} from 'rxjs';\n\n@Component({\n  selector: 'app-locked',\n  templateUrl: './locked.component.html',\n  styleUrls: ['../auth.component.scss']\n})\nexport class LockedComponent implements OnInit, OnDestroy {\n  private _queryParamSubscription: Subscription;\n\n  logoUrl = logoUrl;\n  email: string;\n\n  constructor(private route: ActivatedRoute) { }\n\n  ngOnInit() {\n      this._queryParamSubscription = this.route.queryParams.subscribe((queryParams) => {\n        this.email = queryParams['email'];\n      });\n  }\n\n  ngOnDestroy() {\n    if (this._queryParamSubscription) { this._queryParamSubscription.unsubscribe(); }\n  }\n\n  unlock() {\n    alert('This function is not available.');\n  }\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n  <div class=\"card\">\n    <div class=\"card-header\">\n      {{email}} is locked\n    </div>\n\n    <div class=\"card-body\">\n      Accounts can become locked with multiple failed logins, or when suspected malicious activity occurs.\n\n      To unlock your account, email support below.\n      <p>\n        <a class=\"btn btn-primary\" href=\"mailto:support@dataexpertsgroup.com\">Email support</a>\n      </p>\n\n    </div>\n  </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {logoUrl} from '../auth.models';\nimport { Subscription} from 'rxjs';\n\n@Component({\n  selector: 'app-notInvited',\n  templateUrl: './notInvited.component.html',\n  styleUrls: ['../auth.component.scss']\n\n})\nexport class NotInvitedComponent implements OnInit, OnDestroy {\n  private _queryParamSubscription: Subscription;\n\n  logoUrl = logoUrl;\n  email: string;\n\n  constructor(private router: Router, private route: ActivatedRoute) { }\n\n  ngOnInit() {\n      this._queryParamSubscription = this.route.queryParams.subscribe((params) => {\n        this.email = params['email'];\n      });\n  }\n\n  ngOnDestroy() {\n    if (this._queryParamSubscription) { this._queryParamSubscription.unsubscribe(); }\n  }\n\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n\n      <div class=\"card\">\n        <div class=\"card-header\">\n          Access will be provided shortly...\n        </div>\n\n        <div class=\"card-body\">\n          <p>Your email \"{{email}}\"\" does not have an invite to the Integration Hub.</p>\n          <p class=\"no-margin margin-top-5\">\n            Login as someone else? <a routerLink=\"/auth/login\"> Click here</a>\n          </p>\n\n          <div class=\"pb-3\">\n            This platform currently is invite only.  Your email has been registered and an invite will be sent when available.  Please contact support with any queries at <a href=\"mailto:support@dataexpertsgroup.com\">support@dataexpertsgroup.com</a>.\n          </div>\n\n\n          <div class=\"pb-3\">\n            <a href=\"https://dataexpertsgroup.com\" class=\"btn btn-primary mr-1\">Data Experts Group</a>\n            <a href=\"http://dataexpertsgroup.com/integration_hub\" class=\"btn btn-primary \">Find out more</a>\n          </div>\n        </div>\n      </div>\n    </div>\n\n<\n\n","<auth-header [showSignUp]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n\t<div class=\"card\">\n\t\t<form>\n\t\t\t<div class=\"card-header\">\n\t\t\t\tIntegration Hub - Sign In\n\t\t\t</div>\n\t\t\t<div class=\"card-body\">\n\t\t\t\t<fieldset>\n\t\t\t\t\t<section *ngIf=\"message\">\n\t\t\t\t\t\t<div class=\"alert alert-danger \">\n\t\t\t\t\t\t\t{{message}}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<form-input [disabled]=\"loginType != eLoginProvider.Dexih\" label=\"Login\" [(ngModel)]=\"user.email\" name=\"email\" iconClass=\"fa fa-user txt-color-teal\" title=\"Please enter your user name or email address\"\n\t\t\t\t\t\t placeholder=\"Login\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t</section>\n\t\t\t\t\t<section *ngIf=\"loginType == eLoginProvider.Dexih\">\n\t\t\t\t\t\t<form-input label=\"Password\" [(ngModel)]=\"user.password\" name=\"password\" type=\"password\" iconClass=\"fa fa-lock txt-color-teal\"\n\t\t\t\t\t\t placeholder=\"Password...\" title=\"Please enter your password\">\n\t\t\t\t\t\t</form-input>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<a routerLink=\"/auth/forgot-password\">Forgot password?</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</section>\n\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<form-checkbox label=\"Stay signed in\" [(ngModel)]=\"user.rememberMe\" name=\"remember\"></form-checkbox>\n\t\t\t\t\t</section>\n\n\t\t\t\t</fieldset>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"loginType === eLoginProvider.Dexih\" class=\"card-footer\">\n\t\t\t\t<button type=\"submit\" (onsubmit)=\"login($event)\" (click)=\"login($event)\" class=\"btn btn-success\">Sign In &nbsp;\n\t\t\t\t\t<i class=\"fa fa-sign-in\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"loginType === eLoginProvider.Google\" class=\"card-footer\">\n\t\t\t\t<button type=\"submit\" (onsubmit)=\"login($event)\" (click)=\"login($event)\" class=\"btn btn-danger\">Google Sign In &nbsp;\n\t\t\t\t\t<i class=\"fa fa-sign-in\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button *ngIf=\"externalLogin\" (click)=\"googleLogin(true)\" class=\"btn btn-danger ml-1\">Change\n\t\t\t\t\tUser &nbsp;\n\t\t\t\t\t<i class=\"fa fa-google\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button *ngIf=\"externalLogin\" (click)=\"googleLogout()\" class=\"btn btn-danger ml-1\">Logout\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<i class=\"fa fa-google\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div *ngIf=\"loginType === eLoginProvider.Microsoft\" class=\"card-footer\">\n\t\t\t\t<button type=\"submit\" (onsubmit)=\"login($event)\" (click)=\"login($event)\" class=\"btn btn-primary\">Microsoft Sign In &nbsp;\n\t\t\t\t\t<i class=\"fa fa-sign-in\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button *ngIf=\"externalLogin\" (click)=\"microsoftLogin(true)\"\n\t\t\t\t\tclass=\"btn btn-primary ml-1\">Change User &nbsp;\n\t\t\t\t\t<i class=\"fa fa-windows\"></i>\n\t\t\t\t</button>\n\t\t\t\t<button *ngIf=\"externalLogin\" (click)=\"microsoftLogout()\" class=\"btn btn-primary ml-1\">Logout\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t<i class=\"fa fa-windows\"></i>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</form>\n\t</div>\n\t<div class=\"card mt-2\">\n\t\t<div class=\"card-header\">\n\t\t\tOther Sign-In Options\n\t\t</div>\n\t\t<div class=\"card-body\">\n\t\t\t<div *ngIf=\"loginType != eLoginProvider.Dexih\" class=\"p-2 flex-fill text-nowrap\">\n\t\t\t\t<button (click)=\"enablePassword()\" class=\"w-100 btn btn-success\">\n\t\t\t\t\t<i class=\"fa fa-sign-in\"></i>&nbsp;&nbsp;User/Pass</button>\n\t\t\t</div>\n\t\t\n\t\t\t<div *ngIf=\"loginType != eLoginProvider.Google\" class=\"p-2 flex-fill text-nowrap\">\n\t\t\t\t<button (click)=\"enableGoogle()\" class=\"w-100 btn text-white\" style=\"background-color: #db3236;\">\n\t\t\t\t\t<i class=\"fa fa-google\"></i>&nbsp;&nbsp;Google</button>\n\t\t\t</div>\n\n\t\t\t<div *ngIf=\"loginType != eLoginProvider.Microsoft\" class=\"p-2 flex-fill text-nowrap\">\n\t\t\t\t<button (click)=\"enableMicrosoft()\" class=\"w-100 btn text-white\" style=\"background-color: #00a2ed;\">\n\t\t\t\t\t<i class=\"fa fa-windows\"></i>&nbsp;&nbsp;Microsoft</button>\n\t\t\t</div>\n\n\t\t\t<div class=\"p-2 flex-fill text-nowrap\">\n\t\t\t\t<button routerLink=\"/public\" class=\"w-100 btn btn-success\">\n\t\t\t\t\t<i class=\"fa fa-newspaper-o \"></i>&nbsp;&nbsp;Public Data</button>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User, logoUrl, ExternalLogin } from '../auth.models';\nimport { AuthService } from '../auth.service';\nimport { LogFactory } from '../../../logging';\nimport { eLoginProvider } from '../../shared/shared.models';\nimport { Functions } from '../../shared/utils/functions';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['../auth.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n    logoUrl = logoUrl;\n\n    user: User;\n    externalLogin: ExternalLogin = null;\n    message: string;\n\n\n    public loginType = eLoginProvider.Dexih;\n    public eLoginProvider = eLoginProvider;\n    public logger = new LogFactory('login.component');\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private authService: AuthService,\n    ) { }\n\n    ngOnInit() {\n        this.user = new User('', '', '', false);\n\n        // this.authService.refreshGlobalCache();\n\n        let loginType = +Functions.getCookie('LoginType');\n        switch (loginType) {\n            case eLoginProvider.Google:\n                this.enableGoogle();\n                break;\n            case eLoginProvider.Microsoft:\n                this.enableMicrosoft();\n                break;\n            default:\n                this.enablePassword();\n        }\n    }\n\n    ngOnDestroy() {\n\n    }\n\n    login() {\n        switch (this.loginType) {\n            case eLoginProvider.Dexih:\n                this.authService.login(this.user).then(\n                    result => {\n                        this.doLogin(result);\n                    }).catch(\n                        reason => {\n                            this.message = reason.message;\n                        }\n                    );\n                break;\n            case eLoginProvider.Google:\n                this.googleLogin(false);\n                break;\n            case eLoginProvider.Microsoft:\n                this.microsoftLogin(false);\n                break;\n        }\n    }\n\n    enablePassword() {\n        Functions.setCookie('LoginType', eLoginProvider.Dexih.toString());\n        this.user.email = '';\n        this.message = '';\n        this.loginType = eLoginProvider.Dexih;\n    }\n\n    enableGoogle() {\n        this.user.email = '';\n        this.message = '';\n        Functions.setCookie('LoginType', eLoginProvider.Google.toString());\n        this.loginType = eLoginProvider.Google;\n        this.authService.googleEnable().then(\n            externalLogin => {\n                this.externalLogin = externalLogin;\n                if (externalLogin) {\n                    this.user.email = externalLogin.email;\n                } else {\n                    this.user.email = '(no current google login)';\n                }\n            }).catch(\n                reason => {\n                    this.message = reason.message;\n                });\n    }\n\n    enableMicrosoft() {\n        this.user.email = '';\n        this.message = '';\n        this.loginType = eLoginProvider.Microsoft;\n        Functions.setCookie('LoginType', eLoginProvider.Microsoft.toString());\n        this.authService.microsoftEnable().then(\n            externalLogin => {\n                this.externalLogin = externalLogin;\n                if (externalLogin) {\n                    this.user.email = externalLogin.email;\n                } else {\n                    this.user.email = '(no current microsoft login)';\n                }\n            }).catch(\n                reason => {\n                    this.message = reason.message;\n                });\n    }\n\n    googleLogin(forceLogin: boolean) {\n        this.authService.googleLogin(forceLogin).then(\n            result => {\n                this.doLogin(result);\n            }).catch(\n                reason => {\n                    this.message = reason.message;\n                });\n    }\n\n    async googleLogout() {\n        await this.authService.googleSignOut();\n    }\n\n    microsoftLogin(forceLogin: boolean) {\n        this.authService.microsoftLogin(forceLogin).then(\n            result => {\n                this.doLogin(result);\n            }).catch(\n                reason => {\n                    this.message = reason.message;\n                });\n    }\n\n    async microsoftLogout() {\n        await this.authService.microsoftSignOut();\n    }\n\n    doLogin(user: User) {\n        if (user) {\n            if (user.emailConfirmed) {\n                if (!this.authService.redirectUrl) {\n                    this.router.navigate(['/']);\n                } else {\n                    this.router.navigateByUrl(this.authService.redirectUrl);\n                }\n            } else {\n                this.router.navigate(['verifyemail'], { queryParams: { email: user.email }, relativeTo: this.route.parent });\n            }\n        } else {\n            this.message = 'Login failed.  Please check credentials.';\n        }\n    }\n\n}\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute} from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport { logoUrl } from '../auth.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { FormsService } from '../../shared/forms/forms.service';\nimport { FormBuilder, FormGroup, FormArray, FormControl, Validators, ValidatorFn, AbstractControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['../auth.component.scss'],\n  providers: [FormsService]\n})\nexport class ForgotComponent implements OnInit, OnDestroy {\n\n    private _queryParamSubscription: Subscription;\n\n    logoUrl = logoUrl;\n\n  message: string;\n\n  codeSent = false;\n\n  constructor(\n      private router: Router,\n      private route: ActivatedRoute,\n      public formsService: FormsService,\n      private userService: AuthService,\n      private fb: FormBuilder) {\n  }\n\n  ngOnInit() {\n    this._queryParamSubscription = this.route.queryParams.subscribe((params) => {\n        let email = params['email'];\n        let verificationCode = params['code'];\n\n        const registerForm = this.fb.group({\n            'email': [email, [\n              Validators.required,\n              Validators.email\n            ]],\n            'verificationCode': [verificationCode, [\n                Validators.required\n              ]],\n            'password': ['', [\n              Validators.required,\n              Validators.minLength(8),\n              Validators.maxLength(20),\n              Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,}$')\n            ]\n          ],\n            'passwordConfirm': ['', [\n              Validators.required,\n            ]],\n          }, { validator: this.passwordsMatch() }\n          );\n          this.formsService.startForm(registerForm);\n\n        if (email && verificationCode) {\n            this.codeSent = true;\n        }\n    });\n  }\n\n  ngOnDestroy() {\n      if (this._queryParamSubscription) { this._queryParamSubscription.unsubscribe(); }\n  }\n\n  passwordsMatch(): ValidatorFn {\n    return (group: FormGroup): { [key: string]: any } => {\n      if (this.formsService.currentForm) {\n        const password = group.controls['password'];\n        const passwordConfirm = group.controls['passwordConfirm'];\n\n        if (password.value !== passwordConfirm.value) {\n          passwordConfirm.setErrors({'passwordMatch': true});\n        }\n        return;\n      }\n    };\n  }\n\n  submitCodeRequest() {\n    this.formsService.currentForm.updateValueAndValidity();\n    \n    if (this.formsService.currentForm.valid) {\n      let email = this.formsService.currentForm.controls.email.value;\n      this.userService.forgotPassword(email).then(result =>  {\n          this.codeSent = true;\n          this.message = 'Email has been sent with instructions for resetting password.';\n      }).catch(reason => {\n        this.message = reason.message;\n      });\n    } else {\n      this.formsService.showAllErrors = true;\n    }\n  }\n\n    submitPasswordReset() {\n      let email = this.formsService.currentForm.controls.email.value;\n      let verificationCode = this.formsService.currentForm.controls.verificationCode.value;\n      let password = this.formsService.currentForm.controls.password.value;\n      let passwordConfirm = this.formsService.currentForm.controls.passwordConfirm.value;\n\n      if (password !== passwordConfirm) {\n        this.message = 'The passwords do not match.';\n        return;\n    }\n\n      this.userService.resetPassword(email, verificationCode, password).then(\n      result => {\n          if (result) {\n              if (!this.userService.redirectUrl) {\n                  this.router.navigate(['/']);\n              } else {\n                this.router.navigateByUrl(this.userService.redirectUrl);\n              }\n          } else {\n            this.message = 'Reset password failed.  Please contact support to proceed.';\n          }\n      }).catch(\n      reason => {\n          this.message = reason.message;\n      }\n    );\n  }\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n  <div class=\"card\">\n    <form *ngIf=\"formsService.currentForm\" [formGroup]=\"formsService.currentForm\">\n      <div class=\"card-header\">\n        Integration Hub - Forgot Password\n      </div>\n\n      <div class=\"card-body\">\n        <section>\n          <div class=\"alert alert-info \">\n            Enter your email to request a verification code before resetting your password.\n          </div>\n        </section>\n\n        <fieldset>\n\n          <section>\n            <form-input label=\"Email\" formControlName=\"email\" iconClass=\"fa fa-envelope\" [errors]=\"formsService.formErrors.email\">\n            </form-input>\n            <div class=\"note\">\n              <a routerLink=\"/auth/login\">I remembered my password!</a>\n            </div>\n          </section>\n\n        </fieldset>\n      </div>\n      <div class=\"card-footer\">\n        <button (click)=\"submitCodeRequest()\" class=\"btn btn-primary\">\n          <i class=\"fa fa-refresh\"></i> Request Reset Code\n        </button>\n      </div>\n\n      <div class=\"card-body\">\n        <section *ngIf=\"codeSent\">\n          <div class=\"alert alert-success \">\n            A verification code has been sent to your email. Cut/paste the code below and enter your new password.\n          </div>\n        </section>\n\n        <section *ngIf=\"!codeSent\">\n          <div class=\"alert alert-info \">\n            If you have received already received your verification code, cut/paste the code below and enter your new password.\n          </div>\n        </section>\n\n        <section *ngIf=\"message\">\n          <div class=\"alert alert-danger \">\n            {{message}}\n          </div>\n        </section>\n      </div>\n\n      <div class=\"card-header\">\n        New Password\n      </div>\n\n      <div class=\"card-body\">\n        <fieldset>\n          <section>\n            <form-input label=\"Verification Code\" formControlName=\"verificationCode\" iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.verificationCode\">\n            </form-input>\n          </section>\n\n          <section>\n            <form-input label=\"Password\" formControlName=\"password\" type=\"password\" placeholder=\"Password\" iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.password\">\n            </form-input>\n          </section>\n\n          <section>\n            <form-input label=\"Confirm Password\" formControlName=\"passwordConfirm\" type=\"password\" placeholder=\"Confirm Password\" iconClass=\"fa fa-lock\"\n              [errors]=\"formsService.formErrors.passwordConfirm\">\n            </form-input>\n          </section>\n        </fieldset>\n      </div>\n      <div class=\"card-footer\">\n        <button (click)=\"submitPasswordReset()\" class=\"btn btn-primary\">\n          <i class=\"fa fa-refresh\"></i> Reset Password\n        </button>\n      </div>\n    </form>\n  </div>\n</div>","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n  <div class=\"card\">\n    <form *ngIf=\"formsService.currentForm\" [formGroup]=\"formsService.currentForm\" >\n      <div *ngIf=\"loginType == eLoginProvider.Dexih\" class=\"card-header\">\n        Register using a User Name and Password\n      </div>\n      <div *ngIf=\"loginType == eLoginProvider.Google\" class=\"card-header\">\n        Register using Google Credentials\n      </div>\n      <div *ngIf=\"loginType == eLoginProvider.Microsoft\" class=\"card-header\">\n        Register using Microsoft Credentials\n      </div>\n      <div class=\"card-body\">\n\n        <fieldset>\n\n          <section>\n            <form-input label=\"User Name\" formControlName=\"userName\" placeholder=\"User Name\" note=\"The user name that can be seen by other users.\" iconClass=\"fa fa-user-o\" [errors]=\"formsService.formErrors.userName\">\n          </form-input>\n          </section>\n\n          <section>\n            <form-input label=\"Email Address\" formControlName=\"email\" placeholder=\"Email address\" iconClass=\"fa fa-envelope\" [errors]=\"formsService.formErrors.email\">\n              <button *ngIf=\"loginType == eLoginProvider.Google\" (click)=\"googleLogin(true)\" class=\"btn btn-link\">\n                (<i class=\"fa fa-google\"></i> Change User)\n              </button>\n    \n              <button *ngIf=\"loginType == eLoginProvider.Microsoft\" (click)=\"microsoftLogin(true)\" class=\"btn btn-link\">\n                (<i class=\"fa fa-windows\"></i> - Change User)\n              </button>\n\n            </form-input>\n          </section>\n\n          <section *ngIf=\"loginType == eLoginProvider.Dexih\">\n            <form-input label=\"Password\" formControlName=\"password\" type=\"password\" placeholder=\"Password\" iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.password\">\n            </form-input>\n          </section>\n\n          <section>\n            <form-input *ngIf=\"loginType == eLoginProvider.Dexih\" label=\"Confirm Password\" formControlName=\"passwordConfirm\" type=\"password\" placeholder=\"Confirm Password\"\n              iconClass=\"fa fa-lock\" [errors]=\"formsService.formErrors.passwordConfirm\">\n            </form-input>\n          </section>\n        </fieldset>\n\n        <fieldset>\n          <div class=\"form-row\">\n            <section class=\"form-group col-md-6\">\n              <form-input label=\"First name\" formControlName=\"firstName\" placeholder=\"First name\" [errors]=\"formsService.formErrors.firstName\" [autocapitalize]=\"true\">\n              </form-input>\n            </section>\n            <section class=\"form-group col-md-6\">\n              <form-input label=\"Last name\" formControlName=\"lastName\" placeholder=\"Last name\" [errors]=\"formsService.formErrors.lastName\" [autocapitalize]=\"true\">\n              </form-input>\n            </section>\n          </div>\n\n          <section>\n            <form-checkbox label=\"I want to receive news and special offers\" formControlName=\"subscription\"></form-checkbox>\n            <form-checkbox formControlName=\"terms\" [errors]=\"formsService.formErrors.terms\">\n              I agree with the\n              <a href=\"javascript:void(0)\" (click)=\"showTerms()\"> Terms and Conditions </a> & <a routerLink=\"/auth/help\" [queryParams]=\"{ 'path':  'policies/privacy.md'}\" target=\"_blank\"> Privacy Policy </a>\n            </form-checkbox>\n            \n          </section>\n\n          <section *ngIf=\"message\">\n            <div class=\"alert alert-danger\">\n              {{message}}\n            </div>\n          </section>\n\n          <section *ngIf=\"loginType != eLoginProvider.Google && googleMessage\">\n            <div class=\"alert alert-danger\">\n              Google could not automatically sign-in due to \"{{googleMessage}}\".  \n              Click login button to open new window to login to your google account.\n              <d-button buttonClass=\"btn btn-danger\" iconClass=\"fa fa-google\" text=\"Google Login\" (click)=\"googleLogin(true)\"></d-button>\n            </div>\n          </section>\n\n          <section *ngIf=\"loginType != eLoginProvider.Microsoft && microsoftMessage\">\n              <div class=\"alert alert-danger\">\n                Microsoft could not automatically sign-in due to \"{{microsoftMessage}}\".  \n                Click login button to open new window to login to your microsoft account.\n                <d-button buttonClass=\"btn btn-primary\" iconClass=\"fa fa-microsoft\" text=\"Microsoft Login\" (click)=\"microsoftLogin(true)\"></d-button>\n              </div>\n            </section>\n        </fieldset>\n\n      </div>\n      <div class=\"card-footer\">\n\n        <button (click)=\"register()\" class=\"btn btn-primary\">\n          Register\n        </button>\n\n\n\n      </div>\n    </form>\n  </div>\n  <div class=\"card mt-2\">\n      <div class=\"card-header d-flex\">\n        Other Sign-in Options\n      </div>\n      <div class=\"card-body d-flex\">\n        <div *ngIf=\"loginType != eLoginProvider.Dexih\" class=\"p-2 flex-fill\">\n          <button  (click)=\"enablePassword()\" class=\"w-100 btn btn-success\">\n            <i class=\"fa fa-sign-in\"></i>&nbsp;&nbsp;User/Pass</button>\n        </div>\n      \n        <div *ngIf=\"loginType != eLoginProvider.Google\" class=\"p-2 flex-fill\">\n          <button (click)=\"enableGoogle()\" class=\"w-100 btn text-white\" style=\"background-color: #db3236;\">\n            <i class=\"fa fa-google\"></i>&nbsp;&nbsp;Google</button>\n        </div>\n        <div *ngIf=\"loginType != eLoginProvider.Microsoft\" class=\"p-2 flex-fill\">\n          <button (click)=\"enableMicrosoft()\" class=\"w-100 btn text-white\" style=\"background-color: #00a2ed;\">\n            <i class=\"fa fa-windows\"></i>&nbsp;&nbsp;Microsoft</button>\n        </div>\n      </div>\n    </div>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User, logoUrl, ExternalLogin } from '../auth.models';\nimport { AuthService } from '../auth.service';\nimport { FormBuilder, Validators, ValidatorFn } from '@angular/forms';\nimport { FormsService } from '../../shared/forms/forms.service';\nimport { Subscription } from 'rxjs';\nimport { eLoginProvider } from '../../shared/shared.models';\nimport { Functions } from '../../shared/utils/functions';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['../auth.component.scss'],\n  providers: [FormsService]\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  private _queryParamSubscription: Subscription;\n\n  logoUrl = logoUrl;\n\n  message: string;\n  googleMessage: string;\n  microsoftMessage: string;\n  verificationCode: string;\n\n  public loginType = eLoginProvider.Dexih;\n  eLoginProvider = eLoginProvider;\n\n  passwordValidators = [\n    Validators.required,\n    Validators.minLength(8),\n    Validators.maxLength(20),\n    Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$^+=!*()@%&]).{8,}$'),\n    this.passwordsMatch()\n  ]\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private authService: AuthService,\n    public formsService: FormsService,\n    private fb: FormBuilder) {\n  }\n\n\n  ngOnInit() {\n    this._queryParamSubscription = this.route.queryParams.subscribe(params => {\n      const email = params['email'];\n      const code = params['code'];\n\n      const registerForm = this.fb.group({\n        'provider': [{ value: '', disabled: true }, []],\n        'userName': ['', [\n          Validators.required,\n        ]],\n        'email': [email, [\n          Validators.required,\n          Validators.email\n        ]],\n        'password': ['', this.passwordValidators],\n        'passwordConfirm': ['', [\n        ]],\n        'firstName': ['', []],\n        'lastName': ['', []],\n        'terms': [false, [\n          Validators.requiredTrue\n        ]],\n        'subscription': [false, []],\n        'code': [code, []],\n        'providerKey': [code, []],\n        'authenticationToken': [code, []],\n      }, { validator: this.passwordsMatch() }\n      );\n\n      this.formsService.startForm(registerForm);\n\n      let loginType = +Functions.getCookie('LoginType');\n      switch (loginType) {\n        case eLoginProvider.Google:\n          this.enableGoogle();\n          break;\n        case eLoginProvider.Microsoft:\n          this.enableMicrosoft();\n          break;\n        default:\n          this.enablePassword();\n      }\n\n    });\n\n  }\n\n  ngOnDestroy() {\n    if (this._queryParamSubscription) { this._queryParamSubscription.unsubscribe(); }\n  }\n\n  resetMessage() {\n    this.message = '';\n    this.googleMessage = '';\n    this.microsoftMessage = '';\n  }\n\n  enablePassword() {\n    this.formsService.currentForm.controls.email.enable();\n    this.formsService.currentForm.controls.provider.setValue(eLoginProvider.Dexih);\n    Functions.setCookie('LoginType', eLoginProvider.Dexih.toString());\n    this.resetMessage();\n    this.loginType = eLoginProvider.Dexih;\n    this.formsService.currentForm.controls.providerKey.setValue(null);\n    this.formsService.currentForm.controls.authenticationToken.setValue(null);\n    this.formsService.currentForm.controls.password.setValidators(this.passwordValidators);\n  }\n\n  enableGoogle() {\n    this.formsService.currentForm.controls.email.setValue('');\n    this.formsService.currentForm.controls.provider.setValue(eLoginProvider.Google);\n    // this.formsService.currentForm.controls.email.disable();\n    Functions.setCookie('LoginType', eLoginProvider.Google.toString());\n    this.resetMessage();\n    this.loginType = eLoginProvider.Google;\n    this.authService.googleEnable().then(\n      externalLogin => {\n        this.setExternalLogin(externalLogin);\n      }).catch(\n        reason => {\n          this.googleMessage = reason.message;\n        });\n  }\n\n  enableMicrosoft() {\n    this.formsService.currentForm.controls.email.setValue('');\n    this.formsService.currentForm.controls.provider.setValue(eLoginProvider.Microsoft);\n    // this.formsService.currentForm.controls.email.disable();\n    this.loginType = eLoginProvider.Microsoft;\n    Functions.setCookie('LoginType', eLoginProvider.Microsoft.toString());\n    this.resetMessage();\n    this.authService.microsoftEnable().then(\n      externalLogin => {\n        this.setExternalLogin(externalLogin);\n      }).catch(\n        reason => {\n          this.microsoftMessage = reason.message;\n        });\n  }\n\n  setExternalLogin(externalLogin: ExternalLogin) {\n    this.formsService.currentForm.controls.email.disable();\n\n    if (externalLogin) {\n      this.formsService.currentForm.controls.email.setValue(externalLogin.email);\n      this.formsService.currentForm.controls.password.setValidators([]);\n      this.formsService.currentForm.controls.password.setErrors(null);\n      this.formsService.currentForm.controls.passwordConfirm.setValidators([]);\n      this.formsService.currentForm.controls.passwordConfirm.setErrors(null);\n      this.formsService.currentForm.controls.providerKey.setValue(externalLogin.providerKey);\n      this.formsService.currentForm.controls.authenticationToken.setValue(externalLogin.authenticationToken);\n      if (externalLogin.firstName) { this.formsService.currentForm.controls.firstName.setValue(externalLogin.firstName); }\n      if (externalLogin.lastName) { this.formsService.currentForm.controls.lastName.setValue(externalLogin.lastName); }\n    } else {\n      this.formsService.currentForm.controls.email.setValue(null);\n      this.formsService.currentForm.controls.providerKey.setValue(null);\n      this.formsService.currentForm.controls.authenticationToken.setValue(null);\n    }\n    this.formsService.currentForm.updateValueAndValidity();\n  }\n\n  passwordsMatch(): ValidatorFn {\n    return (): { [key: string]: any } => {\n      if (this.formsService.currentForm && this.loginType === eLoginProvider.Dexih) {\n        const password = this.formsService.currentForm.controls['password'];\n        const passwordConfirm = this.formsService.currentForm.controls['passwordConfirm'];\n\n        if (password.value !== passwordConfirm.value) {\n          passwordConfirm.setErrors({ 'passwordMatch': true });\n        }\n        return;\n      }\n    };\n  }\n\n  async refreshLogin() {\n    switch (this.loginType) {\n      case eLoginProvider.Google:\n        this.googleLogin(false);\n        break;\n      case eLoginProvider.Microsoft:\n        await this.microsoftLogin(false);\n        break;\n    }\n  }\n\n  async register() {\n    await this.refreshLogin();\n\n    this.formsService.currentForm.updateValueAndValidity();\n\n    if (this.formsService.currentForm.valid) {\n      this.authService.register(this.formsService.currentForm.getRawValue()).then(\n        async (result) => {\n          if (result) {\n            let user: User = result;\n            if (user.emailConfirmed) {\n              if (user.isInvited) {\n                switch (this.loginType) {\n                  case eLoginProvider.Google:\n                    await this.authService.googleLogin(false);\n                    break;\n                  case eLoginProvider.Microsoft:\n                    await this.authService.microsoftLogin(false);\n                    break;\n                }\n\n                if (!this.authService.redirectUrl) {\n                  this.router.navigate(['/']);\n                } else {\n                  this.router.navigateByUrl(this.authService.redirectUrl);\n                }\n              } else {\n                this.router.navigate(['notInvited'], { queryParams: { email: user.email }, relativeTo: this.route.parent });\n              }\n            } else {\n              this.router.navigate(['verifyemail'], { queryParams: { email: user.email }, relativeTo: this.route.parent });\n            }\n          } else {\n            this.message = 'Registration failed.  Please contact support to proceed.';\n          }\n        }).catch(\n          reason => {\n            this.message = reason.message;\n          }\n        );\n    } else {\n      this.formsService.showAllErrors = true;\n    }\n  }\n\n  googleLogin(forceLogin: boolean) {\n    this.authService.googleSignIn(forceLogin).then(\n      result => {\n        this.setExternalLogin(result);\n      }).catch(\n        reason => {\n          this.message = reason.message;\n        });\n  }\n\n  microsoftLogin(forceLogin: boolean) {\n    this.authService.microsoftSignIn(forceLogin).then(externalLogin => {\n      this.setExternalLogin(externalLogin);\n    }).catch(\n      reason => {\n        this.message = reason.message;\n      });\n  }\n\n  termsAccepted(termsAccepted: boolean) {\n    this.formsService.currentForm.controls.terms.setValue(termsAccepted);\n  }\n\n  showTerms() {\n    window.open('/auth/terms');\n  }\n}\n","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'terms',\n  templateUrl: './terms.component.html',\n  styleUrls: ['./terms.component.scss']\n})\nexport class TermsComponent implements OnInit {\n  @Output() termsAccepted = new EventEmitter<boolean>();\n\n  showDialog = false;\n\n  ngOnInit() {\n    this.termsAccepted.emit(false);\n  }\n\n  printTerms(): void {\n    let printContents, popupWin;\n    printContents = document.getElementById('terms-body').innerHTML;\n    popupWin = window.open('', '_blank', 'top=0,left=0,height=100%,width=auto');\n    popupWin.document.open();\n    popupWin.document.write(`\n      <html>\n        <head>\n          <title>Print tab</title>\n          <style>\n          //........Customized style.......\n          </style>\n        </head>\n    <body onload=\"window.print();window.close()\">${printContents}</body>\n      </html>`\n    );\n    popupWin.document.close();\n}\n\n  acceptTerms() {\n    this.termsAccepted.emit(true);\n    this.showDialog = false;\n  }\n\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div id=\"print-section\" class=\"container p-3\">\n  <d-widget title=\"Terms & Conditions\" iconClass=\"fa fa-lg fa-fw fa-life-saver\" [padding]=\"true\">\n    <ng-template #header>\n      <button (click)=\"printTerms()\" type=\"button\" class=\"btn btn-danger\" id=\"print\">\n        <i class=\"fa fa-print\"></i> Print\n      </button>\n    </ng-template>\n\n    <div class=\"container\" id=\"terms-body\">\n      <h1>Data Experts Group Terms & Conditions</h1>\n      <h2>Introduction</h2>\n\n      <p>These terms and conditions govern your use of the Data Experts Integration Hub, referred henceforth as \"The Platform\".\n        The platform consists of this website and the downloadable Remote Agent application. By using the platform, you accept\n        these terms and conditions in full. If you disagree with these terms and conditions or any part of these terms and\n        conditions, you must not use the platform.</p>\n\n      <h2>License to use the platform</h2>\n      <p>Unless otherwise stated, Data Experts Group (c) and/or its licensors own the intellectual property rights in the website\n        and material on the website. Subject to the license below, all these intellectual property rights are reserved.</p>\n\n      <p>You may view, download for caching purposes only, and print pages from the website for your own personal use, subject\n        to the restrictions set out below and elsewhere in these terms and conditions.</p>\n\n      <p>You must not:</p>\n      <ul>\n        <li>republish material from this website (including republication on another website);</li>\n        <li>sell, rent or sub-license material from the website;</li>\n        <li>show any material from the website in public;</li>\n        <li>reproduce, duplicate, copy or otherwise exploit material on this website for a commercial purpose;</li>\n        <li>redistribute material from this website [except for content specifically and expressly made available for redistribution.</li>\n      </ul>\n      <p>Where content is specifically made available for redistribution, it may only be redistributed within your organisation.</p>\n\n      <h2>Acceptable use</h2>\n\n      <p>You must not use the platform in any way that causes, or may cause, damage to the website or impairment of the availability\n        or accessibility of the website; or in any way which is unlawful, illegal, fraudulent or harmful, or in connection\n        with any unlawful, illegal, fraudulent or harmful purpose or activity.</p>\n\n      <p>You must not use the platform to copy, store, host, transmit, send, use, publish or distribute any material which consists\n        of (or is linked to) any spyware, computer virus, Trojan horse, worm, keystroke logger, rootkit or other malicious\n        computer software.</p>\n\n      <p>You must not use the platform conduct any systematic or automated data collection activities (including without limitation\n        scraping, data mining, data extraction and data harvesting) without Data Experts Group express written consent.</p>\n\n      <p>You must not use the platform to transmit or send unsolicited commercial communications.</p>\n\n      <p>You must not use the platform for any purposes related to marketing without Data Experts Group express written consent.</p>\n\n      <h2>Restricted access</h2>\n\n      <p>Access to certain areas of the platform is restricted. Data Experts Group reserves the right to restrict access to\n        [other] areas of the platform, or indeed this entire website, at Data Experts Group discretion.</p>\n\n      <p>If Data Experts Group provides you with a user ID and password to enable you to access restricted areas of the platform\n        or other content or services, you must ensure that the user ID and password are kept confidential.</p>\n\n      <p>Data Experts Group may disable your user ID and password in Data Experts Group sole discretion without notice or explanation.</p>\n\n      <h2>User content</h2>\n\n      <p>In these terms and conditions, “your user content” means material (including without limitation any data, text, images,\n        audio material, video material and audio-visual material) that you submit or process through the platform, for whatever\n        purpose.</p>\n\n      <p>Your user content must not be illegal or unlawful, must not infringe any third party's legal rights, and must not be\n        capable of giving rise to legal action whether against you or Data Experts Group or a third party (in each case under\n        any applicable law).</p>\n\n      <p>You must not submit any user content to the website that is or has ever been the subject of any threatened or actual\n        legal proceedings or other similar complaint.</p>\n\n      <p>Data Experts Group reserves the right to edit or remove any material submitted to the platform, or stored on Data Experts\n        Group servers, or hosted or published upon the platform.</p>\n\n      <p>Notwithstanding Data Experts Group rights under these terms and conditions in relation to user content, Data Experts\n        Group does not undertake to monitor the submission of such content to, or the publication of such content on, the\n        platform.</p>\n\n      <h2>No warranties</h2>\n\n      <p>The platform is provided “as is” without any representations or warranties, express or implied. Data Experts Group\n        makes no representations or warranties in relation to the platform or the information and materials provided on the\n        platform.</p>\n\n      <p>Without prejudice to the generality of the foregoing paragraph, Data Experts Group does not warrant that:</p>\n      <ul>\n        <li>The platform will be constantly available, or available at all; or</li>\n        <li>the information on the platform is complete, true, accurate or non-misleading.</li>\n      </ul>\n      <p>Nothing on the platform constitutes, or is meant to constitute, advice of any kind. If you require advice in relation\n        to any legal, financial or medical matter you should consult an appropriate professional.</p>\n\n      <h2>Limitations of liability</h2>\n\n      <p>Data Experts Group will not be liable to you (whether under the law of contact, the law of torts or otherwise) in relation\n        to the contents of, or use of, or otherwise in connection with, the platform:</p>\n      <ul>\n        <li>to the extent that the website is provided free-of-charge, for any direct loss;</li>\n        <li>for any indirect, special or consequential loss; or</li>\n        <li>for any business losses, loss of revenue, income, profits or anticipated savings, loss of contracts or business relationships,\n          loss of reputation or goodwill, or loss or corruption of information or data.</li>\n      </ul>\n      <p>These limitations of liability apply even if Data Experts Group has been expressly advised of the potential loss.</p>\n\n      <h2>Exceptions</h2>\n\n      <p>Nothing in the platform disclaimer will exclude or limit any warranty implied by law that it would be unlawful to exclude\n        or limit; and nothing in the platform disclaimer will exclude or limit Data Experts Group liability in respect of\n        any:</p>\n      <ul>\n        <li>death or personal injury caused by Data Experts Group negligence;</li>\n        <li>fraud or fraudulent misrepresentation on the part of Data Experts Group; or</li>\n        <li>matter which it would be illegal or unlawful for Data Experts Group to exclude or limit, or to attempt or purport\n          to exclude or limit, its liability.</li>\n      </ul>\n      <h2>Reasonableness</h2>\n\n      <p>By using the platform, you agree that the exclusions and limitations of liability set out in the platform disclaimer\n        are reasonable.</p>\n\n      <p>If you do not think they are reasonable, you must not use the platform.</p>\n\n      <h2>Other parties</h2>\n\n      <p>[You accept that, as a limited liability entity, Data Experts Group has an interest in limiting the personal liability\n        of its officers and employees. You agree that you will not bring any claim personally against Data Experts Group\n        officers or employees in respect of any losses you suffer in connection with the website.]</p>\n\n      <p>[Without prejudice to the foregoing paragraph,] you agree that the limitations of warranties and liability set out\n        in the platform disclaimer will protect Data Experts Group officers, employees, agents, subsidiaries, successors,\n        assigns and sub-contractors as well as Data Experts Group.</p>\n\n      <h2>Unenforceable provisions</h2>\n\n      <p>If any provision of the platform disclaimer is, or is found to be, unenforceable under applicable law, that will not\n        affect the enforceability of the other provisions of the platform disclaimer.</p>\n\n      <h2>Indemnity</h2>\n\n      <p>You hereby indemnify Data Experts Group and undertake to keep Data Experts Group indemnified against any losses, damages,\n        costs, liabilities and expenses (including without limitation legal expenses and any amounts paid by Data Experts\n        Group to a third party in settlement of a claim or dispute on the advice of Data Experts Group legal advisers) incurred\n        or suffered by Data Experts Group arising out of any breach by you of any provision of these terms and conditions[,\n        or arising out of any claim that you have breached any provision of these terms and conditions].</p>\n\n      <h2>Breaches of these terms and conditions</h2>\n\n      <p>Without prejudice to Data Experts Group other rights under these terms and conditions, if you breach these terms and\n        conditions in any way, Data Experts Group may take such action as Data Experts Group deems appropriate to deal with\n        the breach, including suspending your access to the website, prohibiting you from accessing the website, blocking\n        computers using your IP address from accessing the website, contacting your internet service provider to request\n        that they block your access to the website and/or bringing court proceedings against you.</p>\n\n      <h2>Variation</h2>\n\n      <p>Data Experts Group may revise these terms and conditions from time-to-time. Revised terms and conditions will apply\n        to the use of the platform from the date of the publication of the revised terms and conditions on the platform.\n        Please check this page regularly to ensure you are familiar with the current version.</p>\n\n      <h2>Assignment</h2>\n\n      <p>Data Experts Group may transfer, sub-contract or otherwise deal with Data Experts Group rights and/or obligations under\n        these terms and conditions without notifying you or obtaining your consent.</p>\n\n      <p>You may not transfer, sub-contract or otherwise deal with your rights and/or obligations under these terms and conditions.</p>\n\n      <h2>Severability</h2>\n\n      <p>If a provision of these terms and conditions is determined by any court or other competent authority to be unlawful\n        and/or unenforceable, the other provisions will continue in effect. If any unlawful and/or unenforceable provision\n        would be lawful or enforceable if part of it were deleted, that part will be deemed to be deleted, and the rest of\n        the provision will continue in effect.</p>\n\n      <h2>Entire agreement</h2>\n\n      <p>These terms and conditions [, together with [DOCUMENTS],] constitute the entire agreement between you and Data Experts\n        Group in relation to your use of the platform, and supersede all previous agreements in respect of your use of the\n        platform.</p>\n\n      <h2>Law and jurisdiction</h2>\n\n      <p>These terms and conditions will be governed by and construed in accordance with Australian law, and any disputes relating\n        to these terms and conditions will be subject to the jurisdiction of the courts of Australia.</p>\n\n      <h2>Registrations and authorisations</h2>\n\n      <p>Data Experts Group is registered with the Australian Securities & Investments Commission. You can find the online version\n        of the register at\n        <a href=\"https://connectonline.asic.gov.au/RegistrySearch\">ASIC registry search</a>. Data Experts Group company number is 138 270 658.</p>\n\n      <h2>Data Experts Group details</h2>\n\n      <p>The full name of Data Experts Group is \"DATA EXPERTS GROUP PTY LTD\".</p>\n\n      <p>You can contact Data Experts Group by email to enquiry@dataexpertsgroup.com.</p>\n    </div>\n    </d-widget>\n</div>","import { Component, OnInit, EventEmitter, Output } from '@angular/core';\nimport { AuthService } from '../auth.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\nimport { logoUrl } from '../auth.models';\nimport { Location} from '@angular/common';\n\n@Component({\n  selector: 'help',\n  templateUrl: './help.component.html',\n  styleUrls: ['./help.component.scss']\n})\nexport class HelpComponent implements OnInit {\n  private _subscription: Subscription;\n\n  public path: string;\n  public data: string;\n  logoUrl = logoUrl;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private http: HttpClient,\n    private location: Location\n) { }\n\nngOnInit() {\n  this._subscription = this.route.queryParams.subscribe(params => {\n      let path = params['path'];\n      if (path) {\n          this.path = '/assets/help/' + path;\n      } else {\n          this.path = '/assets/help/intro/getting_started.md'\n      }\n\n      this.getData(this.path);\n  });\n}\n\ngetData(path) {\n  if (path) {\n    const url = this.location.prepareExternalUrl(this.path);\n\n    this.http.get(url, { responseType: 'text' }).subscribe(result => {\n\n        let matches = new RegExp('{{SERVER}}|{{HUBKEY}}', 'gi');\n        this.data = result.replace(matches, match => {\n            switch (match) {\n                case '{{SERVER}}':\n                    return this.location.prepareExternalUrl('./');\n            }\n        });\n    });\n}\n}\n\n  printTerms(): void {\n    let printContents, popupWin;\n    printContents = document.getElementById('help-body').innerHTML;\n    popupWin = window.open('', '_blank', 'top=0,left=0,height=100%,width=auto');\n    popupWin.document.open();\n    popupWin.document.write(`\n      <html>\n        <head>\n          <title>Print tab</title>\n          <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css\" integrity=\"sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh\" crossorigin=\"anonymous\">\n          <style>\n          </style>\n        </head>\n    <body onload=\"window.print();window.close()\">${printContents}</body>\n      </html>`\n    );\n    popupWin.document.close();\n}\n\ngetRoute(event) {\n  let element = event.target;\n  while (element) {\n      let link: string = element.getAttribute('href');\n\n      if (link) {\n          if (link.endsWith('.md') && !link.startsWith('http')) {\n            this.router.navigate([], { relativeTo: this.route, queryParams: {'path': link} });\n          } else if (link.startsWith('route:')) {\n            // don't allow link clicks unless logged in\n          } else if (link.startsWith('unsafe:route:')) {\n              let route = link.substr(13);\n              this.router.navigate([route]);\n          } else if (link.startsWith('#')) {\n              this.router.navigate(['.', link]);\n          } else {\n              window.open(link);\n          }\n          event.preventDefault();\n      }\n\n      element = element.parentElement;\n  }\n}\n\n\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div id=\"print-section\" class=\"container p-1\">\n  <d-widget title=\"Help\" iconClass=\"fa fa-lg fa-fw fa-question\" [padding]=\"true\">\n    <ng-template #header>\n      <print-button></print-button>\n    </ng-template>\n\n    <div class=\"container\" id=\"print-body\">\n      <markdown [data]=\"data\" (click)=\"getRoute($event)\"></markdown>\n    </div>\n  </d-widget>\n</div>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport { AuthService } from '../auth.service';\nimport {logoUrl, User} from '../auth.models';\nimport { Subscription} from 'rxjs';\n\n@Component({\n  selector: 'app-verifyemail',\n  templateUrl: './verifyemail.component.html',\n  styleUrls: ['../auth.component.scss']\n})\nexport class VerifyEmailComponent implements OnInit, OnDestroy {\n    private _queryParamSubscription: Subscription;\n\n    logoUrl = logoUrl;\n\n    email: string;\n    verificationCode: string;\n\n    message: string;\n    successMessage: string;\n\n    resendingCode = false;\n    submittingVerification = false;\n\n    constructor(\n        private router: Router,\n        private route: ActivatedRoute,\n        private userService: AuthService) {\n    }\n\n  ngOnInit() {\n    this._queryParamSubscription = this.route.queryParams.subscribe((params) => {\n          this.email = params['email'];\n          this.verificationCode = params['code'];\n\n          if (this.email && this.verificationCode) {\n              this.submitVerification();\n          }\n        });\n  }\n\n  ngOnDestroy() {\n    if (this._queryParamSubscription) { this._queryParamSubscription.unsubscribe(); }\n  }\n\n  submitVerification() {\n    this.submittingVerification = true;\n    this.userService.confirmEmail(this.email, this.verificationCode).then(\n        result => {\n            if (result) {\n                let user: User = result;\n                if (user.isInvited) {\n                    if (!this.userService.redirectUrl) {\n                        this.router.navigate(['/']);\n                        return;\n                    } else {\n                      this.router.navigateByUrl(this.userService.redirectUrl);\n                      return;\n                    }\n                } else {\n                    this.router.navigate(['notInvited'], { queryParams: { email: user.email}, relativeTo: this.route.parent });\n                    return;\n                }\n            } else {\n              this.submittingVerification = false;\n            }\n\n            this.message = 'Confirm email failed.  Please contact support to proceed.';\n            this.successMessage = '';\n\n        }).catch(\n        reason => {\n          this.submittingVerification = false;\n            this.message = reason.message;\n            this.successMessage = '';\n        }\n    );\n  }\n\n  resendVerification() {\n    this.resendingCode = true;\n      this.userService.resendConfirmationEmail(this.email).then( () => {\n          this.message = '';\n          this.successMessage = 'The confirmation email has been resent to the email above.';\n          this.resendingCode = false;\n        }).catch(\n        reason => {\n            this.message = reason.message;\n            this.successMessage = '';\n            this.resendingCode = false;\n        }\n    );\n  }\n}\n","<auth-header [showSignIn]=\"true\"></auth-header>\n\n<div class=\"login-container\">\n  <div class=\"card\">\n  <form>\n    <div class=\"card-header\">\n      Integration Hub - Verify email address\n    </div>\n    <div class=\"card-body\">\n\n      <section>\n        <div class=\"alert alert-info\">\n          Please enter the email address and code that was emailed to you when you registered.\n        </div>\n      </section>\n\n      <fieldset>\n\n        <section>\n          <form-input label=\"E-mail\" [(ngModel)]=\"email\" name=\"email\" iconClass=\"fa fa-user txt-color-teal\" title=\"Please enter your email address\"\n            placeholder=\"E-mail...\">\n          </form-input>\n        </section>\n\n        <section>\n          <form-textarea label=\"Verification Code\" [(ngModel)]=\"verificationCode\" name=\"verificationCode\" iconClass=\"fa fa-lock\" title=\"Please the verification code.\"\n            placeholder=\"Paste Verification Code\" [hideToggle]=\"true\" [showPreview]=\"false\">\n          </form-textarea>\n        </section>\n\n\n        <section *ngIf=\"message\">\n          <div class=\"alert alert-danger \">\n            {{message}}\n          </div>\n        </section>\n\n        <section *ngIf=\"successMessage\">\n          <div class=\"alert alert-success \">\n            {{successMessage}}\n          </div>\n        </section>\n\n      </fieldset>\n    </div>\n    <div class=\"card-footer\">\n      <button type=\"button\" class=\"btn btn-success mr-1\" [ngClass]=\"{disabled : resendingCode}\" (click)=\"!resendingCode && resendVerification()\">\n        <i *ngIf=\"resendingCode\" class=\"fa fa-spin fa-refresh\"></i>Re-send code</button>\n      <button class=\"btn btn-primary\" (click)=\"submitVerification()\">\n        <i *ngIf=\"!submittingVerification\" class=\"fa fa-refresh\"></i>\n        <i *ngIf=\"submittingVerification\" class=\"fa fa-spin fa-refresh\"></i> Verify </button>\n    </div>\n  </form>\n</div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n    selector: '<welcome>',\n    templateUrl: './welcome.component.html',\n    styleUrls: ['./welcome.component.scss']\n})\n\nexport class WelcomeComponent implements OnInit {\n    constructor() { }\n\n    ngOnInit() { }\n}\n","<div class=\"card\">\n    <div class=\"card-header\">\n        Welcome!\n    </div>\n\n    <div class=\"card-body\">\n    <h4>Data Experts Integration Hub</h4>\n\n    <div class=\"pb-3\">\n        <a href=\"https://dataexpertsgroup.com\" class=\"btn btn-danger btn-sm\">Data Experts Group</a>\n        <a href=\"http://dataexpertsgroup.com/integration_hub\" class=\"btn btn-danger btn-sm\">Find out more</a>\n    </div>\n\n    <div class=\"alert alert-success\">\n        <h4>Data Experts Group - Do you trust your data?</h4>\n        <p>\n            And do you understand it. The integration hub is a platform that allows you to manage and catalog your information and data.\n        </p>\n    </div>\n\n    <div class=\"alert alert-success\">\n        <h4> Why use the integration hub?</h4>\n        <p>\n            Getting started takes just a few minutes, and you'll quickly be loading and performing complex transformations on your data.\n        </p>\n    </div>\n</div>\n</div>","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { Routing } from './auth.routing';\nimport { SharedModule} from '../shared/shared.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { LoginComponent } from './login/login.component';\nimport { LockedComponent } from './locked/locked.component';\nimport { NotInvitedComponent } from './notInvited/notInvited.component';\nimport { RegisterComponent } from './register/register.component';\nimport { ForgotComponent } from './forgot/forgot.component';\nimport { VerifyEmailComponent } from './verifyemail/verifyemail.component';\nimport { TermsComponent} from './terms/terms.component';\nimport { WelcomeComponent} from './welcome/welcome.component';\nimport { AuthComponent } from './auth.component';\nimport { AuthService } from './auth.service';\nimport { HelpComponent} from './help/help.component'\nimport { HeaderComponent } from './header/header.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    Routing,\n    ReactiveFormsModule,\n  ],\n  declarations: [\n      LoginComponent,\n      LockedComponent,\n      NotInvitedComponent,\n      RegisterComponent,\n      ForgotComponent,\n      VerifyEmailComponent,\n      AuthComponent,\n      TermsComponent,\n      WelcomeComponent,\n      HelpComponent,\n      HeaderComponent,\n    ]\n})\nexport class AuthModule {\n  static forRoot(): ModuleWithProviders<AuthModule> {\n    return {\n      ngModule: AuthModule,\n      providers: [AuthService]\n    };\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { logoUrl } from '../auth.models';\n\n@Component({\n    selector: 'auth-header',\n    templateUrl: './header.component.html',\n    styleUrls: ['../auth.component.scss']\n})\nexport class HeaderComponent {\n    @Input() showSignUp = false;\n    @Input() showSignIn = false;\n\n    logoUrl = logoUrl;\n}\n","<nav class=\"navbar navbar-expand-md navbar-dark bg-dark\">\n\t<div id=\"logo-group\">\n\t\t<span id=\"logo\">\n\t\t\t<img [src]='logoUrl' alt=\"Data Experts Group\"> </span>\n\t</div>\n\n\t<div class=\"collapse navbar-collapse mr-sm-2\">\n\t</div>\n\t<form class=\"form-inline\">\n\t\t<div *ngIf=\"showSignUp\">\n\t\t\t<span class=\"d-none d-md-inline text-white m-1\" >\n\t\t\t\tNeed an account?\n\t\t\t</span>\n\t\t\t<a routerLink=\"/auth/register\" class=\"btn btn-success mr-1\">Sign Up</a>\n\t\t</div>\n\n\t\t<div *ngIf=\"showSignIn\">\n\t\t\t<span class=\"d-none d-md-inline text-white m-1\" >\n\t\t\t\tAlready Registered?\n\t\t\t</span>\n\t\t\t<a routerLink=\"/auth/login\" class=\"btn btn-success mr-1\">Sign In</a>\n\t\t</div>\n\n\t\t<a routerLink=\"/auth/help\" class=\"d-none d-md-inline btn btn-secondary text-white mr-1\">Help</a>\n\n\t\t<d-button-dropdown [pullRight]=\"true\" [hideCarrot]=\"true\" buttonClass=\"btn-primary\" iconClass=\"fa fa-navicon\">\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/register\">Sign Up</a>\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/login\">Sign In</a>\n\t\t\t<div class=\"dropdown-divider\"></div>\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/forgot-password\">Forgot password</a>\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/verifyemail\">Verify password</a>\n\t\t\t<div class=\"dropdown-divider\"></div>\t\t\t\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/public\">Public Data Sets</a>\n\t\t\t<div class=\"dropdown-divider\"></div>\t\t\t\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/help\" [queryParams]=\"{'path': 'policies/privacy.md'}\">Privacy Policy</a>\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/terms\">Terms and Conditions</a>\n\t\t\t<a class=\"dropdown-item\" routerLink=\"/auth/help\">Help</a>\n\t\t\t<div class=\"dropdown-divider\"></div>\t\t\t\n\t\t\t<a class=\"dropdown-item\" href=\"https:/dataexpertsgroup.com\">Visit Data Experts Home</a>\n\t\t</d-button-dropdown>\n\t</form>\n</nav>\n"]}