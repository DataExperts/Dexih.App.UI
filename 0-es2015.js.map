{"version":3,"sources":["./src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.ts","./src/app/+hub/table/table-edit/table-edit-rest/table-edit-input-column.component.html","./src/app/+hub/table/column-edit/column-edit-base.component.ts","./src/app/+hub/table/column-edit/column-edit-base.component.html","./src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.ts","./src/app/+hub/table/table-edit/table-edit-properties/table-edit-properties.component.html","./src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.ts","./src/app/+hub/table/table-edit/table-edit-rest/table-edit-rest.component.html","./src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.ts","./src/app/+hub/table/table-edit/table-edit-preview-data/table-edit-preview-data.component.html","./src/app/+hub/table/column-edit/index.ts","./src/app/+hub/table/column-edit/column-edit.component.ts","./src/app/+hub/table/column-edit/column-edit.component.html","./src/app/+hub/table/table-edit/table-edit-preview-data/index.ts","./src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.ts","./src/app/+hub/table/table-edit/table-edit-file/table-edit-file.component.html","./src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.ts","./src/app/+hub/table/table-edit/table-edit-columns/table-edit-columns.component.html","./src/app/+hub/table/table.shared.module.ts","./src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.ts","./src/app/+hub/table/table-edit/column-edit-bulk/column-edit-bulk.component.html"],"names":[],"mappings":"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","file":"0-es2015.js","sourcesContent":["import { Component, Input, OnInit, OnChanges } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'table-edit-input-column',\n    templateUrl: './table-edit-input-column.component.html'\n})\nexport class TableEditInputColumnComponent implements OnInit, OnChanges {\n    @Input() public columnForm: FormGroup = null;\n\n    constructor() {\n    }\n\n    ngOnInit() {\n    }\n\n    ngOnChanges() {\n    }\n\n    toggleInput($event) {\n    }\n}\n","<form [formGroup]=\"columnForm\" class=\"\">\n    <section>\n        <form-input \n        [label]=\"columnForm.value.name\" \n        formControlName=\"defaultValue\" \n        placeholder=\"Enter default value for the input column\" \n        iconClass=\"fa fa-dollar\">\n        </form-input>\n    </section>\n</form>","import { Component, Input, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags} from '../../hub.models';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubService } from '../../hub.service';\nimport { TypeCodes, TypeFunctions } from '../../hub.remote.models';\n\n@Component({\n    selector: 'column-edit-base',\n    templateUrl: './column-edit-base.component.html',\n})\nexport class ColumnEditBaseComponent implements OnInit, OnDestroy {\n    @Input() columnFormService: HubFormsService;\n    @Input() detailedView = true;\n\n    private _hubCacheSubscription: Subscription;\n    private _dataTypeSubscription: Subscription;\n\n    hubCache: HubCache;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n\n    formatItems = [];\n\n    constructor(private hubService: HubService) { }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            this.hubCache = cache;\n\n            if (this.columnFormService.currentForm) {\n                if(this._dataTypeSubscription) {this._dataTypeSubscription.unsubscribe();}\n                this._dataTypeSubscription = this.columnFormService.currentForm.controls.dataType.valueChanges.subscribe(dataType => {\n                    this.updateColumnFormats(dataType);\n                });\n\n                this.updateColumnFormats(this.columnFormService.currentForm.controls.dataType.value);\n            }\n        });\n    }\n\n    private updateColumnFormats(dataType) {\n        const type = new TypeFunctions(dataType, null, null, null);\n        this.formatItems = type.getColumnFormats();\n\n        const format = this.columnFormService.currentForm.controls.format.value;\n        if (format && this.formatItems.findIndex(c => c.value === format) < 0) {\n            this.formatItems = this.formatItems.concat({value: format, name: format})\n        }\n    }\n\n    ngOnDestroy() {\n        if(this._dataTypeSubscription) {this._dataTypeSubscription.unsubscribe();}\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n}\n","<form *ngIf=\"columnFormService.currentForm\" [formGroup]=\"columnFormService.currentForm\">\n    <fieldset>\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-6\">\n                <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\" iconClass=\"fa fa-list\"\n                    [errors]=\"columnFormService.formErrors.columnGroup\" note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n                </form-input>\n            </section>\n            <section class=\"form-group col-md-6\">\n                    <form-input label=\"Column Name\" formControlName=\"name\" placeholder=\"Enter the column name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"columnFormService.formErrors.name\" note=\"The physical column name in the underlying table\">\n                    </form-input>\n                </section>\n            </div>\n\n        <section>\n            <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n            </form-checkbox>\n        </section>\n        \n        <section *ngIf=\"columnFormService.currentForm.value.useLogical\">\n            <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                [errors]=\"columnFormService.formErrors.logicalName\" note=\"The logical name is a short term to represent the column\">\n            </form-input>\n        </section>\n\n        <section *ngIf=\"detailedView\">\n            <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                [errors]=\"columnFormService.formErrors.description\">\n            </form-textarea>\n        </section>\n\n        <div class=\"form-row\">\n            <section class=\"form-group col-md-4\">\n                <form-select label=\"Data Type\" formControlName=\"dataType\" [errors]=\"columnFormService.formErrors.dataType\" [items]=\"typeCodes\"\n                    itemKey=\"key\" itemName=\"name\">\n                </form-select>\n            </section>\n            <section class=\"form-group col-md-2\">\n                <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\" [errors]=\"columnFormService.formErrors.rank\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isString\" class=\"form-group col-md-6\">\n                <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\" type=\"number\" [errors]=\"columnFormService.formErrors.maxLength\"\n                    note=\"Maximum string length (blank for unlimited)\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\" type=\"number\" [errors]=\"columnFormService.formErrors.precision\">\n                </form-input>\n            </section>\n            <section *ngIf=\"columnFormService.currentForm.value.isNumber\" class=\"form-group col-md-3\">\n                <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\" [errors]=\"columnFormService.formErrors.scale\">\n                </form-input>\n            </section>\n        </div>\n\n        <div *ngIf=\"detailedView\">\n\n            <section>\n                <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n            </section>\n            <section>\n                <form-checkbox label=\"Is always incrementing column that can be used for change detection\" formControlName=\"isIncrementalUpdate\"></form-checkbox>\n            </section>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Format\" formControlName=\"format\" [errors]=\"columnFormService.formErrors.format\" [items]=\"formatItems\"\n                        itemKey=\"value\" itemName=\"name\" [enableTextEntry]=\"true\" [enableTextEntryMatch]=\"false\" [allowNullSelect]=\"true\" selectNullMessage=\"No Format\"\n                        note=\"How to format the column when displayed.\">\n                    </form-select>                \n                </section>\n\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Delta Type\" formControlName=\"deltaType\" [errors]=\"columnFormService.formErrors.deltaType\" [items]=\"deltaTypes\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to treat the column when used to update target table.\">\n                    </form-select>\n                </section>\n                <section class=\"form-group col-md-4\">\n                    <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [errors]=\"columnFormService.formErrors.securityFlag\" [items]=\"securityFlags\"\n                        itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n                    </form-select>\n                </section>\n            </div>\n\n            <div class=\"form-row\">\n                <section class=\"form-group col-md-6\">\n                    <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\" [errors]=\"columnFormService.formErrors.defaultValue\"\n                        note=\"Default value if unmapped or null.\">\n                    </form-input>\n                </section>\n                <section class=\"form-group col-md-6\" *ngIf=\"columnFormService.currentForm.controls.columnValidationKey\">\n                    <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\" [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\"\n                        itemKey=\"key\" itemName=\"name\" note=\"Validation rule to apply.\">\n                        <columnValidation-edit-button [key]=\"columnFormService.currentForm.controls.columnValidationKey.value\"></columnValidation-edit-button>\n                    </form-select>\n                </section>\n            </div>\n        </div>\n    </fieldset>\n</form>\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags } from '../../../hub.models';\nimport { eTableType, DexihConnection, ConnectionReference,\n    eConnectionCategory, DexihTableColumn, eConnectionPurpose, DexihTable, eTableTypeItems, eSortDirection, eSortDirectionItems, DexihTableIndex, DexihTableIndexColumn } from '../../../../shared/shared.models';\nimport { TypeCodes } from '../../../hub.remote.models';\nimport { CancelToken, Message } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-properties',\n    templateUrl: './table-edit-properties.component.html',\n})\nexport class TableEditPropertiesComponent implements OnInit, OnDestroy {\n    @Input() public formsService: HubFormsService;\n    @Input() public isExpanded = true;\n    @Input() public showColumns = true;\n\n    // private connection: DexihConnection;\n\n    private _subscription: Subscription;\n    private _connectionSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    eTableType = eTableType;\n    eTableTypeItems = eTableTypeItems;\n    eSortDirectionItems = eSortDirectionItems;\n\n    public sqlMessage: Message;\n\n    public connections: DexihConnection[];\n    public connection: DexihConnection;\n    public connectionReference: ConnectionReference;\n    eConnectionCategory = eConnectionCategory;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n    sortColumns: any[];\n\n    public runningSql = false;\n    public option = 0;\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private route: ActivatedRoute,\n        private router: Router  ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest([\n                this.route.data,\n                this.route.queryParams,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n                this.hubService.getRemoteLibrariesObservable(), // included to ensure correct connection reference when refreshing page.\n            ]\n            ).subscribe(async result => {\n                let data = result[0];\n                let queryParams = result[1];\n                this.hubCache = result[2];\n                this.mainForm = result[3];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (queryParams['option']) {\n                    this.option = +queryParams['option'];\n                } else {\n                    this.option = 0;\n                }\n\n                if (this.hubCache && this.hubCache.isLoaded() && this.mainForm ) {\n                    this.connections = this.hubCache.hub.dexihConnections;\n                    this.connection = this.connections.find(c => c.key === this.mainForm.controls.connectionKey.value);\n                    this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n\n                    if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n                    this._connectionSubscription = this.mainForm.controls.connectionKey.valueChanges.subscribe(async (connectionKey) => {\n                        this.connection = this.connections.find(c => c.key === connectionKey);\n                        this.connectionReference = await this.hubService.GetConnectionReference(this.connection);\n                    });\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table edit properties');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._connectionSubscription) { this._connectionSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    reloadColumns() {\n        this.runningSql = true;\n        this.hubService.importTables([this.mainForm.value], false, this.cancelToken).then(tables => {\n            if (!tables || tables.length === 0) { return; }\n\n            const table: DexihTable = tables[0];\n            const tableColumnsForm = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            while (tableColumnsForm.controls.length > 0) {\n                tableColumnsForm.removeAt(0);\n            }\n            table.dexihTableColumns.filter(c => c.isValid).forEach(column => {\n                tableColumnsForm.push(this.formsService.tableColumn(table.dexihTableColumns, column));\n            });\n            this.runningSql = false;\n        }).catch(() => this.runningSql = false);\n    }\n\n    test() {\n        this.runningSql = true;\n        this.hubService.doImport([this.mainForm.value], false, this.cancelToken).then(tables => {\n            let columns = tables[0].dexihTableColumns.map(c => c.name);\n            this.hubService.addHubSuccessMessage('The query was successful, and returned the following columns.  ' + columns.join(', '));\n            this.runningSql = false;\n        }).catch((reason) => {\n            this.runningSql = false;\n            this.sqlMessage = reason;\n            this.hubService.addHubMessage(reason);\n        });\n    }\n\n    addIndex(i: number) {\n        const index = new DexihTableIndex();\n        index.columns.push(new DexihTableIndexColumn());\n\n        const table = <DexihTable> this.mainForm.value;\n        const control = this.formsService.tableIndex(table, index);\n        const indexes = <FormArray> this.mainForm.controls.dexihTableIndexes;\n        indexes.insert(i, control);\n    }\n\n    removeIndex(i: number) {\n        const indexes = <FormArray> this.mainForm.controls.dexihTableIndexes;\n        indexes.removeAt(i);\n    }\n\n    addColumn(index: FormGroup, j: number) {\n        const control = this.formsService.tableIndexColumn(new DexihTableIndexColumn());\n        const columns = <FormArray> index.controls.columns;\n        columns.insert(j, control);\n    }\n\n    removeColumn(index: FormGroup, j: number) {\n        const columns = <FormArray> index.controls.columns;\n        columns.removeAt(j);\n    }\n\n    changeOption(index) {\n    if (history.pushState) {\n        this.router.navigateByUrl(window.location.pathname + `?option=${index}`);\n    }\n    }\n\n}\n","<d-tabs title=\"Edit Table Properties\" [showExpandButton]=\"false\" [padding]=\"false\" (selectedIndexChange)=\"changeOption($event)\" [selectedIndex]=\"option\">\n<d-tab title='Properties' >\n        <form *ngIf=\"mainForm\" [formGroup]=\"mainForm\" class=\"container\">\n            <fieldset>\n                <div class=\"form-row\">\n                    <section class=\"form-group col-md-4\">\n                        <form-select label=\"Connection\" formControlName=\"connectionKey\" [items]=\"connections\" itemKey=\"key\" itemName=\"name\"\n                            [errors]=\"formsService.formErrors.connectionKey\" iconClass=\"fa fa-database\" note='The connection for this table.'>\n                            <connection-edit-button [key]=\"mainForm.controls.connectionKey.value\"></connection-edit-button>\n                        </form-select>\n                    </section>\n\n                    <section class=\"form-group col-md-4\">\n                        <form-input [label]=\"entityType + ' Name'\" formControlName=\"name\" placeholder=\"Enter the physical name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.name\" note=\"The physical name of the underlying entity\">\n                        </form-input>\n                    </section>\n\n                    <section class=\"form-group col-md-4\" *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                        <form-input [label]=\"entityType + ' Schema'\" formControlName=\"schema\" placeholder=\"Enter the (database) schema name\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.schema\" note=\"The physical name of the database schema (if applicable).\">\n                        </form-input>\n                    </section>\n                </div>\n                \n                <section>\n                    <form-checkbox label=\"Specify a different logical name\" formControlName=\"useLogical\">\n                    </form-checkbox>\n                </section>\n\n                <section *ngIf=\"mainForm.value.useLogical\">\n                    <form-input label=\"Logical Name\" formControlName=\"logicalName\" placeholder=\"Enter the logical name.\" iconClass=\"fa fa-list\"\n                        [errors]=\"formsService.formErrors.logicalName\" note=\"The logical name is a short term to represent the table\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-textarea label=\"Description\" formControlName=\"description\" [showPreview]=\"true\" [isHidden]=\"true\" placeholder=\"Enter the description.\"\n                        [errors]=\"formsService.formErrors.description\">\n                    </form-textarea>\n                </section>\n\n                <div *ngIf=\"connection?.purpose == eConnectionPurpose.Managed\" class=\"form-row\">\n                    <section class=\"form-group col-md-6\">\n                        <form-input label=\"Reject Table Name\" formControlName=\"rejectedTableName\" placeholder=\"Enter the rejected table name.\" iconClass=\"fa fa-list\"\n                            [errors]=\"formsService.formErrors.rejectedTableName\" note=\"The name of the table to send any records that could not be written to the primary table.\">\n                        </form-input>\n                    </section>\n                </div>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.SqlDatabase\">\n                    <form-select label=\"Table Type\" formControlName=\"tableType\" [errors]=\"formsService.formErrors.tableType\" [items]=\"eTableTypeItems\" itemKey=\"key\" itemName=\"name\">\n                    </form-select>\n                </section>\n\n                <section *ngIf=\"mainForm.controls.tableType.value === eTableType.Query\">\n                    <form-textarea label=\"Specify the sql query\" rows=\"15\" formControlName=\"queryString\" [hideToggle]=\"true\" placeholder=\"Sql Query\"\n                        [showPreview]=\"false\">\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"test()\"> (\n                            <i class=\"fa fa-check-circle-o\"></i> Test) </a>\n                        <a *ngIf=\"runningSql == false\" href=\"javascript:void(0)\" (click)=\"reloadColumns()\"> (\n                            <i class=\"fa fa-refresh\"></i> Reload Columns) </a>\n                        <span *ngIf=\"runningSql == true\">\n                            <i class=\"fa fa-spin fa-refresh\"></i> (Busy... please wait) </span>\n                        <dexih-message [message]=\"sqlMessage\"></dexih-message>\n                    </form-textarea>\n                </section>\n\n                <section *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.Hub\">\n                    <form-input label=\"Source Connection Name\" formControlName=\"sourceConnectionName\" placeholder=\"Name of the source connection.\"\n                        iconClass=\"fa fa-list\" note=\"The name of the connection for this table in the source hub.\">\n                    </form-input>\n                </section>\n\n                <section>\n                    <form-checkbox label=\"Table is shared in the catalog to users with read access.\" formControlName=\"isShared\">\n                    </form-checkbox>\n                </section>\n\n            </fieldset>\n        </form>\n</d-tab>\n \n<d-tab title='Indexes' *ngIf=\"mainForm\">\n    <div class=\"container form-row w-100 mb-3\" *ngFor=\"let index of mainForm.controls.dexihTableIndexes.controls; let i = index;\">\n        <form [formGroup]=\"index\" class=\"form-row w-100\">\n            <div class=\"input-group\">\n                <form-input labelLeft=\"Name\" formControlName=\"name\" placeholder=\"Index Name\" iconClass=\"fa fa-list\" ></form-input>\n                <div class=\"p-3\">\n                    <form *ngFor=\"let column of index.controls.columns.controls; let j = index\" class=\"input-group\" [formGroup]=\"column\">\n                        <div class=\"form-control p-0\">\n                            <form-select labelLeft=\"Column\" [border]=\"false\" formControlName=\"columnKey\" [items]=\"mainForm.controls.dexihTableColumns.value\" itemKey=\"key\" itemName=\"name\" ></form-select>\n                        </div>\n                        <div class=\"form-control p-0\">\n                            <form-select labelLeft=\"Direction\" [border]=\"false\" formControlName=\"direction\" [items]=\"eSortDirectionItems\" itemKey=\"key\" itemName=\"name\"></form-select>\n                        </div>\n                        <div class=\"input-group-append flex-shrink-1\">\n                            <button class=\"btn btn-light\" type=\"button\" (click)=\"addColumn(index, j)\" value=\"Add\">\n                                <i class=\"fa fa-plus-square-o\"></i>\n                            </button>\n                            <button class=\"btn btn-light\" type=\"button\" (click)=\"removeColumn(index, j)\" value=\"Remove\">\n                                <i class=\"fa fa-minus-square-o\"></i>\n                            </button>\n                        </div>\n                    </form>\n                    <div class=\"input-group-append flex-shrink-1 ml-1 \">\n                        <d-button iconClass=\"fa fa-plus-square-o\" (click)=\"addColumn(index, 0)\">Add Column</d-button>\n                        <d-button-delete (click)=\"removeIndex(index)\"></d-button-delete>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n    <d-button iconClass=\"fa fa-plus-square-o\" (click)=\"addIndex(mainForm.controls.dexihTableIndexes.controls.length)\" [autoCompact]=\"false\">Add Index</d-button>\n</d-tab>\n\n <d-tab *ngIf=\"connectionReference?.connectionCategory == eConnectionCategory.WebService\" title=\"Web Service Properties\">\n    <dexih-table-edit-rest [formService]='formsService' [connection]='connection'></dexih-table-edit-rest>\n</d-tab>\n\n<d-tab *ngIf=\"connection && ( connectionReference?.connectionCategory == eConnectionCategory.File || connection?.purpose !== eConnectionPurpose.Source )\" title=\"File Properties\">\n    <dexih-table-edit-file [formService]='formsService' [connection]='connection' [isFile]='connectionReference?.connectionCategory == eConnectionCategory.File'></dexih-table-edit-file>\n</d-tab>\n\n<d-tab *ngIf=\"showColumns\" title=\"Columns\" [padding]=\"false\">\n    <table-edit-columns [tableForm]='mainForm'></table-edit-columns>\n</d-tab>\n</d-tabs>","import { Component, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Location } from '@angular/common';\nimport { FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihTable, eTypeCode, DexihTableColumn, eDeltaType } from '../../../../shared/shared.models';\nimport { HubCache, ConnectionTables, formatTypes, eCacheStatus } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n    selector: 'dexih-table-edit-rest',\n    templateUrl: './table-edit-rest.component.html'\n})\nexport class TableEditRestComponent implements OnInit, OnDestroy {\n    @Input() public formService: HubFormsService;\n    @Input() public connection: DexihConnection;\n\n    private _hubCacheSubscription: Subscription;\n    private _currentFormSubscription: Subscription;\n    private _restfulUrlSubscription: Subscription;\n    private cancelToken: CancelToken = new CancelToken();\n\n    public hubCache: HubCache;\n\n    tables: ConnectionTables[];\n    inputColumns: Array<FormGroup>;\n    inputTable: DexihTable = null;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    constructor(private hubService: HubService, private route: ActivatedRoute, private router: Router, private location: Location) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n\n                this.hubCache = cache;\n\n                this.tables = this.hubCache.getConnectionTables();\n\n            }\n        });\n\n        this._currentFormSubscription = this.formService.getCurrentFormObservable().subscribe( currentForm => {\n            // load the inputColumns\n            const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n            this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n            if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n            this._restfulUrlSubscription = currentForm.controls.restfulUri.valueChanges\n                .pipe(debounceTime(500))\n                .subscribe(newValue => {\n                    this.updateInputColumns();\n                });\n        });\n\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._restfulUrlSubscription) { this._restfulUrlSubscription.unsubscribe(); }\n        if (this._currentFormSubscription) { this._currentFormSubscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    hasChanged($event) {\n        // this.tableChanged = true;\n    }\n\n    importTable() {\n        let importTable = this.formService.currentForm.value;\n        let inputColumns = this.formService.currentForm.value.dexihTableColumns.filter(c => c.isInput && c.isValid);\n\n        // merge any input columns with columns already in the table\n        if (inputColumns) {\n            inputColumns.forEach(column => {\n                let importCol = importTable.dexihTableColumns.find(c => c.name === column.name);\n                if (importCol) {\n                    importCol.inputValue = column.inputValue;\n                } else {\n                    importCol = column;\n                    importTable.dexihTableColumns.push(importCol);\n                }\n            });\n        }\n\n        this.hubService.importTables([importTable], false, this.cancelToken)\n            .then(result => {\n                const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n                while (columns.controls.length > 0) {\n                    columns.removeAt(0);\n                }\n\n                result[0].dexihTableColumns.forEach(column => {\n                    columns.push(this.formService.tableColumn(result[0].dexihTableColumns, column));\n                });\n            }).catch();\n    }\n\n    updateInputColumns() {\n        // use the regex to extract items in uri between { }.  These will be input columns\n        const regExp = /\\{([^}]+)\\}/g;\n\n        const columns = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n        const inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n\n        inputColumns.forEach(item => {\n            const columnForm = <FormGroup>item;\n            columnForm.controls.isValid.setValue(false);\n        });\n        let match;\n        let position = -1000;\n\n        while ((match = regExp.exec(this.formService.currentForm.value.restfulUri))) {\n            let columnForm = <FormGroup>columns.controls.find(c => c.value.name === match[1] && c.value.isInput);\n\n            if (!columnForm) {\n                let col = new DexihTableColumn();\n\n                // add the basic properties\n                col.name = match[1];\n                col.isInput = true;\n                col.logicalName = match[1];\n                col.dataType = eTypeCode.String;\n                col.deltaType = eDeltaType.NaturalKey;\n                col.maxLength = 1024;\n                col.position = position++;\n                col.description = 'Url Parameter ' + match[1];\n\n                col.allowDbNull = true;\n                col.isUnique = false;\n                col.isValid = true;\n\n                columnForm = this.formService.tableColumn(columns.value, col);\n                columns.push(columnForm);\n            } else {\n                columnForm.controls.isValid.setValue(true);\n            }\n        }\n\n        position = 1;\n        columns.controls.filter(column => column.value.isValid) .sort((a, b) => a.value.position - b.value.position).forEach(column => {\n            (<FormGroup>column).controls.position.setValue(position++);\n        });\n\n        this.inputColumns = <Array<FormGroup>>columns.controls.filter(c => c.value.isInput && c.value.isValid);\n    }\n}\n","    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\" class=\"container\">\n\n        <section>\n            <form-input label=\"Web Service Uri String\" formControlName=\"restfulUri\" placeholder=\"Enter the uri.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.restfulUri\" [note]=\"'Specify the uri following the base path ' + connection.server +'.  To include input columns use {} in the uri definition (eg. GetWeather?City={CityName})'\">\n            </form-input>\n        </section>\n        <section>\n        </section>\n\n        <section>\n            <div *ngFor=\"let columnForm of inputColumns | isValidFilter\">\n                <table-edit-input-column [columnForm]=\"columnForm\"></table-edit-input-column>\n            </div>\n        </section>\n\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">\n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, defaults will be used.\">\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section class=\"btn-toolbar\">\n            <d-button [busy]=\"formService.formSaving\" (click)=\"!formService.formSaving && importTable()\">Import </d-button>\n\n            <div *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\" class=\"input-group pl-1\">\n                <div  class=\"input-group-prepend\">\n                    <div class=\"input-group-text\">Max Import Levels</div>\n                </div>\n                <input class=\"form-control\" placeholder=\"Maximum levels...\" title=\"Maximum import levels\" formControlName=\"maxImportLevels\"\n                    style=\"width: 100%; max-width: 100px\">\n            </div>\n        </section>\n\n    </form>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HubService } from '../../../hub.service';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihTable, eDataObjectType } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-preview-data',\n    templateUrl: './table-edit-preview-data.component.html'\n})\nexport class TableEditPreviewDataComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n\n    public table: DexihTable;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public eDataObjectType = eDataObjectType;\n\n    constructor(\n        public formsService: HubFormsService,\n        private hubService: HubService,\n        private authService: AuthService,\n        private route: ActivatedRoute) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.hubService.getHubCacheObservable(),\n                this.formsService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let data = result[0];\n                let tableForm = result[2];\n\n                this.action = data['action'];\n                this.pageTitle = data['pageTitle'];\n\n                if (tableForm) {\n                    this.table = tableForm.value;\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit Preview');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n}\n","<d-widget-section title=\"Preview Table\" [showExpandButton]=\"false\" [padding]=\"false\">\n    <ng-template #sectionHeader>\n        <d-button-close (click)=\"close()\"></d-button-close>\n    </ng-template>\n        <preview-data [table]='table' [viewSource]='eDataObjectType.Table'></preview-data>\n</d-widget-section>","export * from './column-edit.component';\nexport * from './column-edit-base.component';\n","import { Component, OnInit, OnChanges, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { HubCache, eCacheStatus,\n     } from '../../hub.models';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { HubService } from '../../hub.service';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { Subscription} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { eDeltaType, DexihTableColumn, eTypeCode } from '../../../shared/shared.models';\n\n@Component({\n    selector: 'column-edit',\n    templateUrl: './column-edit.component.html',\n})\nexport class ColumnEditComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() columnKey: number;\n    @Input() deltaType: eDeltaType;\n    @Input() detailedView = true;\n    @Output() isUpdated = new EventEmitter<boolean>();\n    @Output() changeColumn = new EventEmitter<number>();\n\n    private _hubCacheSubscription: Subscription;\n\n    private hubCache: HubCache;\n    public pageTitle: string;\n    public action: string;\n\n    public errorMessage: string;\n    public successMessage: string;\n    public savingTable: boolean;\n\n    public newColumnForm: FormGroup;\n    private originalColumn: DexihTableColumn;\n\n    public columns: any[];\n\n    public eTypeCode = eTypeCode;\n\n\n    public columnFormService: HubFormsService;\n\n    constructor(\n        private authService: AuthService,\n        private hubService: HubService,\n        fb: FormBuilder) {\n\n        // create a separate formService instance to manage the copied form\n        this.columnFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            if (hubCache.status === eCacheStatus.Loaded) {\n                this.hubCache = hubCache;\n\n                if (!this.hubCache.isLoaded() || !this.tableForm) { return; }\n\n                this.initializeForm();\n\n                this.updateColumns();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this.tableForm && this.hubCache) {\n            this.initializeForm();\n            this.updateColumns();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n    }\n\n    initializeForm() {\n        let columnForm: FormGroup;\n        let columns = this.tableForm.value.dexihTableColumns;\n\n        if (this.columnKey) {\n            if (this.tableForm) {\n                this.originalColumn = columns.find(c => c.key === this.columnKey);\n                if (!this.originalColumn) {\n                    this.authService.navigateUp();\n                    return;\n                }\n                columnForm = this.columnFormService.tableColumn(columns, this.originalColumn);\n            }\n        } else {\n            let column = this.hubCache.newColumn(this.tableForm.value, this.deltaType);\n            if (column) {\n                columnForm = this.columnFormService.tableColumn(columns, column);\n            } else {\n                this.authService.informationDialog('Column not added.',\n                `The column with delta type ${this.deltaType} could not be inserted into the current table.`);\n            }\n        }\n        this.columnFormService.startForm(columnForm);\n    }\n\n    cancel() {\n        this.isUpdated.emit(false);\n    }\n\n    apply() {\n        const columnForm = this.columnFormService.currentForm;\n        const columnsArray = <FormArray>this.tableForm.controls.dexihTableColumns;\n\n        if (!this.originalColumn) {\n        columnsArray.push(columnForm);\n        } else {\n        const originalColumn = columnsArray.controls.find(c => c.value.key === columnForm.value.key);\n        originalColumn.setValue(columnForm.value);\n        }\n\n        this.tableForm.markAsDirty();\n    }\n\n    updateColumns() {\n        if (this.tableForm && this.originalColumn) {\n            this.columns = (<DexihTableColumn[]> this.originalColumn.childColumns)\n            .sort((a, b) => a.position - b.position)\n        }\n    }\n\n    navigateToColumn(col: DexihTableColumn) {\n        this.apply();\n        this.changeColumn.emit(col.key);\n    }\n\n    applyExit() {\n        if (this.columnFormService.hasChanged) {\n            this.apply();\n            this.isUpdated.emit(true);\n        }\n    }\n}\n","<d-widget-section title='Edit Column' [showExpandButton]=\"true\">\n<ng-template #sectionHeader>\n        <dexih-invalid-form-details class=\"mr-1\" (click)=\"columnFormService.showErrors()\" [control]=\"columnFormService.currentForm\"></dexih-invalid-form-details>\n        <d-button-dropdown class=\"mr-1\" buttonClass=\"btn-primary\" text=\"Column\">\n            <li *ngFor=\"let col of columns\">\n                <a class=\"dropdown-item\" (click)=\"navigateToColumn(col)\">{{col.columnGroup ? col.columnGroup + \".\" : \"\"}}{{col.name}}</a>\n            </li>\n        </d-button-dropdown>\n        <d-button-apply class=\"mr-1\" [disabled]=\"!columnFormService?.hasChanged\" (click)=\"applyExit()\"></d-button-apply>\n        <d-button-cancel (click)=\"cancel()\"></d-button-cancel>\n</ng-template>\n\n<column-edit-base [columnFormService]=\"columnFormService\" [detailedView]=\"detailedView\"></column-edit-base>\n</d-widget-section>\n\n<table-edit-columns *ngIf=\"columnFormService?.currentForm?.controls.dataType.value === eTypeCode.Node\" [tableForm]='tableForm' [parentColumnForm]=\"columnFormService.currentForm\"></table-edit-columns>\n","export { TableEditPreviewDataComponent } from './table-edit-preview-data.component';\n","import { Component, OnInit, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubService } from '../../../hub.service';\nimport { Subscription} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { DexihConnection, DexihFileFormat, eTypeCode, DexihTable, DexihTableColumn, ConnectionReference } from '../../../../shared/shared.models';\nimport { HubCache, formatTypes } from '../../../hub.models';\nimport { CancelToken } from '../../../../+auth/auth.models';\n\n@Component({\n\n    selector: 'dexih-table-edit-file',\n    templateUrl: './table-edit-file.component.html'\n})\nexport class TableEditFileComponent implements OnInit, OnDestroy {\n    @Input() public connection: DexihConnection;\n    @Input() public isFile = false;\n    @Input() public formService: HubFormsService;\n\n    public hasBaseDropZoneOver = false;\n\n    public updatingTable = false;\n\n    private _subscription: Subscription;\n    public hubCache: HubCache;\n    public fileFormats: DexihFileFormat[];\n\n    filesSubdirectory: string;\n\n    formatTypes = formatTypes;\n    eTypeCode = eTypeCode;\n\n    public cancelToken: CancelToken = new CancelToken();\n\n    constructor(private authService: AuthService,\n        private hubService: HubService) {\n\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = this.hubService.getHubCacheObservable().subscribe(result => {\n                this.hubCache = result;\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Table Edit File');\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    public filesDrop(files: any) {\n        this.doImport(files[0]);\n    }\n\n    public uploadFile(event) {\n        let files = event.srcElement.files;\n        this.doImport(files[0]);\n    }\n\n    public doImport(file: File) {\n\n        if (this.formService.currentForm.value.fileFormat) {\n            this.formService.currentForm.value.fileFormatKey = this.formService.currentForm.value.fileFormat.fileFormatKey;\n        }\n\n        if (file.size > 100000) {\n            if (file.type === 'text/csv' || file.type === 'text/plain') {\n                file = new File([file.slice(0, 100000) ], file.name);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage(`The file size ${file.size}b exceeded the maximum of 100,000b.  Submit a smaller sample file, or a plain text file (which will be trimmed automatically) to proceed.`);\n                return;\n            }\n        }\n\n        const form: FormData = new FormData();\n        form.append('file', file, file.name);\n        form.append('hubKey', this.hubCache.hub.hubKey.toString());\n        form.append('table', this.authService.JsonNoNulls(this.formService.currentForm.value));\n        form.append('connectionKey', this.connection.key.toString());\n        form.append('save', 'false');\n\n        let remoteAgent = this.hubService.getRemoteAgentCurrent();\n\n        this.authService.postFormRemoteGetKey('/api/Hub/ImportFileFormat', form, remoteAgent, this.cancelToken)\n            .then(key => {\n                this.authService.getRemoteData<DexihTable[]>(remoteAgent, key, this.cancelToken, 'download').then(importedTables => {\n                    let importedTable = importedTables[0];\n                    if (importedTable.entityStatus.lastStatus.toString() === 'Error') {\n                        this.hubService.addHubErrorMessage(importedTable.entityStatus.message);\n                    }\n\n                    this.updateColumns(importedTable.dexihTableColumns);\n                });\n\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    import() {\n        this.hubService.importTables([this.formService.currentForm.value], false, this.cancelToken).then(tables => {\n            if (tables && tables.length > 0) {\n                this.updateColumns(tables[0].dexihTableColumns);\n            }\n        }).catch(reason => {\n            if (reason) {\n                this.hubService.addHubMessage(reason);\n            } else {\n                // tslint:disable-next-line:max-line-length\n                this.hubService.addHubErrorMessage('The file upload failed.  This may be due to the file being too large, try making the sample file smaller (headings only) and upload again.')\n            }\n        });\n    }\n\n    updateColumns(columns: DexihTableColumn[]) {\n        let tableColumnsForm = <FormArray>this.formService.currentForm.controls.dexihTableColumns;\n\n        // remove existing columns.\n        const count = tableColumnsForm.controls.length;\n        for (let i = 0; i <= count; i++) {\n            tableColumnsForm.removeAt(0);\n        }\n        columns.filter(c => c.isValid).forEach(column => {\n            tableColumnsForm.push(this.formService.tableColumn(tableColumnsForm.value, column));\n        });\n    }\n}\n","    <form *ngIf=\"formService?.currentForm\" [formGroup]=\"formService.currentForm\" class=\"container\">\n        <ng-template [ngIf]=\"isFile\">\n            <section>\n                <form-input label=\"Files Subdirectory\" formControlName=\"fileRootPath\" placeholder=\"Enter the file path name.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileRootPath\" [note]=\"'Specify the subdirectory.  This will be the connection directory (' + connection.server + ') plus the path specified.'\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-input label=\"File Match Pattern\" formControlName=\"fileMatchPattern\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.fileMatchPattern\" note=\"Specify the file pattern to use to match files when bulk uploading.  Patterns can include wildcards */?, leave blank for all files.\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-checkbox label=\"Auto manage files\" formControlName=\"autoManageFiles\" note=\"Files loaded from the incoming directory, and moved to the processed or rejected directories when they are loaded by a datalink.  If not checked source files will be left untouched after a load.\">\n                </form-checkbox>\n            </section>\n\n            <div *ngIf=\"formService.currentForm.value.autoManageFiles\">\n\n                <section>\n                    <form-checkbox label=\"Specify custom file paths for auto-managed files\" formControlName=\"useCustomFilePaths\" [note]=\"'If custom paths are not specified files will be read/written to the directory: ' + connection.server + '/' + formService.currentForm.value.name + '/'\">\n                    </form-checkbox>\n                </section>\n\n                <div *ngIf=\"formService.currentForm.value.useCustomFilePaths\">\n\n                    <section>\n                        <form-input label=\"Incoming subdirectory\" formControlName=\"fileIncomingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileIncomingPath\" note=\"Specify the sub-directory for incoming files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Outgoing subdirectory\" formControlName=\"fileOutgoingPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileOutgoingPath\" note=\"Specify the sub-directory for outgoing (written) files\">\n                        </form-input>\n                    </section>\n\n                    <section>\n                        <form-input label=\"Processed subdirectory\" formControlName=\"fileProcessedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileProcessedPath\" note=\"Specify the sub-directory for processed files\">\n                        </form-input>\n                    </section>\n                    <section>\n                        <form-input label=\"Rejected subdirectory\" formControlName=\"fileRejectedPath\" placeholder=\"Enter the file path.\" iconClass=\"fa fa-file\"\n                            [errors]=\"formService.formErrors.fileRejectedPath\" note=\"Specify the sub-directory for rejected files\">\n                        </form-input>\n                    </section>\n\n                </div>\n            </div>\n        </ng-template>\n        <section>\n            <form-select label=\"Format Type\" formControlName=\"formatType\" [items]=\"formatTypes\" itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                note='The format of data.'>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Text\">    \n            <form-select label=\"File Format\" formControlName=\"fileFormatKey\" placeholder=\"File Format\" [errors]=\"formService.formErrors.fileFormatKey\"\n                [items]=\"hubCache.hub.dexihFileFormats\" itemKey=\"key\" itemName=\"name\" [enableFilter]=\"false\" note=\"Specify the file format to use, if not specified, a csv (command separated) format will be used.\"\n                [allowNullSelect]=\"true\" selectNullMessage=\"Use default (csv) format\">\n                <a routerLink=\"../fileFormat-new\">(<i class=\"fa fa-sticky-note-o\"></i> New Format )</a>\n            </form-select>\n        </section>\n\n        <section *ngIf=\"formService.currentForm.value.formatType == eTypeCode.Json || formService.currentForm.value.formatType == eTypeCode.Xml\">\n            <form-input label=\"Optional: Web Service Row Path\" formControlName=\"rowPath\" placeholder=\"Enter the row path.\" iconClass=\"fa fa-feed\"\n                [errors]=\"formService.formErrors.rowPath\" note=\"Optional Json Path indicating where a row should be read from.\">\n            </form-input>\n        </section>\n\n        <section>\n            <label class=\"label\">Add a sample file which will be used to determine column names.\n                <a  href=\"javascript:void(0)\" (click)=\"import()\">(<i class=\"fa fa-download\"></i> Import directly from source )</a>\n            </label>\n\n            <div class=\"well my-drop-zone\" dropZone [requireFiles]=\"true\" (dropFiles)=\"filesDrop($event)\" dropAllowedClass=\"nv-file-over\">\n                Drop Sample File Here\n                <div class=\"custom-file w-25 float-right\">\n                    <input type=\"file\" class=\"custom-file-input\" (change)=\"uploadFile($event)\" onclick=\"this.value=null\">\n                    <label class=\"custom-file-label\" for=\"inputGroupFile01\">Choose file</label>\n                </div>\n            </div>\n\n            <br/>\n            <section>\n                <form-input label=\"Max Import Levels\" formControlName=\"maxImportLevels\" placeholder=\"Enter the maximum node levels to query the json structure.\" iconClass=\"fa fa-file\"\n                    [errors]=\"formService.formErrors.maxImportLevels\" note=\"Enter the maximum levels to query the json file.\">\n                </form-input>\n            </section>\n        </section>\n    </form>\n","import { Component, OnInit, OnChanges, OnDestroy, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Subscription, Observable, BehaviorSubject} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, deltaTypes, securityFlags, eCacheStatus } from '../../../hub.models';\nimport { DexihTableColumn, eConnectionPurpose } from '../../../../shared/shared.models';\n\n@Component({\n\n    selector: 'table-edit-columns',\n    templateUrl: './table-edit-columns.component.html',\n})\nexport class TableEditColumnsComponent implements OnInit, OnChanges, OnDestroy {\n    @Input() tableForm: FormGroup;\n    @Input() parentColumnForm: FormGroup;\n\n    private _hubCacheSubscription: Subscription;\n    private _tableFormSubscription: Subscription;\n\n    public entityType = 'Table';\n\n    public canEdit = false;\n    public tableKey: number;\n\n    private hubCache: HubCache;\n    public action: string; // new or edit\n    public pageTitle: string;\n\n    public mainForm: FormGroup;\n\n    private deltaTypes = deltaTypes;\n    private securityFlags = securityFlags;\n    public showBulkEdit = false;\n\n    inputColumns: Array<DexihTableColumn>;\n\n    eConnectionPurpose = eConnectionPurpose;\n\n    columns = [\n        { name: 'position', title: '#', format: ''},\n        { name: 'name', title: 'Column Name', format: '', class: 'nameClass', tooltip: 'description'},\n        { name: 'logicalName', title: 'Logical Name', format: 'Md', footer: 'description', class: 'logicalNameClass'},\n        { name: 'isInput', title: 'Input?', format: 'Boolean'},\n        { name: 'dataType', title: 'Data Type', format: ''},\n        { name: 'allowDbNull', title: 'Null?', format: 'Boolean'},\n        { name: 'deltaType', title: 'Delta Type', format: ''},\n        { name: 'defaultValue', title: 'Default Value', format: ''},\n        { name: 'columnValidation', title: 'Column Validation', format: ''},\n        { name: 'isIncrementalUpdate', title: 'Is Incremental', format: 'Boolean'},\n        { name: 'format', title: 'Format'},\n        { name: 'securityFlag', title: 'Security Flag', format: ''},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar'},\n    ];\n\n    private _columnData = new BehaviorSubject<Array<DexihTableColumn>>(null);\n    columnData: Observable<Array<DexihTableColumn>> = this._columnData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        public formsService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        // load the initial connection from the cache\n        this._hubCacheSubscription = this.hubService.getHubCacheObservable().subscribe(cache => {\n            if (cache && cache.status === eCacheStatus.Loaded) {\n                this.hubCache = cache;\n                this.updateColumnData();\n            }\n        });\n    }\n\n    ngOnChanges() {\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n        if (this.formsService.currentForm) {\n            this._tableFormSubscription = this.formsService.currentForm.controls.dexihTableColumns.valueChanges.subscribe(() => this.updateColumnData());\n        }\n        this.updateColumnData();\n    }\n\n    ngOnDestroy() {\n        if (this._hubCacheSubscription) { this._hubCacheSubscription.unsubscribe(); }\n        if (this._tableFormSubscription) { this._tableFormSubscription.unsubscribe(); }\n    }\n\n    updateColumnData() {\n        if (this.hubCache && this.formsService.currentForm) {\n            let tableData = [];\n\n            let columns: FormArray;\n\n            if (this.parentColumnForm) {\n                columns = <FormArray>this.parentColumnForm.controls.childColumns;\n            } else {\n                columns = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n            }\n\n            columns.controls\n                .filter(c => c.value.isValid)\n                .sort((a, b) => a.value.position - b.value.position)\n                .forEach(column => {\n                    let columnForm = <FormGroup>column;\n                    tableData.push({\n                        key: column.value.key,\n                        position: column.value.position,\n                        name: (column.value.columnGroup ? column.value.columnGroup + '.' : '') + column.value.name,\n                        nameClass: (columnForm.controls.name.valid ? '' : 'dexih-state-error'),\n                        description: column.value.description,\n                        isInput: column.value.isInput,\n                        dataType: this.hubCache.dataTypeToString(column.value),\n                        allowDbNull: column.value.allowDbNull,\n                        logicalName: column.value.logicalName,\n                        logicalNameClass: (columnForm.controls.logicalName.valid ? '' : 'dexih-error-icon'),\n                        deltaType: this.deltaTypes.find(c => c.key === column.value.deltaType).name,\n                        defaultValue: column.value.defaultValue,\n                        columnValidation: this.hubCache.getColumnValidation(column.value.columnValidationKey).name,\n                        isIncrementalUpdate: column.value.isIncrementalUpdate,\n                        format: column.value.format,\n                        securityFlag: this.securityFlags.find(c => c.key === column.value.securityFlag).name,\n                        updateDate: column.value.updateDate,\n                    });\n                });\n            this._columnData.next(tableData);\n        } else {\n            this._columnData.next(null);\n        }\n    }\n\n  deleteColumn(column: DexihTableColumn) {\n      this.deleteSelected([column]);\n  }\n\n  deleteSelected(columns: Array<DexihTableColumn>) {\n      let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n\n    columns.forEach(column => {\n        let index = columnsArray.controls.findIndex(c => c.value.key === column.key);\n        columnsArray.removeAt(index);\n    });\n    // this._columnData.next(this.table.dexihTableColumns.filter(c => c.isValid));\n  }\n\n  newColumn() {\n    this.router.navigate(['column'], { relativeTo: this.route.parent, queryParamsHandling: 'preserve' });\n  }\n\n  editColumn(column: DexihTableColumn) {\n    this.router.navigate(['column', column.key], { relativeTo: this.route.parent, queryParamsHandling: 'preserve' });\n  }\n\n  columnSortChange(items: Array<any>) {\n        let columnsArray = <FormArray>this.formsService.currentForm.controls.dexihTableColumns;\n      let position = 1;\n      items.forEach(c => {\n        let column = <FormGroup>columnsArray.controls.find(control => control.value.key === c.key);\n        column.controls.position.setValue(position++);\n      });\n\n      this.updateColumnData();\n  }\n}\n","<d-widget-section title='Columns' [showExpandButton]=\"true\" [padding]=\"false\">\n    <d-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" (onSortChanged)=\"columnSortChange($event)\"\n        sortColumn=\"position\" [columns]=\"columns\" [dataObservable]=\"columnData\" (rowClick)=\"editColumn($event)\">\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <d-button-delete (click)=\"deleteSelected(items)\" title=\"Delete selected columns\" class=\"mr-1\"></d-button-delete>\n            <d-button iconClass=\"fa fa-th-list\" class=\"mr-1\" (click)=\"showBulkEdit=!showBulkEdit\">\n                {{showBulkEdit ? 'Hide Bulk Edit' : 'Show Bulk Edit'}} </d-button>\n        </ng-template>\n\n        <ng-template #tableHeader let-items=\"items\">\n            <column-edit-bulk *ngIf=\"formsService.currentForm && showBulkEdit && items.length > 0\" [columns]=\"items\"\n                [columnsFormArray]=\"formsService.currentForm.controls.dexihTableColumns\" (updated)=\"showBulkEdit = false\" class=\"mr-1\"></column-edit-bulk>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <d-button-new (click)=\"newColumn()\" title=\"Create a new column\" class=\"mr-1\"></d-button-new>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\" class=\"mr-1\">\n            <d-button-edit (click)=\"editColumn(item)\" title=\"Edit selected column\" class=\"mr-1\"></d-button-edit>\n        </ng-template>\n\n    </d-table>\n\n</d-widget-section>","\nimport { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule } from '../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TableEditPropertiesComponent } from './table-edit/table-edit-properties/table-edit-properties.component';\nimport { TableEditColumnsComponent } from './table-edit//table-edit-columns/table-edit-columns.component';\nimport { TableEditFileComponent } from './table-edit/table-edit-file/table-edit-file.component';\nimport { TableEditRestComponent } from './table-edit/table-edit-rest/table-edit-rest.component';\nimport { TableEditInputColumnComponent } from './table-edit//table-edit-rest/table-edit-input-column.component';\nimport { HubSharedModule } from '../hub.shared.module';\nimport { TableEditPreviewDataComponent } from './table-edit//table-edit-preview-data';\nimport { ColumnEditComponent, ColumnEditBaseComponent } from './column-edit';\nimport { ColumnEditBulkComponent } from './table-edit/column-edit-bulk/column-edit-bulk.component';\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ],\n    exports: [\n      TableEditPropertiesComponent,\n      TableEditColumnsComponent,\n      TableEditFileComponent,\n      TableEditRestComponent,\n      TableEditInputColumnComponent,\n      TableEditPreviewDataComponent,\n      ColumnEditComponent, ColumnEditBaseComponent,\n      ColumnEditBulkComponent\n    ]\n})\nexport class TableSharedModule {\n    static forRoot(): ModuleWithProviders<TableSharedModule> {\n        return {\n            ngModule: TableSharedModule,\n        };\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport {  deltaTypes, securityFlags, HubCache } from '../../../hub.models';\nimport { FormsService } from '../../../../shared/forms/forms.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { columnDateFormats, columnNumberFormats, columnTimeFormats, TypeCodes } from '../../../hub.remote.models';\nimport { DexihTableColumn } from '../../../../shared/shared.models';\nimport { HubService } from '../../../hub.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n    selector: 'column-edit-bulk',\n    templateUrl: 'column-edit-bulk.component.html'\n})\n\nexport class ColumnEditBulkComponent implements OnInit, OnDestroy {\n    @Input() columns: DexihTableColumn[];\n    @Input() columnsFormArray: FormArray;\n\n    @Output() updated = new EventEmitter();\n\n    subscription: Subscription;\n\n    public properties = [\n        {name: 'Group Name', property: 'group'},\n        {name: 'Data Type', property: 'dataType'},\n        {name: 'Delta Type', property: 'deltaType'},\n        {name: 'Format', property: 'format'},\n        {name: 'Security Flag', property: 'securityFlag'},\n        {name: 'Default Value', property: 'defaultValue'},\n        {name: 'Validation Rule', property: 'validationRule'},\n        {name: 'Allow DbNull', property: 'allowDbNull'},\n        {name: 'Is Input', property: 'isInput'},\n        {name: 'Is Unicode', property: 'isUnicode'},\n    ];\n\n    hubCache: HubCache;\n    property: string;\n    bulkColumn: FormGroup;\n    typeCodes = TypeCodes;\n    deltaTypes = deltaTypes;\n    securityFlags = securityFlags;\n    formats = columnNumberFormats.concat(columnDateFormats.concat(columnTimeFormats));\n\n    constructor(private hubService: HubService,\n        private formsService: HubFormsService) { }\n\n    ngOnInit() {\n        this.bulkColumn = this.formsService.tableColumn([], new DexihTableColumn());\n\n        this.subscription = this.hubService.getHubCacheObservable().subscribe(hubCache => {\n            this.hubCache = hubCache;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {this.subscription.unsubscribe(); }\n    }\n\n    getColumnForm(column: DexihTableColumn): FormGroup {\n        return <FormGroup> this.columnsFormArray.controls.find((c: FormGroup) => c.controls.key.value === column.key);\n    }\n\n    applyBulkEdit() {\n\n        let bulkColumn = <DexihTableColumn> this.bulkColumn.value;\n\n        if(this.columnsFormArray) {\n            this.columns.forEach(column => {\n                let columnForm = this.getColumnForm(column);\n                if (!columnForm) { return; }\n\n                switch (this.property) {\n                    case 'group':\n                        columnForm.controls.columnGroup.setValue(bulkColumn.columnGroup);\n                        break;\n                    case 'dataType':\n                        columnForm.controls.dataType.setValue(bulkColumn.dataType);\n                        columnForm.controls.maxLength.setValue(bulkColumn.maxLength);\n                        columnForm.controls.rank.setValue(bulkColumn.rank);\n                        columnForm.controls.precision.setValue(bulkColumn.precision);\n                        columnForm.controls.scale.setValue(bulkColumn.scale);\n                        break;\n                    case 'deltaType':\n                        columnForm.controls.deltaType.setValue(bulkColumn.deltaType);\n                        break;\n                    case 'format':\n                        columnForm.controls.format.setValue(bulkColumn.format);\n                        break;\n                    case 'securityFlag':\n                        columnForm.controls.securityFlag.setValue(bulkColumn.securityFlag);\n                        break;\n                    case 'defaultValue':\n                        columnForm.controls.defaultValue.setValue(bulkColumn.defaultValue);\n                        break;\n                    case 'validationRule':\n                        columnForm.controls.columnValidationKey.setValue(bulkColumn.columnValidationKey);\n                        break;\n                    case 'allowDbNull':\n                        columnForm.controls.allowDbNull.setValue(bulkColumn.allowDbNull);\n                        break;\n                    case 'isUnicode':\n                        columnForm.controls.isUnicode.setValue(bulkColumn.isUnicode);\n                        break;\n                    case 'isInput':\n                        columnForm.controls.isInput.setValue(bulkColumn.isInput);\n                        break;\n                }\n            });\n        } else {\n            this.columns.forEach(column => {\n                switch (this.property) {\n                    case 'group':\n                        column.columnGroup = bulkColumn.columnGroup;\n                        break;\n                    case 'dataType':\n                        column.dataType = bulkColumn.dataType;\n                        column.maxLength = bulkColumn.maxLength;\n                        column.rank = bulkColumn.rank;\n                        column.precision = bulkColumn.precision;\n                        column.scale = bulkColumn.scale;\n                        break;\n                    case 'deltaType':\n                        column.deltaType = bulkColumn.deltaType;\n                        break;\n                    case 'format':\n                        column.format = bulkColumn.format;\n                        break;\n                    case 'securityFlag':\n                        column.securityFlag = bulkColumn.securityFlag;\n                        break;\n                    case 'defaultValue':\n                        column.defaultValue = bulkColumn.defaultValue;\n                        break;\n                    case 'validationRule':\n                        column.columnValidationKey = bulkColumn.columnValidationKey;\n                        break;\n                    case 'allowDbNull':\n                        column.allowDbNull = bulkColumn.allowDbNull;\n                        break;\n                    case 'isUnicode':\n                        column.isUnicode = bulkColumn.isUnicode;\n                        break;\n                    case 'isInput':\n                        column.isInput = bulkColumn.isInput;\n                        break;\n                }\n            });\n        }\n\n        this.updated.emit();\n\n      }\n\n      cancel() {\n          this.updated.emit();\n      }\n\n      setAllowDbNull(value: boolean) {\n        this.columns.forEach(column => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n                columnForm.controls.allowDbNull.setValue(value);\n            } else {\n                column.allowDbNull = value\n            }\n        });\n      }\n\n      setIsInput(value: boolean) {\n        this.columns.forEach(column  => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n            columnForm.controls.isInput.setValue(value);\n            } else {\n                column.isInput = value\n            }\n        });\n      }\n\n      setIsUnicode(value: boolean) {\n        this.columns.forEach(column  => {\n            if (this.columnsFormArray) {\n                let columnForm = this.getColumnForm(column);\n            columnForm.controls.isUnicode.setValue(value);\n            } else {\n                column.isUnicode = value\n            }\n        });\n      }\n}\n","<d-widget title=\"Update columns\" headerClass=\"text-white bg-primary\">\n<form [formGroup]=\"bulkColumn\">\n    <section class=\"form-group col-md-4\">\n        <form-select label=\"Property\" [(ngModel)]=\"property\" [ngModelOptions]=\"{standalone: true}\" [items]=\"properties\" itemKey=\"property\"\n            itemName=\"name\">\n        </form-select>\n    </section>\n    <div *ngIf=\"property=='dataType'\">\n        <section class=\"form-group col-md-4\">\n            <form-select label=\"Data Type\" formControlName=\"dataType\" [items]=\"typeCodes\" itemKey=\"key\"\n                itemName=\"name\">\n            </form-select>\n        </section>\n        <section class=\"form-group col-md-2\">\n            <form-input type=\"number\" label=\"Array Dimensions\" formControlName=\"rank\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isString\" class=\"form-group col-md-6\">\n            <form-input label=\"Max Length\" formControlName=\"maxLength\" placeholder=\"Max Length\"\n                type=\"number\" note=\"Maximum string length (blank for unlimited)\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Precision\" formControlName=\"precision\" placeholder=\"Precision\"\n                type=\"number\">\n            </form-input>\n        </section>\n        <section *ngIf=\"bulkColumn.value.isNumber\" class=\"form-group col-md-3\">\n            <form-input label=\"Scale\" formControlName=\"scale\" placeholder=\"Scale\" type=\"number\">\n            </form-input>\n        </section>\n    </div>\n\n    <div *ngIf=\"property=='group'\" >\n            <section class=\"form-group col-md-6\">\n        <form-input label=\"Group\" formControlName=\"columnGroup\" placeholder=\"Enter a column group name\"\n            iconClass=\"fa fa-list\"\n            note=\"The group column grouping, used to distinguish duplicate column names when applying to structured data (such as json).\">\n        </form-input>\n            </section>\n    </div>\n    <div *ngIf=\"property=='format'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Format\" formControlName=\"format\" [items]=\"formats\" [enableTextEntryMatch]=\"false\" [enableTextEntry]=\"true\"  [allowNullSelect]=\"true\" selectNullMessage=\"No Format\"\n                itemKey=\"value\" itemName=\"name\" note=\"The display format of the column.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='securityFlag'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Security Flag\" formControlName=\"securityFlag\" [items]=\"securityFlags\"\n                itemKey=\"key\" itemName=\"name\" note=\"How to secure this column when reading data.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='deltaType'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Delta Type\" formControlName=\"deltaType\" [items]=\"deltaTypes\"\n                itemKey=\"key\" itemName=\"name\"\n                note=\"How to treat the column when used to update target table.\">\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='defaultValue'\" >\n        <section class=\"form-group col-md-6\">\n            <form-input label=\"Default Value\" formControlName=\"defaultValue\" placeholder=\"Default Value\"\n                note=\"Default value if unmapped or null.\">\n            </form-input>\n        </section>\n    </div>\n    <div *ngIf=\"property=='validationRule'\" >\n        <section class=\"form-group col-md-6\">\n            <form-select label=\"Validation Rule\" formControlName=\"columnValidationKey\"\n                [allowNullSelect]=\"true\" [items]=\"hubCache?.hub.dexihColumnValidations\" itemKey=\"key\"\n                itemName=\"name\" note=\"Validation rule to apply.\">\n                <columnValidation-edit-button [key]=\"bulkColumn.controls.columnValidationKey.value\"></columnValidation-edit-button>\n            </form-select>\n        </section>\n    </div>\n    <div *ngIf=\"property=='allowDbNull'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Allow Nulls\" formControlName=\"allowDbNull\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isInput'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is an Input Column\" formControlName=\"isInput\"></form-checkbox>\n        </section>\n    </div>\n    <div *ngIf=\"property=='isUnicode'\">\n        <section class=\"form-group col-md-6\">\n            <form-checkbox label=\"Is Unicode\" formControlName=\"isUnicode\"></form-checkbox>\n        </section>\n    </div>\n</form>\n    <ng-template #footer>\n        <d-button-apply class=\"mr-1\" (click)=\"applyBulkEdit()\"></d-button-apply>\n        <d-button-cancel class=\"mr-1\" (click)=\"cancel()\"></d-button-cancel>\n    </ng-template>\n</d-widget>\n\n\n\n\n\n"],"sourceRoot":"webpack:///"}