{"version":3,"sources":["webpack:///src/app/shared/ui/sharedData/sharedData.component.html","webpack:///src/app/shared/ui/sharedData/sharedData.component.ts","webpack:///src/app/shared/ui/sharedData/input-parameters-view/input-parameters-view.component.html","webpack:///src/app/shared/ui/sharedData/input-parameters-view/input-parameters-view.component.ts","webpack:///src/app/shared/ui/sharedData/preview-data/preview-data.component.html","webpack:///src/app/shared/ui/sharedData/preview-data/preview-data.component.ts","webpack:///src/app/shared/ui/sharedData/preview-dashboard/preview-dashboard-item.component.html","webpack:///src/app/shared/ui/sharedData/preview-dashboard/preview-dashboard-item.component.ts","webpack:///src/app/shared/ui/sharedData/preview-dashboard/preview-dashboard.component.html","webpack:///src/app/shared/ui/sharedData/preview-dashboard/preview-dashboard.component.ts","webpack:///src/app/shared/ui/sharedData/preview/preview.component.html","webpack:///src/app/shared/ui/sharedData/preview/preview.component.ts"],"names":["$event","SharedDataComponent","authService","route","router","fb","cancelToken","eDownloadFormat","columns","name","title","header","footer","format","tags","enum","dataIndex","this","_subscription","combineLatest","params","getHubsObservable","subscribe","result","hubs","hubKeys","map","c","hubKey","searchForm","group","updateSearch","_searchSubscription","unsubscribe","valueChanges","pipe","debounceTime","e","dexihMessage","addErrorMessage","message","cancel","getSharedDataIndex","value","searchString","then","filter","objectType","DashboardItem","forEach","item","length","tag","findIndex","push","catch","reason","addMessage","navigate","Dashboard","objectKey","relativeTo","parent","embedLink","window","location","origin","embedFrame","document","body","scrollTop","documentElement","sharedItems","zipFiles","downloadFormat","downloadData","addSuccessMessage","Datalink","Table","View","previewData","InputParametersViewComponent","onChange","onRefreshData","parentParams","values","requiresRefresh","showRefresh","isRefreshing","userParameters","parameters","isValid","allowUserSelect","parameter","listOfValuesKey","items","rank","key","valueDesc","_refreshSubscription","refreshEvent","_hubSubscription","previewListOfValues","addUpdateNotification","finally","emit","PreviewDataComponent","showToolbar","updateQueryParameters","isMaximized","onMaximize","refreshDataSubject","Subject","selectQuery","showChart","eViewType","getSharedDataObject","queryParams","object","inputColumns","tableColumns","outputColumns","p","paramValues","JSON","parse","undefined","refresh","navigateUp","searchParams","URLSearchParams","search","set","stringify","newRelativePathQuery","pathname","toString","history","pushState","parentParameters","next","baseData","data","viewConfig","viewType","Chart","status","sharedData","query","PreviewDashboardItemComponent","eDataObjectType","maximize","PreviewDashboardComponent","dashboard","dashboardKey","getDashboard","setOptions","options","gridType","ScrollVertical","compactType","None","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","mobileBreakpoint","minCols","maxCols","minRows","maxRows","maxItemCols","minItemCols","maxItemRows","minItemRows","maxItemArea","minItemArea","defaultItemCols","defaultItemRows","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","scrollSensitivity","scrollSpeed","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","enabled","resizable","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","disableWindowResize","disableWarnings","scrollToNewItems","itemChangeCallback","itemComponent","itemResize","itemResizeCallback","itemInitCallback","index","maximizedIndex","close","PreviewComponent","embed"],"mappings":"qaAQgB,oBAAyC,0DAAqB,QAC9D,kBAAyB,eAAO,OAClC,Q,uCAJN,kCACI,yCAKA,kBACI,2BACa,uEACT,eAAmD,iBAAM,OAC7D,OACJ,OACA,kBACI,2BAC+B,wEAAyB,OAC5D,OACJ,O,uBAhB8D,4BAO1B,4BAAiB,iBAAjB,CAAiB,gBAAjB,CAAiB,cAAjB,CAAiB,uBAEtC,sCAIgC,4BAAiB,iBAAjB,CAAiB,gBAAjB,CAAiB,cAAjB,CAAiB,yB,uCAiBxD,+BACI,8EAAqB,Q,wFAHzB,kCAEA,qCAEA,0BAA+E,0EAAsC,O,gCAJ/F,+DAEH,4E,yBAQf,iBACI,gCAGJ,Q,qBAHmE,6BAAc,oB,yBAFrF,kBACI,uBAKA,iBACI,wBAEJ,OACJ,Q,oBAVM,+BACG,6B,wDAgBT,6BAA8B,mFAAgC,EAAMA,MAAS,QC9CtF,Y,MAAMC,EAyBT,YAAoBC,EACRC,EACAC,EACAC,GAHQ,KAAAH,cACR,KAAAC,QACA,KAAAC,SACA,KAAAC,KAtBJ,KAAAC,YAAc,IAAI,IAE1B,KAAAC,gBAAkB,KASlB,KAAAC,QAAU,CACN,CAAEC,KAAM,cAAeC,MAAO,UAAWC,OAAQ,UAAWC,OAAQ,cAAeC,OAAQ,KAAMC,KAAM,QACvG,CAAEL,KAAM,aAAcC,MAAO,OAAQG,OAAQ,OAAQE,KAAM,MAC3D,CAAEN,KAAM,aAAcC,MAAO,gBAAiBG,OAAQ,aAGnD,KAAAG,UAA0B,KAOjC,WACI,IACIC,KAAKC,cAAgB,OAAAC,EAAA,GACjBF,KAAKd,MAAMiB,OACXH,KAAKf,YAAYmB,qBACnBC,UAAUC,IAERN,KAAKO,KAAOD,EAAO,GAEfN,KAAKO,OACLP,KAAKQ,QAAUR,KAAKO,KAAKE,IAAIC,GAAKA,EAAEC,SAGxCX,KAAKY,WAAaZ,KAAKZ,GAAGyB,MAAM,CAC5B,aAAgB,CAAC,GAAI,IAErB,QAAW,CAAC,GAAI,MAIpBb,KAAKc,eAEDd,KAAKe,qBAAuBf,KAAKe,oBAAoBC,cACzDhB,KAAKe,oBAAsBf,KAAKY,WAAWK,aACtCC,KAAK,OAAAC,EAAA,GAAa,MAClBd,UAAU,KACPL,KAAKc,mBAGnB,MAAOM,GACLpB,KAAKqB,aAAaC,gBAAgBF,EAAEG,UAI5C,cACQvB,KAAKC,eAAiBD,KAAKC,cAAce,cAC7ChB,KAAKX,YAAYmC,SAGrB,eAEIxB,KAAKf,YAAYwC,mBAAmBzB,KAAKY,WAAWc,MAAMC,aADlC3B,KAAKY,WAAWc,MAAMlB,QACmC,IAAI,GAAMoB,KAAKtB,IAE5FN,KAAKD,UAAYO,EAAOuB,OAAOnB,GAAKA,EAAEoB,aAAe,KAAgBC,eAErE/B,KAAKH,KAAO,GACZG,KAAKD,UAAUiC,QAAQC,IACfA,EAAKpC,MAAQoC,EAAKpC,KAAKqC,OAAS,GAChCD,EAAKpC,KAAKmC,QAAQG,IACVnC,KAAKH,KAAKuC,UAAU1B,GAAKA,EAAElB,OAAS2C,EAAI3C,MAAQ,GAChDQ,KAAKH,KAAKwC,KAAKF,SAMhCG,MAAMC,GAAUvC,KAAKqB,aAAamB,WAAWD,IAGpD,YAAYN,GAEJjC,KAAKb,OAAOsD,SADZR,EAAKH,aAAe,KAAgBY,UACf,CAAC,mBAAoBT,EAAKtB,OAAQsB,EAAKU,WAEvC,CAAC,UAAWV,EAAKtB,OAAQsB,EAAKH,WAAYG,EAAKU,WAFI,CAAEC,WAAY5C,KAAKd,MAAM2D,SAMzG,MAAMZ,GAGEjC,KAAK8C,UADLb,EAAKH,aAAe,KAAgBY,UAEpC,GAAGK,OAAOC,SAASC,wCAAwChB,EAAKtB,UAAUsB,EAAKH,cAAcG,EAAKU,uBAGlG,GAAGI,OAAOC,SAASC,+BAA+BhB,EAAKtB,UAAUsB,EAAKH,cAAcG,EAAKU,uBAG7F3C,KAAKkD,WAAa,yCAAyClD,KAAK8C,wCAEhEK,SAASC,KAAKC,UAAY,EAC1BF,SAASG,gBAAgBD,UAAY,EAGzC,aAAaE,EAAgCC,EAAmBC,GAC5DzD,KAAKf,YAAYyE,aAAaH,EAAaC,EAAUC,EAAgBzD,KAAKX,aAAauC,KAAK,KACxF5B,KAAKqB,aAAasC,kBAAkB,oCACrCrB,MAAMC,IACLvC,KAAKqB,aAAamB,WAAWD,KAIrC,KAAKN,GACD,OAAQA,EAAKH,YACT,KAAK,KAAgB8B,SACjB5D,KAAKb,OAAOsD,SAAS,CAAC,MAAOR,EAAKtB,OAAQ,YAAa,gBAAiB,OAAQsB,EAAKU,YACrF,MACJ,KAAK,KAAgBkB,MACjB7D,KAAKb,OAAOsD,SAAS,CAAC,MAAOR,EAAKtB,OAAQ,SAAU,aAAcsB,EAAKU,YACvE,MACJ,KAAK,KAAgBmB,KACjB9D,KAAKb,OAAOsD,SAAS,CAAC,MAAOR,EAAKtB,OAAQ,QAAS,YAAasB,EAAKU,YACrE,MACJ,KAAK,KAAgBD,UACjB1C,KAAKb,OAAOsD,SAAS,CAAC,MAAOR,EAAKtB,OAAQ,aAAc,iBAAkBsB,EAAKU,c,6CArIlF3D,GAAmB,0C,uBAAnBA,EAAmB,mD,MAAA,K,y+CDdhC,gBACI,gBACI,+BACJ,OAEA,yBACI,wCAkBA,wBAMI,oCAAY,EAAA+E,YAAA,MAGZ,qCASA,qCAcA,0CAGA,wCAgBJ,OACJ,OACJ,Q,MAvE8B,iCAmBlB,qCAA0B,yBAA1B,CAA0B,oBAA1B,CAA0B,kBAA1B,CAA0B,oBAA1B,CAA0B,mBAA1B,CAA0B,iB,0GCX/B,G,uDCZC,wBAAgF,6EAA6B,wFAA7B,CAA6B,sFAM7G,O,2CANmD,yBAA4B,kBAA5B,CAA4B,wBAA5B,CAA4B,yCAA5B,CAA4B,gCAA5B,CAA4B,oCAA5B,CAA4B,sCAA5B,CAA4B,2B,uCAO/E,uBAAmF,6EAA6B,yFAEhH,O,iCAFsD,yBAA4B,oB,yBARtF,gBACI,8BAOA,6BAGJ,Q,yBAViB,yCAOD,6C,yBATpB,gBACI,sBAYJ,Q,oBAZS,0C,uCAaT,gBACI,eAAgD,gEAAwB,yDAC5D,OAChB,QCPO,Y,MAAMC,EAyBT,YAAoB/E,GAAA,KAAAA,cAnBV,KAAAgF,SAAW,IAAI,IACf,KAAAC,cAAgB,IAAI,IAKvB,KAAAC,aAAyB,GACzB,KAAAC,OAA6B,GAG7B,KAAA/E,YAA2B,IAAI,IAI/B,KAAAgF,iBAAkB,EAElB,KAAAC,aAAc,EACd,KAAAC,cAAe,EAItB,WACIvE,KAAKwE,eAAiB,GACtBxE,KAAKyE,WAAW5C,OAAOnB,GAAKA,EAAEgE,SAAWhE,EAAEiE,iBAAiB3C,QAAS4C,IACjEA,EAAmB,QAAI,CAACN,YAAaM,EAAUC,gBAAkB,EAAGN,cAAc,EAAOO,MAAO,IAC5FF,EAAUlD,OAASkD,EAAUC,iBAAsC,IAAnBD,EAAUG,OAC1DH,EAAmB,QAAEE,MAAQ,CAAC,CAACE,IAAKJ,EAAUlD,MAAOlC,KAAMoF,EAAUK,aAGzEjF,KAAKwE,eAAenC,KAAKuC,KAG7B5E,KAAKkF,qBAAuBlF,KAAKmF,aAAa9E,UAAU,KACpDL,KAAKqE,iBAAkB,IAI/B,cACQrE,KAAKoF,kBAAoBpF,KAAKoF,iBAAiBpE,cAC/ChB,KAAKkF,sBAAwBlF,KAAKkF,qBAAqBlE,cAG/D,QAAQ4D,GACCA,EAAUC,kBACfD,EAAmB,QAAEL,cAAe,EACpCvE,KAAKf,YAAYoG,oBAAoBrF,KAAKW,OAAQX,KAAK2C,UAAW3C,KAAK8B,WACnE8C,EAAUpF,MAAM,EAAOQ,KAAKX,aAAauC,KAAKtB,IAC9CsE,EAAmB,QAAEE,MAAQxE,EAC7BsE,EAAmB,QAAEN,aAAc,IACpChC,MAAMC,IACLvC,KAAKf,YAAYqG,sBAAsB/C,GAAQ,KAChDgD,QAAQ,KACPX,EAAmB,QAAEL,cAAe,KAI5C,cACIvE,KAAKkE,cAAcsB,OAGvB,OAAOZ,GACCA,EAAUC,gBAAkB,EAC5B7E,KAAKiE,SAASuB,OAEdxF,KAAKqE,iBAAkB,G,6CAtEtBL,GAA4B,Y,uBAA5BA,EAA4B,+hCDVzC,sBAcA,uB,MAdK,0BAcA,yC,0DCJE,G,yGCAa,iBAEI,mBACI,mBACI,2DAAqB,KADzB,OAEA,eACJ,OACA,mBACI,mBACI,2DAAqB,KADzB,OAEA,eACJ,OACJ,O,wBAVmC,mDAKA,oD,uCAOnC,0BACiD,8DACjD,Q,uCACA,0BACiD,8DACjD,Q,uCAGJ,iBACI,mCAEI,qEAA2B,mEAAgC,OACnE,O,wBAH2B,gCAAiB,0BAAjB,CAAiB,wBAAjB,CAAiB,8BAAjB,CAAiB,qD,uCAK5C,iBACI,4BACwB,qEAA2B,2DACnD,OACJ,O,wBAHoB,4BAAkB,eAAlB,CAAkB,2CAAlB,CAAkB,oBAAlB,CAAkB,sBAAlB,CAAkB,gB,uCAvCtD,gBACI,gBACI,gBACI,cACJ,OACA,gBACI,gBACI,cACI,6BAAiB,sEAAkC,OAEnD,uBAaA,kCAAoD,4DAAoB,OACxE,iCAGA,iCAGJ,OAEA,wBAMA,wBAKJ,OACJ,OACJ,OACJ,O,uBApCyB,yFAa8B,2BACrB,oCAGA,mCAKb,iEAMA,+C,sBAWrB,iBACI,iBAAiC,mCACrC,Q,uCAGI,iBACI,mBACI,mBAAoE,2DAAqB,KAAzF,OACA,eACJ,OACA,mBACI,mBAAoE,2DAAqB,KAAzF,OACA,eACJ,OACJ,O,wBARmC,mDAIA,oD,uCAMnC,iBACI,mCACqF,qEAA2B,mEAEhH,OACJ,O,wBAJ2B,gCAAiB,0BAAjB,CAAiB,wBAAjB,CAAiB,8BAAjB,CAAiB,qD,uCAM5C,cACI,4BACwB,qEAA2B,2DACnD,OACJ,O,wBAHoB,4BAAkB,eAAlB,CAAkB,2CAAlB,CAAkB,oBAAlB,CAAkB,sBAAlB,CAAkB,gB,yBApB1C,iBACI,uBAWA,uBAOA,uBAKJ,Q,oBAvBS,sEAWA,iEAOA,+C,2DAUD,yBAGI,yCAGA,yCAGJ,Q,qBATgC,6BAA2B,mBAA3B,CAA2B,qBAA3B,CAA2B,kBAA3B,CAA2B,oBAA3B,CAA2B,gB,wBAW3D,wB,qBAA8B,sBAAmB,oBAAnB,CAAmB,cAAnB,CAAmB,oC,yBAdzD,iBACI,iBAEI,+BAWA,8BAGJ,OACJ,Q,oBAfqB,kCAWD,kCC/Eb,Y,MAAMyB,EAqCT,YACYxG,EACAC,GADA,KAAAD,cACA,KAAAC,QAlCI,KAAAwG,aAAc,EACd,KAAAC,uBAAwB,EAC/B,KAAAC,aAAc,EACb,KAAAC,WAAa,IAAI,IAInB,KAAAC,mBAAoC,IAAIC,EAAA,EAWzC,KAAAvG,KAAO,aAGd,KAAAwG,YAA2B,IAAI,IAKxB,KAAAC,WAAY,EAEZ,KAAAC,UAAY,KAEX,KAAA7G,YAAc,IAAI,IAO1B,WACI,IACIW,KAAKC,cAAgB,OAAAC,EAAA,GACjBF,KAAKf,YAAYkH,oBAAoBnG,KAAKW,OAAQX,KAAK8B,WAAY9B,KAAK2C,WACxE3C,KAAKd,MAAMkH,aACb/F,UAAUC,IACR,IAAI+F,EAAS/F,EAAO,GAChB8F,EAAc9F,EAAO,GAEzB,GAAc,MAAV+F,EAAgB,CAChBrG,KAAKsG,aAAeD,EAAOC,aAC3BtG,KAAKuG,aAAeF,EAAOG,cAC3BxG,KAAKyE,WAAa4B,EAAO5B,WACzBzE,KAAKwE,eAAiBxE,KAAKyE,WAE3B,IAAIgC,EAAIL,EAAe,EACvB,GAAIK,EAAG,CACH,IAAIC,EAAcC,KAAKC,MAAMH,GAE7B,IAAK,IAAI7B,KAAa5E,KAAKwE,eAAgB,CACvC,IAAI9C,EAAQgF,EAAY9B,EAAUpF,WACpBqH,IAAVnF,IACAkD,EAAUlD,MAAQA,EACK,IAAnBkD,EAAUG,OACVH,EAAUK,UAAYvD,WAMtC1B,KAAKyE,WAAa,GAGtBzE,KAAK8G,YAEX,MAAO1F,GACLpB,KAAKf,YAAYqG,sBAAsBlE,GAAG,IAIlD,cACQpB,KAAKC,eAAiBD,KAAKC,cAAce,cAC7ChB,KAAKX,YAAYmC,SAGrB,QACIxB,KAAKf,YAAY8H,aAGd,kBAEH,GAAI/G,KAAK2F,uBAAyB3F,KAAKwE,eAAetC,OAAS,EAAG,CAC9D,IAAIuC,EAAa,GACjB,IAAK,IAAIG,KAAa5E,KAAKwE,eACvBC,EAAWG,EAAUpF,MAAQoF,EAAUlD,MAG3C,GAAI,oBAAqBqB,OAAQ,CAC7B,IAAIiE,EAAe,IAAIC,gBAAgBlE,OAAOC,SAASkE,QACvDF,EAAaG,IAAI,IAAKR,KAAKS,UAAU3C,IACrC,IAAI4C,EAAuBtE,OAAOC,SAASsE,SAAW,IAAMN,EAAaO,WACzEC,QAAQC,UAAU,KAAM,GAAIJ,IAIpCrH,KAAK8G,UAGF,UACH9G,KAAKf,YAAY8E,YAAY/D,KAAKW,OAAQX,KAAK2C,UAAW3C,KAAK8B,WAAY9B,KAAKsG,aAActG,KAAKgG,YAC/FhG,KAAKyE,WAAYzE,KAAK0H,iBAAkB1H,KAAKX,aAAauC,KAAMtB,IAC5DN,KAAK8F,mBAAmB6B,OACxB3H,KAAKT,QAAUe,EAAOf,QACtBS,KAAK4H,SAAWtH,EAAOuH,KACvB7H,KAAKR,KAAOc,EAAOd,KACnBQ,KAAK8H,WAAaxH,EAAOwH,WACpB9H,KAAK8H,aACN9H,KAAK6H,KAAO7H,KAAK4H,UAGjB5H,KAAKiG,aADLjG,KAAK8H,YAAc9H,KAAK8H,WAAWC,WAAa,KAAUC,OAM1D1H,EAAO2H,QAEPjI,KAAKf,YAAYqG,sBAAsBhF,EAAO2H,QAAQ,KAE3D3F,MAAMC,IACLvC,KAAKf,YAAYqG,sBAAsB/C,GAAQ,GAC/CvC,KAAK4H,SAAW,GAChB5H,KAAK6H,KAAO,GACZ7H,KAAKR,KAAO,WAIjB,aAAaI,GAChB,IAAIsI,EAAa,IAAI,IACrBA,EAAWvF,UAAY3C,KAAK2C,UAC5BuF,EAAWpG,WAAa9B,KAAK8B,WAC7BoG,EAAWvH,OAASX,KAAKW,OACzBuH,EAAW5B,aAAetG,KAAKsG,aAC/B4B,EAAWzD,WAAazE,KAAKyE,WAC7ByD,EAAWR,iBAAmB1H,KAAK0H,iBACnCQ,EAAWC,MAAQnI,KAAKgG,YAExBhG,KAAKf,YAAYyE,aAAa,CAACwE,IAAa,EAAMtI,EAAQI,KAAKX,aAAauC,KAAK,KAC7E,IAAIL,EAAU,IAAI,KAAQ,EAAM,iCAAkC,KAAM,MACxEvB,KAAKf,YAAYqG,sBAAsB/D,GAAS,KACjDe,MAAMC,IACLvC,KAAKf,YAAYqG,sBAAsB/C,GAAQ,KAIhD,WACHvC,KAAK4F,aAAc,EACnB5F,KAAK6F,WAAWL,MAAK,GAGlB,WACHxF,KAAK4F,aAAc,EACnB5F,KAAK6F,WAAWL,MAAK,I,6CApKhBC,GAAoB,sB,uBAApBA,EAAoB,09EDdjC,uBAiDA,sBAIA,sBA0BA,uB,MA/EK,2BAiDA,6BAIA,gDA0BkB,8B,oECjEhB,G,wDCZH,gBACI,gBACI,YAAG,QAAa,OACpB,OACJ,Q,oBAFW,2B,0BAIX,gBACI,gBACI,mBACJ,OACJ,Q,oBAFgB,yCCAb,a,MAAM2C,EAST,cALS,KAAAxC,aAAc,EAEb,KAAAC,WAAa,IAAI,IAE3B,KAAAwC,gBAAkB,KAGlB,YAgBO,SAAStJ,GACZiB,KAAK6F,WAAWL,KAAKzG,I,6CA5BhBqJ,I,uBAAAA,EAA6B,2eDV1C,gBAEI,uBAMA,uBAMA,+BAEA,gBACI,yBAEI,sCAAc,EAAAE,SAAA,MAAkB,OACxC,OACJ,Q,MAnBS,mCAMA,wCASa,gCAAiB,sCAAjB,CAAiB,6CAAjB,CAAiB,uBAAjB,CAAiB,oB,8PCPhC,G,kECHK,iCAAsB,4DAAkC,OACxD,8BAAiC,yDAAiB,Q,wCAGtD,gBACI,mCAA0L,oEAA2B,kEAAgC,OACzP,O,uBAD2B,gCAAiB,yCAAjB,CAAiB,2BAAjB,CAAiB,0BAAjB,CAAiB,qD,iJAO5B,2BAGI,oCAAwF,uFACxF,OACJ,O,gDALe,gDAAgF,2CAAhF,CAAgF,oDAGnE,gCAAiB,SAAjB,CAAiB,kC,0BAJjD,yBACI,mCAMJ,Q,oBAPU,0BAEF,yDCJrB,a,MAAMC,EA4BT,YACYtJ,EACAE,EACAD,GAFA,KAAAD,cACA,KAAAE,SACA,KAAAD,QAvBJ,KAAA4G,mBAAoC,IAAIC,EAAA,EAKzC,KAAAvG,KAAO,aAId,KAAA6I,gBAAkB,KAElB,KAAAG,UAA4B,KAOpB,KAAAnJ,YAAc,IAAI,IAQ1B,WACI,IACIW,KAAKC,cAAgB,OAAAC,EAAA,GACjBF,KAAKd,MAAMiB,OACXH,KAAKf,YAAYwC,mBAAmB,GAAI,GAAI,IAAI,IAClDpB,UAAUC,IACR,IAAIH,EAASG,EAAO,GAEpBN,KAAKW,QAAUR,EAAe,OAC9BH,KAAKyI,cAAgBtI,EAAqB,aAE1CH,KAAK8G,YAEX,MAAO1F,GACLpB,KAAKqB,aAAamB,WAAWpB,IAIrC,cACQpB,KAAKC,eAAiBD,KAAKC,cAAce,cAC7ChB,KAAKX,YAAYmC,SAGrB,QACIxB,KAAKf,YAAY8H,aAGrB,kBACI/G,KAAK8G,UAGT,UACI9G,KAAKf,YAAYyJ,aAAa1I,KAAKW,OAAQX,KAAKyI,cAAc7G,KAAM4G,IAChExI,KAAK8F,mBAAmB6B,OAExB3H,KAAK2I,WAAWH,GAChBxI,KAAKwI,UAAYA,EACjBxI,KAAKR,KAAOgJ,EAAUhJ,KACjBQ,KAAKyE,aACNzE,KAAKyE,WAAa+D,EAAU/D,cAGjCnC,MAAMC,IACLvC,KAAKqB,aAAamB,WAAWD,GAC7BvC,KAAKwI,UAAY,OAIjB,WAAWA,GACfxI,KAAK4I,QAAU,CACXC,SAAU,KAASC,eACnBC,YAAa,KAAYC,KACzBC,OAAQ,EACRC,aAAa,EACbC,eAAgB,KAChBC,iBAAkB,KAClBC,kBAAmB,KACnBC,gBAAiB,KACjBC,yBAAyB,EACzBC,iBAAkB,IAClBC,QAASjB,EAAUiB,QACnBC,QAASlB,EAAUkB,QACnBC,QAASnB,EAAUmB,QACnBC,QAASpB,EAAUoB,QACnBC,YAAa,IACbC,YAAa,EACbC,YAAa,IACbC,YAAa,EACbC,YAAa,KACbC,YAAa,EACbC,gBAAiB,EACjBC,gBAAiB,EACjBC,cAAe,IACfC,eAAgB,IAChBC,yBAAyB,EACzBC,wBAAwB,EACxBC,kBAAmB,GACnBC,YAAa,GACbC,sBAAsB,EACtBC,4BAA4B,EAC5BC,qBAAqB,EACrBC,qBAAqB,EACrBC,qBAAsB,GACtBC,qBAAsB,GACtBC,mBAAmB,EAEnBC,UAAW,CACTC,SAAS,GAEXC,UAAW,CACTD,SAAS,GAEXE,MAAM,EACNC,WAAW,EACXC,mBAAmB,EACnBC,qBAAqB,EACrBC,eAAgB,CAACC,OAAO,EAAMC,MAAM,EAAMC,OAAO,EAAMC,MAAM,GAC7DC,iBAAiB,EACjBC,YAAa,KAAY/C,KACzBgD,qBAAqB,EACrBC,iBAAiB,EACjBC,kBAAkB,EAClBC,mBAAoB,CAAClK,EAAMmK,KAC3BpM,KAAKqM,WAAWpK,EAAMmK,IAEtBE,mBAAoB,CAACrK,EAAMmK,KAC3BpM,KAAKqM,WAAWpK,EAAMmK,IAEtBG,iBAAkB,CAACtK,EAAMmK,KACzBpM,KAAKqM,WAAWpK,EAAMmK,KAK9B,SAASxG,EAAsB4G,GAEvBxM,KAAKyM,eADL7G,EACsB4G,GAEC,EAItB,WAAWvK,EAAoBmK,IAoBxC,OACIpM,KAAKb,OAAOsD,SAAS,CAAC,MAAOzC,KAAKW,OAAQ,aAAc,iBAAkBX,KAAKyI,gB,6CAjL1EF,GAAyB,gC,uBAAzBA,EAAyB,0D,MAAA,K,wmBDhBtC,gBACI,+BAEA,yBACI,gCAAS,EAAAmE,WAET,yCAKA,uBAIA,cACI,gBACI,+BAUJ,OACJ,OACJ,OACJ,Q,MA3BkB,wCAA2B,sBAQhC,kCAMgB,mC,iRCDtB,G,qFCXK,iCAAmC,gDAAS3I,YAAA,aAAqC,OACjF,4BAA8B,oDAAYA,YAAA,mBAAkC,OAC5E,8BAAgC,0DAAiB,Q,wCAP7D,gBACI,yBACsB,0DAElB,yCAQI,2BAER,OACJ,O,uBAdkB,yCAA4B,qBAA5B,CAA4B,cAWP,gCAAiB,0BAAjB,CAAiB,wBAAjB,CAAiB,0BAAjB,CAAiB,6B,0BAKxD,cACI,yBACJ,Q,oBADkB,gCAAiB,0BAAjB,CAAiB,wBAAjB,CAAiB,0BAAjB,CAAiB,6BCL5B,a,MAAM4I,EAcT,YACY1N,EACAC,EACAC,GAFA,KAAAF,cACA,KAAAC,QACA,KAAAC,SAPZ,KAAAyN,OAAQ,EAER,KAAAnN,MAAQ,GAQR,WACI,IACIO,KAAKC,cAAgB,OAAAC,EAAA,GACjBF,KAAKd,MAAMiB,OACXH,KAAKd,MAAMkH,aACb/F,UAAUC,IACR,IAAIH,EAASG,EAAO,GAChB8F,EAAc9F,EAAO,GAEzBN,KAAKW,QAAUR,EAAe,OAC9BH,KAAK8B,YAAc3B,EAAmB,WACtCH,KAAK2C,WAAaxC,EAAkB,UAEP,SAAzBiG,EAAmB,QACnBpG,KAAK4M,OAAQ,KAGvB,MAAOxL,GACLpB,KAAKqB,aAAamB,WAAWpB,IAIrC,cACQpB,KAAKC,eAAiBD,KAAKC,cAAce,cAIjD,wBACQhB,KAAK+D,cACL/D,KAAKP,MAAQO,KAAK+D,YAAYvE,MAItC,QACIQ,KAAKf,YAAY8H,aAGrB,OACI,OAAQ/G,KAAK8B,YACT,KAAK,KAAgB8B,SACjB5D,KAAKb,OAAOsD,SAAS,CAAC,MAAOzC,KAAKW,OAAQ,YAAa,gBAAiB,OAAQX,KAAK2C,YACrF,MACJ,KAAK,KAAgBkB,MACjB7D,KAAKb,OAAOsD,SAAS,CAAC,MAAOzC,KAAKW,OAAQ,SAAU,aAAcX,KAAK2C,YACvE,MACJ,KAAK,KAAgBmB,KACjB9D,KAAKb,OAAOsD,SAAS,CAAC,MAAOzC,KAAKW,OAAQ,QAAS,YAAaX,KAAK2C,c,6CAlExEgK,GAAgB,gC,uBAAhBA,EAAgB,gD,MAAA,M,igBDb7B,uBAiBA,wB,MAjBK,sBAiBA,+B,wDCJE","file":"x","sourcesContent":["<div class=\"container-fluid\">\n    <div class=\"m-1\">\n        <dexih-message #DexihMessage></dexih-message>\n    </div>\n\n    <dexih-widget title=\"Shared Data\" iconClass=\"fa fa-lg fa-fw fa-life-saver\">\n        <dexih-widget-section *ngIf=\"embedLink\" title=\"Embedded html\" [showExpandButton]=\"false\">\n            <ng-template #header>\n                <button type=\"button\" class=\"close ml-2\" (click)=\"embedLink = null\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n              </button>\n            </ng-template>\n            <section>\n                <form-textarea label=\"Link\" [showCopy]=\"true\" [showPreview]=\"false\" [hideToggle]=\"true\" [disabled]=\"true\"\n                    rows=\"1\" [(ngModel)]=\"embedLink\">\n                    <a [href]=\"embedLink\" target=\"_blank\" class=\"ml-1\">(Open)</a>\n                </form-textarea>\n            </section>\n            <section>\n                <form-textarea label=\"Embedded IFrame\" [showCopy]=\"true\" [showPreview]=\"false\" [hideToggle]=\"true\"\n                    [disabled]=\"true\" rows=\"1\" [(ngModel)]=\"embedFrame\"></form-textarea>\n            </section>\n        </dexih-widget-section>\n\n        <dexih-table \n            [enableMultiSelect]=\"true\" \n            [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\"\n            [enableFilter]=\"false\" \n            [columns]=\"columns\" \n            [data]=\"dataIndex\"\n            (rowClick)=\"previewData($event)\" \n            [tags]=\"tags\">\n\n            <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n                <dexih-button-preview [routerLink]=\"['preview', item.hubKey, item.objectType, item.objectKey]\">\n                </dexih-button-preview>\n                <dexih-button-edit *ngIf=\"hubKeys?.indexOf(item.hubKey)>=0\" class=\"ml-1\" \n                    (click)=\"edit(item)\"></dexih-button-edit>\n                <dexih-button class=\"ml-1\" iconClass=\"fa fa-code\" title=\"Get embedded version\" (click)=\"embed(item)\" text=\"Embedded\"></dexih-button>\n\n            </ng-template>\n\n            <ng-template #filter select=\"filter\" let-items=\"items\">\n                <form [formGroup]=\"searchForm\" class=\"row\">\n                    <div *ngIf=\"hubs\" class=\"col-xs-12 col-sm mr-1\">\n                        <form-tags-dropdown labelLeft=\"Hubs\" formControlName=\"hubKeys\" [items]=\"hubs\" itemKey=\"hubKey\"\n                            itemName=\"name\" [enableAddAll]=\"true\">\n                        </form-tags-dropdown>\n                    </div>\n                    <div class=\"col-xs-12 col-sm mr-1 input-expand\">\n                        <form-input formControlName=\"searchString\" placeholder=\"Search...\" iconClass=\"fa fa-search\">\n                        </form-input>\n                    </div>\n                </form>\n            </ng-template>\n\n            <ng-template #actions let-items=\"items\">\n            </ng-template>\n\n            <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n                <download-button class=\"ml-1\" (download)=\"downloadData(items, true, $event)\"></download-button>\n            </ng-template>\n\n            <!-- <ng-template #rowAction let-item=\"item\">\n                <div *ngFor=\"let column of item.inputColumns; let i = index\" class=\"input-group\">\n                    <div class=\"input-group-prepend\">\n                        <div class=\"input-group-text\">\n                            {{column.logicalName}}\n                        </div>\n                    </div>\n                    <form-input name=\"column{{i}}\" class=\"form-control p-0\" [placeholder]=\"column.logicalName\"\n                        [(ngModel)]=\"column.defaultValue\" [border]=\"false\"></form-input>\n                </div>\n            </ng-template> -->\n\n        </dexih-table>\n    </dexih-widget>\n</div>","import { FormGroup, FormBuilder } from '@angular/forms';\nimport { DexihMessageComponent } from '../dexihMessage';\nimport { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { DexihHubAuth, CancelToken } from '../../../+auth/auth.models';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { eDownloadFormat, SharedData, eSharedObjectType, eDataObjectType, DexihTag } from '../../shared.models';\n\n@Component({\n    selector: 'sharedData',\n    templateUrl: './sharedData.component.html',\n})\nexport class SharedDataComponent implements OnInit, OnDestroy {\n    @ViewChild('DexihMessage', { static: true }) public dexihMessage: DexihMessageComponent;\n\n    public _subscription: Subscription;\n    public _searchSubscription: Subscription;\n    public searchForm: FormGroup;\n    private cancelToken = new CancelToken();\n\n    eDownloadFormat = eDownloadFormat;\n\n    embedLink: string;\n    embedFrame: string;\n\n    hubs: DexihHubAuth[];\n    hubKeys: number[];\n    tags: DexihTag[];\n\n    columns = [\n        { name: 'logicalName', title: 'Details', header: 'hubName', footer: 'description', format: 'Md', tags: 'tags' },\n        { name: 'objectType', title: 'Type', format: 'Enum', enum: eDataObjectType},\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    public dataIndex: SharedData[] = null;\n\n    constructor(private authService: AuthService,\n        private route: ActivatedRoute,\n        private router: Router,\n        private fb: FormBuilder) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.authService.getHubsObservable()\n            ).subscribe(result => {\n                let params = result[0];\n                this.hubs = result[1];\n\n                if (this.hubs) {\n                    this.hubKeys = this.hubs.map(c => c.hubKey);\n                }\n\n                this.searchForm = this.fb.group({\n                    'searchString': ['', [\n                    ]],\n                    'hubKeys': [[], [\n                    ]],\n                });\n\n                this.updateSearch();\n\n                if (this._searchSubscription) { this._searchSubscription.unsubscribe(); }\n                this._searchSubscription = this.searchForm.valueChanges\n                    .pipe(debounceTime(500))\n                    .subscribe(() => {\n                        this.updateSearch();\n                    });\n            });\n        } catch (e) {\n            this.dexihMessage.addErrorMessage(e.message);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    updateSearch() {\n        let hubKeys = <number[]>this.searchForm.value.hubKeys;\n        this.authService.getSharedDataIndex(this.searchForm.value.searchString, hubKeys, 50, true).then(result => {\n\n            this.dataIndex = result.filter(c => c.objectType !== eDataObjectType.DashboardItem);\n\n            this.tags = [];\n            this.dataIndex.forEach(item => {\n                if (item.tags && item.tags.length > 0) {\n                    item.tags.forEach(tag => {\n                        if (this.tags.findIndex(c => c.name === tag.name) < 0) {\n                            this.tags.push(tag);\n                        }\n                    });\n                }\n            });\n\n        }).catch(reason => this.dexihMessage.addMessage(reason));\n    }\n\n    previewData(item: SharedData) {\n        if (item.objectType === eDataObjectType.Dashboard) {\n            this.router.navigate(['previewDashboard', item.hubKey, item.objectKey], { relativeTo: this.route.parent });\n        } else {\n            this.router.navigate(['preview', item.hubKey, item.objectType, item.objectKey], { relativeTo: this.route.parent });\n        }\n    }\n\n    embed(item: SharedData) {\n        let embed: string;\n        if (item.objectType === eDataObjectType.Dashboard) {\n            this.embedLink =\n            `${window.location.origin}/public/index/previewDashboard/${item.hubKey}/${item.objectType}/${item.objectKey}?embed=true`;\n        } else {\n            this.embedLink =\n            `${window.location.origin}/public/index/preview/${item.hubKey}/${item.objectType}/${item.objectKey}?embed=true`;\n        }\n\n        this.embedFrame = `<iframe width=\"560\" height=\"315\" src=\"${this.embedLink}\" frameborder=\"0\" ></iframe>`\n\n        document.body.scrollTop = 0; // For Safari\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\n    }\n\n    downloadData(sharedItems: Array<SharedData>, zipFiles: boolean, downloadFormat: eDownloadFormat) {\n        this.authService.downloadData(sharedItems, zipFiles, downloadFormat, this.cancelToken).then(() => {\n            this.dexihMessage.addSuccessMessage('The download task has started.');\n        }).catch(reason => {\n            this.dexihMessage.addMessage(reason);\n        });\n    }\n\n    edit(item: SharedData) {\n        switch (item.objectType) {\n            case eDataObjectType.Datalink:\n                this.router.navigate(['hub', item.hubKey, 'datalinks', 'datalink-edit', 'edit', item.objectKey]);\n                break;\n            case eDataObjectType.Table:\n                this.router.navigate(['hub', item.hubKey, 'tables', 'table-edit', item.objectKey]);\n                break;\n            case eDataObjectType.View:\n                this.router.navigate(['hub', item.hubKey, 'views', 'view-edit', item.objectKey]);\n                break;\n            case eDataObjectType.Dashboard:\n                this.router.navigate(['hub', item.hubKey, 'dashboards', 'dashboard-edit', item.objectKey]);\n                break;\n            }\n    }\n}\n\n","<div *ngIf=\"parameters\" class=\"d-flex flex-wrap\">\n    <div *ngFor=\"let parameter of userParameters; let i = index\" class=\"pr-1\">\n        <form-select *ngIf=\"parameter.listOfValuesKey > 0\" [labelLeft]=\"parameter.name\" [(ngModel)]=\"parameter.value\"\n            itemKey=\"key\" itemName=\"name\" [items]=\"parameter.runTime.items\"\n            [enableTextEntry]=\"! (parameter.listOfValuesKey > 0)\" [textEntryItems]=\"parentParams\"\n            textEntryItemsTitle=\"Linked Parameters\" (ngModelChange)=\"change(parameter)\"\n            [showRefresh]=\"parameter.runTime.showRefresh\" [isRefreshing]=\"parameter.runTime.isRefreshing\"\n            (onRefresh)=\"refresh(parameter)\" [multiSelect]=\"parameter.rank === 1\">\n        </form-select>\n        <form-input *ngIf=\"!( parameter.listOfValuesKey > 0)\" [labelLeft]=\"parameter.name\" [(ngModel)]=\"parameter.value\"\n            (ngModelChange)=\"change(parameter)\">\n        </form-input>\n    </div>\n</div>\n<div *ngIf=\"requiresRefresh\" class=\"alert alert-warning mt-2\">\n    <a href=\"javascript:void(0)\" class=\"alert-link\" (click)=\"refreshData()\">The parameters have changed. Click to\n        refresh.</a>\n</div>\n","import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from '@angular/core';\nimport { DexihListOfValues, InputParameterBase, eDataObjectType, ListOfValuesItem } from '../../../shared.models';\nimport { Subscription, Observable } from 'rxjs';\nimport { CancelToken } from '../../../../+auth/auth.models';\nimport { AuthService } from '../../../../+auth/auth.service';\n\n@Component({\n    selector: 'input-parameters-view',\n    templateUrl: 'input-parameters-view.component.html'\n})\nexport class InputParametersViewComponent implements OnInit, OnDestroy {\n    @Input() hubKey: number;\n    @Input() objectType: eDataObjectType;\n    @Input() objectKey: number;\n    @Input() parameters: InputParameterBase[];\n    @Input() refreshEvent: Observable<void>;\n    @Output() onChange = new EventEmitter();\n    @Output() onRefreshData = new EventEmitter();\n\n    private _hubSubscription: Subscription;\n    private _refreshSubscription: Subscription;\n\n    public parentParams: string[] = [];\n    public values: ListOfValuesItem[] = [];\n    public listOfValues: Array<DexihListOfValues>;\n\n    public cancelToken: CancelToken = new CancelToken();\n\n    public userParameters: InputParameterBase[];\n\n    public requiresRefresh = false;\n\n    public showRefresh = false;\n    public isRefreshing = false;\n\n    constructor(private authService: AuthService) { }\n\n    ngOnInit() {\n        this.userParameters = [];\n        this.parameters.filter(c => c.isValid && c.allowUserSelect).forEach((parameter: InputParameterBase) => {\n            parameter['runTime'] = {showRefresh: parameter.listOfValuesKey > 0, isRefreshing: false, items: []};\n            if (parameter.value && parameter.listOfValuesKey && parameter.rank === 0) {\n                parameter['runTime'].items = [{key: parameter.value, name: parameter.valueDesc}];\n            }\n\n            this.userParameters.push(parameter);\n        });\n\n        this._refreshSubscription = this.refreshEvent.subscribe(() => {\n            this.requiresRefresh = false;\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._hubSubscription) { this._hubSubscription.unsubscribe(); }\n        if (this._refreshSubscription) { this._refreshSubscription.unsubscribe(); }\n    }\n\n    refresh(parameter: InputParameterBase) {\n        if (!parameter.listOfValuesKey) { return; }\n        parameter['runTime'].isRefreshing = true;\n        this.authService.previewListOfValues(this.hubKey, this.objectKey, this.objectType,\n            parameter.name, false, this.cancelToken).then(result => {\n            parameter['runTime'].items = result;\n            parameter['runTime'].showRefresh = false;\n        }).catch(reason => {\n            this.authService.addUpdateNotification(reason, false);\n        }).finally(() => {\n            parameter['runTime'].isRefreshing = false;\n        });\n    }\n\n    refreshData() {\n        this.onRefreshData.emit();\n    }\n\n    change(parameter: InputParameterBase) {\n        if (parameter.listOfValuesKey > 0) {\n            this.onChange.emit();\n        } else {\n            this.requiresRefresh = true;\n        }\n    }\n}\n","<div *ngIf=\"showToolbar\" class=\"side-menu\">\n    <div class=\"side-menu-content\">\n        <div class=\"spin-icon\">\n            <i class=\"fa fa-cog fa-spin\"></i>\n        </div>\n        <div class=\"side-menu-box\">\n            <div class=\"bg-light rounded p-1\">\n                <div>\n                    <download-button (download)=\"downloadData($event)\"></download-button>\n\n                    <div *ngIf=\"viewConfig?.viewType === eViewType.Chart\" class=\"btn-group btn-group-toggle ml-1\"\n                        data-toggle=\"buttons\" title=\"Table\">\n                        <label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===false}\">\n                            <input type=\"radio\" name=\"options\" value=\"table\" autocomplete=\"off\"\n                                (click)=\"showChart = false\">\n                            <i class=\"fa fa-table\"></i>\n                        </label>\n                        <label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===true}\" title=\"Chart\">\n                            <input type=\"radio\" name=\"options\" value=\"chart\" autocomplete=\"off\"\n                                (click)=\"showChart = true\">\n                            <i class=\"fa fa-bar-chart\"></i>\n                        </label>\n                    </div>\n                    <dexih-button-refresh class=\"ml-1\" [compact]=\"true\" (click)=\"refresh()\"></dexih-button-refresh>\n                    <dexih-button *ngIf=\"!isMaximized\" class=\"ml-1\" buttonClass=\"btn btn-primary\"\n                        iconClass=\"fa fa-window-maximize text-white\" (click)=\"maximize()\" tooltip=\"Maximize window\">\n                    </dexih-button>\n                    <dexih-button *ngIf=\"isMaximized\" class=\"ml-1\" buttonClass=\"btn btn-primary\"\n                        iconClass=\"fa fa-window-minimize text-white\" (click)=\"minimize()\" tooltip=\"Minimize window\">\n                    </dexih-button>\n                </div>\n\n                <div *ngIf=\"userParameters && userParameters.length > 0\" class=\"m-1\">\n                    <input-parameters-view [hubKey]=\"hubKey\" [objectType]=\"objectType\" [objectKey]=\"objectKey\"\n                        [parameters]=\"userParameters\" [refreshEvent]=\"refreshDataSubject.asObservable()\"\n                        (onRefreshData)=\"refresh()\" (onChange)=\"parameterChange()\"></input-parameters-view>\n                </div>\n\n                <div *ngIf=\"viewConfig && baseData\" class=\"m-1\">\n                    <series-animate [showEdit]=\"false\" [showFrame]=\"false\" [animateConfig]=\"viewConfig.animateConfig\"\n                        [columns]=\"columns\" (hasChanged)=\"hasChanged()\" [baseData]=\"baseData\" [(data)]=\"data\">\n                    </series-animate>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n\n<div *ngIf=\"!data\" class=\"m-3\">\n    <div class=\"dexih-loader\"></div> &nbsp; &nbsp; Loading ...\n</div>\n\n<div *ngIf=\"!showToolbar && baseData\" class=\"d-flex\">\n    <div *ngIf=\"viewConfig?.chartConfig\" class=\"align-self-start btn-group btn-sm btn-group-toggle\" data-toggle=\"buttons\" title=\"Table\">\n        <label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===false}\">\n            <input type=\"radio\" name=\"options\" value=\"table\" autocomplete=\"off\" (click)=\"showChart = false\">\n            <i class=\"fa fa-table\"></i>\n        </label>\n        <label class=\"btn btn-primary\" [ngClass]=\"{active: showChart===true}\" title=\"Chart\">\n            <input type=\"radio\" name=\"options\" value=\"chart\" autocomplete=\"off\" (click)=\"showChart = true\">\n            <i class=\"fa fa-bar-chart\"></i>\n        </label>\n    </div>\n\n    <div *ngIf=\"userParameters && userParameters.length > 0\" class=\"mt-1\">\n        <input-parameters-view [hubKey]=\"hubKey\" [objectType]=\"objectType\" [objectKey]=\"objectKey\"\n            [parameters]=\"userParameters\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\"\n            (onChange)=\"parameterChange()\">\n        </input-parameters-view>\n    </div>\n\n    <div *ngIf=\"viewConfig && baseData\">\n        <series-animate [showEdit]=\"false\" [showFrame]=\"false\" [animateConfig]=\"viewConfig.animateConfig\"\n            [columns]=\"columns\" (hasChanged)=\"hasChanged()\" [baseData]=\"baseData\" [(data)]=\"data\">\n        </series-animate>\n    </div>\n</div>\n\n<div class=\"h-100 box\" *ngIf=\"data\">\n    <div class=\"box-content\" style=\"height: 90vh;\">\n\n        <dexih-table *ngIf=\"!showChart\" [enableMultiSelect]=\"false\" [enableSaveCsv]=\"true\" [csvFileName]=\"name\"\n            [enableFilter]=\"false\" [columns]=\"columns\" [data]=\"data\">\n\n            <ng-template #actions let-items=\"items\">\n            </ng-template>\n\n            <ng-template #tableHeader>\n            </ng-template>\n\n        </dexih-table>\n\n        <chart-view *ngIf=\"showChart\" [responsive]=\"true\" [columns]=\"columns\" [data]=\"data\"\n            [config]=\"viewConfig.chartConfig\">\n        </chart-view>\n    </div>\n</div>","import { Component, OnDestroy, OnInit, ViewChild, Input, Output, EventEmitter } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest, Subject} from 'rxjs';\nimport { DexihMessageComponent } from '../../../../shared/ui/dexihMessage/index';\nimport { CancelToken, Message } from '../../../../+auth/auth.models';\nimport { InputColumn, DexihColumnBase, SelectQuery, eDownloadFormat, SharedData, eDataObjectType,\n    ViewConfig, InputParameterBase, eViewType } from '../../../shared.models';\n\n@Component({\n\n    selector: 'preview-data',\n    templateUrl: './preview-data.component.html',\n})\nexport class PreviewDataComponent implements OnInit, OnDestroy {\n    @Input() public objectType: eDataObjectType;\n    @Input() public objectKey: number;\n    @Input() public hubKey: number;\n    @Input() parentParameters: InputParameterBase[]; // parameters passed from parent\n    @Input() public showToolbar = false;\n    @Input() public updateQueryParameters = true;\n    @Input() isMaximized = false;\n    @Output() onMaximize = new EventEmitter<boolean>();\n\n    private _subscription: Subscription;\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    public inputColumns: InputColumn[];\n    public tableColumns: DexihColumnBase[];\n    public userParameters: InputParameterBase[]; // parameters that can be edited by user\n    public parameters: InputParameterBase[]; // combined parameters\n\n    public name = 'loading...';\n\n    columns: Array<any>;\n    selectQuery: SelectQuery = new SelectQuery();\n\n    public baseData: Array<any>;\n    public data: Array<any>;\n    public viewConfig: ViewConfig;\n    public showChart = false;\n\n    public eViewType = eViewType;\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n        private authService: AuthService,\n        private route: ActivatedRoute ) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.authService.getSharedDataObject(this.hubKey, this.objectType, this.objectKey),\n                this.route.queryParams\n            ).subscribe(result => {\n                let object = result[0];\n                let queryParams = result[1];\n\n                if (object != null) {\n                    this.inputColumns = object.inputColumns;\n                    this.tableColumns = object.outputColumns;\n                    this.parameters = object.parameters;\n                    this.userParameters = this.parameters;\n\n                    let p = queryParams['p'];\n                    if (p) {\n                        let paramValues = JSON.parse(p);\n\n                        for (let parameter of this.userParameters) {\n                            let value = paramValues[parameter.name];\n                            if (value !== undefined) {\n                                parameter.value = value;\n                                if (parameter.rank === 0) {\n                                    parameter.valueDesc = value;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    this.parameters = [];\n                }\n\n                this.refresh();\n            });\n        } catch (e) {\n            this.authService.addUpdateNotification(e, false);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    public parameterChange() {\n            // update the query parameters so page refresh will be the same.\n        if (this.updateQueryParameters && this.userParameters.length > 0) {\n            let parameters = {};\n            for (let parameter of this.userParameters) {\n                parameters[parameter.name] = parameter.value;\n            }\n\n            if ('URLSearchParams' in window) {\n                let searchParams = new URLSearchParams(window.location.search)\n                searchParams.set('p', JSON.stringify(parameters));\n                let newRelativePathQuery = window.location.pathname + '?' + searchParams.toString();\n                history.pushState(null, '', newRelativePathQuery);\n            }\n        }\n\n        this.refresh();\n    }\n\n    public refresh() {\n        this.authService.previewData(this.hubKey, this.objectKey, this.objectType, this.inputColumns, this.selectQuery,\n            this.parameters, this.parentParameters, this.cancelToken).then((result) => {\n                this.refreshDataSubject.next();\n                this.columns = result.columns;\n                this.baseData = result.data;\n                this.name = result.name;\n                this.viewConfig = result.viewConfig;\n                if (!this.viewConfig) {\n                    this.data = this.baseData;\n                }\n                if (this.viewConfig && this.viewConfig.viewType === eViewType.Chart) {\n                    this.showChart = true;\n                } else {\n                    this.showChart = false;\n                }\n\n                if (result.status) {\n                    // this.dexihMessage.addMessage(result.status);\n                    this.authService.addUpdateNotification(result.status, false);\n                }\n            }).catch(reason => {\n                this.authService.addUpdateNotification(reason, false);\n                this.baseData = [];\n                this.data = [];\n                this.name = 'failed';\n            });\n    }\n\n    public downloadData(format: eDownloadFormat) {\n        let sharedData = new SharedData();\n        sharedData.objectKey = this.objectKey;\n        sharedData.objectType = this.objectType;\n        sharedData.hubKey = this.hubKey;\n        sharedData.inputColumns = this.inputColumns;\n        sharedData.parameters = this.parameters;\n        sharedData.parentParameters = this.parentParameters;\n        sharedData.query = this.selectQuery;\n\n        this.authService.downloadData([sharedData], true, format, this.cancelToken).then(() => {\n            let message = new Message(true, 'The download task has started.', null, null);\n            this.authService.addUpdateNotification(message, false);\n        }).catch(reason => {\n            this.authService.addUpdateNotification(reason, false);\n        });\n    }\n\n    public maximize() {\n        this.isMaximized = true;\n        this.onMaximize.emit(true);\n    }\n\n    public minimize() {\n        this.isMaximized = false;\n        this.onMaximize.emit(false);\n    }\n\n}\n","<div class=\"box\">\n\n    <div *ngIf=\"item.header\" class=\"box-header\">\n        <div class=\"p-3 bg-secondary text-white\">\n            <b>{{item.name}}</b>\n        </div>\n    </div>\n\n    <div *ngIf=\"item.description\" class=\"box-header\">\n        <div class=\"m-1\">\n            <ngx-md [data]=\"item.description\"></ngx-md>\n        </div>\n    </div>\n\n    <dexih-message #DexihMessage></dexih-message>\n\n    <div class=\"box-content\">\n        <preview-data [hubKey]=\"hubKey\" [parentParameters]=\"parentParameters\"\n            [objectType]=\"eDataObjectType.DashboardItem\" [objectKey]=\"item.key\" [showToolbar]=\"true\"\n            (onMaximize)=\"maximize($event)\"></preview-data>\n    </div>\n</div>","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\nimport { DexihDashboardItem, eDataObjectType, InputParameter, InputParameterBase } from '../../../shared.models';\n\n@Component({\n    selector: 'preview-dashboard-item',\n    templateUrl: 'preview-dashboard-item.component.html',\n    styleUrls: ['./preview-dashboard-item.component.scss']\n\n})\n\nexport class PreviewDashboardItemComponent implements OnInit {\n    @Input() hubKey: number;\n    @Input() item: DexihDashboardItem;\n    @Input() refreshData: EventEmitter<string>;\n    @Input() isMaximized = false;\n    @Input() parentParameters: InputParameterBase[];\n    @Output() onMaximize = new EventEmitter<boolean>();\n\n    eDataObjectType = eDataObjectType;\n    constructor() { }\n\n    ngOnInit() {\n    }\n\n\n    // public refresh() {\n    //     let data = <DataCache> this.item['data'];\n    //     let view = this.hubCache.hub.dexihViews.find(c => c.key === this.item.controls.viewKey.value);\n    //     view = Object.assign({}, view);\n    //     view.parameters = this.item.controls.parameters.value;\n    //     if (view) {\n    //         let preview = this.hubService.previewView(view, view.inputValues,\n    //                 this.formsService.currentForm.controls.parameters.value, this.cancelToken);\n    //         data.refresh(preview);\n    //     }\n    // }\n\n    public maximize($event) {\n        this.onMaximize.emit($event);\n    }\n}\n","<div class=\"container-fluid\">\n    <dexih-message #DexihMessage></dexih-message>\n\n    <dexih-widget [title]=\"'Preview ' + name\" iconClass=\"fa fa-lg fa-fw fa-table\" [showCloseButton]=\"true\"\n        (close)=\"close()\">\n\n        <ng-template #header>\n            <dexih-button-refresh (click)=\"refresh()\" text=\"Reload\"></dexih-button-refresh>\n            <dexih-button-edit class=\"ml-1\"  (click)=\"edit()\"></dexih-button-edit>\n        </ng-template>\n\n        <div *ngIf=\"parameters\" class=\"m-3\">\n            <input-parameters-view [hubKey]=\"hubKey\" [objectType]=\"eDataObjectType.Dashboard\" [objectKey]=\"dashboardKey\" [parameters]=\"parameters\" [refreshEvent]=\"refreshDataSubject.asObservable()\" (onRefreshData)=\"refresh()\" (onChange)=\"parameterChange()\"></input-parameters-view>\n        </div>\n        \n        <div>\n            <div style=\"height:800px\">\n                <ng-template [ngIf]=\"dashboard\">\n                    <gridster [options]=\"options\" #gridster>\n                        <gridster-item [item]=\"{x: item.x, y: item.y, cols: item.cols, rows: item.rows, control: item}\"\n                            *ngFor=\"let item of dashboard.dexihDashboardItems; let i = index;\" \n                            [ngClass]=\"{'maximize': i === maximizedIndex}\" [hidden]=\"maximizedIndex >= 0 && i !== maximizedIndex\">\n                            <preview-dashboard-item [hubKey]=\"hubKey\" [item]=\"item\" [parentParameters]=\"parameters\" (onMaximize)=\"maximize($event, i)\" >\n                            </preview-dashboard-item>\n                        </gridster-item>\n                    </gridster>\n                </ng-template>\n            </div>\n        </div>\n    </dexih-widget>\n</div>","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest, Subject} from 'rxjs';\nimport { DexihMessageComponent } from '../../../../shared/ui/dexihMessage/index';\nimport { CancelToken } from '../../../../+auth/auth.models';\nimport { InputColumn, DexihColumnBase, DexihDashboard,\n    DexihActiveAgent, InputParameterBase, eDataObjectType } from '../../../shared.models';\nimport { GridsterConfig, GridType, CompactType, DisplayGrid, GridsterItem, GridsterItemComponent } from 'angular-gridster2';\n\n@Component({\n\n    selector: 'preview-dashboard',\n    templateUrl: './preview-dashboard.component.html',\n    styleUrls: ['./preview-dashboard.component.scss']\n})\nexport class PreviewDashboardComponent implements OnInit, OnDestroy {\n    @ViewChild('DexihMessage', { static: true }) public dexihMessage: DexihMessageComponent;\n\n    private _subscription: Subscription;\n    public action: string; // new or edit\n    public pageTitle: string;\n    public message: string;\n\n    private refreshDataSubject: Subject<void> = new Subject<void>();\n\n    public inputColumns: InputColumn[];\n    public tableColumns: DexihColumnBase[];\n\n    public name = 'loading...';\n\n    dashboardKey: number;\n    hubKey: number;\n    eDataObjectType = eDataObjectType;\n\n    dashboard: DexihDashboard = null;\n    activeAgent: DexihActiveAgent;\n    maximizedIndex: number;\n\n    public options: GridsterConfig;\n    public parameters: InputParameterBase[];\n\n    private cancelToken = new CancelToken();\n\n    constructor(\n        private authService: AuthService,\n        private router: Router,\n        private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.authService.getSharedDataIndex('', [], 50, false)\n            ).subscribe(result => {\n                let params = result[0];\n\n                this.hubKey = +params['hubKey'];\n                this.dashboardKey = +params['dashboardKey'];\n\n                this.refresh();\n            });\n        } catch (e) {\n            this.dexihMessage.addMessage(e);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        this.cancelToken.cancel();\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    parameterChange() {\n        this.refresh();\n    }\n\n    refresh() {\n        this.authService.getDashboard(this.hubKey, this.dashboardKey).then((dashboard) => {\n            this.refreshDataSubject.next();\n\n            this.setOptions(dashboard);\n            this.dashboard = dashboard;\n            this.name = dashboard.name;\n            if (!this.parameters) {\n                this.parameters = dashboard.parameters;\n            }\n\n        }).catch(reason => {\n            this.dexihMessage.addMessage(reason);\n            this.dashboard = null;\n        });\n    }\n\n    private setOptions(dashboard: DexihDashboard) {\n        this.options = {\n            gridType: GridType.ScrollVertical,\n            compactType: CompactType.None,\n            margin: 5,\n            outerMargin: true,\n            outerMarginTop: null,\n            outerMarginRight: null,\n            outerMarginBottom: null,\n            outerMarginLeft: null,\n            useTransformPositioning: true,\n            mobileBreakpoint: 640,\n            minCols: dashboard.minCols,\n            maxCols: dashboard.maxCols,\n            minRows: dashboard.minRows,\n            maxRows: dashboard.maxRows,\n            maxItemCols: 100,\n            minItemCols: 1,\n            maxItemRows: 100,\n            minItemRows: 1,\n            maxItemArea: 2500,\n            minItemArea: 1,\n            defaultItemCols: 2,\n            defaultItemRows: 2,\n            fixedColWidth: 105,\n            fixedRowHeight: 105,\n            keepFixedHeightInMobile: false,\n            keepFixedWidthInMobile: false,\n            scrollSensitivity: 10,\n            scrollSpeed: 20,\n            enableEmptyCellClick: false,\n            enableEmptyCellContextMenu: false,\n            enableEmptyCellDrop: false,\n            enableEmptyCellDrag: false,\n            emptyCellDragMaxCols: 50,\n            emptyCellDragMaxRows: 50,\n            ignoreMarginInRow: false,\n            // setGridSize: true,\n            draggable: {\n              enabled: false,\n            },\n            resizable: {\n              enabled: false,\n            },\n            swap: false,\n            pushItems: true,\n            disablePushOnDrag: false,\n            disablePushOnResize: false,\n            pushDirections: {north: true, east: true, south: true, west: true},\n            pushResizeItems: false,\n            displayGrid: DisplayGrid.None,\n            disableWindowResize: false,\n            disableWarnings: false,\n            scrollToNewItems: false,\n            itemChangeCallback: (item, itemComponent: GridsterItemComponent) => {\n            this.itemResize(item, itemComponent);\n            },\n            itemResizeCallback: (item, itemComponent: GridsterItemComponent) => {\n            this.itemResize(item, itemComponent);\n            },\n            itemInitCallback: (item, itemComponent: GridsterItemComponent) => {\n            this.itemResize(item, itemComponent);\n            },\n          };\n    }\n\n    maximize(isMaximized: boolean, index: number) {\n        if (isMaximized) {\n            this.maximizedIndex = index;\n        } else {\n            this.maximizedIndex = -1;\n        }\n      }\n\n      public itemResize(item: GridsterItem, itemComponent: GridsterItemComponent) {\n        // console.debug(`top: ${itemComponent.el.clientTop}, left: ${itemComponent.el.clientLeft},\n        // width: ${itemComponent.el.clientWidth}, height: ${itemComponent.el.clientHeight}`)\n      }\n\n    // downloadData(format: eDownloadFormat) {\n    //     let sharedData = new SharedData();\n    //     sharedData.objectKey = this.dashboardKey;\n    //     sharedData.objectType = this.objectType;\n    //     sharedData.hubKey = this.hubKey;\n    //     sharedData.inputColumns = this.inputColumns;\n    //     sharedData.query = this.selectQuery;\n\n    //     this.hubsService.downloadData([sharedData], true, format, this.cancelToken).then(() => {\n    //         this.dexihMessage.addSuccessMessage('The download task has started.');\n    //     }).catch(reason => {\n    //         this.dexihMessage.addMessage(reason);\n    //     });\n    // }\n\n    edit() {\n        this.router.navigate(['hub', this.hubKey, 'dashboards', 'dashboard-edit', this.dashboardKey]);\n    }\n}\n","<div *ngIf=\"!embed\" class=\"container-fluid\">\n    <dexih-widget [title]=\"'Preview ' + title\" iconClass=\"fa fa-lg fa-fw fa-table\" [showCloseButton]=\"true\"\n        [padding]=\"false\" (close)=\"close()\">\n\n        <ng-template #header>\n            <dexih-button-refresh class=\"mr-1\" (click)=\"previewData.refresh()\" text=\"Reload\"></dexih-button-refresh>\n            <download-button class=\"ml-1\" (download)=\"previewData.downloadData($event)\"></download-button>\n            <dexih-button-edit class=\"ml-1\" (click)=\"edit()\"></dexih-button-edit>\n\n\n        </ng-template>\n\n            <preview-data #PreviewData [hubKey]=\"hubKey\" [objectType]=\"objectType\" [objectKey]=\"objectKey\" [parameters]=\"parameters\" [updateQueryParameters]=\"true\">\n            </preview-data>\n    </dexih-widget>\n</div>\n\n<div *ngIf=\"embed\">\n    <preview-data [hubKey]=\"hubKey\" [objectType]=\"objectType\" [objectKey]=\"objectKey\" [parameters]=\"parameters\" [updateQueryParameters]=\"false\"></preview-data>\n</div>","import { Component, OnDestroy, OnInit, ViewChild, Input, AfterViewChecked, OnChanges, AfterContentChecked } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { DexihMessageComponent } from '../../../ui/dexihMessage/index';\nimport { eDataObjectType } from '../../../shared.models';\nimport { PreviewDataComponent} from '../preview-data/preview-data.component';\n\n@Component({\n\n    selector: 'preview',\n    templateUrl: './preview.component.html'\n})\nexport class PreviewComponent implements OnInit, OnDestroy, AfterContentChecked {\n    @ViewChild('DexihMessage', { static: true }) public dexihMessage: DexihMessageComponent;\n    @ViewChild('PreviewData', { static: false }) public previewData: PreviewDataComponent;\n\n    private _subscription: Subscription;\n\n\n    objectKey: number;\n    objectType: eDataObjectType;\n    hubKey: number;\n    embed = false; // removes frames from data.\n\n    title = '';\n\n    constructor(\n        private authService: AuthService,\n        private route: ActivatedRoute,\n        private router: Router) {\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.params,\n                this.route.queryParams\n            ).subscribe(result => {\n                let params = result[0];\n                let queryParams = result[1];\n\n                this.hubKey = +params['hubKey'];\n                this.objectType = +params['objectType'];\n                this.objectKey = +params['objectKey'];\n\n                if (queryParams['embed'] === 'true') {\n                    this.embed = true;\n                }\n            });\n        } catch (e) {\n            this.dexihMessage.addMessage(e);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n    }\n\n    // use aftercontentchecked to stop\n    ngAfterContentChecked(): void {\n        if (this.previewData) {\n            this.title = this.previewData.name;\n        }\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    edit() {\n        switch (this.objectType) {\n            case eDataObjectType.Datalink:\n                this.router.navigate(['hub', this.hubKey, 'datalinks', 'datalink-edit', 'edit', this.objectKey]);\n                break;\n            case eDataObjectType.Table:\n                this.router.navigate(['hub', this.hubKey, 'tables', 'table-edit', this.objectKey]);\n                break;\n            case eDataObjectType.View:\n                this.router.navigate(['hub', this.hubKey, 'views', 'view-edit', this.objectKey]);\n                break;\n        }\n    }\n\n}\n"]}