{"version":3,"sources":["webpack:///src/app/+hub/datajob/datajob-edit/datajob-edit.component.html","webpack:///src/app/+hub/datajob/datajob-edit/datajob-edit.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/properties/datajob-edit-properties.component.html","webpack:///src/app/+hub/datajob/datajob-edit/properties/datajob-edit-properties.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/trigger-edit/dexih-form-daysofweek.component.html","webpack:///src/app/+hub/datajob/datajob-edit/trigger-edit/dexih-form-daysofweek.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/trigger-edit/datajob-edit-trigger.component.html","webpack:///src/app/+hub/datajob/datajob-edit/trigger-edit/datajob-edit-trigger.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/step-edit/datajob-edit-step.component.html","webpack:///src/app/+hub/datajob/datajob-edit/step-edit/datajob-edit-step.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/steps-add/datajob-add-steps.component.html","webpack:///src/app/+hub/datajob/datajob-edit/steps-add/datajob-add-steps.component.ts","webpack:///src/app/+hub/datajob/datajob-edit/datajob-edit-guard.ts","webpack:///src/app/+hub/datajob/datajob-edit/datajob-edit.module.ts","webpack:///src/app/+hub/datajob/datajob-edit/datajob-edit.routing.ts"],"names":["formsService","DatajobEditComponent","hubService","authService","route","router","isLoaded","this","_subscription","combineLatest","data","params","getHubCacheObservable","subscribe","result","hubCache","action","pageTitle","status","Loaded","hasChanged","confirmDialog","then","confirm","load","reason","e","addHubClientErrorMessage","_hubCacheChangeSubscription","unsubscribe","_formChangeSubscription","ngOnDestroy","datajob","datajobKey","hub","dexihDatajobs","find","c","key","addHubErrorMessage","newDatajob","createDefaultDatajob","getCurrentFormObservable","form","controls","value","history","pushState","newUrl","window","location","pathname","replace","navigateByUrl","Promise","resolve","$event","returnValue","DatajobEditPropertiesComponent","formService","showAllErrors","failActions","Continue","name","ContinueNonDependent","Abend","datajobChanged","triggerColumns","title","format","_triggerTableData","BehaviorSubject","triggerTableData","asObservable","stepColumns","tags","_stepTableData","stepTableData","eAlertLevelItems","eAlertLevel","isFirst","mainForm","managedConnections","getManagedConnections","updateTriggers","updateSteps","updateDependencies","triggerData","forEach","triggerControl","trigger","push","details","getTriggerDetails","updateDate","errors","valid","next","stepData","sort","a","b","position","stepControl","step","datalink","dexihDatalinks","datalinkKey","getObjectTags","Datalink","dependencies","getDependencies","dexihDatalinkDependencies","inputs","getInputs","dexihDatalinkStepColumns","items","steps","item","index","setValue","depString","dep","dexihDatalinkSteps","dependentDatalinkStepKey","columns","column","defaultValue","navigate","relativeTo","parent","triggers","triggersArray","dexihTriggers","findIndex","removeAt","stepsArray","clear","stepTargets","minKey","tables","getDatalinkTargetTables","sourceTables","getDatalinkSourceTables","stepTarget","t","indexOf","datalinkStepKey","datalinkDependencyFormGroup","dexihDatalinkTargets","map","tableKey","getDatalinkTable","sourceDatalinkTable","dexihDatalinkTransforms","transform","joinDatalinkTable","datalinkTable","sourceType","Table","sourceTableKey","sourceDatalinkKey","editTrigger","stepSortChanged","editDatalinkStep","sharedFunctions","DexihFormDaysOfWeekComponent","_changeDetectionRef","eDayOfWeek","daysOfWeek","Array","id","Math","random","toString","substr","onChange","onTouched","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","detectChanges","fn","provide","useExisting","multi","selectAllDays","selectNoDays","selectWeekend","selectWeekDays","DatajobEditTriggerComponent","fb","triggerFormService","triggerForm","triggerKey","originalTrigger","navigateUp","triggerFormGroup","startForm","currentForm","DatajobEditStepComponent","stepFormService","datajobForm","stepForm","datalinkStepFormGroup","_datalinkSubscription","valueChanges","updateDatalinkStepColumns","stepParameters","parameters","currentParameters","parameter","currentParameter","newParameter","newFormParameter","stepColumnsForm","length","dexihDatalinkColumns","filter","isInput","col","stepColumn","dataType","logicalName","columnGroup","rank","maxLength","deltaType","allowDbNull","isUnicode","isValid","stepColumnForm","datalinkStepColumnFormGroup","datalinkDependencies","newDep","oldDep","insert","DatajobEditGuard","DatajobAddStepsComponent","DatajobEditModule","enum","_tableData","tableData","updateDatalinks","datalinks","d","sourceTable","getTable","datalinkType","sourceTableName","targetTableName","target","table","join","getHubCacheChangeObservable","hubCacheChange","changeClass","existingDatalinks","formDexihDatalinkSteps","names","addSelectedConfirmed","newDatalinkStep","i","stepFormGroup","component","canDeactivate","Routing","forChild","path","children","redirectTo","navigateSkip","ngModule","providers"],"mappings":"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","file":"x","sourcesContent":["<div class=\"container\">\n    <dexih-widget title=\"Edit Job\" iconClass=\"fa fa-lg fa-fw fa-cog\">\n\n        <ng-template #header>\n            <dexih-invalid-form-details class=\"mr-1\" [control]=\"formsService.currentForm\"\n                (click)=\"formsService.showErrors()\"></dexih-invalid-form-details>\n            <save-button *ngIf=\"hubCache?.canWrite\" class=\"mr-1\" [formsService]=\"formsService\"></save-button>\n            <cancel-button class=\"mr-1\" [formsService]=\"formsService\"></cancel-button>\n        </ng-template>\n\n        <div>\n            <router-outlet></router-outlet>\n        </div>\n    </dexih-widget>\n</div>\n","import { HostListener, Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Route, Router, Params } from '@angular/router';\nimport { HubCache, eCacheStatus } from '../../hub.models';\nimport { HubService } from '../../hub.service';\nimport { AuthService } from '../../../+auth/auth.service';\nimport { Subscription, combineLatest} from 'rxjs';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DexihDatajob } from '../../../shared/shared.models';\n\n@Component({\n  selector: 'dexih-datajob-edit-form',\n  templateUrl: './datajob-edit.component.html'\n})\nexport class DatajobEditComponent implements OnInit, OnDestroy {\n  public datajobKey: number;\n\n  public hubCache: HubCache;\n  public action: string; // new or edit\n  public pageTitle: string;\n  public params: Params;\n\n  private _subscription: Subscription;\n  private _formChangeSubscription: Subscription;\n  private _hubCacheChangeSubscription: Subscription;\n  private isLoaded = false;\n\n\n  constructor(private hubService: HubService,\n    public formsService: HubFormsService,\n    private authService: AuthService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.hubService.getHubCacheObservable(true),\n      ).subscribe(result => {\n        let data = result[0];\n        this.params = result[1];\n        this.hubCache = result[2];\n\n        this.action = data['action'];\n        this.pageTitle = data['pageTitle'];\n\n        if (!this.hubCache || this.hubCache.status !== eCacheStatus.Loaded ) { return; }\n\n        if (this.isLoaded && this.action === 'new') { return; }\n\n        if (this.isLoaded && this.formsService.hasChanged) {\n            this.authService.confirmDialog('Synchronization warning',\n            'The hub was disconnected, meaning this edit could have been changed by another session.  Would you like to discard the current changes, and reload the latest version?')\n            .then(confirm => {\n                if (confirm) {\n                    this.load();\n                }\n            }).catch(reason => {\n                return;\n            });\n        } else {\n            this.load();\n        }\n\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Datajob Edit');\n    }\n\n\n  }\n\n  ngOnDestroy() {\n    if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    if (this._subscription) { this._subscription.unsubscribe(); }\n    if (this._formChangeSubscription) { this._formChangeSubscription.unsubscribe(); }\n\n    this.formsService.ngOnDestroy();\n  }\n\n  load() {\n    this.isLoaded = true;\n\n    if (this.action === 'edit') {\n      // get the hub key from the route data, and update the service.\n      this.datajobKey = + this.params['datajobKey'];\n\n      if (!this.datajobKey) {\n        this.hubService.addHubErrorMessage('There was no datajob specified to edit.');\n      } else {\n        if (!this.hubCache.hub || !this.hubCache.hub.dexihDatajobs) {\n          this.hubService.addHubErrorMessage('The hub cache is not loaded.');\n        } else {\n\n          let datajob = this.hubCache.hub.dexihDatajobs.find(c => c.key === this.datajobKey);\n          if (!datajob) {\n            this.hubService.addHubErrorMessage('The specified datajob could not be found.');\n          } else {\n            this.formsService.datajob(datajob);\n          }\n        }\n      }\n    }\n\n    if (this.action === 'new') {\n      let datajob: DexihDatajob;\n      if (this.hubService.newDatajob) {\n        datajob = this.hubService.newDatajob;\n        this.hubService.newDatajob = null;\n      } else {\n        datajob = this.hubService.createDefaultDatajob();\n        datajob.key = 0;\n      }\n\n      this.formsService.datajob(datajob);\n\n      // update the url with the saved key\n      this._formChangeSubscription = this.formsService.getCurrentFormObservable().subscribe(form => {\n        let key = form.controls.key.value;\n        if (key) {\n          if (history.pushState) {\n            let newUrl = window.location.pathname.replace('/datajob-new', `/datajob-edit/${key}`)\n            this.router.navigateByUrl(newUrl);\n            this._formChangeSubscription.unsubscribe();\n          }\n        }\n      });\n    }\n  }\n\n  public canDeactivate(): Promise<boolean> {\n    return new Promise<boolean>((resolve) => {\n      if (this.formsService.hasChanged) {\n        this.authService.confirmDialog('The data job has not been saved',\n          'The datajob changes have not been saved.  Do you want to discard the changes and exit?')\n          .then((confirm) => {\n              resolve(confirm);\n            }).catch(() => {\n              resolve(false);\n            });\n      } else {\n        resolve(true);\n      }\n    });\n  }\n\n  // @HostListener allows is to guard against browser refresh, close, etc.\n  @HostListener('window:beforeunload', ['$event'])\n  unloadNotification($event: any) {\n    if (this.formsService.hasChanged) {\n      $event.returnValue = 'The datajob changes have not been saved.  Do you want to discard the changes and exit?';\n    }\n  }\n}\n","<dexih-widget-section title=\"Properties\" [showExpandButton]=\"true\">\n    <form *ngIf=\"mainForm\" [formGroup]=\"mainForm\">\n        <fieldset>\n            <section>\n                <form-input label=\"Data Job Name\" formControlName=\"name\" placeholder=\"Enter the job name.\"\n                    [autocapitalize]=\"true\" iconClass=\"fa fa-list\" [errors]=\"formService.formErrors.name\">\n                </form-input>\n            </section>\n\n            <section>\n                <form-textarea label=\"Description\" [showMarkdown]=\"true\" formControlName=\"description\"\n                    placeholder=\"Enter the description.\" [errors]=\"formService.formErrors.description\">\n                </form-textarea>\n            </section>\n\n            <section>\n                <form-select label=\"Datalink Fail Action\" formControlName=\"failAction\" [items]=\"failActions\"\n                    itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                    [errors]=\"formService.formErrors.failAction\" note=\"Action to take when a datalink execution fails.\"\n                    [enableFilter]=\"false\">\n                </form-select>\n            </section>\n\n            <section>\n                <form-select label=\"Alerting Level\" formControlName=\"alertLevel\" [items]=\"eAlertLevelItems\"\n                    itemKey=\"key\" itemName=\"description\" iconClass=\"fa fa-bell\"\n                    [errors]=\"formService.formErrors.alertLevel\" note=\"When alerts should be sent.\"\n                    [enableFilter]=\"false\">\n                </form-select>\n            </section>\n\n            <section>\n                <form-select label=\"Audit Connection\" formControlName=\"auditConnectionKey\" [items]=\"managedConnections\"\n                    itemKey=\"key\" itemName=\"name\" iconClass=\"fa fa-database\"\n                    [errors]=\"formService.formErrors.auditConnectionKey\"\n                    note='Specify the connection where audit data (such as job results) should be written to.'\n                    [errors]=\"formService.formErrors.auditConnectionKey\">\n                    <connection-edit-button [key]=\"mainForm.controls.auditConnectionKey.value\"></connection-edit-button>\n                </form-select>\n            </section>\n\n            <section class=\"col col-12\">\n                <form-checkbox label=\"Trigger datajob when new files arrive\" formControlName=\"fileWatch\">\n                </form-checkbox>\n            </section>\n\n            <section class=\"col col-12\">\n                <form-checkbox label=\"Auto Start\" formControlName=\"autoStart\"\n                    note=\"Re-activate the datajob when the remote agent is restarted.\">\n                </form-checkbox>\n            </section>\n        </fieldset>\n    </form>\n</dexih-widget-section>\n\n<dexih-widget-section title=\"Parameters\" [showExpandButton]=\"true\" [padding]=\"true\" [padding]=\"true\">\n    <input-parameters *ngIf=\"mainForm\" [showEdit]=\"true\" [parameters]=\"mainForm?.controls.parameters\" [formsService]=\"formService\">\n    </input-parameters>\n</dexih-widget-section>\n\n<dexih-widget-section title=\"Triggers\" [showExpandButton]=\"true\" [padding]=\"false\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" sortColumn=\"position\" [columns]=\"triggerColumns\"\n        [dataObservable]=\"triggerTableData\" (rowClick)='editTrigger($event)'>\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button-delete (click)=\"deleteTriggers(items)\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-trigger=\"item\">\n            <dexih-button-edit (click)=\"editTrigger(trigger)\"></dexih-button-edit>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <dexih-button-new (click)=\"newTrigger()\" title=\"New Trigger\"></dexih-button-new>\n        </ng-template>\n\n    </dexih-table>\n</dexih-widget-section>\n\n<dexih-widget-section title=\"Steps\" [showExpandButton]=\"true\" [padding]=\"false\">\n    <dexih-table [enableMultiSelect]=\"true\" [enableStickyToolbar]=\"true\"  [toolbarZIndex]=\"100\" [enableManualSort]=\"true\" (onSortChanged)=\"stepSortChanged($event)\" sortColumn=\"position\" [columns]=\"stepColumns\" [tags]=\"this.hubCache.hub.dexihTags\"\n        [dataObservable]=\"stepTableData\" (rowClick)='editDatalinkStep($event)'>\n        <ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n            <dexih-button  iconClass=\"fa fa-magic\" (click)=\"updateDependencies(items)\" text=\"AutoSet Dependencies\"></dexih-button>\n            <dexih-button class=\"ml-1\" iconClass=\"fa fa-eraser\" (click)=\"clearDependencies(items)\" text=\"Clear Dependencies\"></dexih-button>\n            <dexih-button-delete class=\"ml-1\" (click)=\"deleteDatalinkSteps(items)\"></dexih-button-delete>\n        </ng-template>\n\n        <ng-template #selectedItemAction select=\"selectedItemAction\" let-item=\"item\">\n            <dexih-button-edit class=\"mr-1\" (click)=\"editDatalinkStep(item)\"></dexih-button-edit>\n        </ng-template>\n\n        <ng-template #actions select=\"actionsTemplate\" let-items=\"items\">\n            <dexih-button-new class=\"mr-1\" (click)=\"newDatalinkStep()\" title=\"Create a new step\"></dexih-button-new>\n            <dexih-button class=\"mr-1\" (click)=\"addDatalinkSteps()\" iconClass=\"fa fa-plus-square\" buttonClass=\"btn-primary\"\n                title=\"Select multiple datalinks to add as steps\">Add</dexih-button>\n        </ng-template>\n    </dexih-table>\n</dexih-widget-section>\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { Subscription, Observable, BehaviorSubject, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubCache } from '../../../hub.models';\nimport { DexihConnection, eFailAction, DexihDatalinkStep, DexihDatalinkDependency, DexihDatalinkStepColumn, DexihTrigger,\n  DexihDatalinkTable, eSourceType, eSharedObjectType, eAlertLevelItems, eAlertLevel } from '../../../../shared/shared.models';\n\n@Component({\n\n  selector: 'dexih-datajob-edit-form',\n  templateUrl: './datajob-edit-properties.component.html'\n})\nexport class DatajobEditPropertiesComponent implements OnInit, OnDestroy {\n  public hubCache: HubCache;\n\n  private _subscription: Subscription;\n\n  hasChangedObserve: Observable<boolean>;\n\n  public managedConnections: DexihConnection[];\n\n  hasChanged = false;\n  showAllErrors = false;\n\n  failActions = [\n    { key: eFailAction.Continue, name: 'Continue Execution' },\n    { key: eFailAction.ContinueNonDependent, name: 'Continue execution (non dependent datalinks only)' },\n    { key: eFailAction.Abend, name: 'Abend' },\n  ];\n\n  public datajobChanged = false;\n  public mainForm: FormGroup;\n\n  triggerColumns = [\n    { name: 'details', title: 'Details', format: 'Html' },\n    { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    { name: 'errors', title: 'Errors', format: '' },\n  ];\n\n  private _triggerTableData = new BehaviorSubject<Array<any>>(null);\n  triggerTableData: Observable<Array<any>> = this._triggerTableData.asObservable();\n\n  stepColumns = [\n    { name: 'name', title: 'Name', format: '' },\n    { name: 'datalink', title: 'Datalink', format: '', tags: 'tags' },\n    { name: 'dependencies', title: 'Dependencies', format: 'Html' },\n    { name: 'inputs', title: 'Inputs', format: 'Html'},\n    { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    { name: 'errors', title: 'Errors', format: '' },\n  ];\n\n  private _stepTableData = new BehaviorSubject<Array<any>>(null);\n  stepTableData: Observable<Array<any>> = this._stepTableData.asObservable();\n\n  eAlertLevelItems = eAlertLevelItems;\n  eAlertLevel = eAlertLevel;\n\n  constructor(private hubService: HubService,\n    public formService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router) {\n  }\n\n  ngOnInit() {\n    let isFirst = true;\n\n    try {\n      this._subscription = combineLatest(\n        this.hubService.getHubCacheObservable(),\n        this.formService.getCurrentFormObservable(),\n      ).subscribe(result => {\n        this.hubCache = result[0];\n        this.mainForm = result[1];\n\n        if (!this.hubCache.isLoaded()) { return; }\n\n        this.managedConnections = this.hubCache.getManagedConnections();\n        this.updateTriggers();\n        this.updateSteps();\n\n        \n        // if this is first load of new form, then reset the dependencies.\n        if (this.mainForm.controls['key'].value <= 0 && isFirst) {\n          isFirst = false;\n          let steps = this.mainForm.controls['dexihDatalinkSteps'].value;\n          this.updateDependencies(steps);\n        }\n\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Data Job Edit Properties');\n    }\n\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n  }\n\n  updateTriggers() {\n    let triggerData = [];\n    if (this.mainForm) {\n      let triggers = (<FormArray>this.mainForm.controls['dexihTriggers']);\n      triggers.controls.forEach(triggerControl => {\n        let trigger = triggerControl.value;\n        triggerData.push({\n          key: trigger.key,\n          details: this.hubCache.getTriggerDetails(trigger),\n          updateDate: trigger.updateDate,\n          errors: triggerControl.valid ? 'No errors' : 'Errors'\n        });\n      });\n    }\n\n    this._triggerTableData.next(triggerData);\n  }\n\n  updateSteps() {\n    let stepData = [];\n    if (this.mainForm) {\n      let steps = (<FormArray>this.mainForm.controls['dexihDatalinkSteps']);\n      steps.controls.sort((a: FormGroup, b: FormGroup) => a.controls.position.value - b.controls.position.value)\n        .forEach(stepControl => {\n        let step = <DexihDatalinkStep> stepControl.value;\n        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === step.datalinkKey);\n        stepData.push({\n          key: step.key,\n          name: step.name,\n          datalinkKey: datalink.key,\n          datalink: datalink ? datalink.name : 'Not specified',\n          tags: this.hubCache.getObjectTags(eSharedObjectType.Datalink, datalink.key),\n          dependencies: this.getDependencies(step.dexihDatalinkDependencies),\n          inputs: this.getInputs(step.dexihDatalinkStepColumns),\n          updateDate: step.updateDate,\n          errors: stepControl.valid ? 'No errors' : 'Errors'\n        });\n      });\n    }\n\n    this._stepTableData.next(stepData);\n  }\n\n  stepSortChanged(items: Array<DexihDatalinkStep>) {\n    let steps = (<FormArray>this.mainForm.controls['dexihDatalinkSteps']);\n    items.forEach((item, index) => {\n        let step = <FormGroup>steps.controls\n            .find(c => c.value.key === item.key);\n        if (step) {\n          step.controls.position.setValue(index);\n        }\n    });\n}\n\n  getDependencies(dependencies: Array<DexihDatalinkDependency>) {\n    let depString = '';\n\n    if (dependencies) {\n      dependencies.forEach(dep => {\n        let step = this.mainForm.value.dexihDatalinkSteps.find(c => c.key === dep.dependentDatalinkStepKey);\n        if (step) {\n          depString = depString + step.name + '<br>';\n        } else {\n          depString = depString + 'Error: step not found.<br>';\n        }\n      });\n    }\n    return depString;\n\n  }\n\n  getInputs(columns: Array<DexihDatalinkStepColumn>) {\n    let depString = '';\n\n    if (columns) {\n      columns.forEach(column => {\n        depString = depString + column.name + ' = ' + column.defaultValue + '<br>';\n      });\n    }\n    return depString;\n\n  }\n\n  newTrigger() {\n    this.router.navigate(['trigger'], { relativeTo: this.route.parent });\n  }\n\n  addDatalinkSteps() {\n    this.router.navigate(['add-steps'], { relativeTo: this.route.parent });\n  }\n\n  editTrigger(trigger: DexihTrigger) {\n    this.router.navigate(['trigger', trigger.key], { relativeTo: this.route.parent });\n  }\n\n  deleteTriggers(triggers: Array<DexihTrigger>) {\n    let triggersArray = <FormArray>this.mainForm.controls.dexihTriggers;\n\n    triggers.forEach(trigger => {\n      let index = triggersArray.controls.findIndex(c => c.value.key === trigger.key);\n      triggersArray.removeAt(index);\n    });\n    this.updateTriggers();\n  }\n\n  newDatalinkStep() {\n    this.router.navigate(['step'], { relativeTo: this.route.parent });\n  }\n\n  editDatalinkStep(step: DexihDatalinkStep) {\n    this.router.navigate(['step', step.key], { relativeTo: this.route.parent });\n  }\n\n  deleteDatalinkSteps(steps: Array<DexihDatalinkStep>) {\n    let stepsArray = <FormArray>this.mainForm.controls.dexihDatalinkSteps;\n\n    steps.forEach(step => {\n      let index = stepsArray.controls.findIndex(c => c.value.key === step.key);\n      stepsArray.removeAt(index);\n    });\n    this.updateSteps();\n  }\n\n  clearDependencies(steps: Array<DexihDatalinkStep>) {\n    let stepsArray = <FormArray>this.mainForm.controls.dexihDatalinkSteps;\n    steps.forEach(step => {\n      let stepControl = <FormGroup> stepsArray.controls.find(c => c.value.key === step.key);\n      let dependencies = <FormArray> stepControl.controls['dexihDatalinkDependencies'];\n      dependencies.clear();\n    });\n\n    this.updateSteps();\n  }\n\n  updateDependencies(steps: Array<DexihDatalinkStep>) {\n    let stepsArray = <FormArray>this.mainForm.controls.dexihDatalinkSteps;\n    let allSteps = stepsArray.value;\n\n    let stepTargets: Array<{key: number, tables: Array<number>}> = [];\n    let minKey = -1;\n\n    allSteps.forEach(step => {\n      stepTargets.push( {key: step.key, tables:this.getDatalinkTargetTables(step.datalinkKey)});\n    });\n\n    steps.forEach(step => {\n      let stepControl = <FormGroup> stepsArray.controls.find(c => c.value.key === step.key);\n      let dependencies = <FormArray> stepControl.controls['dexihDatalinkDependencies'];\n      dependencies.clear();\n\n      let sourceTables = this.getDatalinkSourceTables(step.datalinkKey);\n\n      stepTargets.forEach(stepTarget => {\n        for( let t of stepTarget.tables) {\n          if (sourceTables.indexOf(t) >= 0) {\n            let dep = new DexihDatalinkDependency();\n            dep.key = minKey;\n            dep.datalinkStepKey =step.key;\n            dep.dependentDatalinkStepKey = stepTarget.key;\n            dependencies.push(this.formService.datalinkDependencyFormGroup(dep));\n            minKey--;\n            break;\n          }\n        }\n      });\n\n    });\n\n    this.updateSteps();\n  }\n\n  getDatalinkTargetTables(datalinkKey: number): Array<number> {\n    let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n    if (!datalink) { return []; }\n\n    return datalink.dexihDatalinkTargets.map(c => c.tableKey);\n  }\n\n  // gets any dependent source tables from the given datalink key.\n  getDatalinkSourceTables(datalinkKey: number): Array<number> {\n    let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n    if (!datalink) { return []; }\n\n    let tables = this.getDatalinkTable(datalink.sourceDatalinkTable);\n\n    datalink.dexihDatalinkTransforms.forEach(transform => {\n      if (transform.joinDatalinkTable) {\n        let joinTables = this.getDatalinkTable(transform.joinDatalinkTable);\n        joinTables.forEach(t => {\n          if (tables.indexOf(t) < 0) {\n            tables.push(t);\n          }\n        });\n      }\n    });\n    \n    return tables;\n  }\n\n  getDatalinkTable(datalinkTable: DexihDatalinkTable) : Array<number> {\n    if (!datalinkTable) {\n      return [];\n    }\n\n    switch(datalinkTable.sourceType) {\n      case eSourceType.Table: {\n        return [datalinkTable.sourceTableKey];\n      }\n      case eSourceType.Datalink: {\n        return this.getDatalinkSourceTables(datalinkTable.sourceDatalinkKey);\n      }\n    }\n\n    return [];\n  }\n\n}\n","<div class=\"form-group\">\n    <label [for]=\"id\" class=\"mt-1\">{{label}}\n        <div class=\"input-group\">\n            <div class=\"input-group-prepend\">\n                <a class=\"btn btn-outline-primary btn-sm\" (click)=\"selectAllDays()\">All</a>\n                <a class=\"btn btn-outline-primary btn-sm\" (click)=\"selectNoDays()\">None</a>\n                <a class=\"btn btn-outline-primary btn-sm\" (click)=\"selectWeekend()\">Weekend</a>\n            </div>\n            <div class=\"input-group-append\">\n                <a class=\"btn btn-outline-primary btn-sm\" (click)=\"selectWeekDays()\">Weekdays</a>\n            </div>\n        </div>\n        <ng-content></ng-content>\n    </label>\n\n    <div class=\"input-group\">\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '1'\" [(ngModel)]=\"daysOfWeek[0]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '1'\">Sunday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '2'\" [(ngModel)]=\"daysOfWeek[1]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '2'\">Monday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '3'\" [(ngModel)]=\"daysOfWeek[2]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '3'\">Tuesday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '4'\" [(ngModel)]=\"daysOfWeek[3]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '4'\">Wednesday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '5'\" [(ngModel)]=\"daysOfWeek[4]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '5'\">Thursday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '6'\" [(ngModel)]=\"daysOfWeek[5]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '6'\">Friday</label>\n        </div>\n        <div class=\"form-check form-check-inline\">\n            <input class=\"form-check-input\" type=\"checkbox\" [id]=\"id + '7'\" [(ngModel)]=\"daysOfWeek[6]\"\n                (ngModelChange)=\"hasChanged($event)\">\n            <label class=\"form-check-label\" [for]=\"id + '7'\">Saturday</label>\n        </div>\n\n    </div>\n    <div *ngIf=\"errors\" class=\"invalid-feedback d-block\">\n        {{ errors }}\n    </div>\n\n\n    <small *ngIf=\"note\" class=\"form-text text-muted\">\n        <markdown (click)=\"sharedFunctions.getRoute($event)\" [data]=\"note\"></markdown>\n    </small>\n</div>","import { Component, forwardRef, Input, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { eDayOfWeek } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'daysofweek',\n    templateUrl: './dexih-form-daysofweek.component.html',\n    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DexihFormDaysOfWeekComponent), multi: true }]\n})\nexport class DexihFormDaysOfWeekComponent implements ControlValueAccessor, AfterViewInit {\n    @Input() label: string;\n    @Input() labelLeft: string;\n    @Input() note: string;\n    @Input() errors: string;\n    @Input() value: eDayOfWeek[];\n\n    eDayOfWeek = eDayOfWeek;\n    daysOfWeek = new Array<Boolean>(7);\n    id = 'input_' + Math.random().toString(36).substr(2, 9);\n\n    onChange: any = () => { };\n    onTouched: any = () => { };\n\n    constructor(private _changeDetectionRef: ChangeDetectorRef) {\n\n    }\n\n    ngAfterViewInit()  {\n        if (this.value) {\n            this.value.forEach(value => {\n                switch (value) {\n                    case eDayOfWeek.Sunday: this.daysOfWeek[0] = true; break;\n                    case eDayOfWeek.Monday: this.daysOfWeek[1] = true; break;\n                    case eDayOfWeek.Tuesday: this.daysOfWeek[2] = true; break;\n                    case eDayOfWeek.Wednesday: this.daysOfWeek[3] = true; break;\n                    case eDayOfWeek.Thursday: this.daysOfWeek[4] = true; break;\n                    case eDayOfWeek.Friday: this.daysOfWeek[5] = true; break;\n                    case eDayOfWeek.Saturday: this.daysOfWeek[6] = true; break;\n                }\n            });\n        }\n\n        // workaround for change detection required when using Afterview Init https://github.com/angular/angular/issues/6005\n        this._changeDetectionRef.detectChanges();\n    }\n\n    hasChanged($event: any) {\n        let daysOfWeek = new Array<eDayOfWeek>();\n        if (this.daysOfWeek[0]) { daysOfWeek.push(eDayOfWeek.Sunday); }\n        if (this.daysOfWeek[1]) { daysOfWeek.push(eDayOfWeek.Monday); }\n        if (this.daysOfWeek[2]) { daysOfWeek.push(eDayOfWeek.Tuesday); }\n        if (this.daysOfWeek[3]) { daysOfWeek.push(eDayOfWeek.Wednesday); }\n        if (this.daysOfWeek[4]) { daysOfWeek.push(eDayOfWeek.Thursday); }\n        if (this.daysOfWeek[5]) { daysOfWeek.push(eDayOfWeek.Friday); }\n        if (this.daysOfWeek[6]) { daysOfWeek.push(eDayOfWeek.Saturday); }\n\n        this.value = daysOfWeek;\n\n        this.onChange(this.value);\n        this.onTouched();\n    }\n\n    registerOnChange(fn: any) {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    writeValue(value: any) {\n        if (value) {\n            this.value = value;\n        }\n    }\n\n    selectWeekend() {\n      this.daysOfWeek[0] = true;\n      this.daysOfWeek[1] = false;\n      this.daysOfWeek[2] = false;\n      this.daysOfWeek[3] = false;\n      this.daysOfWeek[4] = false;\n      this.daysOfWeek[5] = false;\n      this.daysOfWeek[6] = true;\n      this.hasChanged(null);\n  }\n\n  selectWeekDays() {\n      this.daysOfWeek[0] = false;\n      this.daysOfWeek[1] = true;\n      this.daysOfWeek[2] = true;\n      this.daysOfWeek[3] = true;\n      this.daysOfWeek[4] = true;\n      this.daysOfWeek[5] = true;\n      this.daysOfWeek[6] = false;\n      this.hasChanged(null);\n  }\n\n    selectAllDays() {\n      this.daysOfWeek[0] = true;\n      this.daysOfWeek[1] = true;\n      this.daysOfWeek[2] = true;\n      this.daysOfWeek[3] = true;\n      this.daysOfWeek[4] = true;\n      this.daysOfWeek[5] = true;\n      this.daysOfWeek[6] = true;\n      this.hasChanged(null);\n  }\n\n    selectNoDays() {\n      this.daysOfWeek[0] = false;\n      this.daysOfWeek[1] = false;\n      this.daysOfWeek[2] = false;\n      this.daysOfWeek[3] = false;\n      this.daysOfWeek[4] = false;\n      this.daysOfWeek[5] = false;\n      this.daysOfWeek[6] = false;\n      this.hasChanged(null);\n    }\n}\n","<dexih-widget-section *ngIf=\"triggerFormService.currentForm\" title=\"Edit Trigger\" [showExpandButton]=\"false\" >\n\t<ng-template #header>\n\t\t\t<dexih-button-apply [disabled]=\"!triggerFormService.hasChanged\" class=\"mr-1\" (click)=\"applyExit()\"></dexih-button-apply>\n\t\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t</ng-template>\n\t<form  [formGroup]=\"triggerFormService.currentForm\">\n\t\t<fieldset>\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<section class=\"form-group col-md-6\">\n\t\t\t\t\t<form-date label=\"Start Date\" formControlName=\"startDate\" [errors]=\"triggerFormService.formErrors.startDate\" note=\"This is the date that the trigger will start.  Leave blank for immediate start.\">\n\t\t\t\t\t</form-date>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t\t<div class=\"form-row\">\n\t\t\t\t<section class=\"form-group col-md-3\">\n\t\t\t\t\t<form-time label=\"Interval\" formControlName=\"intervalTime\" [errors]=\"triggerFormService.formErrors.intervalTime\"\n\t\t\t\t\t note=\"The intra-day interval which the trigger restarts.  Leave blank for once a day jobs.\">\n\t\t\t\t\t</form-time>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-3\">\n\t\t\t\t\t<form-input type=\"number\" label=\"Max Recurrences\" formControlName=\"maxRecurs\" placeholder=\"Enter the max recurrences\"\n\t\t\t\t\t iconClass=\"fa fa-refresh\" [errors]=\"triggerFormService.formErrors.maxRecurs\" note=\" The maximum number of times job can recur in one day.\">\n\t\t\t\t\t</form-input>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-3\">\n\t\t\t\t\t<form-time label=\"Start Time\" formControlName=\"startTime\" [errors]=\"triggerFormService.formErrors.startTime\" note=\"Time of the day the job will activate.\">\n\t\t\t\t\t</form-time>\n\t\t\t\t</section>\n\t\t\t\t<section class=\"form-group col-md-3\">\n\t\t\t\t\t<form-time label=\"End Time\" formControlName=\"endTime\" [errors]=\"triggerFormService.formErrors.endTime\" note=\"Time of the day the triggers will deactivate.\">\n\t\t\t\t\t</form-time>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t\t<section>\n\t\t\t\t<daysofweek label=\"Days of the week\" formControlName=\"daysOfWeek\" note=\" The days of the week the trigger is valid.\">\n\t\t\t\t</daysofweek>\n\t\t\t</section>\n\t\t\t<div class=\"form-row\">\n\n\t\t</div>\n\t\t</fieldset>\n\t</form>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Observable ,  Subscription, combineLatest} from 'rxjs';\nimport { Location } from '@angular/common';\nimport { FormBuilder, FormGroup, FormArray } from '@angular/forms';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubService } from '../../../hub.service';\nimport { DexihTrigger } from '../../../../shared/shared.models';\n\n@Component({\n  selector: 'datajob-edit-trigger',\n  templateUrl: './datajob-edit-trigger.component.html'\n})\nexport class DatajobEditTriggerComponent implements OnInit, OnDestroy {\n  public pageTitle: string;\n  public action: string;\n\n  private _subscription: Subscription;\n\n  triggerFormService: HubFormsService;\n  triggerKey: number;\n  datajobKey: number;\n\n  originalTrigger: DexihTrigger;\n\n  mainForm: FormGroup;\n\n  constructor(\n    private authService: AuthService,\n    private hubService: HubService,\n    private formService: HubFormsService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private fb: FormBuilder) {\n\n    // create a seperate formService instance to manage the copied form\n    this.triggerFormService = new HubFormsService(fb, hubService, authService);\n  }\n\n\n  ngOnInit() {\n    try {\n      this._subscription = combineLatest(\n        this.route.data,\n        this.route.params,\n        this.formService.getCurrentFormObservable(),\n      ).subscribe(result => {\n        let data = result[0];\n        let params = result[1];\n        this.mainForm = result[2];\n\n        if (!this.mainForm) { return; }\n\n        this.pageTitle = data['pageTitle'];\n        this.action = data['action'];\n\n        this.triggerKey = +params['triggerKey'];\n\n        let triggerForm: FormGroup;\n\n        if (this.triggerKey) {\n          this.originalTrigger = this.mainForm.value.dexihTriggers.find(c => c.key === this.triggerKey);\n          if (!this.originalTrigger) {\n            this.authService.navigateUp();\n            return;\n          }\n          triggerForm = this.triggerFormService.triggerFormGroup(this.originalTrigger);\n        } else {\n          let trigger = new DexihTrigger();\n          // if new trigger, then set a temporary key of -1 or lower.\n          let minKey = -1;\n          this.mainForm.value.dexihTriggers.forEach(t => {\n            if (t.key <= minKey) {\n              minKey = t.key - 1;\n            }\n          });\n          trigger.key = minKey;\n          triggerForm = this.triggerFormService.triggerFormGroup(trigger);\n        }\n        this.triggerFormService.startForm(triggerForm);\n      });\n    } catch (e) {\n      this.hubService.addHubClientErrorMessage(e, 'Datajob Edit Trigger');\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._subscription) { this._subscription.unsubscribe(); }\n  }\n\n  cancel() {\n    this.authService.navigateUp();\n  }\n\n  applyExit() {\n    const triggerForm = this.triggerFormService.currentForm;\n    const triggersArray = <FormArray>this.mainForm.controls.dexihTriggers;\n\n    if (!this.originalTrigger) {\n      triggersArray.push(triggerForm);\n    } else {\n      const originalTrigger = triggersArray.controls.find(c => c.value.key === triggerForm.value.key);\n      originalTrigger.setValue(triggerForm.value);\n    }\n\n    this.authService.navigateUp();\n  }\n}\n\n","<dexih-widget-section *ngIf=\"stepFormService.currentForm\" title=\"Add Datalink Step\" [showExpandButton]=\"false\">\n\t<ng-template #header>\n\t\t<dexih-button-apply class=\"mr-1\" [disabled]=\"!stepFormService.hasChanged\" (click)=\"applyExit()\">\n\t\t</dexih-button-apply>\n\t\t<dexih-button-cancel (click)=\"cancel()\"></dexih-button-cancel>\n\t</ng-template>\n\t<form [formGroup]=\"stepFormService.currentForm\">\n\t\t<fieldset>\n\t\t\t<section>\n\t\t\t\t<form-input label=\"Data Step Name\" formControlName=\"name\" placeholder=\"Enter the step name.\"\n\t\t\t\t\t[autocapitalize]=\"true\" iconClass=\"fa fa-list\" [errors]=\"stepFormService.formErrors.name\"\n\t\t\t\t\tnote=\"Enter a name for the data step, blank will use datalink name.\">\n\t\t\t\t</form-input>\n\t\t\t</section>\n\t\t\t<section>\n\t\t\t\t<form-select label=\"Data Link\" formControlName=\"datalinkKey\" [items]=\"hubCache.hub.dexihDatalinks\"\n\t\t\t\t\titemKey=\"key\" itemName=\"name\" [errors]=\"stepFormService.formErrors.datalinkKey\"\n\t\t\t\t\ticonClass=\"fa fa-database\">\n\t\t\t\t\t<datalink-edit-button [key]=\"stepFormService.currentForm.controls.datalinkKey.value\"></datalink-edit-button>\n\t\t\t\t</form-select>\n\t\t\t</section>\n\t\t</fieldset>\n\n\t\t<div class=\"d-flex flex-wrap pt-1\"\n\t\t\t*ngIf=\"stepFormService.currentForm.controls.dexihDatalinkStepColumns.controls.length > 0\">\n\t\t\t<div>\n\t\t\t\tInput Values\n\t\t\t</div>\n\n\t\t\t<span\n\t\t\t\t*ngFor=\"let column of stepFormService.currentForm.controls.dexihDatalinkStepColumns.controls; let i = index\"\n\t\t\t\tclass=\"input-group\">\n\t\t\t\t<div class=\"input-group-prepend\">\n\t\t\t\t\t<div class=\"input-group-text\">\n\t\t\t\t\t\t{{column.value.logicalName}}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<form-input class=\"form-control p-0\" [placeholder]=\"column.value.logicalName\" [autocapitalize]=\"true\"\n\t\t\t\t\t[formControl]=\"column.controls.defaultValue\"></form-input>\n\t\t\t</span>\n\t\t</div>\n\t</form>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"stepFormService.currentForm\" title=\"Parameters\" [showExpandButton]=\"true\" [padding]=\"false\" [padding]=\"true\">\n\t<input-parameters [showEdit]=\"true\" [parameters]=\"stepFormService.currentForm.controls.parameters\" [formsService]=\"formService\" [parentParameters]=\"formService.currentForm.controls.parameters.value\">\n\t</input-parameters>\n</dexih-widget-section>\n\n<dexih-widget-section *ngIf=\"stepFormService.currentForm\" title=\"Dependent Steps\" [showExpandButton]=\"false\"\n\t[padding]=\"false\">\n\t<dexih-table *ngIf=\"stepFormService.currentForm\" [enableMultiSelect]=\"true\" [columns]=\"stepColumns\"\n\t\t[dataObservable]=\"stepTableData\" [(selectedItems)]=\"stepFormService.currentForm.value.dexihDatalinkDependencies\"\n\t\t(onSelectedChange)=\"dependentStepsChange($event)\" keyColumn=\"key\" selectedKeyColumn=\"dependentDatalinkStepKey\" [tags]=\"this.hubCache.hub.dexihTags\">\n\t</dexih-table>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { FormGroup, FormArray, FormBuilder } from '@angular/forms';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { HubCache, DexihInputParameter } from '../../../hub.models';\nimport { InputColumn, DexihDatalinkStep, DexihDatalinkStepColumn, DexihDatalinkDependency, InputParameterBase, eSharedObjectType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datajob-edit-step',\n    templateUrl: './datajob-edit-step.component.html'\n})\nexport class DatajobEditStepComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private _datalinkSubscription: Subscription;\n\n    public hubCache: HubCache;\n\n    private datalinkStepKey: number;\n    datajobKey: number;\n\n    datajobForm: FormGroup;\n\n    stepFormService: HubFormsService;\n    showAllErrors = false;\n\n    public inputColumns: InputColumn[];\n\n    stepColumns = [\n        { name: 'name', title: 'Name', format: '', tags: 'tags' },\n        { name: 'datalink', title: 'Datalink', format: '' },\n        { name: 'dependencies', title: 'Dependencies', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _stepTableData = new BehaviorSubject<Array<any>>(null);\n    stepTableData: Observable<Array<any>> = this._stepTableData.asObservable();\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private formService: HubFormsService,\n        private route: ActivatedRoute,\n        fb: FormBuilder) {\n        // create a separate formService instance to manage the copied form\n        this.stepFormService = new HubFormsService(fb, hubService, authService);\n    }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.formService.getCurrentFormObservable(),\n            ).subscribe(result => {\n                let params = result[1];\n                this.hubCache = result[2];\n                let mainForm = result[3];\n\n                this.datalinkStepKey = +params['datalinkStepKey'];\n\n                if (mainForm) {\n                    this.datajobForm = mainForm;\n                    let step: DexihDatalinkStep;\n\n                    if (this.datalinkStepKey) {\n                        step = mainForm.value.dexihDatalinkSteps\n                            .find(c => c.key === this.datalinkStepKey);\n\n                        if (!step) {\n                            this.authService.navigateUp();\n                            return;\n                        }\n                    } else {\n                        step = new DexihDatalinkStep();\n                        // if new step, then set a temporary key of -1 or lower.\n                        let minKey = -1;\n                        this.datajobForm.value.dexihDatalinkSteps.forEach(t => {\n                            if (t.key <= minKey) {\n                                minKey = t.key - 1;\n                            }\n                        });\n                        step.key = minKey;\n                        this.datalinkStepKey = minKey;\n                    }\n\n                    const stepForm = this.stepFormService.datalinkStepFormGroup(mainForm, step);\n                    this.stepFormService.startForm(stepForm);\n                    this.updateSteps();\n\n                    this._datalinkSubscription = stepForm.controls.datalinkKey.valueChanges.subscribe(datalinkKey => {\n                        this.updateDatalinkStepColumns(datalinkKey);\n                    });\n                }\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datajob Edit Step');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._datalinkSubscription) { this._datalinkSubscription.unsubscribe(); }\n    }\n\n    updateSteps() {\n        let stepData = [];\n        if (this.datajobForm.value.dexihDatalinkSteps) {\n            this.datajobForm.value.dexihDatalinkSteps.forEach(step => {\n                if (step.key !== this.stepFormService.currentForm.value.key) {\n                    let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === step.datalinkKey);\n                    stepData.push({\n                        key: step.key,\n                        name: step.name,\n                        datalink: datalink ? datalink.name : 'Not specified',\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.Datalink, datalink.key),\n                        dependencies: '',\n                        updateDate: step.updateDate\n                    });\n                }\n            });\n        }\n\n        this._stepTableData.next(stepData);\n    }\n\n    updateDatalinkStepColumns(datalinkKey: number) {\n\n        let datalink = this.hubCache.hub.dexihDatalinks.find(c => c.key === datalinkKey);\n        let stepForm = <FormGroup>this.stepFormService.currentForm;\n        let stepParameters = <FormArray>stepForm.controls.parameters;\n\n        let currentParameters = <DexihInputParameter[]> stepParameters.value;\n        stepParameters.clear();\n\n        datalink.parameters.forEach(parameter => {\n            let currentParameter = currentParameters.find( c => c.name === parameter.name);\n            let newParameter = new InputParameterBase();\n            if (currentParameter) {\n                newParameter.name = currentParameter.name;\n                newParameter.value = currentParameter.value;\n            } else {\n                newParameter.name = parameter.name;\n                newParameter.value = parameter.value;\n            }\n            let newFormParameter = this.formService.parameter(newParameter);\n            stepParameters.push(newFormParameter);\n        });\n\n\n\n        let stepColumnsForm = <FormArray>stepForm.controls.dexihDatalinkStepColumns;\n        let stepColumns = <DexihDatalinkStepColumn[]> stepColumnsForm.value;\n\n        while (stepColumnsForm.length !== 0) {\n            stepColumnsForm.removeAt(0)\n        }\n\n        let inputColumns = datalink.sourceDatalinkTable.dexihDatalinkColumns.filter(c => c.isInput);\n\n        inputColumns.forEach(col => {\n            let stepColumn = stepColumns.find(c => c.name === col.name);\n            if (!stepColumn) {\n                stepColumn = new DexihDatalinkStepColumn();\n                stepColumn.defaultValue = col.defaultValue;\n            }\n            stepColumn.dataType = col.dataType;\n            stepColumn.name = col.name;\n            stepColumn.logicalName = col.logicalName;\n            stepColumn.columnGroup = col.columnGroup;\n            stepColumn.rank = col.rank;\n            stepColumn.maxLength = col.maxLength;\n            stepColumn.deltaType = col.deltaType;\n            stepColumn.allowDbNull = col.allowDbNull;\n            stepColumn.isUnicode = col.isUnicode;\n            stepColumn.isValid = true;\n\n            let stepColumnForm = this.formService.datalinkStepColumnFormGroup(stepColumn);\n            stepColumnsForm.push(stepColumnForm);\n        });\n\n        if (!stepForm.controls.name.value) {\n            stepForm.controls.name.setValue(datalink.name);\n        }\n    }\n\n    dependentStepsChange(items) {\n        let datalinkDependencies = <FormArray>this.stepFormService.currentForm.controls.dexihDatalinkDependencies;\n        let minKey = -1;\n        if (datalinkDependencies) {\n            datalinkDependencies.controls.forEach(dep => {\n                if (dep.valid['key'] <= minKey) {\n                    minKey = dep['key'] - 1;\n                }\n            });\n        }\n\n        while (datalinkDependencies.length > 0) {\n            datalinkDependencies.removeAt(0);\n        }\n\n        items.forEach(newDep => {\n            let oldDep = datalinkDependencies ?\n                datalinkDependencies.controls.find(c => c.value.datalinkStepKey === newDep.datalinkStepKey)\n                : null;\n            if (oldDep) {\n                datalinkDependencies.push(oldDep);\n            } else {\n                let dep = new DexihDatalinkDependency();\n                dep.key = minKey;\n                dep.datalinkStepKey = this.datalinkStepKey;\n                dep.dependentDatalinkStepKey = newDep.key;\n                datalinkDependencies.push(this.stepFormService.datalinkDependencyFormGroup(dep));\n                minKey--;\n            }\n        });\n\n        this.stepFormService.hasChanged = true;\n    }\n\n    cancel() {\n        this.authService.navigateUp();\n    }\n\n    applyExit() {\n        const stepForm = this.stepFormService.currentForm;\n        const stepsArray = <FormArray>this.datajobForm.controls.dexihDatalinkSteps;\n\n        const index = stepsArray.controls\n            .findIndex(c => c.value.key === stepForm.value.key && c.value.isValid);\n\n        if (index < 0) {\n            stepsArray.push(stepForm);\n        } else {\n            stepsArray.removeAt(index);\n            stepsArray.insert(index, stepForm);\n        }\n\n        this.authService.navigateUp();\n    }\n}\n","<dexih-widget-section title=\"Add Datalinks to Job\" [showExpandButton]=\"false\" [padding]=\"false\">\n\t<ng-template #header>\n\t\t<dexih-button-close (click)=\"close()\"></dexih-button-close>\n\t</ng-template>\n\t<dexih-table [enableMultiSelect]=\"true\" [columns]=\"columns\" [dataObservable]=\"tableData\" [tags]=\"this.hubCache.hub.dexihTags\">\n\t\t<ng-template #selectedItemsAction select=\"selectedItemsAction\" let-items=\"items\">\n\t\t\t<dexih-button (click)=\"addSelected(items)\" iconClass=\"fa fa-plus\" buttonClass=\"btn-primary\"\n\t\t\t\ttitle=\"Add selected datalinks to the job\">Add</dexih-button>\n\t\t</ng-template>\n\n\t</dexih-table>\n</dexih-widget-section>","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { HubService } from '../../../hub.service';\nimport { Observable, BehaviorSubject, Subscription, combineLatest} from 'rxjs';\nimport { AuthService } from '../../../../+auth/auth.service';\nimport { HubFormsService } from '../../../hub.forms.service';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { HubCache } from '../../../hub.models';\nimport { DexihDatalink, eSharedObjectType, DexihDatalinkStep, eDatalinkType } from '../../../../shared/shared.models';\n\n@Component({\n    selector: 'datajob-add-steps',\n    templateUrl: './datajob-add-steps.component.html'\n})\nexport class DatajobAddStepsComponent implements OnInit, OnDestroy {\n    private _subscription: Subscription;\n    private _hubCacheChangeSubscription: Subscription;\n\n    public hubCache: HubCache;\n\n    hasChanged = false;\n\n    columns = [\n        { name: 'name', title: 'Name', format: '', tags: 'tags' },\n        { name: 'datalinkType', title: 'Datalink Type', enum: eDatalinkType, format: 'Enum' },\n        { name: 'sourceTableName', title: 'Source Table', format: '' },\n        { name: 'targetTableName', title: 'Target Table', format: '' },\n        { name: 'updateDate', title: 'Last Modified', format: 'Calendar' },\n    ];\n\n    private _tableData = new BehaviorSubject<Array<any>>(null);\n    tableData: Observable<Array<any>> = this._tableData.asObservable();\n\n  public mainForm: FormGroup;\n\n    constructor(\n        private hubService: HubService,\n        private authService: AuthService,\n        private formService: HubFormsService,\n        private route: ActivatedRoute,\n        private router: Router) { }\n\n    ngOnInit() {\n        try {\n            this._subscription = combineLatest(\n                this.route.data,\n                this.route.params,\n                this.hubService.getHubCacheObservable(),\n                this.formService.getCurrentFormObservable()\n            ).subscribe(result => {\n                let data = result[0];\n                let params = result[1];\n                this.hubCache = result[2];\n                this.mainForm = result[3];\n\n                this.updateDatalinks();\n            });\n        } catch (e) {\n            this.hubService.addHubClientErrorMessage(e, 'Datalink Index');\n        }\n\n    }\n\n    ngOnDestroy() {\n        if (this._subscription) { this._subscription.unsubscribe(); }\n        if (this._hubCacheChangeSubscription) { this._hubCacheChangeSubscription.unsubscribe(); }\n    }\n\n    changeEvent($event) {\n        this.hasChanged = true;\n    }\n\n    private updateDatalinks() {\n        let newDatalinks: Array<DexihDatalink>;\n        if (this.hubCache) {\n            if (!this.hubCache.hub.dexihDatalinks) {\n                this._tableData.next(new Array<DexihDatalink>());\n            } else {\n                let datalinks = this.hubCache.hub.dexihDatalinks.map(d => {\n                    let sourceTable = this.hubCache.getTable(d.sourceDatalinkTable.sourceTableKey);\n                    return {\n                        key: d.key,\n                        name: d.name,\n                        datalinkType: d.datalinkType,\n                        sourceTableName: sourceTable ? sourceTable.name : 'No source table',\n                        targetTableName:  d.dexihDatalinkTargets.map(target => {\n                            let table = this.hubCache.getTable(target.tableKey);\n                            if (table) {\n                                return table.name;\n                            }\n                        }).join(', '),\n                        updateDate: d.updateDate,\n                        tags: this.hubCache.getObjectTags(eSharedObjectType.Datalink, d.key),\n                    };\n                });\n\n                this._tableData.next(datalinks);\n            }\n        }\n\n    }\n\n    watchChanges() {\n        // watch the current connection in case it is changed in another session.\n        this._hubCacheChangeSubscription = this.hubService.getHubCacheChangeObservable().subscribe(hubCacheChange => {\n            if (hubCacheChange.changeClass === eSharedObjectType.Datalink) {\n                this.updateDatalinks();\n            }\n        });\n    }\n\n    close() {\n        this.authService.navigateUp();\n    }\n\n    addSelected(items: Array<DexihDatalink>) {\n        let existingDatalinks = new Array<string>();\n        let formDexihDatalinkSteps = this.mainForm.value.dexihDatalinkSteps;\n        items.forEach(item => {\n            let exists = formDexihDatalinkSteps.find(c => c.datalinkKey === item.key);\n            if (exists) {\n                existingDatalinks.push(item.name);\n            }\n        });\n\n        if (existingDatalinks.length > 0) {\n            let names = existingDatalinks.join(', ');\n            this.authService.confirmDialog('Warning duplicate datalinks',\n            'The following datalinks already exist as steps within the job.  ' + names +\n            '.<br />Are you sure you want these datalinks added to the job').then( confirm => {\n                if (confirm) {\n                this.addSelectedConfirmed(items);\n                }\n            }).catch(reason => {});\n        } else {\n            this.addSelectedConfirmed(items);\n        }\n\n    }\n\n    addSelectedConfirmed(items: Array<DexihDatalink>) {\n        let formDexihDatalinkSteps = <Array<DexihDatalinkStep>> this.mainForm.value.dexihDatalinkSteps;\n\n        let minKey = -1;\n        formDexihDatalinkSteps.forEach(t => {\n            if (t.key <= minKey) {\n                minKey = t.key - 1;\n            }\n        });\n\n        let stepsArray = (<FormArray>this.mainForm.controls['dexihDatalinkSteps']);\n\n        items.forEach(datalink => {\n            let newDatalinkStep = new DexihDatalinkStep();\n            newDatalinkStep.name = datalink.name;\n            // ensure the name is unique by appending a count to the end.\n            let i = 0;\n            while (true) {\n                if (!formDexihDatalinkSteps.find(c => c.name === newDatalinkStep.name)) {\n                    break;\n                }\n                newDatalinkStep.name = datalink.name + '_' + i.toString();\n                i++;\n            }\n            newDatalinkStep.key = minKey;\n            newDatalinkStep.datalinkKey = datalink.key;\n            newDatalinkStep.datajobKey = this.mainForm.value.key;\n            newDatalinkStep.isValid = true;\n\n            let stepFormGroup = this.formService.datalinkStepFormGroup(this.mainForm, newDatalinkStep);\n            stepsArray.push(stepFormGroup);\n\n            minKey--;\n        });\n\n        this.authService.navigateUp();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable, combineLatest} from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n\n@Injectable()\nexport class DatajobEditGuard implements CanDeactivate<CanComponentDeactivate> {\n\n  canDeactivate(component: CanComponentDeactivate) {\n    return component && component.canDeactivate ? component.canDeactivate() : true;\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Routing } from './datajob-edit.routing';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { DatajobEditComponent } from './datajob-edit.component';\nimport { DatajobEditPropertiesComponent } from './properties/datajob-edit-properties.component';\nimport { DatajobEditTriggerComponent } from './trigger-edit/datajob-edit-trigger.component';\nimport { DatajobEditStepComponent } from './step-edit/datajob-edit-step.component';\nimport { DatajobAddStepsComponent } from './steps-add/datajob-add-steps.component';\n\nimport { DexihFormDaysOfWeekComponent } from './trigger-edit/dexih-form-daysofweek.component';\nimport { HubFormsService } from '../../hub.forms.service';\nimport { DatajobEditGuard } from './datajob-edit-guard';\nimport { HubSharedModule } from '../../hub.shared.module';\n\n@NgModule({\n    imports: [\n        SharedModule,\n        CommonModule,\n        FormsModule,\n        Routing,\n        ReactiveFormsModule,\n        HubSharedModule\n    ],\n    declarations: [\n        DatajobEditComponent,\n        DatajobEditPropertiesComponent,\n        DatajobEditTriggerComponent,\n        DatajobEditStepComponent,\n        DatajobAddStepsComponent,\n        DexihFormDaysOfWeekComponent\n    ],\n    providers: [ HubFormsService, DatajobEditGuard ],\n    exports: []\n})\nexport class DatajobEditModule {\n\n    static forRoot(): ModuleWithProviders<DatajobEditModule> {\n        return {\n            ngModule: DatajobEditModule,\n            providers: [ HubFormsService ]\n        };\n    }\n}\n","import { Routes, RouterModule } from '@angular/router';\nimport { DatajobEditComponent } from './datajob-edit.component';\nimport { DatajobEditPropertiesComponent } from './properties/datajob-edit-properties.component';\nimport { DatajobEditTriggerComponent } from './trigger-edit/datajob-edit-trigger.component';\nimport { DatajobEditStepComponent } from './step-edit/datajob-edit-step.component';\nimport { DatajobAddStepsComponent } from './steps-add/datajob-add-steps.component';\nimport { DatajobEditGuard} from './datajob-edit-guard';\n\nexport const datajobEditRoutes = [\n        { path: '', redirectTo: 'properties',  data: { navigateSkip: true}},\n        { path: 'properties', component: DatajobEditPropertiesComponent, data: { navigateSkip: true, pageTitle: 'Properties' } },\n        { path: 'trigger', component: DatajobEditTriggerComponent, data: { pageTitle: 'New Trigger' } },\n        { path: 'trigger/:triggerKey', component: DatajobEditTriggerComponent, data: { pageTitle: 'Edit Trigger' }  },\n        { path: 'step', component: DatajobEditStepComponent, data: { pageTitle: 'New Step' }  },\n        { path: 'step/:datalinkStepKey', component: DatajobEditStepComponent, data: { pageTitle: 'Edit Step' }  },\n        { path: 'add-steps', component: DatajobAddStepsComponent, data: { pageTitle: 'Add Multiple Steps' }  }\n];\n\nexport const routes: Routes = [\n        { path: '', component: DatajobEditComponent, canDeactivate: [DatajobEditGuard], children: datajobEditRoutes},\n];\n\n\nexport const Routing = RouterModule.forChild(routes);\n"]}